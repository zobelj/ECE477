
F407_Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d364  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000a6bc  0800d4f4  0800d4f4  0001d4f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017bb0  08017bb0  000301ac  2**0
                  CONTENTS
  4 .ARM          00000008  08017bb0  08017bb0  00027bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017bb8  08017bb8  000301ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017bb8  08017bb8  00027bb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017bbc  08017bbc  00027bbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ac  20000000  08017bc0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301ac  2**0
                  CONTENTS
 10 .bss          00000c78  200001ac  200001ac  000301ac  2**2
                  ALLOC
 11 ._user_heap_stack 00001404  20000e24  20000e24  000301ac  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a745  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c03  00000000  00000000  0004a921  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017a8  00000000  00000000  0004e528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000015f0  00000000  00000000  0004fcd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025c25  00000000  00000000  000512c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001cb04  00000000  00000000  00076ee5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d30f6  00000000  00000000  000939e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00166adf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006db4  00000000  00000000  00166b30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001ac 	.word	0x200001ac
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d4dc 	.word	0x0800d4dc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001b0 	.word	0x200001b0
 80001cc:	0800d4dc 	.word	0x0800d4dc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <ILI9341_DrawChar>:

	ILI9341_DrawRectangle(X0True, Y0True, xLen, yLen, color);
}

void ILI9341_DrawChar(char ch, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 8000574:	b590      	push	{r4, r7, lr}
 8000576:	b08d      	sub	sp, #52	; 0x34
 8000578:	af02      	add	r7, sp, #8
 800057a:	60b9      	str	r1, [r7, #8]
 800057c:	4611      	mov	r1, r2
 800057e:	461a      	mov	r2, r3
 8000580:	4603      	mov	r3, r0
 8000582:	73fb      	strb	r3, [r7, #15]
 8000584:	460b      	mov	r3, r1
 8000586:	81bb      	strh	r3, [r7, #12]
 8000588:	4613      	mov	r3, r2
 800058a:	80fb      	strh	r3, [r7, #6]
	if ((ch < 31) || (ch > 127)) return;
 800058c:	7bfb      	ldrb	r3, [r7, #15]
 800058e:	2b1e      	cmp	r3, #30
 8000590:	d961      	bls.n	8000656 <ILI9341_DrawChar+0xe2>
 8000592:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000596:	2b00      	cmp	r3, #0
 8000598:	db5d      	blt.n	8000656 <ILI9341_DrawChar+0xe2>

	uint8_t fOffset, fWidth, fHeight, fBPL;
	uint8_t *tempChar;

	fOffset = font[0];
 800059a:	68bb      	ldr	r3, [r7, #8]
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	77fb      	strb	r3, [r7, #31]
	fWidth = font[1];
 80005a0:	68bb      	ldr	r3, [r7, #8]
 80005a2:	785b      	ldrb	r3, [r3, #1]
 80005a4:	77bb      	strb	r3, [r7, #30]
	fHeight = font[2];
 80005a6:	68bb      	ldr	r3, [r7, #8]
 80005a8:	789b      	ldrb	r3, [r3, #2]
 80005aa:	777b      	strb	r3, [r7, #29]
	fBPL = font[3];
 80005ac:	68bb      	ldr	r3, [r7, #8]
 80005ae:	78db      	ldrb	r3, [r3, #3]
 80005b0:	773b      	strb	r3, [r7, #28]

	tempChar = (uint8_t*)&font[((ch - 0x20) * fOffset) + 4]; /* Current Character = Meta + (Character Index * Offset) */
 80005b2:	7bfb      	ldrb	r3, [r7, #15]
 80005b4:	3b20      	subs	r3, #32
 80005b6:	7ffa      	ldrb	r2, [r7, #31]
 80005b8:	fb02 f303 	mul.w	r3, r2, r3
 80005bc:	3304      	adds	r3, #4
 80005be:	68ba      	ldr	r2, [r7, #8]
 80005c0:	4413      	add	r3, r2
 80005c2:	61bb      	str	r3, [r7, #24]

	/* Clear background first */
	ILI9341_DrawRectangle(X, Y, fWidth, fHeight, bgcolor);
 80005c4:	7fbb      	ldrb	r3, [r7, #30]
 80005c6:	b29a      	uxth	r2, r3
 80005c8:	7f7b      	ldrb	r3, [r7, #29]
 80005ca:	b29c      	uxth	r4, r3
 80005cc:	88f9      	ldrh	r1, [r7, #6]
 80005ce:	89b8      	ldrh	r0, [r7, #12]
 80005d0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80005d2:	9300      	str	r3, [sp, #0]
 80005d4:	4623      	mov	r3, r4
 80005d6:	f000 fc67 	bl	8000ea8 <ILI9341_DrawRectangle>

	for (int j=0; j < fHeight; j++)
 80005da:	2300      	movs	r3, #0
 80005dc:	627b      	str	r3, [r7, #36]	; 0x24
 80005de:	e035      	b.n	800064c <ILI9341_DrawChar+0xd8>
	{
		for (int i=0; i < fWidth; i++)
 80005e0:	2300      	movs	r3, #0
 80005e2:	623b      	str	r3, [r7, #32]
 80005e4:	e02b      	b.n	800063e <ILI9341_DrawChar+0xca>
		{
			uint8_t z =  tempChar[fBPL * i + ((j & 0xF8) >> 3) + 1]; /* (j & 0xF8) >> 3, increase one by 8-bits */
 80005e6:	7f3b      	ldrb	r3, [r7, #28]
 80005e8:	6a3a      	ldr	r2, [r7, #32]
 80005ea:	fb03 f202 	mul.w	r2, r3, r2
 80005ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005f0:	10db      	asrs	r3, r3, #3
 80005f2:	f003 031f 	and.w	r3, r3, #31
 80005f6:	4413      	add	r3, r2
 80005f8:	3301      	adds	r3, #1
 80005fa:	69ba      	ldr	r2, [r7, #24]
 80005fc:	4413      	add	r3, r2
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	75fb      	strb	r3, [r7, #23]
			uint8_t b = 1 << (j & 0x07);
 8000602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000604:	f003 0307 	and.w	r3, r3, #7
 8000608:	2201      	movs	r2, #1
 800060a:	fa02 f303 	lsl.w	r3, r2, r3
 800060e:	75bb      	strb	r3, [r7, #22]
			if (( z & b ) != 0x00)
 8000610:	7dfa      	ldrb	r2, [r7, #23]
 8000612:	7dbb      	ldrb	r3, [r7, #22]
 8000614:	4013      	ands	r3, r2
 8000616:	b2db      	uxtb	r3, r3
 8000618:	2b00      	cmp	r3, #0
 800061a:	d00d      	beq.n	8000638 <ILI9341_DrawChar+0xc4>
			{
				ILI9341_DrawPixel(X+i, Y+j, color);
 800061c:	6a3b      	ldr	r3, [r7, #32]
 800061e:	b29a      	uxth	r2, r3
 8000620:	89bb      	ldrh	r3, [r7, #12]
 8000622:	4413      	add	r3, r2
 8000624:	b298      	uxth	r0, r3
 8000626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000628:	b29a      	uxth	r2, r3
 800062a:	88fb      	ldrh	r3, [r7, #6]
 800062c:	4413      	add	r3, r2
 800062e:	b29b      	uxth	r3, r3
 8000630:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8000632:	4619      	mov	r1, r3
 8000634:	f000 fbd2 	bl	8000ddc <ILI9341_DrawPixel>
		for (int i=0; i < fWidth; i++)
 8000638:	6a3b      	ldr	r3, [r7, #32]
 800063a:	3301      	adds	r3, #1
 800063c:	623b      	str	r3, [r7, #32]
 800063e:	7fbb      	ldrb	r3, [r7, #30]
 8000640:	6a3a      	ldr	r2, [r7, #32]
 8000642:	429a      	cmp	r2, r3
 8000644:	dbcf      	blt.n	80005e6 <ILI9341_DrawChar+0x72>
	for (int j=0; j < fHeight; j++)
 8000646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000648:	3301      	adds	r3, #1
 800064a:	627b      	str	r3, [r7, #36]	; 0x24
 800064c:	7f7b      	ldrb	r3, [r7, #29]
 800064e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000650:	429a      	cmp	r2, r3
 8000652:	dbc5      	blt.n	80005e0 <ILI9341_DrawChar+0x6c>
 8000654:	e000      	b.n	8000658 <ILI9341_DrawChar+0xe4>
	if ((ch < 31) || (ch > 127)) return;
 8000656:	bf00      	nop
			}
		}
	}
}
 8000658:	372c      	adds	r7, #44	; 0x2c
 800065a:	46bd      	mov	sp, r7
 800065c:	bd90      	pop	{r4, r7, pc}

0800065e <ILI9341_DrawText>:

void ILI9341_DrawText(const char* str, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 800065e:	b580      	push	{r7, lr}
 8000660:	b08a      	sub	sp, #40	; 0x28
 8000662:	af02      	add	r7, sp, #8
 8000664:	60f8      	str	r0, [r7, #12]
 8000666:	60b9      	str	r1, [r7, #8]
 8000668:	4611      	mov	r1, r2
 800066a:	461a      	mov	r2, r3
 800066c:	460b      	mov	r3, r1
 800066e:	80fb      	strh	r3, [r7, #6]
 8000670:	4613      	mov	r3, r2
 8000672:	80bb      	strh	r3, [r7, #4]
	uint8_t charWidth;			/* Width of character */
	uint8_t fOffset = font[0];	/* Offset of character */
 8000674:	68bb      	ldr	r3, [r7, #8]
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	77fb      	strb	r3, [r7, #31]
	uint8_t fWidth = font[1];	/* Width of font */
 800067a:	68bb      	ldr	r3, [r7, #8]
 800067c:	785b      	ldrb	r3, [r3, #1]
 800067e:	77bb      	strb	r3, [r7, #30]

	while (*str)
 8000680:	e02d      	b.n	80006de <ILI9341_DrawText+0x80>
	{
		ILI9341_DrawChar(*str, font, X, Y, color, bgcolor);
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	7818      	ldrb	r0, [r3, #0]
 8000686:	88b9      	ldrh	r1, [r7, #4]
 8000688:	88fa      	ldrh	r2, [r7, #6]
 800068a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000690:	9300      	str	r3, [sp, #0]
 8000692:	460b      	mov	r3, r1
 8000694:	68b9      	ldr	r1, [r7, #8]
 8000696:	f7ff ff6d 	bl	8000574 <ILI9341_DrawChar>

		/* Check character width and calculate proper position */
		uint8_t *tempChar = (uint8_t*)&font[((*str - 0x20) * fOffset) + 4];
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	3b20      	subs	r3, #32
 80006a0:	7ffa      	ldrb	r2, [r7, #31]
 80006a2:	fb02 f303 	mul.w	r3, r2, r3
 80006a6:	3304      	adds	r3, #4
 80006a8:	68ba      	ldr	r2, [r7, #8]
 80006aa:	4413      	add	r3, r2
 80006ac:	61bb      	str	r3, [r7, #24]
		charWidth = tempChar[0];
 80006ae:	69bb      	ldr	r3, [r7, #24]
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	75fb      	strb	r3, [r7, #23]

		if(charWidth + 2 < fWidth)
 80006b4:	7dfb      	ldrb	r3, [r7, #23]
 80006b6:	1c9a      	adds	r2, r3, #2
 80006b8:	7fbb      	ldrb	r3, [r7, #30]
 80006ba:	429a      	cmp	r2, r3
 80006bc:	da07      	bge.n	80006ce <ILI9341_DrawText+0x70>
		{
			/* If character width is smaller than font width */
			X += (charWidth + 2);
 80006be:	7dfb      	ldrb	r3, [r7, #23]
 80006c0:	b29a      	uxth	r2, r3
 80006c2:	88fb      	ldrh	r3, [r7, #6]
 80006c4:	4413      	add	r3, r2
 80006c6:	b29b      	uxth	r3, r3
 80006c8:	3302      	adds	r3, #2
 80006ca:	80fb      	strh	r3, [r7, #6]
 80006cc:	e004      	b.n	80006d8 <ILI9341_DrawText+0x7a>
		}
		else
		{
			X += fWidth;
 80006ce:	7fbb      	ldrb	r3, [r7, #30]
 80006d0:	b29a      	uxth	r2, r3
 80006d2:	88fb      	ldrh	r3, [r7, #6]
 80006d4:	4413      	add	r3, r2
 80006d6:	80fb      	strh	r3, [r7, #6]
		}

		str++;
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	3301      	adds	r3, #1
 80006dc:	60fb      	str	r3, [r7, #12]
	while (*str)
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d1cd      	bne.n	8000682 <ILI9341_DrawText+0x24>
	}
}
 80006e6:	bf00      	nop
 80006e8:	bf00      	nop
 80006ea:	3720      	adds	r7, #32
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}

080006f0 <HAL_SPI_TxCpltCallback>:
uint16_t LCD_DC_PIN = LCD1_DC_PIN;
GPIO_TypeDef* LCD_RST_PORT = LCD1_RST_PORT;
uint16_t LCD_RST_PIN = LCD1_RST_PIN;

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  /* Deselect when Tx Complete */
  if(hspi == HSPI_INSTANCE)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	4a07      	ldr	r2, [pc, #28]	; (8000718 <HAL_SPI_TxCpltCallback+0x28>)
 80006fc:	4293      	cmp	r3, r2
 80006fe:	d107      	bne.n	8000710 <HAL_SPI_TxCpltCallback+0x20>
  {
	  HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000700:	4b06      	ldr	r3, [pc, #24]	; (800071c <HAL_SPI_TxCpltCallback+0x2c>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a06      	ldr	r2, [pc, #24]	; (8000720 <HAL_SPI_TxCpltCallback+0x30>)
 8000706:	8811      	ldrh	r1, [r2, #0]
 8000708:	2201      	movs	r2, #1
 800070a:	4618      	mov	r0, r3
 800070c:	f002 fc30 	bl	8002f70 <HAL_GPIO_WritePin>
  }
}
 8000710:	bf00      	nop
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	2000024c 	.word	0x2000024c
 800071c:	20000004 	.word	0x20000004
 8000720:	20000008 	.word	0x20000008

08000724 <ILI9341_SPI_Tx>:

static void ILI9341_SPI_Tx(uint8_t data)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 800072e:	bf00      	nop
 8000730:	4b08      	ldr	r3, [pc, #32]	; (8000754 <ILI9341_SPI_Tx+0x30>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	689b      	ldr	r3, [r3, #8]
 8000736:	f003 0302 	and.w	r3, r3, #2
 800073a:	2b02      	cmp	r3, #2
 800073c:	d1f8      	bne.n	8000730 <ILI9341_SPI_Tx+0xc>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, &data, 1);
 800073e:	1dfb      	adds	r3, r7, #7
 8000740:	2201      	movs	r2, #1
 8000742:	4619      	mov	r1, r3
 8000744:	4803      	ldr	r0, [pc, #12]	; (8000754 <ILI9341_SPI_Tx+0x30>)
 8000746:	f007 f837 	bl	80077b8 <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
}
 800074a:	bf00      	nop
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	2000024c 	.word	0x2000024c

08000758 <ILI9341_SPI_TxBuffer>:

static void ILI9341_SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
 8000760:	460b      	mov	r3, r1
 8000762:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8000764:	bf00      	nop
 8000766:	4b08      	ldr	r3, [pc, #32]	; (8000788 <ILI9341_SPI_TxBuffer+0x30>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	689b      	ldr	r3, [r3, #8]
 800076c:	f003 0302 	and.w	r3, r3, #2
 8000770:	2b02      	cmp	r3, #2
 8000772:	d1f8      	bne.n	8000766 <ILI9341_SPI_TxBuffer+0xe>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, buffer, len);
 8000774:	887b      	ldrh	r3, [r7, #2]
 8000776:	461a      	mov	r2, r3
 8000778:	6879      	ldr	r1, [r7, #4]
 800077a:	4803      	ldr	r0, [pc, #12]	; (8000788 <ILI9341_SPI_TxBuffer+0x30>)
 800077c:	f007 f81c 	bl	80077b8 <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, buffer, len, 10);
}
 8000780:	bf00      	nop
 8000782:	3708      	adds	r7, #8
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	2000024c 	.word	0x2000024c

0800078c <ILI9341_WriteCommand>:

void ILI9341_WriteCommand(uint8_t cmd)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	4603      	mov	r3, r0
 8000794:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	//command
 8000796:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <ILI9341_WriteCommand+0x3c>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	4a0c      	ldr	r2, [pc, #48]	; (80007cc <ILI9341_WriteCommand+0x40>)
 800079c:	8811      	ldrh	r1, [r2, #0]
 800079e:	2200      	movs	r2, #0
 80007a0:	4618      	mov	r0, r3
 80007a2:	f002 fbe5 	bl	8002f70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 80007a6:	4b0a      	ldr	r3, [pc, #40]	; (80007d0 <ILI9341_WriteCommand+0x44>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4a0a      	ldr	r2, [pc, #40]	; (80007d4 <ILI9341_WriteCommand+0x48>)
 80007ac:	8811      	ldrh	r1, [r2, #0]
 80007ae:	2200      	movs	r2, #0
 80007b0:	4618      	mov	r0, r3
 80007b2:	f002 fbdd 	bl	8002f70 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(cmd);
 80007b6:	79fb      	ldrb	r3, [r7, #7]
 80007b8:	4618      	mov	r0, r3
 80007ba:	f7ff ffb3 	bl	8000724 <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 80007be:	bf00      	nop
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	2000000c 	.word	0x2000000c
 80007cc:	20000010 	.word	0x20000010
 80007d0:	20000004 	.word	0x20000004
 80007d4:	20000008 	.word	0x20000008

080007d8 <ILI9341_WriteData>:

void ILI9341_WriteData(uint8_t data)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 80007e2:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <ILI9341_WriteData+0x3c>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	4a0c      	ldr	r2, [pc, #48]	; (8000818 <ILI9341_WriteData+0x40>)
 80007e8:	8811      	ldrh	r1, [r2, #0]
 80007ea:	2201      	movs	r2, #1
 80007ec:	4618      	mov	r0, r3
 80007ee:	f002 fbbf 	bl	8002f70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 80007f2:	4b0a      	ldr	r3, [pc, #40]	; (800081c <ILI9341_WriteData+0x44>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4a0a      	ldr	r2, [pc, #40]	; (8000820 <ILI9341_WriteData+0x48>)
 80007f8:	8811      	ldrh	r1, [r2, #0]
 80007fa:	2200      	movs	r2, #0
 80007fc:	4618      	mov	r0, r3
 80007fe:	f002 fbb7 	bl	8002f70 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(data);
 8000802:	79fb      	ldrb	r3, [r7, #7]
 8000804:	4618      	mov	r0, r3
 8000806:	f7ff ff8d 	bl	8000724 <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 800080a:	bf00      	nop
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	2000000c 	.word	0x2000000c
 8000818:	20000010 	.word	0x20000010
 800081c:	20000004 	.word	0x20000004
 8000820:	20000008 	.word	0x20000008

08000824 <ILI9341_WriteBuffer>:

void ILI9341_WriteBuffer(uint8_t *buffer, uint16_t len)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	460b      	mov	r3, r1
 800082e:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 8000830:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <ILI9341_WriteBuffer+0x40>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a0c      	ldr	r2, [pc, #48]	; (8000868 <ILI9341_WriteBuffer+0x44>)
 8000836:	8811      	ldrh	r1, [r2, #0]
 8000838:	2201      	movs	r2, #1
 800083a:	4618      	mov	r0, r3
 800083c:	f002 fb98 	bl	8002f70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8000840:	4b0a      	ldr	r3, [pc, #40]	; (800086c <ILI9341_WriteBuffer+0x48>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a0a      	ldr	r2, [pc, #40]	; (8000870 <ILI9341_WriteBuffer+0x4c>)
 8000846:	8811      	ldrh	r1, [r2, #0]
 8000848:	2200      	movs	r2, #0
 800084a:	4618      	mov	r0, r3
 800084c:	f002 fb90 	bl	8002f70 <HAL_GPIO_WritePin>
	ILI9341_SPI_TxBuffer(buffer, len);
 8000850:	887b      	ldrh	r3, [r7, #2]
 8000852:	4619      	mov	r1, r3
 8000854:	6878      	ldr	r0, [r7, #4]
 8000856:	f7ff ff7f 	bl	8000758 <ILI9341_SPI_TxBuffer>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 800085a:	bf00      	nop
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	2000000c 	.word	0x2000000c
 8000868:	20000010 	.word	0x20000010
 800086c:	20000004 	.word	0x20000004
 8000870:	20000008 	.word	0x20000008

08000874 <ILI9341_SetAddress>:

void ILI9341_SetAddress(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8000874:	b590      	push	{r4, r7, lr}
 8000876:	b085      	sub	sp, #20
 8000878:	af00      	add	r7, sp, #0
 800087a:	4604      	mov	r4, r0
 800087c:	4608      	mov	r0, r1
 800087e:	4611      	mov	r1, r2
 8000880:	461a      	mov	r2, r3
 8000882:	4623      	mov	r3, r4
 8000884:	80fb      	strh	r3, [r7, #6]
 8000886:	4603      	mov	r3, r0
 8000888:	80bb      	strh	r3, [r7, #4]
 800088a:	460b      	mov	r3, r1
 800088c:	807b      	strh	r3, [r7, #2]
 800088e:	4613      	mov	r3, r2
 8000890:	803b      	strh	r3, [r7, #0]
	uint8_t buffer[4];
	buffer[0] = x1 >> 8;
 8000892:	88fb      	ldrh	r3, [r7, #6]
 8000894:	0a1b      	lsrs	r3, r3, #8
 8000896:	b29b      	uxth	r3, r3
 8000898:	b2db      	uxtb	r3, r3
 800089a:	733b      	strb	r3, [r7, #12]
	buffer[1] = x1;
 800089c:	88fb      	ldrh	r3, [r7, #6]
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	737b      	strb	r3, [r7, #13]
	buffer[2] = x2 >> 8;
 80008a2:	887b      	ldrh	r3, [r7, #2]
 80008a4:	0a1b      	lsrs	r3, r3, #8
 80008a6:	b29b      	uxth	r3, r3
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	73bb      	strb	r3, [r7, #14]
	buffer[3] = x2;
 80008ac:	887b      	ldrh	r3, [r7, #2]
 80008ae:	b2db      	uxtb	r3, r3
 80008b0:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2A);
 80008b2:	202a      	movs	r0, #42	; 0x2a
 80008b4:	f7ff ff6a 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 80008b8:	f107 030c 	add.w	r3, r7, #12
 80008bc:	2104      	movs	r1, #4
 80008be:	4618      	mov	r0, r3
 80008c0:	f7ff ffb0 	bl	8000824 <ILI9341_WriteBuffer>

	buffer[0] = y1 >> 8;
 80008c4:	88bb      	ldrh	r3, [r7, #4]
 80008c6:	0a1b      	lsrs	r3, r3, #8
 80008c8:	b29b      	uxth	r3, r3
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	733b      	strb	r3, [r7, #12]
	buffer[1] = y1;
 80008ce:	88bb      	ldrh	r3, [r7, #4]
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	737b      	strb	r3, [r7, #13]
	buffer[2] = y2 >> 8;
 80008d4:	883b      	ldrh	r3, [r7, #0]
 80008d6:	0a1b      	lsrs	r3, r3, #8
 80008d8:	b29b      	uxth	r3, r3
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	73bb      	strb	r3, [r7, #14]
	buffer[3] = y2;
 80008de:	883b      	ldrh	r3, [r7, #0]
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2B);
 80008e4:	202b      	movs	r0, #43	; 0x2b
 80008e6:	f7ff ff51 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 80008ea:	f107 030c 	add.w	r3, r7, #12
 80008ee:	2104      	movs	r1, #4
 80008f0:	4618      	mov	r0, r3
 80008f2:	f7ff ff97 	bl	8000824 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);
 80008f6:	202c      	movs	r0, #44	; 0x2c
 80008f8:	f7ff ff48 	bl	800078c <ILI9341_WriteCommand>
}
 80008fc:	bf00      	nop
 80008fe:	3714      	adds	r7, #20
 8000900:	46bd      	mov	sp, r7
 8000902:	bd90      	pop	{r4, r7, pc}

08000904 <ILI9341_Reset>:

void ILI9341_Reset(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);	//Disable
 8000908:	4b13      	ldr	r3, [pc, #76]	; (8000958 <ILI9341_Reset+0x54>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a13      	ldr	r2, [pc, #76]	; (800095c <ILI9341_Reset+0x58>)
 800090e:	8811      	ldrh	r1, [r2, #0]
 8000910:	2200      	movs	r2, #0
 8000912:	4618      	mov	r0, r3
 8000914:	f002 fb2c 	bl	8002f70 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000918:	200a      	movs	r0, #10
 800091a:	f001 fc9f 	bl	800225c <HAL_Delay>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);		//Select
 800091e:	4b10      	ldr	r3, [pc, #64]	; (8000960 <ILI9341_Reset+0x5c>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4a10      	ldr	r2, [pc, #64]	; (8000964 <ILI9341_Reset+0x60>)
 8000924:	8811      	ldrh	r1, [r2, #0]
 8000926:	2200      	movs	r2, #0
 8000928:	4618      	mov	r0, r3
 800092a:	f002 fb21 	bl	8002f70 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800092e:	200a      	movs	r0, #10
 8000930:	f001 fc94 	bl	800225c <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 8000934:	4b08      	ldr	r3, [pc, #32]	; (8000958 <ILI9341_Reset+0x54>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a08      	ldr	r2, [pc, #32]	; (800095c <ILI9341_Reset+0x58>)
 800093a:	8811      	ldrh	r1, [r2, #0]
 800093c:	2201      	movs	r2, #1
 800093e:	4618      	mov	r0, r3
 8000940:	f002 fb16 	bl	8002f70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET); 		//Deselect
 8000944:	4b06      	ldr	r3, [pc, #24]	; (8000960 <ILI9341_Reset+0x5c>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a06      	ldr	r2, [pc, #24]	; (8000964 <ILI9341_Reset+0x60>)
 800094a:	8811      	ldrh	r1, [r2, #0]
 800094c:	2201      	movs	r2, #1
 800094e:	4618      	mov	r0, r3
 8000950:	f002 fb0e 	bl	8002f70 <HAL_GPIO_WritePin>
}
 8000954:	bf00      	nop
 8000956:	bd80      	pop	{r7, pc}
 8000958:	20000014 	.word	0x20000014
 800095c:	20000018 	.word	0x20000018
 8000960:	20000004 	.word	0x20000004
 8000964:	20000008 	.word	0x20000008

08000968 <ILI9341_Enable>:

void ILI9341_Enable(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 800096c:	4b04      	ldr	r3, [pc, #16]	; (8000980 <ILI9341_Enable+0x18>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a04      	ldr	r2, [pc, #16]	; (8000984 <ILI9341_Enable+0x1c>)
 8000972:	8811      	ldrh	r1, [r2, #0]
 8000974:	2201      	movs	r2, #1
 8000976:	4618      	mov	r0, r3
 8000978:	f002 fafa 	bl	8002f70 <HAL_GPIO_WritePin>
}
 800097c:	bf00      	nop
 800097e:	bd80      	pop	{r7, pc}
 8000980:	20000014 	.word	0x20000014
 8000984:	20000018 	.word	0x20000018

08000988 <ILI9341_Init>:

void ILI9341_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
	ILI9341_Enable();
 800098c:	f7ff ffec 	bl	8000968 <ILI9341_Enable>
	ILI9341_Reset();
 8000990:	f7ff ffb8 	bl	8000904 <ILI9341_Reset>

	//SOFTWARE RESET
	ILI9341_WriteCommand(0x01);
 8000994:	2001      	movs	r0, #1
 8000996:	f7ff fef9 	bl	800078c <ILI9341_WriteCommand>
	HAL_Delay(10);
 800099a:	200a      	movs	r0, #10
 800099c:	f001 fc5e 	bl	800225c <HAL_Delay>

	//POWER CONTROL A
	ILI9341_WriteCommand(0xCB);
 80009a0:	20cb      	movs	r0, #203	; 0xcb
 80009a2:	f7ff fef3 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x39);
 80009a6:	2039      	movs	r0, #57	; 0x39
 80009a8:	f7ff ff16 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x2C);
 80009ac:	202c      	movs	r0, #44	; 0x2c
 80009ae:	f7ff ff13 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 80009b2:	2000      	movs	r0, #0
 80009b4:	f7ff ff10 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x34);
 80009b8:	2034      	movs	r0, #52	; 0x34
 80009ba:	f7ff ff0d 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x02);
 80009be:	2002      	movs	r0, #2
 80009c0:	f7ff ff0a 	bl	80007d8 <ILI9341_WriteData>

	//POWER CONTROL B
	ILI9341_WriteCommand(0xCF);
 80009c4:	20cf      	movs	r0, #207	; 0xcf
 80009c6:	f7ff fee1 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 80009ca:	2000      	movs	r0, #0
 80009cc:	f7ff ff04 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 80009d0:	20c1      	movs	r0, #193	; 0xc1
 80009d2:	f7ff ff01 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x30);
 80009d6:	2030      	movs	r0, #48	; 0x30
 80009d8:	f7ff fefe 	bl	80007d8 <ILI9341_WriteData>

	//DRIVER TIMING CONTROL A
	ILI9341_WriteCommand(0xE8);
 80009dc:	20e8      	movs	r0, #232	; 0xe8
 80009de:	f7ff fed5 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x85);
 80009e2:	2085      	movs	r0, #133	; 0x85
 80009e4:	f7ff fef8 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 80009e8:	2000      	movs	r0, #0
 80009ea:	f7ff fef5 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x78);
 80009ee:	2078      	movs	r0, #120	; 0x78
 80009f0:	f7ff fef2 	bl	80007d8 <ILI9341_WriteData>

	//DRIVER TIMING CONTROL B
	ILI9341_WriteCommand(0xEA);
 80009f4:	20ea      	movs	r0, #234	; 0xea
 80009f6:	f7ff fec9 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 80009fa:	2000      	movs	r0, #0
 80009fc:	f7ff feec 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000a00:	2000      	movs	r0, #0
 8000a02:	f7ff fee9 	bl	80007d8 <ILI9341_WriteData>

	//POWER ON SEQUENCE CONTROL
	ILI9341_WriteCommand(0xED);
 8000a06:	20ed      	movs	r0, #237	; 0xed
 8000a08:	f7ff fec0 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x64);
 8000a0c:	2064      	movs	r0, #100	; 0x64
 8000a0e:	f7ff fee3 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8000a12:	2003      	movs	r0, #3
 8000a14:	f7ff fee0 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x12);
 8000a18:	2012      	movs	r0, #18
 8000a1a:	f7ff fedd 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x81);
 8000a1e:	2081      	movs	r0, #129	; 0x81
 8000a20:	f7ff feda 	bl	80007d8 <ILI9341_WriteData>

	//PUMP RATIO CONTROL
	ILI9341_WriteCommand(0xF7);
 8000a24:	20f7      	movs	r0, #247	; 0xf7
 8000a26:	f7ff feb1 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x20);
 8000a2a:	2020      	movs	r0, #32
 8000a2c:	f7ff fed4 	bl	80007d8 <ILI9341_WriteData>

	//POWER CONTROL,VRH[5:0]
	ILI9341_WriteCommand(0xC0);
 8000a30:	20c0      	movs	r0, #192	; 0xc0
 8000a32:	f7ff feab 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x23);
 8000a36:	2023      	movs	r0, #35	; 0x23
 8000a38:	f7ff fece 	bl	80007d8 <ILI9341_WriteData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_WriteCommand(0xC1);
 8000a3c:	20c1      	movs	r0, #193	; 0xc1
 8000a3e:	f7ff fea5 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x10);
 8000a42:	2010      	movs	r0, #16
 8000a44:	f7ff fec8 	bl	80007d8 <ILI9341_WriteData>

	//VCM CONTROL
	ILI9341_WriteCommand(0xC5);
 8000a48:	20c5      	movs	r0, #197	; 0xc5
 8000a4a:	f7ff fe9f 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x3E);
 8000a4e:	203e      	movs	r0, #62	; 0x3e
 8000a50:	f7ff fec2 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x28);
 8000a54:	2028      	movs	r0, #40	; 0x28
 8000a56:	f7ff febf 	bl	80007d8 <ILI9341_WriteData>

	//VCM CONTROL 2
	ILI9341_WriteCommand(0xC7);
 8000a5a:	20c7      	movs	r0, #199	; 0xc7
 8000a5c:	f7ff fe96 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x86);
 8000a60:	2086      	movs	r0, #134	; 0x86
 8000a62:	f7ff feb9 	bl	80007d8 <ILI9341_WriteData>

	//MEMORY ACCESS CONTROL
	ILI9341_WriteCommand(0x36);
 8000a66:	2036      	movs	r0, #54	; 0x36
 8000a68:	f7ff fe90 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x48);
 8000a6c:	2048      	movs	r0, #72	; 0x48
 8000a6e:	f7ff feb3 	bl	80007d8 <ILI9341_WriteData>

	//PIXEL FORMAT
	ILI9341_WriteCommand(0x3A);
 8000a72:	203a      	movs	r0, #58	; 0x3a
 8000a74:	f7ff fe8a 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x55);
 8000a78:	2055      	movs	r0, #85	; 0x55
 8000a7a:	f7ff fead 	bl	80007d8 <ILI9341_WriteData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_WriteCommand(0xB1);
 8000a7e:	20b1      	movs	r0, #177	; 0xb1
 8000a80:	f7ff fe84 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000a84:	2000      	movs	r0, #0
 8000a86:	f7ff fea7 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x18);
 8000a8a:	2018      	movs	r0, #24
 8000a8c:	f7ff fea4 	bl	80007d8 <ILI9341_WriteData>

	//DISPLAY FUNCTION CONTROL
	ILI9341_WriteCommand(0xB6);
 8000a90:	20b6      	movs	r0, #182	; 0xb6
 8000a92:	f7ff fe7b 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x08);
 8000a96:	2008      	movs	r0, #8
 8000a98:	f7ff fe9e 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x82);
 8000a9c:	2082      	movs	r0, #130	; 0x82
 8000a9e:	f7ff fe9b 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x27);
 8000aa2:	2027      	movs	r0, #39	; 0x27
 8000aa4:	f7ff fe98 	bl	80007d8 <ILI9341_WriteData>

	//3GAMMA FUNCTION DISABLE
	ILI9341_WriteCommand(0xF2);
 8000aa8:	20f2      	movs	r0, #242	; 0xf2
 8000aaa:	f7ff fe6f 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000aae:	2000      	movs	r0, #0
 8000ab0:	f7ff fe92 	bl	80007d8 <ILI9341_WriteData>

	//GAMMA CURVE SELECTED
	ILI9341_WriteCommand(0x26);
 8000ab4:	2026      	movs	r0, #38	; 0x26
 8000ab6:	f7ff fe69 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x01);
 8000aba:	2001      	movs	r0, #1
 8000abc:	f7ff fe8c 	bl	80007d8 <ILI9341_WriteData>

	//POSITIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE0);
 8000ac0:	20e0      	movs	r0, #224	; 0xe0
 8000ac2:	f7ff fe63 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x0F);
 8000ac6:	200f      	movs	r0, #15
 8000ac8:	f7ff fe86 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8000acc:	2031      	movs	r0, #49	; 0x31
 8000ace:	f7ff fe83 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x2B);
 8000ad2:	202b      	movs	r0, #43	; 0x2b
 8000ad4:	f7ff fe80 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 8000ad8:	200c      	movs	r0, #12
 8000ada:	f7ff fe7d 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8000ade:	200e      	movs	r0, #14
 8000ae0:	f7ff fe7a 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 8000ae4:	2008      	movs	r0, #8
 8000ae6:	f7ff fe77 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x4E);
 8000aea:	204e      	movs	r0, #78	; 0x4e
 8000aec:	f7ff fe74 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0xF1);
 8000af0:	20f1      	movs	r0, #241	; 0xf1
 8000af2:	f7ff fe71 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x37);
 8000af6:	2037      	movs	r0, #55	; 0x37
 8000af8:	f7ff fe6e 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 8000afc:	2007      	movs	r0, #7
 8000afe:	f7ff fe6b 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x10);
 8000b02:	2010      	movs	r0, #16
 8000b04:	f7ff fe68 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8000b08:	2003      	movs	r0, #3
 8000b0a:	f7ff fe65 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8000b0e:	200e      	movs	r0, #14
 8000b10:	f7ff fe62 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x09);
 8000b14:	2009      	movs	r0, #9
 8000b16:	f7ff fe5f 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000b1a:	2000      	movs	r0, #0
 8000b1c:	f7ff fe5c 	bl	80007d8 <ILI9341_WriteData>

	//NEGATIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE1);
 8000b20:	20e1      	movs	r0, #225	; 0xe1
 8000b22:	f7ff fe33 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000b26:	2000      	movs	r0, #0
 8000b28:	f7ff fe56 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8000b2c:	200e      	movs	r0, #14
 8000b2e:	f7ff fe53 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x14);
 8000b32:	2014      	movs	r0, #20
 8000b34:	f7ff fe50 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8000b38:	2003      	movs	r0, #3
 8000b3a:	f7ff fe4d 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x11);
 8000b3e:	2011      	movs	r0, #17
 8000b40:	f7ff fe4a 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 8000b44:	2007      	movs	r0, #7
 8000b46:	f7ff fe47 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8000b4a:	2031      	movs	r0, #49	; 0x31
 8000b4c:	f7ff fe44 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 8000b50:	20c1      	movs	r0, #193	; 0xc1
 8000b52:	f7ff fe41 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x48);
 8000b56:	2048      	movs	r0, #72	; 0x48
 8000b58:	f7ff fe3e 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 8000b5c:	2008      	movs	r0, #8
 8000b5e:	f7ff fe3b 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 8000b62:	200f      	movs	r0, #15
 8000b64:	f7ff fe38 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 8000b68:	200c      	movs	r0, #12
 8000b6a:	f7ff fe35 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8000b6e:	2031      	movs	r0, #49	; 0x31
 8000b70:	f7ff fe32 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x36);
 8000b74:	2036      	movs	r0, #54	; 0x36
 8000b76:	f7ff fe2f 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 8000b7a:	200f      	movs	r0, #15
 8000b7c:	f7ff fe2c 	bl	80007d8 <ILI9341_WriteData>

	//EXIT SLEEP
	ILI9341_WriteCommand(0x11);
 8000b80:	2011      	movs	r0, #17
 8000b82:	f7ff fe03 	bl	800078c <ILI9341_WriteCommand>
	HAL_Delay(100);
 8000b86:	2064      	movs	r0, #100	; 0x64
 8000b88:	f001 fb68 	bl	800225c <HAL_Delay>

	//TURN ON DISPLAY
	ILI9341_WriteCommand(0x29);
 8000b8c:	2029      	movs	r0, #41	; 0x29
 8000b8e:	f7ff fdfd 	bl	800078c <ILI9341_WriteCommand>

	//STARTING ROTATION
	ILI9341_SetRotation(SCREEN_VERTICAL_1);
 8000b92:	2000      	movs	r0, #0
 8000b94:	f000 f802 	bl	8000b9c <ILI9341_SetRotation>
}
 8000b98:	bf00      	nop
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <ILI9341_SetRotation>:

void ILI9341_SetRotation(uint8_t rotation)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	71fb      	strb	r3, [r7, #7]
	ILI9341_WriteCommand(0x36);
 8000ba6:	2036      	movs	r0, #54	; 0x36
 8000ba8:	f7ff fdf0 	bl	800078c <ILI9341_WriteCommand>
	HAL_Delay(1);
 8000bac:	2001      	movs	r0, #1
 8000bae:	f001 fb55 	bl	800225c <HAL_Delay>

	switch(rotation)
 8000bb2:	79fb      	ldrb	r3, [r7, #7]
 8000bb4:	2b03      	cmp	r3, #3
 8000bb6:	d837      	bhi.n	8000c28 <ILI9341_SetRotation+0x8c>
 8000bb8:	a201      	add	r2, pc, #4	; (adr r2, 8000bc0 <ILI9341_SetRotation+0x24>)
 8000bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bbe:	bf00      	nop
 8000bc0:	08000bd1 	.word	0x08000bd1
 8000bc4:	08000be7 	.word	0x08000be7
 8000bc8:	08000bfd 	.word	0x08000bfd
 8000bcc:	08000c13 	.word	0x08000c13
	{
	case SCREEN_VERTICAL_1:
		ILI9341_WriteData(0x40|0x08);
 8000bd0:	2048      	movs	r0, #72	; 0x48
 8000bd2:	f7ff fe01 	bl	80007d8 <ILI9341_WriteData>
		LCD_WIDTH = 240;
 8000bd6:	4b17      	ldr	r3, [pc, #92]	; (8000c34 <ILI9341_SetRotation+0x98>)
 8000bd8:	22f0      	movs	r2, #240	; 0xf0
 8000bda:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8000bdc:	4b16      	ldr	r3, [pc, #88]	; (8000c38 <ILI9341_SetRotation+0x9c>)
 8000bde:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000be2:	801a      	strh	r2, [r3, #0]
		break;
 8000be4:	e021      	b.n	8000c2a <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_1:
		ILI9341_WriteData(0x20|0x08);
 8000be6:	2028      	movs	r0, #40	; 0x28
 8000be8:	f7ff fdf6 	bl	80007d8 <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 8000bec:	4b11      	ldr	r3, [pc, #68]	; (8000c34 <ILI9341_SetRotation+0x98>)
 8000bee:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000bf2:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8000bf4:	4b10      	ldr	r3, [pc, #64]	; (8000c38 <ILI9341_SetRotation+0x9c>)
 8000bf6:	22f0      	movs	r2, #240	; 0xf0
 8000bf8:	801a      	strh	r2, [r3, #0]
		break;
 8000bfa:	e016      	b.n	8000c2a <ILI9341_SetRotation+0x8e>
	case SCREEN_VERTICAL_2:
		ILI9341_WriteData(0x80|0x08);
 8000bfc:	2088      	movs	r0, #136	; 0x88
 8000bfe:	f7ff fdeb 	bl	80007d8 <ILI9341_WriteData>
		LCD_WIDTH  = 240;
 8000c02:	4b0c      	ldr	r3, [pc, #48]	; (8000c34 <ILI9341_SetRotation+0x98>)
 8000c04:	22f0      	movs	r2, #240	; 0xf0
 8000c06:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8000c08:	4b0b      	ldr	r3, [pc, #44]	; (8000c38 <ILI9341_SetRotation+0x9c>)
 8000c0a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000c0e:	801a      	strh	r2, [r3, #0]
		break;
 8000c10:	e00b      	b.n	8000c2a <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_2:
		ILI9341_WriteData(0x40|0x80|0x20|0x08);
 8000c12:	20e8      	movs	r0, #232	; 0xe8
 8000c14:	f7ff fde0 	bl	80007d8 <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 8000c18:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <ILI9341_SetRotation+0x98>)
 8000c1a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000c1e:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8000c20:	4b05      	ldr	r3, [pc, #20]	; (8000c38 <ILI9341_SetRotation+0x9c>)
 8000c22:	22f0      	movs	r2, #240	; 0xf0
 8000c24:	801a      	strh	r2, [r3, #0]
		break;
 8000c26:	e000      	b.n	8000c2a <ILI9341_SetRotation+0x8e>
	default:
		break;
 8000c28:	bf00      	nop
	}
}
 8000c2a:	bf00      	nop
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	20000002 	.word	0x20000002
 8000c38:	20000000 	.word	0x20000000

08000c3c <ILI9341_DrawColorBurst>:
	uint8_t buffer[2] = {color>>8, color};
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
}

void ILI9341_DrawColorBurst(uint16_t color, uint32_t size)
{
 8000c3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000c40:	b08d      	sub	sp, #52	; 0x34
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	4603      	mov	r3, r0
 8000c46:	6039      	str	r1, [r7, #0]
 8000c48:	80fb      	strh	r3, [r7, #6]
 8000c4a:	466b      	mov	r3, sp
 8000c4c:	461e      	mov	r6, r3
	uint32_t BufferSize = 0;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	627b      	str	r3, [r7, #36]	; 0x24

	if((size*2) < BURST_MAX_SIZE)
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	005b      	lsls	r3, r3, #1
 8000c56:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000c5a:	d202      	bcs.n	8000c62 <ILI9341_DrawColorBurst+0x26>
	{
		BufferSize = size;
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	627b      	str	r3, [r7, #36]	; 0x24
 8000c60:	e002      	b.n	8000c68 <ILI9341_DrawColorBurst+0x2c>
	}
	else
	{
		BufferSize = BURST_MAX_SIZE;
 8000c62:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000c66:	627b      	str	r3, [r7, #36]	; 0x24
	}

	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8000c68:	4b44      	ldr	r3, [pc, #272]	; (8000d7c <ILI9341_DrawColorBurst+0x140>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a44      	ldr	r2, [pc, #272]	; (8000d80 <ILI9341_DrawColorBurst+0x144>)
 8000c6e:	8811      	ldrh	r1, [r2, #0]
 8000c70:	2201      	movs	r2, #1
 8000c72:	4618      	mov	r0, r3
 8000c74:	f002 f97c 	bl	8002f70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000c78:	4b42      	ldr	r3, [pc, #264]	; (8000d84 <ILI9341_DrawColorBurst+0x148>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a42      	ldr	r2, [pc, #264]	; (8000d88 <ILI9341_DrawColorBurst+0x14c>)
 8000c7e:	8811      	ldrh	r1, [r2, #0]
 8000c80:	2200      	movs	r2, #0
 8000c82:	4618      	mov	r0, r3
 8000c84:	f002 f974 	bl	8002f70 <HAL_GPIO_WritePin>

	uint8_t chifted = color>>8;
 8000c88:	88fb      	ldrh	r3, [r7, #6]
 8000c8a:	0a1b      	lsrs	r3, r3, #8
 8000c8c:	b29b      	uxth	r3, r3
 8000c8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t BurstBuffer[BufferSize];
 8000c92:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000c94:	460b      	mov	r3, r1
 8000c96:	3b01      	subs	r3, #1
 8000c98:	61fb      	str	r3, [r7, #28]
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	4688      	mov	r8, r1
 8000c9e:	4699      	mov	r9, r3
 8000ca0:	f04f 0200 	mov.w	r2, #0
 8000ca4:	f04f 0300 	mov.w	r3, #0
 8000ca8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000cac:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000cb0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	460c      	mov	r4, r1
 8000cb8:	461d      	mov	r5, r3
 8000cba:	f04f 0200 	mov.w	r2, #0
 8000cbe:	f04f 0300 	mov.w	r3, #0
 8000cc2:	00eb      	lsls	r3, r5, #3
 8000cc4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000cc8:	00e2      	lsls	r2, r4, #3
 8000cca:	1dcb      	adds	r3, r1, #7
 8000ccc:	08db      	lsrs	r3, r3, #3
 8000cce:	00db      	lsls	r3, r3, #3
 8000cd0:	ebad 0d03 	sub.w	sp, sp, r3
 8000cd4:	466b      	mov	r3, sp
 8000cd6:	3300      	adds	r3, #0
 8000cd8:	61bb      	str	r3, [r7, #24]

	for(uint32_t j = 0; j < BufferSize; j+=2)
 8000cda:	2300      	movs	r3, #0
 8000cdc:	62bb      	str	r3, [r7, #40]	; 0x28
 8000cde:	e00e      	b.n	8000cfe <ILI9341_DrawColorBurst+0xc2>
	{
		BurstBuffer[j] = chifted;
 8000ce0:	69ba      	ldr	r2, [r7, #24]
 8000ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ce4:	4413      	add	r3, r2
 8000ce6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000cea:	701a      	strb	r2, [r3, #0]
		BurstBuffer[j+1] = color;
 8000cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cee:	3301      	adds	r3, #1
 8000cf0:	88fa      	ldrh	r2, [r7, #6]
 8000cf2:	b2d1      	uxtb	r1, r2
 8000cf4:	69ba      	ldr	r2, [r7, #24]
 8000cf6:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < BufferSize; j+=2)
 8000cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cfa:	3302      	adds	r3, #2
 8000cfc:	62bb      	str	r3, [r7, #40]	; 0x28
 8000cfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d3ec      	bcc.n	8000ce0 <ILI9341_DrawColorBurst+0xa4>
	}

	uint32_t SendingSize = size * 2;
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	617b      	str	r3, [r7, #20]
	uint32_t SendingInBlock = SendingSize / BufferSize;
 8000d0c:	697a      	ldr	r2, [r7, #20]
 8000d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d14:	613b      	str	r3, [r7, #16]
	uint32_t RemainderFromBlock = SendingSize % BufferSize;
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d1a:	fbb3 f2f2 	udiv	r2, r3, r2
 8000d1e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000d20:	fb01 f202 	mul.w	r2, r1, r2
 8000d24:	1a9b      	subs	r3, r3, r2
 8000d26:	60fb      	str	r3, [r7, #12]

	if(SendingInBlock != 0)
 8000d28:	693b      	ldr	r3, [r7, #16]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d010      	beq.n	8000d50 <ILI9341_DrawColorBurst+0x114>
	{
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 8000d2e:	2300      	movs	r3, #0
 8000d30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d32:	e009      	b.n	8000d48 <ILI9341_DrawColorBurst+0x10c>
		{
			HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, BufferSize, 10);
 8000d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d36:	b29a      	uxth	r2, r3
 8000d38:	230a      	movs	r3, #10
 8000d3a:	69b9      	ldr	r1, [r7, #24]
 8000d3c:	4813      	ldr	r0, [pc, #76]	; (8000d8c <ILI9341_DrawColorBurst+0x150>)
 8000d3e:	f006 fbfe 	bl	800753e <HAL_SPI_Transmit>
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 8000d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d44:	3301      	adds	r3, #1
 8000d46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000d4a:	693b      	ldr	r3, [r7, #16]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	d3f1      	bcc.n	8000d34 <ILI9341_DrawColorBurst+0xf8>
		}
	}

	HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, RemainderFromBlock, 10);
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	b29a      	uxth	r2, r3
 8000d54:	230a      	movs	r3, #10
 8000d56:	69b9      	ldr	r1, [r7, #24]
 8000d58:	480c      	ldr	r0, [pc, #48]	; (8000d8c <ILI9341_DrawColorBurst+0x150>)
 8000d5a:	f006 fbf0 	bl	800753e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000d5e:	4b09      	ldr	r3, [pc, #36]	; (8000d84 <ILI9341_DrawColorBurst+0x148>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a09      	ldr	r2, [pc, #36]	; (8000d88 <ILI9341_DrawColorBurst+0x14c>)
 8000d64:	8811      	ldrh	r1, [r2, #0]
 8000d66:	2201      	movs	r2, #1
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f002 f901 	bl	8002f70 <HAL_GPIO_WritePin>
 8000d6e:	46b5      	mov	sp, r6
}
 8000d70:	bf00      	nop
 8000d72:	3734      	adds	r7, #52	; 0x34
 8000d74:	46bd      	mov	sp, r7
 8000d76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000d7a:	bf00      	nop
 8000d7c:	2000000c 	.word	0x2000000c
 8000d80:	20000010 	.word	0x20000010
 8000d84:	20000004 	.word	0x20000004
 8000d88:	20000008 	.word	0x20000008
 8000d8c:	2000024c 	.word	0x2000024c

08000d90 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	80fb      	strh	r3, [r7, #6]
	ILI9341_SetAddress(0, 0, LCD_WIDTH, LCD_HEIGHT);
 8000d9a:	4b0e      	ldr	r3, [pc, #56]	; (8000dd4 <ILI9341_FillScreen+0x44>)
 8000d9c:	881b      	ldrh	r3, [r3, #0]
 8000d9e:	b29a      	uxth	r2, r3
 8000da0:	4b0d      	ldr	r3, [pc, #52]	; (8000dd8 <ILI9341_FillScreen+0x48>)
 8000da2:	881b      	ldrh	r3, [r3, #0]
 8000da4:	b29b      	uxth	r3, r3
 8000da6:	2100      	movs	r1, #0
 8000da8:	2000      	movs	r0, #0
 8000daa:	f7ff fd63 	bl	8000874 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, LCD_WIDTH*LCD_HEIGHT);
 8000dae:	4b09      	ldr	r3, [pc, #36]	; (8000dd4 <ILI9341_FillScreen+0x44>)
 8000db0:	881b      	ldrh	r3, [r3, #0]
 8000db2:	b29b      	uxth	r3, r3
 8000db4:	461a      	mov	r2, r3
 8000db6:	4b08      	ldr	r3, [pc, #32]	; (8000dd8 <ILI9341_FillScreen+0x48>)
 8000db8:	881b      	ldrh	r3, [r3, #0]
 8000dba:	b29b      	uxth	r3, r3
 8000dbc:	fb02 f303 	mul.w	r3, r2, r3
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	88fb      	ldrh	r3, [r7, #6]
 8000dc4:	4611      	mov	r1, r2
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff ff38 	bl	8000c3c <ILI9341_DrawColorBurst>
}
 8000dcc:	bf00      	nop
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	20000002 	.word	0x20000002
 8000dd8:	20000000 	.word	0x20000000

08000ddc <ILI9341_DrawPixel>:

void ILI9341_DrawPixel(uint16_t x,uint16_t y,uint16_t color)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b086      	sub	sp, #24
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	80fb      	strh	r3, [r7, #6]
 8000de6:	460b      	mov	r3, r1
 8000de8:	80bb      	strh	r3, [r7, #4]
 8000dea:	4613      	mov	r3, r2
 8000dec:	807b      	strh	r3, [r7, #2]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8000dee:	4b2c      	ldr	r3, [pc, #176]	; (8000ea0 <ILI9341_DrawPixel+0xc4>)
 8000df0:	881b      	ldrh	r3, [r3, #0]
 8000df2:	b29b      	uxth	r3, r3
 8000df4:	88fa      	ldrh	r2, [r7, #6]
 8000df6:	429a      	cmp	r2, r3
 8000df8:	d24d      	bcs.n	8000e96 <ILI9341_DrawPixel+0xba>
 8000dfa:	4b2a      	ldr	r3, [pc, #168]	; (8000ea4 <ILI9341_DrawPixel+0xc8>)
 8000dfc:	881b      	ldrh	r3, [r3, #0]
 8000dfe:	b29b      	uxth	r3, r3
 8000e00:	88ba      	ldrh	r2, [r7, #4]
 8000e02:	429a      	cmp	r2, r3
 8000e04:	d247      	bcs.n	8000e96 <ILI9341_DrawPixel+0xba>

	uint8_t bufferX[4] = {x>>8, x, (x+1)>>8, (x+1)};
 8000e06:	88fb      	ldrh	r3, [r7, #6]
 8000e08:	0a1b      	lsrs	r3, r3, #8
 8000e0a:	b29b      	uxth	r3, r3
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	753b      	strb	r3, [r7, #20]
 8000e10:	88fb      	ldrh	r3, [r7, #6]
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	757b      	strb	r3, [r7, #21]
 8000e16:	88fb      	ldrh	r3, [r7, #6]
 8000e18:	3301      	adds	r3, #1
 8000e1a:	121b      	asrs	r3, r3, #8
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	75bb      	strb	r3, [r7, #22]
 8000e20:	88fb      	ldrh	r3, [r7, #6]
 8000e22:	b2db      	uxtb	r3, r3
 8000e24:	3301      	adds	r3, #1
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	75fb      	strb	r3, [r7, #23]
	uint8_t bufferY[4] = {y>>8, y, (y+1)>>8, (y+1)};
 8000e2a:	88bb      	ldrh	r3, [r7, #4]
 8000e2c:	0a1b      	lsrs	r3, r3, #8
 8000e2e:	b29b      	uxth	r3, r3
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	743b      	strb	r3, [r7, #16]
 8000e34:	88bb      	ldrh	r3, [r7, #4]
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	747b      	strb	r3, [r7, #17]
 8000e3a:	88bb      	ldrh	r3, [r7, #4]
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	121b      	asrs	r3, r3, #8
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	74bb      	strb	r3, [r7, #18]
 8000e44:	88bb      	ldrh	r3, [r7, #4]
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	3301      	adds	r3, #1
 8000e4a:	b2db      	uxtb	r3, r3
 8000e4c:	74fb      	strb	r3, [r7, #19]
	uint8_t bufferC[2] = {color>>8, color};
 8000e4e:	887b      	ldrh	r3, [r7, #2]
 8000e50:	0a1b      	lsrs	r3, r3, #8
 8000e52:	b29b      	uxth	r3, r3
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	733b      	strb	r3, [r7, #12]
 8000e58:	887b      	ldrh	r3, [r7, #2]
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	737b      	strb	r3, [r7, #13]

	ILI9341_WriteCommand(0x2A);						//ADDRESS
 8000e5e:	202a      	movs	r0, #42	; 0x2a
 8000e60:	f7ff fc94 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferX, sizeof(bufferX));	//XDATA
 8000e64:	f107 0314 	add.w	r3, r7, #20
 8000e68:	2104      	movs	r1, #4
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f7ff fcda 	bl	8000824 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2B);						//ADDRESS
 8000e70:	202b      	movs	r0, #43	; 0x2b
 8000e72:	f7ff fc8b 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferY, sizeof(bufferY));	//YDATA
 8000e76:	f107 0310 	add.w	r3, r7, #16
 8000e7a:	2104      	movs	r1, #4
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff fcd1 	bl	8000824 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);						//ADDRESS
 8000e82:	202c      	movs	r0, #44	; 0x2c
 8000e84:	f7ff fc82 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferC, sizeof(bufferC));	//COLOR
 8000e88:	f107 030c 	add.w	r3, r7, #12
 8000e8c:	2102      	movs	r1, #2
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f7ff fcc8 	bl	8000824 <ILI9341_WriteBuffer>
 8000e94:	e000      	b.n	8000e98 <ILI9341_DrawPixel+0xbc>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8000e96:	bf00      	nop
}
 8000e98:	3718      	adds	r7, #24
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20000002 	.word	0x20000002
 8000ea4:	20000000 	.word	0x20000000

08000ea8 <ILI9341_DrawRectangle>:

void ILI9341_DrawRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color)
{
 8000ea8:	b590      	push	{r4, r7, lr}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4604      	mov	r4, r0
 8000eb0:	4608      	mov	r0, r1
 8000eb2:	4611      	mov	r1, r2
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	4623      	mov	r3, r4
 8000eb8:	80fb      	strh	r3, [r7, #6]
 8000eba:	4603      	mov	r3, r0
 8000ebc:	80bb      	strh	r3, [r7, #4]
 8000ebe:	460b      	mov	r3, r1
 8000ec0:	807b      	strh	r3, [r7, #2]
 8000ec2:	4613      	mov	r3, r2
 8000ec4:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8000ec6:	4b24      	ldr	r3, [pc, #144]	; (8000f58 <ILI9341_DrawRectangle+0xb0>)
 8000ec8:	881b      	ldrh	r3, [r3, #0]
 8000eca:	b29b      	uxth	r3, r3
 8000ecc:	88fa      	ldrh	r2, [r7, #6]
 8000ece:	429a      	cmp	r2, r3
 8000ed0:	d23d      	bcs.n	8000f4e <ILI9341_DrawRectangle+0xa6>
 8000ed2:	4b22      	ldr	r3, [pc, #136]	; (8000f5c <ILI9341_DrawRectangle+0xb4>)
 8000ed4:	881b      	ldrh	r3, [r3, #0]
 8000ed6:	b29b      	uxth	r3, r3
 8000ed8:	88ba      	ldrh	r2, [r7, #4]
 8000eda:	429a      	cmp	r2, r3
 8000edc:	d237      	bcs.n	8000f4e <ILI9341_DrawRectangle+0xa6>

	if((x+width-1)>=LCD_WIDTH)
 8000ede:	88fa      	ldrh	r2, [r7, #6]
 8000ee0:	887b      	ldrh	r3, [r7, #2]
 8000ee2:	4413      	add	r3, r2
 8000ee4:	4a1c      	ldr	r2, [pc, #112]	; (8000f58 <ILI9341_DrawRectangle+0xb0>)
 8000ee6:	8812      	ldrh	r2, [r2, #0]
 8000ee8:	b292      	uxth	r2, r2
 8000eea:	4293      	cmp	r3, r2
 8000eec:	dd05      	ble.n	8000efa <ILI9341_DrawRectangle+0x52>
	{
		width=LCD_WIDTH-x;
 8000eee:	4b1a      	ldr	r3, [pc, #104]	; (8000f58 <ILI9341_DrawRectangle+0xb0>)
 8000ef0:	881b      	ldrh	r3, [r3, #0]
 8000ef2:	b29a      	uxth	r2, r3
 8000ef4:	88fb      	ldrh	r3, [r7, #6]
 8000ef6:	1ad3      	subs	r3, r2, r3
 8000ef8:	807b      	strh	r3, [r7, #2]
	}

	if((y+height-1)>=LCD_HEIGHT)
 8000efa:	88ba      	ldrh	r2, [r7, #4]
 8000efc:	883b      	ldrh	r3, [r7, #0]
 8000efe:	4413      	add	r3, r2
 8000f00:	4a16      	ldr	r2, [pc, #88]	; (8000f5c <ILI9341_DrawRectangle+0xb4>)
 8000f02:	8812      	ldrh	r2, [r2, #0]
 8000f04:	b292      	uxth	r2, r2
 8000f06:	4293      	cmp	r3, r2
 8000f08:	dd05      	ble.n	8000f16 <ILI9341_DrawRectangle+0x6e>
	{
		height=LCD_HEIGHT-y;
 8000f0a:	4b14      	ldr	r3, [pc, #80]	; (8000f5c <ILI9341_DrawRectangle+0xb4>)
 8000f0c:	881b      	ldrh	r3, [r3, #0]
 8000f0e:	b29a      	uxth	r2, r3
 8000f10:	88bb      	ldrh	r3, [r7, #4]
 8000f12:	1ad3      	subs	r3, r2, r3
 8000f14:	803b      	strh	r3, [r7, #0]
	}

	ILI9341_SetAddress(x, y, x+width-1, y+height-1);
 8000f16:	88fa      	ldrh	r2, [r7, #6]
 8000f18:	887b      	ldrh	r3, [r7, #2]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	b29b      	uxth	r3, r3
 8000f1e:	3b01      	subs	r3, #1
 8000f20:	b29c      	uxth	r4, r3
 8000f22:	88ba      	ldrh	r2, [r7, #4]
 8000f24:	883b      	ldrh	r3, [r7, #0]
 8000f26:	4413      	add	r3, r2
 8000f28:	b29b      	uxth	r3, r3
 8000f2a:	3b01      	subs	r3, #1
 8000f2c:	b29b      	uxth	r3, r3
 8000f2e:	88b9      	ldrh	r1, [r7, #4]
 8000f30:	88f8      	ldrh	r0, [r7, #6]
 8000f32:	4622      	mov	r2, r4
 8000f34:	f7ff fc9e 	bl	8000874 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, height*width);
 8000f38:	883b      	ldrh	r3, [r7, #0]
 8000f3a:	887a      	ldrh	r2, [r7, #2]
 8000f3c:	fb02 f303 	mul.w	r3, r2, r3
 8000f40:	461a      	mov	r2, r3
 8000f42:	8b3b      	ldrh	r3, [r7, #24]
 8000f44:	4611      	mov	r1, r2
 8000f46:	4618      	mov	r0, r3
 8000f48:	f7ff fe78 	bl	8000c3c <ILI9341_DrawColorBurst>
 8000f4c:	e000      	b.n	8000f50 <ILI9341_DrawRectangle+0xa8>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8000f4e:	bf00      	nop
}
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd90      	pop	{r4, r7, pc}
 8000f56:	bf00      	nop
 8000f58:	20000002 	.word	0x20000002
 8000f5c:	20000000 	.word	0x20000000

08000f60 <scan_keypad>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* Local Keypad Scanning */
void scan_keypad() {
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
  set_rows();
 8000f66:	f000 f861 	bl	800102c <set_rows>

  // read the columns
  int local_cols = get_cols();
 8000f6a:	f000 f90b 	bl	8001184 <get_cols>
 8000f6e:	6038      	str	r0, [r7, #0]
  //int local_cols = all_cols & 0x0F;
  //int expander_cols = (all_cols & 0xF0) >> 4;

  // scan local cols
  for(int i = 0; i < nCols1; i++) {
 8000f70:	2300      	movs	r3, #0
 8000f72:	607b      	str	r3, [r7, #4]
 8000f74:	e041      	b.n	8000ffa <scan_keypad+0x9a>
    if(local_cols & (1 << i)) {
 8000f76:	683a      	ldr	r2, [r7, #0]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	fa42 f303 	asr.w	r3, r2, r3
 8000f7e:	f003 0301 	and.w	r3, r3, #1
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d02a      	beq.n	8000fdc <scan_keypad+0x7c>
    	if (keypresses1[row][i] != 1) {
 8000f86:	4b22      	ldr	r3, [pc, #136]	; (8001010 <scan_keypad+0xb0>)
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	4922      	ldr	r1, [pc, #136]	; (8001014 <scan_keypad+0xb4>)
 8000f8c:	4613      	mov	r3, r2
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	4413      	add	r3, r2
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	18ca      	adds	r2, r1, r3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4413      	add	r3, r2
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d029      	beq.n	8000ff4 <scan_keypad+0x94>
    		keypresses1[row][i] = 1;
 8000fa0:	4b1b      	ldr	r3, [pc, #108]	; (8001010 <scan_keypad+0xb0>)
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	491b      	ldr	r1, [pc, #108]	; (8001014 <scan_keypad+0xb4>)
 8000fa6:	4613      	mov	r3, r2
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	4413      	add	r3, r2
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	18ca      	adds	r2, r1, r3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	701a      	strb	r2, [r3, #0]
    	    // WPM timer not enabled
    	    if (!(TIM1->CR1 && TIM_CR1_CEN)) {
 8000fb8:	4b17      	ldr	r3, [pc, #92]	; (8001018 <scan_keypad+0xb8>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d102      	bne.n	8000fc6 <scan_keypad+0x66>
    	    	HAL_TIM_Base_Start_IT(&htim7);
 8000fc0:	4816      	ldr	r0, [pc, #88]	; (800101c <scan_keypad+0xbc>)
 8000fc2:	f006 fe5f 	bl	8007c84 <HAL_TIM_Base_Start_IT>
    	    }
    	    charCount++;
 8000fc6:	4b16      	ldr	r3, [pc, #88]	; (8001020 <scan_keypad+0xc0>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	3301      	adds	r3, #1
 8000fcc:	4a14      	ldr	r2, [pc, #80]	; (8001020 <scan_keypad+0xc0>)
 8000fce:	6013      	str	r3, [r2, #0]
    	    charsInCycle++;
 8000fd0:	4b14      	ldr	r3, [pc, #80]	; (8001024 <scan_keypad+0xc4>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	4a13      	ldr	r2, [pc, #76]	; (8001024 <scan_keypad+0xc4>)
 8000fd8:	6013      	str	r3, [r2, #0]
 8000fda:	e00b      	b.n	8000ff4 <scan_keypad+0x94>
    	}
    }
    else {
      keypresses1[row][i] = 0;
 8000fdc:	4b0c      	ldr	r3, [pc, #48]	; (8001010 <scan_keypad+0xb0>)
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	490c      	ldr	r1, [pc, #48]	; (8001014 <scan_keypad+0xb4>)
 8000fe2:	4613      	mov	r3, r2
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	4413      	add	r3, r2
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	18ca      	adds	r2, r1, r3
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	4413      	add	r3, r2
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < nCols1; i++) {
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	607b      	str	r3, [r7, #4]
 8000ffa:	4b0b      	ldr	r3, [pc, #44]	; (8001028 <scan_keypad+0xc8>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	429a      	cmp	r2, r3
 8001002:	dbb8      	blt.n	8000f76 <scan_keypad+0x16>
//      keypresses2[row][i] = 0;
//    }
//
//  }

}
 8001004:	bf00      	nop
 8001006:	bf00      	nop
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	200003f0 	.word	0x200003f0
 8001014:	200001c8 	.word	0x200001c8
 8001018:	40010000 	.word	0x40010000
 800101c:	20000394 	.word	0x20000394
 8001020:	200003dc 	.word	0x200003dc
 8001024:	200003e0 	.word	0x200003e0
 8001028:	20000020 	.word	0x20000020

0800102c <set_rows>:

void set_rows() {
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af02      	add	r7, sp, #8
  // update row value
  row = (row + 1) % nRows1;
 8001032:	4b4f      	ldr	r3, [pc, #316]	; (8001170 <set_rows+0x144>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	3301      	adds	r3, #1
 8001038:	4a4e      	ldr	r2, [pc, #312]	; (8001174 <set_rows+0x148>)
 800103a:	6812      	ldr	r2, [r2, #0]
 800103c:	fb93 f1f2 	sdiv	r1, r3, r2
 8001040:	fb01 f202 	mul.w	r2, r1, r2
 8001044:	1a9b      	subs	r3, r3, r2
 8001046:	4a4a      	ldr	r2, [pc, #296]	; (8001170 <set_rows+0x144>)
 8001048:	6013      	str	r3, [r2, #0]
  HAL_GPIO_WritePin(GPIOD, ROW0_Pin, GPIO_PIN_SET);
 800104a:	2201      	movs	r2, #1
 800104c:	2101      	movs	r1, #1
 800104e:	484a      	ldr	r0, [pc, #296]	; (8001178 <set_rows+0x14c>)
 8001050:	f001 ff8e 	bl	8002f70 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, ROW1_Pin, GPIO_PIN_SET);
 8001054:	2201      	movs	r2, #1
 8001056:	2102      	movs	r1, #2
 8001058:	4847      	ldr	r0, [pc, #284]	; (8001178 <set_rows+0x14c>)
 800105a:	f001 ff89 	bl	8002f70 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, ROW2_Pin, GPIO_PIN_SET);
 800105e:	2201      	movs	r2, #1
 8001060:	2104      	movs	r1, #4
 8001062:	4845      	ldr	r0, [pc, #276]	; (8001178 <set_rows+0x14c>)
 8001064:	f001 ff84 	bl	8002f70 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, ROW3_Pin, GPIO_PIN_SET);
 8001068:	2201      	movs	r2, #1
 800106a:	2108      	movs	r1, #8
 800106c:	4842      	ldr	r0, [pc, #264]	; (8001178 <set_rows+0x14c>)
 800106e:	f001 ff7f 	bl	8002f70 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, ROW4_Pin, GPIO_PIN_SET);
 8001072:	2201      	movs	r2, #1
 8001074:	2110      	movs	r1, #16
 8001076:	4840      	ldr	r0, [pc, #256]	; (8001178 <set_rows+0x14c>)
 8001078:	f001 ff7a 	bl	8002f70 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, ROW5_Pin, GPIO_PIN_SET);
 800107c:	2201      	movs	r2, #1
 800107e:	2120      	movs	r1, #32
 8001080:	483d      	ldr	r0, [pc, #244]	; (8001178 <set_rows+0x14c>)
 8001082:	f001 ff75 	bl	8002f70 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, ROW6_Pin, GPIO_PIN_SET);
 8001086:	2201      	movs	r2, #1
 8001088:	2140      	movs	r1, #64	; 0x40
 800108a:	483b      	ldr	r0, [pc, #236]	; (8001178 <set_rows+0x14c>)
 800108c:	f001 ff70 	bl	8002f70 <HAL_GPIO_WritePin>

  // use global variable row to set the correct row to low and last row back to high
  switch(row) {
 8001090:	4b37      	ldr	r3, [pc, #220]	; (8001170 <set_rows+0x144>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2b06      	cmp	r3, #6
 8001096:	d83b      	bhi.n	8001110 <set_rows+0xe4>
 8001098:	a201      	add	r2, pc, #4	; (adr r2, 80010a0 <set_rows+0x74>)
 800109a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800109e:	bf00      	nop
 80010a0:	080010bd 	.word	0x080010bd
 80010a4:	080010c9 	.word	0x080010c9
 80010a8:	080010d5 	.word	0x080010d5
 80010ac:	080010e1 	.word	0x080010e1
 80010b0:	080010ed 	.word	0x080010ed
 80010b4:	080010f9 	.word	0x080010f9
 80010b8:	08001105 	.word	0x08001105
    case 0:
      HAL_GPIO_WritePin(GPIOD, ROW0_Pin, GPIO_PIN_RESET);
 80010bc:	2200      	movs	r2, #0
 80010be:	2101      	movs	r1, #1
 80010c0:	482d      	ldr	r0, [pc, #180]	; (8001178 <set_rows+0x14c>)
 80010c2:	f001 ff55 	bl	8002f70 <HAL_GPIO_WritePin>
      break;
 80010c6:	e023      	b.n	8001110 <set_rows+0xe4>
    case 1:
      HAL_GPIO_WritePin(GPIOD, ROW1_Pin, GPIO_PIN_RESET);
 80010c8:	2200      	movs	r2, #0
 80010ca:	2102      	movs	r1, #2
 80010cc:	482a      	ldr	r0, [pc, #168]	; (8001178 <set_rows+0x14c>)
 80010ce:	f001 ff4f 	bl	8002f70 <HAL_GPIO_WritePin>
      break;
 80010d2:	e01d      	b.n	8001110 <set_rows+0xe4>
    case 2:
      HAL_GPIO_WritePin(GPIOD, ROW2_Pin, GPIO_PIN_RESET);
 80010d4:	2200      	movs	r2, #0
 80010d6:	2104      	movs	r1, #4
 80010d8:	4827      	ldr	r0, [pc, #156]	; (8001178 <set_rows+0x14c>)
 80010da:	f001 ff49 	bl	8002f70 <HAL_GPIO_WritePin>
      break;
 80010de:	e017      	b.n	8001110 <set_rows+0xe4>
    case 3:
      HAL_GPIO_WritePin(GPIOD, ROW3_Pin, GPIO_PIN_RESET);
 80010e0:	2200      	movs	r2, #0
 80010e2:	2108      	movs	r1, #8
 80010e4:	4824      	ldr	r0, [pc, #144]	; (8001178 <set_rows+0x14c>)
 80010e6:	f001 ff43 	bl	8002f70 <HAL_GPIO_WritePin>
      break;
 80010ea:	e011      	b.n	8001110 <set_rows+0xe4>
    case 4:
      HAL_GPIO_WritePin(GPIOD, ROW4_Pin, GPIO_PIN_RESET);
 80010ec:	2200      	movs	r2, #0
 80010ee:	2110      	movs	r1, #16
 80010f0:	4821      	ldr	r0, [pc, #132]	; (8001178 <set_rows+0x14c>)
 80010f2:	f001 ff3d 	bl	8002f70 <HAL_GPIO_WritePin>
      break;
 80010f6:	e00b      	b.n	8001110 <set_rows+0xe4>
    case 5:
	  HAL_GPIO_WritePin(GPIOD, ROW5_Pin, GPIO_PIN_RESET);
 80010f8:	2200      	movs	r2, #0
 80010fa:	2120      	movs	r1, #32
 80010fc:	481e      	ldr	r0, [pc, #120]	; (8001178 <set_rows+0x14c>)
 80010fe:	f001 ff37 	bl	8002f70 <HAL_GPIO_WritePin>
	  break;
 8001102:	e005      	b.n	8001110 <set_rows+0xe4>
    case 6:
	  HAL_GPIO_WritePin(GPIOD, ROW6_Pin, GPIO_PIN_RESET);
 8001104:	2200      	movs	r2, #0
 8001106:	2140      	movs	r1, #64	; 0x40
 8001108:	481b      	ldr	r0, [pc, #108]	; (8001178 <set_rows+0x14c>)
 800110a:	f001 ff31 	bl	8002f70 <HAL_GPIO_WritePin>
	  break;
 800110e:	bf00      	nop
  // set current row to low and others to high on gpio expander keypad



  // ! GPIOB2 - GPIOB7 maps to row0 - row5, GPIOA7 maps to row6
  if (row != 6){
 8001110:	4b17      	ldr	r3, [pc, #92]	; (8001170 <set_rows+0x144>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	2b06      	cmp	r3, #6
 8001116:	d016      	beq.n	8001146 <set_rows+0x11a>
	  uint8_t data[3] = {0x14, ~( 0x04 << row ), ~0}; // addr 0x14 for IOCON.BANK = 0, 0x0A for IOCON.BANK = 1
 8001118:	2314      	movs	r3, #20
 800111a:	713b      	strb	r3, [r7, #4]
 800111c:	4b14      	ldr	r3, [pc, #80]	; (8001170 <set_rows+0x144>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2204      	movs	r2, #4
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	b2db      	uxtb	r3, r3
 8001128:	43db      	mvns	r3, r3
 800112a:	b2db      	uxtb	r3, r3
 800112c:	717b      	strb	r3, [r7, #5]
 800112e:	23ff      	movs	r3, #255	; 0xff
 8001130:	71bb      	strb	r3, [r7, #6]
	  HAL_I2C_Master_Transmit(&hi2c2, GPIOEX_ADDR, data, 2, 1000);
 8001132:	1d3a      	adds	r2, r7, #4
 8001134:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001138:	9300      	str	r3, [sp, #0]
 800113a:	2302      	movs	r3, #2
 800113c:	2140      	movs	r1, #64	; 0x40
 800113e:	480f      	ldr	r0, [pc, #60]	; (800117c <set_rows+0x150>)
 8001140:	f002 f874 	bl	800322c <HAL_I2C_Master_Transmit>
  } else {
	  uint8_t data[3] = {0x14, ~0, ~0x80}; // addr 0x14 for IOCON.BANK = 0, 0x0A for IOCON.BANK = 1
	  HAL_I2C_Master_Transmit(&hi2c2, GPIOEX_ADDR, data, 2, 1000);
  }
}
 8001144:	e010      	b.n	8001168 <set_rows+0x13c>
	  uint8_t data[3] = {0x14, ~0, ~0x80}; // addr 0x14 for IOCON.BANK = 0, 0x0A for IOCON.BANK = 1
 8001146:	4a0e      	ldr	r2, [pc, #56]	; (8001180 <set_rows+0x154>)
 8001148:	463b      	mov	r3, r7
 800114a:	6812      	ldr	r2, [r2, #0]
 800114c:	4611      	mov	r1, r2
 800114e:	8019      	strh	r1, [r3, #0]
 8001150:	3302      	adds	r3, #2
 8001152:	0c12      	lsrs	r2, r2, #16
 8001154:	701a      	strb	r2, [r3, #0]
	  HAL_I2C_Master_Transmit(&hi2c2, GPIOEX_ADDR, data, 2, 1000);
 8001156:	463a      	mov	r2, r7
 8001158:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800115c:	9300      	str	r3, [sp, #0]
 800115e:	2302      	movs	r3, #2
 8001160:	2140      	movs	r1, #64	; 0x40
 8001162:	4806      	ldr	r0, [pc, #24]	; (800117c <set_rows+0x150>)
 8001164:	f002 f862 	bl	800322c <HAL_I2C_Master_Transmit>
}
 8001168:	bf00      	nop
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	200003f0 	.word	0x200003f0
 8001174:	2000001c 	.word	0x2000001c
 8001178:	40020c00 	.word	0x40020c00
 800117c:	200001f8 	.word	0x200001f8
 8001180:	0800d4f4 	.word	0x0800d4f4

08001184 <get_cols>:

int get_cols() {
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af02      	add	r7, sp, #8
  // get the value of all columns as one int from the GPIO register
  // PD7-4
  int local_cols = ~(GPIOD->IDR >> 7) & 0x3F;
 800118a:	4b10      	ldr	r3, [pc, #64]	; (80011cc <get_cols+0x48>)
 800118c:	691b      	ldr	r3, [r3, #16]
 800118e:	09db      	lsrs	r3, r3, #7
 8001190:	43db      	mvns	r3, r3
 8001192:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001196:	607b      	str	r3, [r7, #4]

  // read the GPIO expander columns
  // ! GPIOA0 - GPIOA5 maps to col0 - col5
  uint8_t data[2] = {0x12, 0x00}; // addr 0x12 for IOCON.BANK = 0, 0x09 for IOCON.BANK = 1
 8001198:	2312      	movs	r3, #18
 800119a:	803b      	strh	r3, [r7, #0]
  HAL_I2C_Master_Transmit(&hi2c2, GPIOEX_ADDR, data, 1, 1000);
 800119c:	463a      	mov	r2, r7
 800119e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011a2:	9300      	str	r3, [sp, #0]
 80011a4:	2301      	movs	r3, #1
 80011a6:	2140      	movs	r1, #64	; 0x40
 80011a8:	4809      	ldr	r0, [pc, #36]	; (80011d0 <get_cols+0x4c>)
 80011aa:	f002 f83f 	bl	800322c <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&hi2c2, GPIOEX_ADDR, data, 2, 1000);
 80011ae:	463a      	mov	r2, r7
 80011b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011b4:	9300      	str	r3, [sp, #0]
 80011b6:	2302      	movs	r3, #2
 80011b8:	2140      	movs	r1, #64	; 0x40
 80011ba:	4805      	ldr	r0, [pc, #20]	; (80011d0 <get_cols+0x4c>)
 80011bc:	f002 f934 	bl	8003428 <HAL_I2C_Master_Receive>

  //int expander_cols = data[0] & 0xF0;

  return local_cols;// | expander_cols;
 80011c0:	687b      	ldr	r3, [r7, #4]
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	40020c00 	.word	0x40020c00
 80011d0:	200001f8 	.word	0x200001f8

080011d4 <scan_rotary>:

/* Rotary Encoder Scanning */
void scan_rotary() {
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  currentStateCLK = HAL_GPIO_ReadPin(GPIOD, ENC_A_Pin);
 80011d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011dc:	4832      	ldr	r0, [pc, #200]	; (80012a8 <scan_rotary+0xd4>)
 80011de:	f001 feaf 	bl	8002f40 <HAL_GPIO_ReadPin>
 80011e2:	4603      	mov	r3, r0
 80011e4:	461a      	mov	r2, r3
 80011e6:	4b31      	ldr	r3, [pc, #196]	; (80012ac <scan_rotary+0xd8>)
 80011e8:	601a      	str	r2, [r3, #0]

  // if CLK pin has changed, then the rotary encoder has turned
  if (currentStateCLK != lastStateCLK && rotLock == 0 ) {// && rotLock == 0) {
 80011ea:	4b30      	ldr	r3, [pc, #192]	; (80012ac <scan_rotary+0xd8>)
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	4b30      	ldr	r3, [pc, #192]	; (80012b0 <scan_rotary+0xdc>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	429a      	cmp	r2, r3
 80011f4:	d025      	beq.n	8001242 <scan_rotary+0x6e>
 80011f6:	4b2f      	ldr	r3, [pc, #188]	; (80012b4 <scan_rotary+0xe0>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d121      	bne.n	8001242 <scan_rotary+0x6e>
    // if the DT state is different, then the encoder is rotating counter-clockwise
    currentStateDT = HAL_GPIO_ReadPin(GPIOD, ENC_B_Pin);
 80011fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001202:	4829      	ldr	r0, [pc, #164]	; (80012a8 <scan_rotary+0xd4>)
 8001204:	f001 fe9c 	bl	8002f40 <HAL_GPIO_ReadPin>
 8001208:	4603      	mov	r3, r0
 800120a:	461a      	mov	r2, r3
 800120c:	4b2a      	ldr	r3, [pc, #168]	; (80012b8 <scan_rotary+0xe4>)
 800120e:	601a      	str	r2, [r3, #0]

    if (currentStateDT != currentStateCLK) {
 8001210:	4b29      	ldr	r3, [pc, #164]	; (80012b8 <scan_rotary+0xe4>)
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	4b25      	ldr	r3, [pc, #148]	; (80012ac <scan_rotary+0xd8>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	429a      	cmp	r2, r3
 800121a:	d003      	beq.n	8001224 <scan_rotary+0x50>
      // Volume Down
      rotary_keypresses[1] = 1;
 800121c:	4b27      	ldr	r3, [pc, #156]	; (80012bc <scan_rotary+0xe8>)
 800121e:	2201      	movs	r2, #1
 8001220:	705a      	strb	r2, [r3, #1]
 8001222:	e008      	b.n	8001236 <scan_rotary+0x62>
    }

    // otherwise, it is turning clockwise
    else if (currentStateDT == currentStateCLK) {
 8001224:	4b24      	ldr	r3, [pc, #144]	; (80012b8 <scan_rotary+0xe4>)
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	4b20      	ldr	r3, [pc, #128]	; (80012ac <scan_rotary+0xd8>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	429a      	cmp	r2, r3
 800122e:	d102      	bne.n	8001236 <scan_rotary+0x62>
      // Volume Up
      rotary_keypresses[2] = 1;
 8001230:	4b22      	ldr	r3, [pc, #136]	; (80012bc <scan_rotary+0xe8>)
 8001232:	2201      	movs	r2, #1
 8001234:	709a      	strb	r2, [r3, #2]
    }
    rotLock++;
 8001236:	4b1f      	ldr	r3, [pc, #124]	; (80012b4 <scan_rotary+0xe0>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	3301      	adds	r3, #1
 800123c:	4a1d      	ldr	r2, [pc, #116]	; (80012b4 <scan_rotary+0xe0>)
 800123e:	6013      	str	r3, [r2, #0]
 8001240:	e009      	b.n	8001256 <scan_rotary+0x82>

  }
  else if (rotLock == 0) {
 8001242:	4b1c      	ldr	r3, [pc, #112]	; (80012b4 <scan_rotary+0xe0>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d105      	bne.n	8001256 <scan_rotary+0x82>
	  rotary_keypresses[1] = 0;
 800124a:	4b1c      	ldr	r3, [pc, #112]	; (80012bc <scan_rotary+0xe8>)
 800124c:	2200      	movs	r2, #0
 800124e:	705a      	strb	r2, [r3, #1]
	  rotary_keypresses[2] = 0;
 8001250:	4b1a      	ldr	r3, [pc, #104]	; (80012bc <scan_rotary+0xe8>)
 8001252:	2200      	movs	r2, #0
 8001254:	709a      	strb	r2, [r3, #2]
  }

  lastStateCLK = currentStateCLK;
 8001256:	4b15      	ldr	r3, [pc, #84]	; (80012ac <scan_rotary+0xd8>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a15      	ldr	r2, [pc, #84]	; (80012b0 <scan_rotary+0xdc>)
 800125c:	6013      	str	r3, [r2, #0]

  // rotLock allows the rotary encoder's inputs to settle over a few extra clock cycles
  if(rotLock != 0) {
 800125e:	4b15      	ldr	r3, [pc, #84]	; (80012b4 <scan_rotary+0xe0>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d00e      	beq.n	8001284 <scan_rotary+0xb0>
    rotLock = (rotLock + 1) % 150;
 8001266:	4b13      	ldr	r3, [pc, #76]	; (80012b4 <scan_rotary+0xe0>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	1c5a      	adds	r2, r3, #1
 800126c:	4b14      	ldr	r3, [pc, #80]	; (80012c0 <scan_rotary+0xec>)
 800126e:	fb83 1302 	smull	r1, r3, r3, r2
 8001272:	1119      	asrs	r1, r3, #4
 8001274:	17d3      	asrs	r3, r2, #31
 8001276:	1acb      	subs	r3, r1, r3
 8001278:	2196      	movs	r1, #150	; 0x96
 800127a:	fb01 f303 	mul.w	r3, r1, r3
 800127e:	1ad3      	subs	r3, r2, r3
 8001280:	4a0c      	ldr	r2, [pc, #48]	; (80012b4 <scan_rotary+0xe0>)
 8001282:	6013      	str	r3, [r2, #0]
  }

  // if the state is low (default is high), turn toggle the LED
  if (HAL_GPIO_ReadPin(GPIOD, ENC_SW_Pin) == 0) {
 8001284:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001288:	4807      	ldr	r0, [pc, #28]	; (80012a8 <scan_rotary+0xd4>)
 800128a:	f001 fe59 	bl	8002f40 <HAL_GPIO_ReadPin>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d103      	bne.n	800129c <scan_rotary+0xc8>
    // Volume Mute Toggle
	  rotary_keypresses[0] = 1;
 8001294:	4b09      	ldr	r3, [pc, #36]	; (80012bc <scan_rotary+0xe8>)
 8001296:	2201      	movs	r2, #1
 8001298:	701a      	strb	r2, [r3, #0]
  }
  else {
	  rotary_keypresses[0] = 0;
  }

}
 800129a:	e002      	b.n	80012a2 <scan_rotary+0xce>
	  rotary_keypresses[0] = 0;
 800129c:	4b07      	ldr	r3, [pc, #28]	; (80012bc <scan_rotary+0xe8>)
 800129e:	2200      	movs	r2, #0
 80012a0:	701a      	strb	r2, [r3, #0]
}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	40020c00 	.word	0x40020c00
 80012ac:	200003f4 	.word	0x200003f4
 80012b0:	200003f8 	.word	0x200003f8
 80012b4:	20000400 	.word	0x20000400
 80012b8:	200003fc 	.word	0x200003fc
 80012bc:	200001f4 	.word	0x200001f4
 80012c0:	1b4e81b5 	.word	0x1b4e81b5

080012c4 <record_keys>:
/* END Rotary Encoder Scanning */

/* USB Functions */
void record_keys() {
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
  // reset keyboardhid to 0
  memset(&keyboardhid, 0, sizeof(keyboardHID));
 80012ca:	2208      	movs	r2, #8
 80012cc:	2100      	movs	r1, #0
 80012ce:	4828      	ldr	r0, [pc, #160]	; (8001370 <record_keys+0xac>)
 80012d0:	f00a ff34 	bl	800c13c <memset>
  keycodeNum = 1;
 80012d4:	4b27      	ldr	r3, [pc, #156]	; (8001374 <record_keys+0xb0>)
 80012d6:	2201      	movs	r2, #1
 80012d8:	601a      	str	r2, [r3, #0]

  // Add local keypresses
  for(int i = 0; i < nRows1; i++) {
 80012da:	2300      	movs	r3, #0
 80012dc:	60fb      	str	r3, [r7, #12]
 80012de:	e026      	b.n	800132e <record_keys+0x6a>
	  for(int j = 0; j < nCols1; j++) {
 80012e0:	2300      	movs	r3, #0
 80012e2:	60bb      	str	r3, [r7, #8]
 80012e4:	e01b      	b.n	800131e <record_keys+0x5a>
		  if(keypresses1[i][j] == 1) {
 80012e6:	4924      	ldr	r1, [pc, #144]	; (8001378 <record_keys+0xb4>)
 80012e8:	68fa      	ldr	r2, [r7, #12]
 80012ea:	4613      	mov	r3, r2
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	4413      	add	r3, r2
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	18ca      	adds	r2, r1, r3
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	4413      	add	r3, r2
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d10c      	bne.n	8001318 <record_keys+0x54>
			  add_keypress(layout1[i][j]);
 80012fe:	491f      	ldr	r1, [pc, #124]	; (800137c <record_keys+0xb8>)
 8001300:	68fa      	ldr	r2, [r7, #12]
 8001302:	4613      	mov	r3, r2
 8001304:	005b      	lsls	r3, r3, #1
 8001306:	4413      	add	r3, r2
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	68ba      	ldr	r2, [r7, #8]
 800130c:	4413      	add	r3, r2
 800130e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001312:	4618      	mov	r0, r3
 8001314:	f000 f83c 	bl	8001390 <add_keypress>
	  for(int j = 0; j < nCols1; j++) {
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	3301      	adds	r3, #1
 800131c:	60bb      	str	r3, [r7, #8]
 800131e:	4b18      	ldr	r3, [pc, #96]	; (8001380 <record_keys+0xbc>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	68ba      	ldr	r2, [r7, #8]
 8001324:	429a      	cmp	r2, r3
 8001326:	dbde      	blt.n	80012e6 <record_keys+0x22>
  for(int i = 0; i < nRows1; i++) {
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	3301      	adds	r3, #1
 800132c:	60fb      	str	r3, [r7, #12]
 800132e:	4b15      	ldr	r3, [pc, #84]	; (8001384 <record_keys+0xc0>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	68fa      	ldr	r2, [r7, #12]
 8001334:	429a      	cmp	r2, r3
 8001336:	dbd3      	blt.n	80012e0 <record_keys+0x1c>
//		  }
//	  }
//  }

  // Add Rotary Encoder keypresses
  for(int i = 0; i < 4; i++) {
 8001338:	2300      	movs	r3, #0
 800133a:	607b      	str	r3, [r7, #4]
 800133c:	e00f      	b.n	800135e <record_keys+0x9a>
	  if(rotary_keypresses[i] == 1)
 800133e:	4a12      	ldr	r2, [pc, #72]	; (8001388 <record_keys+0xc4>)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	4413      	add	r3, r2
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	2b01      	cmp	r3, #1
 8001348:	d106      	bne.n	8001358 <record_keys+0x94>
		  add_keypress(rotary_keys[i]);
 800134a:	4a10      	ldr	r2, [pc, #64]	; (800138c <record_keys+0xc8>)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001352:	4618      	mov	r0, r3
 8001354:	f000 f81c 	bl	8001390 <add_keypress>
  for(int i = 0; i < 4; i++) {
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	3301      	adds	r3, #1
 800135c:	607b      	str	r3, [r7, #4]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2b03      	cmp	r3, #3
 8001362:	ddec      	ble.n	800133e <record_keys+0x7a>
  }

}
 8001364:	bf00      	nop
 8001366:	bf00      	nop
 8001368:	3710      	adds	r7, #16
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	20000404 	.word	0x20000404
 8001374:	20000028 	.word	0x20000028
 8001378:	200001c8 	.word	0x200001c8
 800137c:	08017a9c 	.word	0x08017a9c
 8001380:	20000020 	.word	0x20000020
 8001384:	2000001c 	.word	0x2000001c
 8001388:	200001f4 	.word	0x200001f4
 800138c:	08017af0 	.word	0x08017af0

08001390 <add_keypress>:

void add_keypress(uint16_t key) {
 8001390:	b480      	push	{r7}
 8001392:	b085      	sub	sp, #20
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	80fb      	strh	r3, [r7, #6]

	if( (key & 0xFF00) == 0xFF00) {
 800139a:	88fb      	ldrh	r3, [r7, #6]
 800139c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80013a0:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 80013a4:	d110      	bne.n	80013c8 <add_keypress+0x38>
		int shift = key & 0xFF;
 80013a6:	88fb      	ldrh	r3, [r7, #6]
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	60fb      	str	r3, [r7, #12]
		keyboardhid.MODIFIER |= (1<<shift);
 80013ac:	4b25      	ldr	r3, [pc, #148]	; (8001444 <add_keypress+0xb4>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	b25a      	sxtb	r2, r3
 80013b2:	2101      	movs	r1, #1
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	fa01 f303 	lsl.w	r3, r1, r3
 80013ba:	b25b      	sxtb	r3, r3
 80013bc:	4313      	orrs	r3, r2
 80013be:	b25b      	sxtb	r3, r3
 80013c0:	b2da      	uxtb	r2, r3
 80013c2:	4b20      	ldr	r3, [pc, #128]	; (8001444 <add_keypress+0xb4>)
 80013c4:	701a      	strb	r2, [r3, #0]

		return;
 80013c6:	e037      	b.n	8001438 <add_keypress+0xa8>
	}

	switch(keycodeNum) {
 80013c8:	4b1f      	ldr	r3, [pc, #124]	; (8001448 <add_keypress+0xb8>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	3b01      	subs	r3, #1
 80013ce:	2b05      	cmp	r3, #5
 80013d0:	d82c      	bhi.n	800142c <add_keypress+0x9c>
 80013d2:	a201      	add	r2, pc, #4	; (adr r2, 80013d8 <add_keypress+0x48>)
 80013d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013d8:	080013f1 	.word	0x080013f1
 80013dc:	080013fb 	.word	0x080013fb
 80013e0:	08001405 	.word	0x08001405
 80013e4:	0800140f 	.word	0x0800140f
 80013e8:	08001419 	.word	0x08001419
 80013ec:	08001423 	.word	0x08001423
		case 1:
		  keyboardhid.KEYCODE1 = key;
 80013f0:	88fb      	ldrh	r3, [r7, #6]
 80013f2:	b2da      	uxtb	r2, r3
 80013f4:	4b13      	ldr	r3, [pc, #76]	; (8001444 <add_keypress+0xb4>)
 80013f6:	709a      	strb	r2, [r3, #2]
		  break;
 80013f8:	e019      	b.n	800142e <add_keypress+0x9e>
		case 2:
		  keyboardhid.KEYCODE2 = key;
 80013fa:	88fb      	ldrh	r3, [r7, #6]
 80013fc:	b2da      	uxtb	r2, r3
 80013fe:	4b11      	ldr	r3, [pc, #68]	; (8001444 <add_keypress+0xb4>)
 8001400:	70da      	strb	r2, [r3, #3]
		  break;
 8001402:	e014      	b.n	800142e <add_keypress+0x9e>
		case 3:
		  keyboardhid.KEYCODE3 = key;
 8001404:	88fb      	ldrh	r3, [r7, #6]
 8001406:	b2da      	uxtb	r2, r3
 8001408:	4b0e      	ldr	r3, [pc, #56]	; (8001444 <add_keypress+0xb4>)
 800140a:	711a      	strb	r2, [r3, #4]
		  break;
 800140c:	e00f      	b.n	800142e <add_keypress+0x9e>
		case 4:
		  keyboardhid.KEYCODE4 = key;
 800140e:	88fb      	ldrh	r3, [r7, #6]
 8001410:	b2da      	uxtb	r2, r3
 8001412:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <add_keypress+0xb4>)
 8001414:	715a      	strb	r2, [r3, #5]
		  break;
 8001416:	e00a      	b.n	800142e <add_keypress+0x9e>
		case 5:
		  keyboardhid.KEYCODE5 = key;
 8001418:	88fb      	ldrh	r3, [r7, #6]
 800141a:	b2da      	uxtb	r2, r3
 800141c:	4b09      	ldr	r3, [pc, #36]	; (8001444 <add_keypress+0xb4>)
 800141e:	719a      	strb	r2, [r3, #6]
		  break;
 8001420:	e005      	b.n	800142e <add_keypress+0x9e>
		case 6:
		  keyboardhid.KEYCODE6 = key;
 8001422:	88fb      	ldrh	r3, [r7, #6]
 8001424:	b2da      	uxtb	r2, r3
 8001426:	4b07      	ldr	r3, [pc, #28]	; (8001444 <add_keypress+0xb4>)
 8001428:	71da      	strb	r2, [r3, #7]
		  break;
 800142a:	e000      	b.n	800142e <add_keypress+0x9e>
		default:
			break;
 800142c:	bf00      	nop
	}
	keycodeNum++;
 800142e:	4b06      	ldr	r3, [pc, #24]	; (8001448 <add_keypress+0xb8>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	3301      	adds	r3, #1
 8001434:	4a04      	ldr	r2, [pc, #16]	; (8001448 <add_keypress+0xb8>)
 8001436:	6013      	str	r3, [r2, #0]

}
 8001438:	3714      	adds	r7, #20
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	20000404 	.word	0x20000404
 8001448:	20000028 	.word	0x20000028

0800144c <switch_lcd>:
/* END USB Functions */

/* LCD Functions */
void switch_lcd() {
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  // switch LCD_*_PIN and LCD_*_PORT between LCD1_* and LCD2_*
  if(LCD_CS_PIN == LCD2_CS_PIN) {
 8001450:	4b19      	ldr	r3, [pc, #100]	; (80014b8 <switch_lcd+0x6c>)
 8001452:	881b      	ldrh	r3, [r3, #0]
 8001454:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001458:	d114      	bne.n	8001484 <switch_lcd+0x38>
	  LCD_CS_PORT = LCD1_CS_PORT;
 800145a:	4b18      	ldr	r3, [pc, #96]	; (80014bc <switch_lcd+0x70>)
 800145c:	4a18      	ldr	r2, [pc, #96]	; (80014c0 <switch_lcd+0x74>)
 800145e:	601a      	str	r2, [r3, #0]
	  LCD_CS_PIN = LCD1_CS_PIN;
 8001460:	4b15      	ldr	r3, [pc, #84]	; (80014b8 <switch_lcd+0x6c>)
 8001462:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001466:	801a      	strh	r2, [r3, #0]
	  LCD_DC_PORT = LCD1_DC_PORT;
 8001468:	4b16      	ldr	r3, [pc, #88]	; (80014c4 <switch_lcd+0x78>)
 800146a:	4a15      	ldr	r2, [pc, #84]	; (80014c0 <switch_lcd+0x74>)
 800146c:	601a      	str	r2, [r3, #0]
	  LCD_DC_PIN = LCD1_DC_PIN;
 800146e:	4b16      	ldr	r3, [pc, #88]	; (80014c8 <switch_lcd+0x7c>)
 8001470:	2280      	movs	r2, #128	; 0x80
 8001472:	801a      	strh	r2, [r3, #0]
	  LCD_RST_PORT = LCD1_RST_PORT;
 8001474:	4b15      	ldr	r3, [pc, #84]	; (80014cc <switch_lcd+0x80>)
 8001476:	4a16      	ldr	r2, [pc, #88]	; (80014d0 <switch_lcd+0x84>)
 8001478:	601a      	str	r2, [r3, #0]
	  LCD_RST_PIN = LCD1_RST_PIN;
 800147a:	4b16      	ldr	r3, [pc, #88]	; (80014d4 <switch_lcd+0x88>)
 800147c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001480:	801a      	strh	r2, [r3, #0]
	LCD_DC_PORT = LCD2_DC_PORT;
	LCD_DC_PIN = LCD2_DC_PIN;
	LCD_RST_PORT = LCD2_RST_PORT;
	LCD_RST_PIN = LCD2_RST_PIN;
  }
}
 8001482:	e014      	b.n	80014ae <switch_lcd+0x62>
    LCD_CS_PORT = LCD2_CS_PORT;
 8001484:	4b0d      	ldr	r3, [pc, #52]	; (80014bc <switch_lcd+0x70>)
 8001486:	4a12      	ldr	r2, [pc, #72]	; (80014d0 <switch_lcd+0x84>)
 8001488:	601a      	str	r2, [r3, #0]
	LCD_CS_PIN = LCD2_CS_PIN;
 800148a:	4b0b      	ldr	r3, [pc, #44]	; (80014b8 <switch_lcd+0x6c>)
 800148c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001490:	801a      	strh	r2, [r3, #0]
	LCD_DC_PORT = LCD2_DC_PORT;
 8001492:	4b0c      	ldr	r3, [pc, #48]	; (80014c4 <switch_lcd+0x78>)
 8001494:	4a0a      	ldr	r2, [pc, #40]	; (80014c0 <switch_lcd+0x74>)
 8001496:	601a      	str	r2, [r3, #0]
	LCD_DC_PIN = LCD2_DC_PIN;
 8001498:	4b0b      	ldr	r3, [pc, #44]	; (80014c8 <switch_lcd+0x7c>)
 800149a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800149e:	801a      	strh	r2, [r3, #0]
	LCD_RST_PORT = LCD2_RST_PORT;
 80014a0:	4b0a      	ldr	r3, [pc, #40]	; (80014cc <switch_lcd+0x80>)
 80014a2:	4a0b      	ldr	r2, [pc, #44]	; (80014d0 <switch_lcd+0x84>)
 80014a4:	601a      	str	r2, [r3, #0]
	LCD_RST_PIN = LCD2_RST_PIN;
 80014a6:	4b0b      	ldr	r3, [pc, #44]	; (80014d4 <switch_lcd+0x88>)
 80014a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014ac:	801a      	strh	r2, [r3, #0]
}
 80014ae:	bf00      	nop
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr
 80014b8:	20000008 	.word	0x20000008
 80014bc:	20000004 	.word	0x20000004
 80014c0:	40020800 	.word	0x40020800
 80014c4:	2000000c 	.word	0x2000000c
 80014c8:	20000010 	.word	0x20000010
 80014cc:	20000014 	.word	0x20000014
 80014d0:	40020000 	.word	0x40020000
 80014d4:	20000018 	.word	0x20000018

080014d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b08e      	sub	sp, #56	; 0x38
 80014dc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014de:	f000 fe4b 	bl	8002178 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014e2:	f000 f8bf 	bl	8001664 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014e6:	f000 fa61 	bl	80019ac <MX_GPIO_Init>
  MX_DMA_Init();
 80014ea:	f000 fa3f 	bl	800196c <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 80014ee:	f00a f9c3 	bl	800b878 <MX_USB_DEVICE_Init>
  MX_TIM4_Init();
 80014f2:	f000 f983 	bl	80017fc <MX_TIM4_Init>
  MX_TIM6_Init();
 80014f6:	f000 f9cd 	bl	8001894 <MX_TIM6_Init>
  MX_TIM7_Init();
 80014fa:	f000 fa01 	bl	8001900 <MX_TIM7_Init>
  MX_I2C2_Init();
 80014fe:	f000 f919 	bl	8001734 <MX_I2C2_Init>
  MX_SPI2_Init();
 8001502:	f000 f945 	bl	8001790 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  // Initialize the LCDs
  // Left Screen
  char writeBuff[20];
  ILI9341_Init();
 8001506:	f7ff fa3f 	bl	8000988 <ILI9341_Init>
  ILI9341_SetRotation(SCREEN_VERTICAL_1);
 800150a:	2000      	movs	r0, #0
 800150c:	f7ff fb46 	bl	8000b9c <ILI9341_SetRotation>
  ILI9341_FillScreen(BLUE);
 8001510:	201f      	movs	r0, #31
 8001512:	f7ff fc3d 	bl	8000d90 <ILI9341_FillScreen>
  sprintf(writeBuff, "Number of turns: ");
 8001516:	f107 031c 	add.w	r3, r7, #28
 800151a:	4946      	ldr	r1, [pc, #280]	; (8001634 <main+0x15c>)
 800151c:	4618      	mov	r0, r3
 800151e:	f00a fe43 	bl	800c1a8 <siprintf>
  ILI9341_DrawText(writeBuff, FONT6, 25, 110, BLACK, WHITE);
 8001522:	f107 001c 	add.w	r0, r7, #28
 8001526:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800152a:	9301      	str	r3, [sp, #4]
 800152c:	2300      	movs	r3, #0
 800152e:	9300      	str	r3, [sp, #0]
 8001530:	236e      	movs	r3, #110	; 0x6e
 8001532:	2219      	movs	r2, #25
 8001534:	4940      	ldr	r1, [pc, #256]	; (8001638 <main+0x160>)
 8001536:	f7ff f892 	bl	800065e <ILI9341_DrawText>

  // Right Screen
  switch_lcd();
 800153a:	f7ff ff87 	bl	800144c <switch_lcd>
  ILI9341_Init();
 800153e:	f7ff fa23 	bl	8000988 <ILI9341_Init>
  ILI9341_SetRotation(SCREEN_VERTICAL_1);
 8001542:	2000      	movs	r0, #0
 8001544:	f7ff fb2a 	bl	8000b9c <ILI9341_SetRotation>
  ILI9341_FillScreen(BLUE);
 8001548:	201f      	movs	r0, #31
 800154a:	f7ff fc21 	bl	8000d90 <ILI9341_FillScreen>
  sprintf(writeBuff, "Words");
 800154e:	f107 031c 	add.w	r3, r7, #28
 8001552:	493a      	ldr	r1, [pc, #232]	; (800163c <main+0x164>)
 8001554:	4618      	mov	r0, r3
 8001556:	f00a fe27 	bl	800c1a8 <siprintf>
  ILI9341_DrawText(writeBuff, FONT5, 25, 85, BLACK, WHITE);
 800155a:	f107 001c 	add.w	r0, r7, #28
 800155e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001562:	9301      	str	r3, [sp, #4]
 8001564:	2300      	movs	r3, #0
 8001566:	9300      	str	r3, [sp, #0]
 8001568:	2355      	movs	r3, #85	; 0x55
 800156a:	2219      	movs	r2, #25
 800156c:	4934      	ldr	r1, [pc, #208]	; (8001640 <main+0x168>)
 800156e:	f7ff f876 	bl	800065e <ILI9341_DrawText>
  sprintf(writeBuff, "Per");
 8001572:	f107 031c 	add.w	r3, r7, #28
 8001576:	4933      	ldr	r1, [pc, #204]	; (8001644 <main+0x16c>)
 8001578:	4618      	mov	r0, r3
 800157a:	f00a fe15 	bl	800c1a8 <siprintf>
  ILI9341_DrawText(writeBuff, FONT5, 25, 135, BLACK, WHITE);
 800157e:	f107 001c 	add.w	r0, r7, #28
 8001582:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001586:	9301      	str	r3, [sp, #4]
 8001588:	2300      	movs	r3, #0
 800158a:	9300      	str	r3, [sp, #0]
 800158c:	2387      	movs	r3, #135	; 0x87
 800158e:	2219      	movs	r2, #25
 8001590:	492b      	ldr	r1, [pc, #172]	; (8001640 <main+0x168>)
 8001592:	f7ff f864 	bl	800065e <ILI9341_DrawText>
  sprintf(writeBuff, "Minute:");
 8001596:	f107 031c 	add.w	r3, r7, #28
 800159a:	492b      	ldr	r1, [pc, #172]	; (8001648 <main+0x170>)
 800159c:	4618      	mov	r0, r3
 800159e:	f00a fe03 	bl	800c1a8 <siprintf>
  ILI9341_DrawText(writeBuff, FONT5, 25, 185, BLACK, WHITE);
 80015a2:	f107 001c 	add.w	r0, r7, #28
 80015a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015aa:	9301      	str	r3, [sp, #4]
 80015ac:	2300      	movs	r3, #0
 80015ae:	9300      	str	r3, [sp, #0]
 80015b0:	23b9      	movs	r3, #185	; 0xb9
 80015b2:	2219      	movs	r2, #25
 80015b4:	4922      	ldr	r1, [pc, #136]	; (8001640 <main+0x168>)
 80015b6:	f7ff f852 	bl	800065e <ILI9341_DrawText>


  // start the timer interrupt
  HAL_TIM_Base_Start_IT(&htim4);
 80015ba:	4824      	ldr	r0, [pc, #144]	; (800164c <main+0x174>)
 80015bc:	f006 fb62 	bl	8007c84 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 80015c0:	4823      	ldr	r0, [pc, #140]	; (8001650 <main+0x178>)
 80015c2:	f006 fb5f 	bl	8007c84 <HAL_TIM_Base_Start_IT>
  char buffer2[10];

  while (1)
  {
	  //draw the counter to the lcd
	  if (writeScreen) {
 80015c6:	4b23      	ldr	r3, [pc, #140]	; (8001654 <main+0x17c>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d01b      	beq.n	8001606 <main+0x12e>
		  sprintf(buffer1, "%-3d", (int)wpm);
 80015ce:	4b22      	ldr	r3, [pc, #136]	; (8001658 <main+0x180>)
 80015d0:	edd3 7a00 	vldr	s15, [r3]
 80015d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015d8:	f107 0310 	add.w	r3, r7, #16
 80015dc:	ee17 2a90 	vmov	r2, s15
 80015e0:	491e      	ldr	r1, [pc, #120]	; (800165c <main+0x184>)
 80015e2:	4618      	mov	r0, r3
 80015e4:	f00a fde0 	bl	800c1a8 <siprintf>
	  	  ILI9341_DrawText(buffer1, FONT5, 	165, 185, BLACK, WHITE);
 80015e8:	f107 0010 	add.w	r0, r7, #16
 80015ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015f0:	9301      	str	r3, [sp, #4]
 80015f2:	2300      	movs	r3, #0
 80015f4:	9300      	str	r3, [sp, #0]
 80015f6:	23b9      	movs	r3, #185	; 0xb9
 80015f8:	22a5      	movs	r2, #165	; 0xa5
 80015fa:	4911      	ldr	r1, [pc, #68]	; (8001640 <main+0x168>)
 80015fc:	f7ff f82f 	bl	800065e <ILI9341_DrawText>
	  	  writeScreen = 0;
 8001600:	4b14      	ldr	r3, [pc, #80]	; (8001654 <main+0x17c>)
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]
	  }

	  switch_lcd();
 8001606:	f7ff ff21 	bl	800144c <switch_lcd>

	  // draw the counter to the lcd
	  sprintf(buffer2, "%d", 2);
 800160a:	1d3b      	adds	r3, r7, #4
 800160c:	2202      	movs	r2, #2
 800160e:	4914      	ldr	r1, [pc, #80]	; (8001660 <main+0x188>)
 8001610:	4618      	mov	r0, r3
 8001612:	f00a fdc9 	bl	800c1a8 <siprintf>
	  ILI9341_DrawText(buffer2, FONT6, 190, 110, BLACK, WHITE);
 8001616:	1d38      	adds	r0, r7, #4
 8001618:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800161c:	9301      	str	r3, [sp, #4]
 800161e:	2300      	movs	r3, #0
 8001620:	9300      	str	r3, [sp, #0]
 8001622:	236e      	movs	r3, #110	; 0x6e
 8001624:	22be      	movs	r2, #190	; 0xbe
 8001626:	4904      	ldr	r1, [pc, #16]	; (8001638 <main+0x160>)
 8001628:	f7ff f819 	bl	800065e <ILI9341_DrawText>

	  switch_lcd();
 800162c:	f7ff ff0e 	bl	800144c <switch_lcd>
	  if (writeScreen) {
 8001630:	e7c9      	b.n	80015c6 <main+0xee>
 8001632:	bf00      	nop
 8001634:	0800d4f8 	.word	0x0800d4f8
 8001638:	0800d594 	.word	0x0800d594
 800163c:	0800d50c 	.word	0x0800d50c
 8001640:	080124b8 	.word	0x080124b8
 8001644:	0800d514 	.word	0x0800d514
 8001648:	0800d518 	.word	0x0800d518
 800164c:	20000304 	.word	0x20000304
 8001650:	2000034c 	.word	0x2000034c
 8001654:	20000024 	.word	0x20000024
 8001658:	200003ec 	.word	0x200003ec
 800165c:	0800d520 	.word	0x0800d520
 8001660:	0800d528 	.word	0x0800d528

08001664 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b094      	sub	sp, #80	; 0x50
 8001668:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800166a:	f107 0320 	add.w	r3, r7, #32
 800166e:	2230      	movs	r2, #48	; 0x30
 8001670:	2100      	movs	r1, #0
 8001672:	4618      	mov	r0, r3
 8001674:	f00a fd62 	bl	800c13c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001678:	f107 030c 	add.w	r3, r7, #12
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	605a      	str	r2, [r3, #4]
 8001682:	609a      	str	r2, [r3, #8]
 8001684:	60da      	str	r2, [r3, #12]
 8001686:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001688:	2300      	movs	r3, #0
 800168a:	60bb      	str	r3, [r7, #8]
 800168c:	4b27      	ldr	r3, [pc, #156]	; (800172c <SystemClock_Config+0xc8>)
 800168e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001690:	4a26      	ldr	r2, [pc, #152]	; (800172c <SystemClock_Config+0xc8>)
 8001692:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001696:	6413      	str	r3, [r2, #64]	; 0x40
 8001698:	4b24      	ldr	r3, [pc, #144]	; (800172c <SystemClock_Config+0xc8>)
 800169a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a0:	60bb      	str	r3, [r7, #8]
 80016a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016a4:	2300      	movs	r3, #0
 80016a6:	607b      	str	r3, [r7, #4]
 80016a8:	4b21      	ldr	r3, [pc, #132]	; (8001730 <SystemClock_Config+0xcc>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a20      	ldr	r2, [pc, #128]	; (8001730 <SystemClock_Config+0xcc>)
 80016ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016b2:	6013      	str	r3, [r2, #0]
 80016b4:	4b1e      	ldr	r3, [pc, #120]	; (8001730 <SystemClock_Config+0xcc>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016bc:	607b      	str	r3, [r7, #4]
 80016be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016c0:	2301      	movs	r3, #1
 80016c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80016c4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80016c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016ca:	2302      	movs	r3, #2
 80016cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80016d4:	2304      	movs	r3, #4
 80016d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80016d8:	2348      	movs	r3, #72	; 0x48
 80016da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016dc:	2302      	movs	r3, #2
 80016de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80016e0:	2303      	movs	r3, #3
 80016e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016e4:	f107 0320 	add.w	r3, r7, #32
 80016e8:	4618      	mov	r0, r3
 80016ea:	f005 fa1b 	bl	8006b24 <HAL_RCC_OscConfig>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80016f4:	f000 fa7e 	bl	8001bf4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016f8:	230f      	movs	r3, #15
 80016fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016fc:	2302      	movs	r3, #2
 80016fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001700:	2300      	movs	r3, #0
 8001702:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001704:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001708:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800170a:	2300      	movs	r3, #0
 800170c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800170e:	f107 030c 	add.w	r3, r7, #12
 8001712:	2102      	movs	r1, #2
 8001714:	4618      	mov	r0, r3
 8001716:	f005 fc7d 	bl	8007014 <HAL_RCC_ClockConfig>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001720:	f000 fa68 	bl	8001bf4 <Error_Handler>
  }
}
 8001724:	bf00      	nop
 8001726:	3750      	adds	r7, #80	; 0x50
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	40023800 	.word	0x40023800
 8001730:	40007000 	.word	0x40007000

08001734 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001738:	4b12      	ldr	r3, [pc, #72]	; (8001784 <MX_I2C2_Init+0x50>)
 800173a:	4a13      	ldr	r2, [pc, #76]	; (8001788 <MX_I2C2_Init+0x54>)
 800173c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 800173e:	4b11      	ldr	r3, [pc, #68]	; (8001784 <MX_I2C2_Init+0x50>)
 8001740:	4a12      	ldr	r2, [pc, #72]	; (800178c <MX_I2C2_Init+0x58>)
 8001742:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001744:	4b0f      	ldr	r3, [pc, #60]	; (8001784 <MX_I2C2_Init+0x50>)
 8001746:	2200      	movs	r2, #0
 8001748:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800174a:	4b0e      	ldr	r3, [pc, #56]	; (8001784 <MX_I2C2_Init+0x50>)
 800174c:	2200      	movs	r2, #0
 800174e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001750:	4b0c      	ldr	r3, [pc, #48]	; (8001784 <MX_I2C2_Init+0x50>)
 8001752:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001756:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001758:	4b0a      	ldr	r3, [pc, #40]	; (8001784 <MX_I2C2_Init+0x50>)
 800175a:	2200      	movs	r2, #0
 800175c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800175e:	4b09      	ldr	r3, [pc, #36]	; (8001784 <MX_I2C2_Init+0x50>)
 8001760:	2200      	movs	r2, #0
 8001762:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001764:	4b07      	ldr	r3, [pc, #28]	; (8001784 <MX_I2C2_Init+0x50>)
 8001766:	2200      	movs	r2, #0
 8001768:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800176a:	4b06      	ldr	r3, [pc, #24]	; (8001784 <MX_I2C2_Init+0x50>)
 800176c:	2200      	movs	r2, #0
 800176e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001770:	4804      	ldr	r0, [pc, #16]	; (8001784 <MX_I2C2_Init+0x50>)
 8001772:	f001 fc17 	bl	8002fa4 <HAL_I2C_Init>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800177c:	f000 fa3a 	bl	8001bf4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001780:	bf00      	nop
 8001782:	bd80      	pop	{r7, pc}
 8001784:	200001f8 	.word	0x200001f8
 8001788:	40005800 	.word	0x40005800
 800178c:	00061a80 	.word	0x00061a80

08001790 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001794:	4b17      	ldr	r3, [pc, #92]	; (80017f4 <MX_SPI2_Init+0x64>)
 8001796:	4a18      	ldr	r2, [pc, #96]	; (80017f8 <MX_SPI2_Init+0x68>)
 8001798:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800179a:	4b16      	ldr	r3, [pc, #88]	; (80017f4 <MX_SPI2_Init+0x64>)
 800179c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80017a0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80017a2:	4b14      	ldr	r3, [pc, #80]	; (80017f4 <MX_SPI2_Init+0x64>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80017a8:	4b12      	ldr	r3, [pc, #72]	; (80017f4 <MX_SPI2_Init+0x64>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017ae:	4b11      	ldr	r3, [pc, #68]	; (80017f4 <MX_SPI2_Init+0x64>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017b4:	4b0f      	ldr	r3, [pc, #60]	; (80017f4 <MX_SPI2_Init+0x64>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80017ba:	4b0e      	ldr	r3, [pc, #56]	; (80017f4 <MX_SPI2_Init+0x64>)
 80017bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017c0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80017c2:	4b0c      	ldr	r3, [pc, #48]	; (80017f4 <MX_SPI2_Init+0x64>)
 80017c4:	2208      	movs	r2, #8
 80017c6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017c8:	4b0a      	ldr	r3, [pc, #40]	; (80017f4 <MX_SPI2_Init+0x64>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80017ce:	4b09      	ldr	r3, [pc, #36]	; (80017f4 <MX_SPI2_Init+0x64>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017d4:	4b07      	ldr	r3, [pc, #28]	; (80017f4 <MX_SPI2_Init+0x64>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80017da:	4b06      	ldr	r3, [pc, #24]	; (80017f4 <MX_SPI2_Init+0x64>)
 80017dc:	220a      	movs	r2, #10
 80017de:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80017e0:	4804      	ldr	r0, [pc, #16]	; (80017f4 <MX_SPI2_Init+0x64>)
 80017e2:	f005 fe23 	bl	800742c <HAL_SPI_Init>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80017ec:	f000 fa02 	bl	8001bf4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80017f0:	bf00      	nop
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	2000024c 	.word	0x2000024c
 80017f8:	40003800 	.word	0x40003800

080017fc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b086      	sub	sp, #24
 8001800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001802:	f107 0308 	add.w	r3, r7, #8
 8001806:	2200      	movs	r2, #0
 8001808:	601a      	str	r2, [r3, #0]
 800180a:	605a      	str	r2, [r3, #4]
 800180c:	609a      	str	r2, [r3, #8]
 800180e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001810:	463b      	mov	r3, r7
 8001812:	2200      	movs	r2, #0
 8001814:	601a      	str	r2, [r3, #0]
 8001816:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001818:	4b1c      	ldr	r3, [pc, #112]	; (800188c <MX_TIM4_Init+0x90>)
 800181a:	4a1d      	ldr	r2, [pc, #116]	; (8001890 <MX_TIM4_Init+0x94>)
 800181c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 160-1;
 800181e:	4b1b      	ldr	r3, [pc, #108]	; (800188c <MX_TIM4_Init+0x90>)
 8001820:	229f      	movs	r2, #159	; 0x9f
 8001822:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001824:	4b19      	ldr	r3, [pc, #100]	; (800188c <MX_TIM4_Init+0x90>)
 8001826:	2200      	movs	r2, #0
 8001828:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 800182a:	4b18      	ldr	r3, [pc, #96]	; (800188c <MX_TIM4_Init+0x90>)
 800182c:	2263      	movs	r2, #99	; 0x63
 800182e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001830:	4b16      	ldr	r3, [pc, #88]	; (800188c <MX_TIM4_Init+0x90>)
 8001832:	2200      	movs	r2, #0
 8001834:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001836:	4b15      	ldr	r3, [pc, #84]	; (800188c <MX_TIM4_Init+0x90>)
 8001838:	2200      	movs	r2, #0
 800183a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800183c:	4813      	ldr	r0, [pc, #76]	; (800188c <MX_TIM4_Init+0x90>)
 800183e:	f006 f9d1 	bl	8007be4 <HAL_TIM_Base_Init>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 8001848:	f000 f9d4 	bl	8001bf4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800184c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001850:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001852:	f107 0308 	add.w	r3, r7, #8
 8001856:	4619      	mov	r1, r3
 8001858:	480c      	ldr	r0, [pc, #48]	; (800188c <MX_TIM4_Init+0x90>)
 800185a:	f006 fbba 	bl	8007fd2 <HAL_TIM_ConfigClockSource>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 8001864:	f000 f9c6 	bl	8001bf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001868:	2300      	movs	r3, #0
 800186a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800186c:	2300      	movs	r3, #0
 800186e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001870:	463b      	mov	r3, r7
 8001872:	4619      	mov	r1, r3
 8001874:	4805      	ldr	r0, [pc, #20]	; (800188c <MX_TIM4_Init+0x90>)
 8001876:	f006 fdd5 	bl	8008424 <HAL_TIMEx_MasterConfigSynchronization>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8001880:	f000 f9b8 	bl	8001bf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001884:	bf00      	nop
 8001886:	3718      	adds	r7, #24
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	20000304 	.word	0x20000304
 8001890:	40000800 	.word	0x40000800

08001894 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800189a:	463b      	mov	r3, r7
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80018a2:	4b15      	ldr	r3, [pc, #84]	; (80018f8 <MX_TIM6_Init+0x64>)
 80018a4:	4a15      	ldr	r2, [pc, #84]	; (80018fc <MX_TIM6_Init+0x68>)
 80018a6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1600-1;
 80018a8:	4b13      	ldr	r3, [pc, #76]	; (80018f8 <MX_TIM6_Init+0x64>)
 80018aa:	f240 623f 	movw	r2, #1599	; 0x63f
 80018ae:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018b0:	4b11      	ldr	r3, [pc, #68]	; (80018f8 <MX_TIM6_Init+0x64>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 20-1;
 80018b6:	4b10      	ldr	r3, [pc, #64]	; (80018f8 <MX_TIM6_Init+0x64>)
 80018b8:	2213      	movs	r2, #19
 80018ba:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018bc:	4b0e      	ldr	r3, [pc, #56]	; (80018f8 <MX_TIM6_Init+0x64>)
 80018be:	2200      	movs	r2, #0
 80018c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80018c2:	480d      	ldr	r0, [pc, #52]	; (80018f8 <MX_TIM6_Init+0x64>)
 80018c4:	f006 f98e 	bl	8007be4 <HAL_TIM_Base_Init>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80018ce:	f000 f991 	bl	8001bf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018d2:	2300      	movs	r3, #0
 80018d4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018d6:	2300      	movs	r3, #0
 80018d8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80018da:	463b      	mov	r3, r7
 80018dc:	4619      	mov	r1, r3
 80018de:	4806      	ldr	r0, [pc, #24]	; (80018f8 <MX_TIM6_Init+0x64>)
 80018e0:	f006 fda0 	bl	8008424 <HAL_TIMEx_MasterConfigSynchronization>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80018ea:	f000 f983 	bl	8001bf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80018ee:	bf00      	nop
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	2000034c 	.word	0x2000034c
 80018fc:	40001000 	.word	0x40001000

08001900 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001906:	463b      	mov	r3, r7
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800190e:	4b15      	ldr	r3, [pc, #84]	; (8001964 <MX_TIM7_Init+0x64>)
 8001910:	4a15      	ldr	r2, [pc, #84]	; (8001968 <MX_TIM7_Init+0x68>)
 8001912:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 36000-1;
 8001914:	4b13      	ldr	r3, [pc, #76]	; (8001964 <MX_TIM7_Init+0x64>)
 8001916:	f648 429f 	movw	r2, #35999	; 0x8c9f
 800191a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800191c:	4b11      	ldr	r3, [pc, #68]	; (8001964 <MX_TIM7_Init+0x64>)
 800191e:	2200      	movs	r2, #0
 8001920:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 4000-1;
 8001922:	4b10      	ldr	r3, [pc, #64]	; (8001964 <MX_TIM7_Init+0x64>)
 8001924:	f640 729f 	movw	r2, #3999	; 0xf9f
 8001928:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800192a:	4b0e      	ldr	r3, [pc, #56]	; (8001964 <MX_TIM7_Init+0x64>)
 800192c:	2200      	movs	r2, #0
 800192e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001930:	480c      	ldr	r0, [pc, #48]	; (8001964 <MX_TIM7_Init+0x64>)
 8001932:	f006 f957 	bl	8007be4 <HAL_TIM_Base_Init>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 800193c:	f000 f95a 	bl	8001bf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001940:	2300      	movs	r3, #0
 8001942:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001944:	2300      	movs	r3, #0
 8001946:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001948:	463b      	mov	r3, r7
 800194a:	4619      	mov	r1, r3
 800194c:	4805      	ldr	r0, [pc, #20]	; (8001964 <MX_TIM7_Init+0x64>)
 800194e:	f006 fd69 	bl	8008424 <HAL_TIMEx_MasterConfigSynchronization>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001958:	f000 f94c 	bl	8001bf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800195c:	bf00      	nop
 800195e:	3708      	adds	r7, #8
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	20000394 	.word	0x20000394
 8001968:	40001400 	.word	0x40001400

0800196c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001972:	2300      	movs	r3, #0
 8001974:	607b      	str	r3, [r7, #4]
 8001976:	4b0c      	ldr	r3, [pc, #48]	; (80019a8 <MX_DMA_Init+0x3c>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197a:	4a0b      	ldr	r2, [pc, #44]	; (80019a8 <MX_DMA_Init+0x3c>)
 800197c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001980:	6313      	str	r3, [r2, #48]	; 0x30
 8001982:	4b09      	ldr	r3, [pc, #36]	; (80019a8 <MX_DMA_Init+0x3c>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001986:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800198a:	607b      	str	r3, [r7, #4]
 800198c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800198e:	2200      	movs	r2, #0
 8001990:	2100      	movs	r1, #0
 8001992:	200f      	movs	r0, #15
 8001994:	f000 fd61 	bl	800245a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001998:	200f      	movs	r0, #15
 800199a:	f000 fd7a 	bl	8002492 <HAL_NVIC_EnableIRQ>

}
 800199e:	bf00      	nop
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	40023800 	.word	0x40023800

080019ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b08a      	sub	sp, #40	; 0x28
 80019b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b2:	f107 0314 	add.w	r3, r7, #20
 80019b6:	2200      	movs	r2, #0
 80019b8:	601a      	str	r2, [r3, #0]
 80019ba:	605a      	str	r2, [r3, #4]
 80019bc:	609a      	str	r2, [r3, #8]
 80019be:	60da      	str	r2, [r3, #12]
 80019c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	613b      	str	r3, [r7, #16]
 80019c6:	4b49      	ldr	r3, [pc, #292]	; (8001aec <MX_GPIO_Init+0x140>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ca:	4a48      	ldr	r2, [pc, #288]	; (8001aec <MX_GPIO_Init+0x140>)
 80019cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019d0:	6313      	str	r3, [r2, #48]	; 0x30
 80019d2:	4b46      	ldr	r3, [pc, #280]	; (8001aec <MX_GPIO_Init+0x140>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019da:	613b      	str	r3, [r7, #16]
 80019dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019de:	2300      	movs	r3, #0
 80019e0:	60fb      	str	r3, [r7, #12]
 80019e2:	4b42      	ldr	r3, [pc, #264]	; (8001aec <MX_GPIO_Init+0x140>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e6:	4a41      	ldr	r2, [pc, #260]	; (8001aec <MX_GPIO_Init+0x140>)
 80019e8:	f043 0304 	orr.w	r3, r3, #4
 80019ec:	6313      	str	r3, [r2, #48]	; 0x30
 80019ee:	4b3f      	ldr	r3, [pc, #252]	; (8001aec <MX_GPIO_Init+0x140>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f2:	f003 0304 	and.w	r3, r3, #4
 80019f6:	60fb      	str	r3, [r7, #12]
 80019f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019fa:	2300      	movs	r3, #0
 80019fc:	60bb      	str	r3, [r7, #8]
 80019fe:	4b3b      	ldr	r3, [pc, #236]	; (8001aec <MX_GPIO_Init+0x140>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a02:	4a3a      	ldr	r2, [pc, #232]	; (8001aec <MX_GPIO_Init+0x140>)
 8001a04:	f043 0302 	orr.w	r3, r3, #2
 8001a08:	6313      	str	r3, [r2, #48]	; 0x30
 8001a0a:	4b38      	ldr	r3, [pc, #224]	; (8001aec <MX_GPIO_Init+0x140>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0e:	f003 0302 	and.w	r3, r3, #2
 8001a12:	60bb      	str	r3, [r7, #8]
 8001a14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a16:	2300      	movs	r3, #0
 8001a18:	607b      	str	r3, [r7, #4]
 8001a1a:	4b34      	ldr	r3, [pc, #208]	; (8001aec <MX_GPIO_Init+0x140>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1e:	4a33      	ldr	r2, [pc, #204]	; (8001aec <MX_GPIO_Init+0x140>)
 8001a20:	f043 0308 	orr.w	r3, r3, #8
 8001a24:	6313      	str	r3, [r2, #48]	; 0x30
 8001a26:	4b31      	ldr	r3, [pc, #196]	; (8001aec <MX_GPIO_Init+0x140>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2a:	f003 0308 	and.w	r3, r3, #8
 8001a2e:	607b      	str	r3, [r7, #4]
 8001a30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a32:	2300      	movs	r3, #0
 8001a34:	603b      	str	r3, [r7, #0]
 8001a36:	4b2d      	ldr	r3, [pc, #180]	; (8001aec <MX_GPIO_Init+0x140>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3a:	4a2c      	ldr	r2, [pc, #176]	; (8001aec <MX_GPIO_Init+0x140>)
 8001a3c:	f043 0301 	orr.w	r3, r3, #1
 8001a40:	6313      	str	r3, [r2, #48]	; 0x30
 8001a42:	4b2a      	ldr	r3, [pc, #168]	; (8001aec <MX_GPIO_Init+0x140>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	603b      	str	r3, [r7, #0]
 8001a4c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD1_DC_Pin|LCD1_CS_Pin|LCD2_DC_Pin, GPIO_PIN_RESET);
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f44f 7160 	mov.w	r1, #896	; 0x380
 8001a54:	4826      	ldr	r0, [pc, #152]	; (8001af0 <MX_GPIO_Init+0x144>)
 8001a56:	f001 fa8b 	bl	8002f70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD2_CS_Pin|LCD2_RST_Pin|LCD1_RST_Pin, GPIO_PIN_RESET);
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8001a60:	4824      	ldr	r0, [pc, #144]	; (8001af4 <MX_GPIO_Init+0x148>)
 8001a62:	f001 fa85 	bl	8002f70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ROW0_Pin|ROW1_Pin|ROW2_Pin|ROW3_Pin
 8001a66:	2200      	movs	r2, #0
 8001a68:	217f      	movs	r1, #127	; 0x7f
 8001a6a:	4823      	ldr	r0, [pc, #140]	; (8001af8 <MX_GPIO_Init+0x14c>)
 8001a6c:	f001 fa80 	bl	8002f70 <HAL_GPIO_WritePin>
                          |ROW4_Pin|ROW5_Pin|ROW6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : COL1_Pin COL2_Pin COL3_Pin COL4_Pin
                           COL5_Pin ENC_A_Pin ENC_B_Pin ENC_SW_Pin
                           COL0_Pin */
  GPIO_InitStruct.Pin = COL1_Pin|COL2_Pin|COL3_Pin|COL4_Pin
 8001a70:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001a74:	617b      	str	r3, [r7, #20]
                          |COL5_Pin|ENC_A_Pin|ENC_B_Pin|ENC_SW_Pin
                          |COL0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a76:	2300      	movs	r3, #0
 8001a78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a7e:	f107 0314 	add.w	r3, r7, #20
 8001a82:	4619      	mov	r1, r3
 8001a84:	481c      	ldr	r0, [pc, #112]	; (8001af8 <MX_GPIO_Init+0x14c>)
 8001a86:	f001 f8bf 	bl	8002c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD1_DC_Pin LCD1_CS_Pin LCD2_DC_Pin */
  GPIO_InitStruct.Pin = LCD1_DC_Pin|LCD1_CS_Pin|LCD2_DC_Pin;
 8001a8a:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001a8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a90:	2301      	movs	r3, #1
 8001a92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a94:	2300      	movs	r3, #0
 8001a96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a9c:	f107 0314 	add.w	r3, r7, #20
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4813      	ldr	r0, [pc, #76]	; (8001af0 <MX_GPIO_Init+0x144>)
 8001aa4:	f001 f8b0 	bl	8002c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD2_CS_Pin LCD2_RST_Pin LCD1_RST_Pin */
  GPIO_InitStruct.Pin = LCD2_CS_Pin|LCD2_RST_Pin|LCD1_RST_Pin;
 8001aa8:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001aac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aba:	f107 0314 	add.w	r3, r7, #20
 8001abe:	4619      	mov	r1, r3
 8001ac0:	480c      	ldr	r0, [pc, #48]	; (8001af4 <MX_GPIO_Init+0x148>)
 8001ac2:	f001 f8a1 	bl	8002c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROW0_Pin ROW1_Pin ROW2_Pin ROW3_Pin
                           ROW4_Pin ROW5_Pin ROW6_Pin */
  GPIO_InitStruct.Pin = ROW0_Pin|ROW1_Pin|ROW2_Pin|ROW3_Pin
 8001ac6:	237f      	movs	r3, #127	; 0x7f
 8001ac8:	617b      	str	r3, [r7, #20]
                          |ROW4_Pin|ROW5_Pin|ROW6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aca:	2301      	movs	r3, #1
 8001acc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ad6:	f107 0314 	add.w	r3, r7, #20
 8001ada:	4619      	mov	r1, r3
 8001adc:	4806      	ldr	r0, [pc, #24]	; (8001af8 <MX_GPIO_Init+0x14c>)
 8001ade:	f001 f893 	bl	8002c08 <HAL_GPIO_Init>

}
 8001ae2:	bf00      	nop
 8001ae4:	3728      	adds	r7, #40	; 0x28
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	40023800 	.word	0x40023800
 8001af0:	40020800 	.word	0x40020800
 8001af4:	40020000 	.word	0x40020000
 8001af8:	40020c00 	.word	0x40020c00

08001afc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

// Callback: timer has reset
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]

	// Send USB data
	if (htim == &htim4) {
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	4a2f      	ldr	r2, [pc, #188]	; (8001bc4 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d107      	bne.n	8001b1c <HAL_TIM_PeriodElapsedCallback+0x20>
	    // send HID report
		record_keys();
 8001b0c:	f7ff fbda 	bl	80012c4 <record_keys>
		USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &keyboardhid, sizeof(keyboardhid));
 8001b10:	2208      	movs	r2, #8
 8001b12:	492d      	ldr	r1, [pc, #180]	; (8001bc8 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001b14:	482d      	ldr	r0, [pc, #180]	; (8001bcc <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001b16:	f008 fb19 	bl	800a14c <USBD_HID_SendReport>
		charsInCycle = 0;
		writeScreen = 1;


	}
}
 8001b1a:	e04e      	b.n	8001bba <HAL_TIM_PeriodElapsedCallback+0xbe>
	else if (htim == &htim6) {
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	4a2c      	ldr	r2, [pc, #176]	; (8001bd0 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d104      	bne.n	8001b2e <HAL_TIM_PeriodElapsedCallback+0x32>
		scan_keypad();
 8001b24:	f7ff fa1c 	bl	8000f60 <scan_keypad>
		scan_rotary();
 8001b28:	f7ff fb54 	bl	80011d4 <scan_rotary>
}
 8001b2c:	e045      	b.n	8001bba <HAL_TIM_PeriodElapsedCallback+0xbe>
	else if (htim == &htim7) {
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4a28      	ldr	r2, [pc, #160]	; (8001bd4 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d141      	bne.n	8001bba <HAL_TIM_PeriodElapsedCallback+0xbe>
		if (charsInCycle == 0) {
 8001b36:	4b28      	ldr	r3, [pc, #160]	; (8001bd8 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d117      	bne.n	8001b6e <HAL_TIM_PeriodElapsedCallback+0x72>
			dryCycles++;
 8001b3e:	4b27      	ldr	r3, [pc, #156]	; (8001bdc <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	3301      	adds	r3, #1
 8001b44:	4a25      	ldr	r2, [pc, #148]	; (8001bdc <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001b46:	6013      	str	r3, [r2, #0]
			if (dryCycles == 5) {
 8001b48:	4b24      	ldr	r3, [pc, #144]	; (8001bdc <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2b05      	cmp	r3, #5
 8001b4e:	d10e      	bne.n	8001b6e <HAL_TIM_PeriodElapsedCallback+0x72>
				charCount = 0;
 8001b50:	4b23      	ldr	r3, [pc, #140]	; (8001be0 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	601a      	str	r2, [r3, #0]
				charsInCycle = 0;
 8001b56:	4b20      	ldr	r3, [pc, #128]	; (8001bd8 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]
				dryCycles = 0;
 8001b5c:	4b1f      	ldr	r3, [pc, #124]	; (8001bdc <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	601a      	str	r2, [r3, #0]
				numCycles = 0;
 8001b62:	4b20      	ldr	r3, [pc, #128]	; (8001be4 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim7);
 8001b68:	481a      	ldr	r0, [pc, #104]	; (8001bd4 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001b6a:	f006 f8fb 	bl	8007d64 <HAL_TIM_Base_Stop_IT>
		numCycles++;
 8001b6e:	4b1d      	ldr	r3, [pc, #116]	; (8001be4 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	3301      	adds	r3, #1
 8001b74:	4a1b      	ldr	r2, [pc, #108]	; (8001be4 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001b76:	6013      	str	r3, [r2, #0]
		wpm = (charCount / 5.0f) / ((2.0f * numCycles) / 60.0f);
 8001b78:	4b19      	ldr	r3, [pc, #100]	; (8001be0 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	ee07 3a90 	vmov	s15, r3
 8001b80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b84:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001b88:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001b8c:	4b15      	ldr	r3, [pc, #84]	; (8001be4 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	ee07 3a90 	vmov	s15, r3
 8001b94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b98:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001b9c:	ed9f 6a12 	vldr	s12, [pc, #72]	; 8001be8 <HAL_TIM_PeriodElapsedCallback+0xec>
 8001ba0:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8001ba4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ba8:	4b10      	ldr	r3, [pc, #64]	; (8001bec <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001baa:	edc3 7a00 	vstr	s15, [r3]
		charsInCycle = 0;
 8001bae:	4b0a      	ldr	r3, [pc, #40]	; (8001bd8 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
		writeScreen = 1;
 8001bb4:	4b0e      	ldr	r3, [pc, #56]	; (8001bf0 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	601a      	str	r2, [r3, #0]
}
 8001bba:	bf00      	nop
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	20000304 	.word	0x20000304
 8001bc8:	20000404 	.word	0x20000404
 8001bcc:	20000418 	.word	0x20000418
 8001bd0:	2000034c 	.word	0x2000034c
 8001bd4:	20000394 	.word	0x20000394
 8001bd8:	200003e0 	.word	0x200003e0
 8001bdc:	200003e8 	.word	0x200003e8
 8001be0:	200003dc 	.word	0x200003dc
 8001be4:	200003e4 	.word	0x200003e4
 8001be8:	42700000 	.word	0x42700000
 8001bec:	200003ec 	.word	0x200003ec
 8001bf0:	20000024 	.word	0x20000024

08001bf4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bf8:	b672      	cpsid	i
}
 8001bfa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bfc:	e7fe      	b.n	8001bfc <Error_Handler+0x8>
	...

08001c00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c06:	2300      	movs	r3, #0
 8001c08:	607b      	str	r3, [r7, #4]
 8001c0a:	4b10      	ldr	r3, [pc, #64]	; (8001c4c <HAL_MspInit+0x4c>)
 8001c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0e:	4a0f      	ldr	r2, [pc, #60]	; (8001c4c <HAL_MspInit+0x4c>)
 8001c10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c14:	6453      	str	r3, [r2, #68]	; 0x44
 8001c16:	4b0d      	ldr	r3, [pc, #52]	; (8001c4c <HAL_MspInit+0x4c>)
 8001c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c1e:	607b      	str	r3, [r7, #4]
 8001c20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c22:	2300      	movs	r3, #0
 8001c24:	603b      	str	r3, [r7, #0]
 8001c26:	4b09      	ldr	r3, [pc, #36]	; (8001c4c <HAL_MspInit+0x4c>)
 8001c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2a:	4a08      	ldr	r2, [pc, #32]	; (8001c4c <HAL_MspInit+0x4c>)
 8001c2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c30:	6413      	str	r3, [r2, #64]	; 0x40
 8001c32:	4b06      	ldr	r3, [pc, #24]	; (8001c4c <HAL_MspInit+0x4c>)
 8001c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c3a:	603b      	str	r3, [r7, #0]
 8001c3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c3e:	bf00      	nop
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	40023800 	.word	0x40023800

08001c50 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b08a      	sub	sp, #40	; 0x28
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c58:	f107 0314 	add.w	r3, r7, #20
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	605a      	str	r2, [r3, #4]
 8001c62:	609a      	str	r2, [r3, #8]
 8001c64:	60da      	str	r2, [r3, #12]
 8001c66:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a1d      	ldr	r2, [pc, #116]	; (8001ce4 <HAL_I2C_MspInit+0x94>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d134      	bne.n	8001cdc <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c72:	2300      	movs	r3, #0
 8001c74:	613b      	str	r3, [r7, #16]
 8001c76:	4b1c      	ldr	r3, [pc, #112]	; (8001ce8 <HAL_I2C_MspInit+0x98>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7a:	4a1b      	ldr	r2, [pc, #108]	; (8001ce8 <HAL_I2C_MspInit+0x98>)
 8001c7c:	f043 0302 	orr.w	r3, r3, #2
 8001c80:	6313      	str	r3, [r2, #48]	; 0x30
 8001c82:	4b19      	ldr	r3, [pc, #100]	; (8001ce8 <HAL_I2C_MspInit+0x98>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c86:	f003 0302 	and.w	r3, r3, #2
 8001c8a:	613b      	str	r3, [r7, #16]
 8001c8c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001c8e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001c92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c94:	2312      	movs	r3, #18
 8001c96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001ca0:	2304      	movs	r3, #4
 8001ca2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ca4:	f107 0314 	add.w	r3, r7, #20
 8001ca8:	4619      	mov	r1, r3
 8001caa:	4810      	ldr	r0, [pc, #64]	; (8001cec <HAL_I2C_MspInit+0x9c>)
 8001cac:	f000 ffac 	bl	8002c08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	60fb      	str	r3, [r7, #12]
 8001cb4:	4b0c      	ldr	r3, [pc, #48]	; (8001ce8 <HAL_I2C_MspInit+0x98>)
 8001cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb8:	4a0b      	ldr	r2, [pc, #44]	; (8001ce8 <HAL_I2C_MspInit+0x98>)
 8001cba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001cbe:	6413      	str	r3, [r2, #64]	; 0x40
 8001cc0:	4b09      	ldr	r3, [pc, #36]	; (8001ce8 <HAL_I2C_MspInit+0x98>)
 8001cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cc8:	60fb      	str	r3, [r7, #12]
 8001cca:	68fb      	ldr	r3, [r7, #12]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001ccc:	2200      	movs	r2, #0
 8001cce:	2100      	movs	r1, #0
 8001cd0:	2021      	movs	r0, #33	; 0x21
 8001cd2:	f000 fbc2 	bl	800245a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001cd6:	2021      	movs	r0, #33	; 0x21
 8001cd8:	f000 fbdb 	bl	8002492 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001cdc:	bf00      	nop
 8001cde:	3728      	adds	r7, #40	; 0x28
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	40005800 	.word	0x40005800
 8001ce8:	40023800 	.word	0x40023800
 8001cec:	40020400 	.word	0x40020400

08001cf0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b08a      	sub	sp, #40	; 0x28
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf8:	f107 0314 	add.w	r3, r7, #20
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	605a      	str	r2, [r3, #4]
 8001d02:	609a      	str	r2, [r3, #8]
 8001d04:	60da      	str	r2, [r3, #12]
 8001d06:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a3f      	ldr	r2, [pc, #252]	; (8001e0c <HAL_SPI_MspInit+0x11c>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d177      	bne.n	8001e02 <HAL_SPI_MspInit+0x112>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001d12:	2300      	movs	r3, #0
 8001d14:	613b      	str	r3, [r7, #16]
 8001d16:	4b3e      	ldr	r3, [pc, #248]	; (8001e10 <HAL_SPI_MspInit+0x120>)
 8001d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1a:	4a3d      	ldr	r2, [pc, #244]	; (8001e10 <HAL_SPI_MspInit+0x120>)
 8001d1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d20:	6413      	str	r3, [r2, #64]	; 0x40
 8001d22:	4b3b      	ldr	r3, [pc, #236]	; (8001e10 <HAL_SPI_MspInit+0x120>)
 8001d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d2a:	613b      	str	r3, [r7, #16]
 8001d2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d2e:	2300      	movs	r3, #0
 8001d30:	60fb      	str	r3, [r7, #12]
 8001d32:	4b37      	ldr	r3, [pc, #220]	; (8001e10 <HAL_SPI_MspInit+0x120>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d36:	4a36      	ldr	r2, [pc, #216]	; (8001e10 <HAL_SPI_MspInit+0x120>)
 8001d38:	f043 0304 	orr.w	r3, r3, #4
 8001d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d3e:	4b34      	ldr	r3, [pc, #208]	; (8001e10 <HAL_SPI_MspInit+0x120>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d42:	f003 0304 	and.w	r3, r3, #4
 8001d46:	60fb      	str	r3, [r7, #12]
 8001d48:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	60bb      	str	r3, [r7, #8]
 8001d4e:	4b30      	ldr	r3, [pc, #192]	; (8001e10 <HAL_SPI_MspInit+0x120>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d52:	4a2f      	ldr	r2, [pc, #188]	; (8001e10 <HAL_SPI_MspInit+0x120>)
 8001d54:	f043 0302 	orr.w	r3, r3, #2
 8001d58:	6313      	str	r3, [r2, #48]	; 0x30
 8001d5a:	4b2d      	ldr	r3, [pc, #180]	; (8001e10 <HAL_SPI_MspInit+0x120>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5e:	f003 0302 	and.w	r3, r3, #2
 8001d62:	60bb      	str	r3, [r7, #8]
 8001d64:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d66:	2308      	movs	r3, #8
 8001d68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d72:	2303      	movs	r3, #3
 8001d74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d76:	2305      	movs	r3, #5
 8001d78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d7a:	f107 0314 	add.w	r3, r7, #20
 8001d7e:	4619      	mov	r1, r3
 8001d80:	4824      	ldr	r0, [pc, #144]	; (8001e14 <HAL_SPI_MspInit+0x124>)
 8001d82:	f000 ff41 	bl	8002c08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001d86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d90:	2300      	movs	r3, #0
 8001d92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d94:	2303      	movs	r3, #3
 8001d96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d98:	2305      	movs	r3, #5
 8001d9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d9c:	f107 0314 	add.w	r3, r7, #20
 8001da0:	4619      	mov	r1, r3
 8001da2:	481d      	ldr	r0, [pc, #116]	; (8001e18 <HAL_SPI_MspInit+0x128>)
 8001da4:	f000 ff30 	bl	8002c08 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8001da8:	4b1c      	ldr	r3, [pc, #112]	; (8001e1c <HAL_SPI_MspInit+0x12c>)
 8001daa:	4a1d      	ldr	r2, [pc, #116]	; (8001e20 <HAL_SPI_MspInit+0x130>)
 8001dac:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8001dae:	4b1b      	ldr	r3, [pc, #108]	; (8001e1c <HAL_SPI_MspInit+0x12c>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001db4:	4b19      	ldr	r3, [pc, #100]	; (8001e1c <HAL_SPI_MspInit+0x12c>)
 8001db6:	2240      	movs	r2, #64	; 0x40
 8001db8:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dba:	4b18      	ldr	r3, [pc, #96]	; (8001e1c <HAL_SPI_MspInit+0x12c>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001dc0:	4b16      	ldr	r3, [pc, #88]	; (8001e1c <HAL_SPI_MspInit+0x12c>)
 8001dc2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001dc6:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001dc8:	4b14      	ldr	r3, [pc, #80]	; (8001e1c <HAL_SPI_MspInit+0x12c>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001dce:	4b13      	ldr	r3, [pc, #76]	; (8001e1c <HAL_SPI_MspInit+0x12c>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001dd4:	4b11      	ldr	r3, [pc, #68]	; (8001e1c <HAL_SPI_MspInit+0x12c>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001dda:	4b10      	ldr	r3, [pc, #64]	; (8001e1c <HAL_SPI_MspInit+0x12c>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001de0:	4b0e      	ldr	r3, [pc, #56]	; (8001e1c <HAL_SPI_MspInit+0x12c>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001de6:	480d      	ldr	r0, [pc, #52]	; (8001e1c <HAL_SPI_MspInit+0x12c>)
 8001de8:	f000 fb6e 	bl	80024c8 <HAL_DMA_Init>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <HAL_SPI_MspInit+0x106>
    {
      Error_Handler();
 8001df2:	f7ff feff 	bl	8001bf4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a08      	ldr	r2, [pc, #32]	; (8001e1c <HAL_SPI_MspInit+0x12c>)
 8001dfa:	649a      	str	r2, [r3, #72]	; 0x48
 8001dfc:	4a07      	ldr	r2, [pc, #28]	; (8001e1c <HAL_SPI_MspInit+0x12c>)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001e02:	bf00      	nop
 8001e04:	3728      	adds	r7, #40	; 0x28
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	40003800 	.word	0x40003800
 8001e10:	40023800 	.word	0x40023800
 8001e14:	40020800 	.word	0x40020800
 8001e18:	40020400 	.word	0x40020400
 8001e1c:	200002a4 	.word	0x200002a4
 8001e20:	40026070 	.word	0x40026070

08001e24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b086      	sub	sp, #24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a2a      	ldr	r2, [pc, #168]	; (8001edc <HAL_TIM_Base_MspInit+0xb8>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d116      	bne.n	8001e64 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001e36:	2300      	movs	r3, #0
 8001e38:	617b      	str	r3, [r7, #20]
 8001e3a:	4b29      	ldr	r3, [pc, #164]	; (8001ee0 <HAL_TIM_Base_MspInit+0xbc>)
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3e:	4a28      	ldr	r2, [pc, #160]	; (8001ee0 <HAL_TIM_Base_MspInit+0xbc>)
 8001e40:	f043 0304 	orr.w	r3, r3, #4
 8001e44:	6413      	str	r3, [r2, #64]	; 0x40
 8001e46:	4b26      	ldr	r3, [pc, #152]	; (8001ee0 <HAL_TIM_Base_MspInit+0xbc>)
 8001e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4a:	f003 0304 	and.w	r3, r3, #4
 8001e4e:	617b      	str	r3, [r7, #20]
 8001e50:	697b      	ldr	r3, [r7, #20]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001e52:	2200      	movs	r2, #0
 8001e54:	2100      	movs	r1, #0
 8001e56:	201e      	movs	r0, #30
 8001e58:	f000 faff 	bl	800245a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001e5c:	201e      	movs	r0, #30
 8001e5e:	f000 fb18 	bl	8002492 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001e62:	e036      	b.n	8001ed2 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM6)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a1e      	ldr	r2, [pc, #120]	; (8001ee4 <HAL_TIM_Base_MspInit+0xc0>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d116      	bne.n	8001e9c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001e6e:	2300      	movs	r3, #0
 8001e70:	613b      	str	r3, [r7, #16]
 8001e72:	4b1b      	ldr	r3, [pc, #108]	; (8001ee0 <HAL_TIM_Base_MspInit+0xbc>)
 8001e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e76:	4a1a      	ldr	r2, [pc, #104]	; (8001ee0 <HAL_TIM_Base_MspInit+0xbc>)
 8001e78:	f043 0310 	orr.w	r3, r3, #16
 8001e7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e7e:	4b18      	ldr	r3, [pc, #96]	; (8001ee0 <HAL_TIM_Base_MspInit+0xbc>)
 8001e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e82:	f003 0310 	and.w	r3, r3, #16
 8001e86:	613b      	str	r3, [r7, #16]
 8001e88:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	2036      	movs	r0, #54	; 0x36
 8001e90:	f000 fae3 	bl	800245a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001e94:	2036      	movs	r0, #54	; 0x36
 8001e96:	f000 fafc 	bl	8002492 <HAL_NVIC_EnableIRQ>
}
 8001e9a:	e01a      	b.n	8001ed2 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM7)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a11      	ldr	r2, [pc, #68]	; (8001ee8 <HAL_TIM_Base_MspInit+0xc4>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d115      	bne.n	8001ed2 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	60fb      	str	r3, [r7, #12]
 8001eaa:	4b0d      	ldr	r3, [pc, #52]	; (8001ee0 <HAL_TIM_Base_MspInit+0xbc>)
 8001eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eae:	4a0c      	ldr	r2, [pc, #48]	; (8001ee0 <HAL_TIM_Base_MspInit+0xbc>)
 8001eb0:	f043 0320 	orr.w	r3, r3, #32
 8001eb4:	6413      	str	r3, [r2, #64]	; 0x40
 8001eb6:	4b0a      	ldr	r3, [pc, #40]	; (8001ee0 <HAL_TIM_Base_MspInit+0xbc>)
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eba:	f003 0320 	and.w	r3, r3, #32
 8001ebe:	60fb      	str	r3, [r7, #12]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	2100      	movs	r1, #0
 8001ec6:	2037      	movs	r0, #55	; 0x37
 8001ec8:	f000 fac7 	bl	800245a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001ecc:	2037      	movs	r0, #55	; 0x37
 8001ece:	f000 fae0 	bl	8002492 <HAL_NVIC_EnableIRQ>
}
 8001ed2:	bf00      	nop
 8001ed4:	3718      	adds	r7, #24
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	40000800 	.word	0x40000800
 8001ee0:	40023800 	.word	0x40023800
 8001ee4:	40001000 	.word	0x40001000
 8001ee8:	40001400 	.word	0x40001400

08001eec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ef0:	e7fe      	b.n	8001ef0 <NMI_Handler+0x4>

08001ef2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ef6:	e7fe      	b.n	8001ef6 <HardFault_Handler+0x4>

08001ef8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001efc:	e7fe      	b.n	8001efc <MemManage_Handler+0x4>

08001efe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001efe:	b480      	push	{r7}
 8001f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f02:	e7fe      	b.n	8001f02 <BusFault_Handler+0x4>

08001f04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f08:	e7fe      	b.n	8001f08 <UsageFault_Handler+0x4>

08001f0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f0e:	bf00      	nop
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f1c:	bf00      	nop
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr

08001f26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f26:	b480      	push	{r7}
 8001f28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f2a:	bf00      	nop
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f38:	f000 f970 	bl	800221c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f3c:	bf00      	nop
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001f44:	4802      	ldr	r0, [pc, #8]	; (8001f50 <DMA1_Stream4_IRQHandler+0x10>)
 8001f46:	f000 fbe7 	bl	8002718 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001f4a:	bf00      	nop
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	200002a4 	.word	0x200002a4

08001f54 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001f58:	4802      	ldr	r0, [pc, #8]	; (8001f64 <TIM4_IRQHandler+0x10>)
 8001f5a:	f005 ff32 	bl	8007dc2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001f5e:	bf00      	nop
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	20000304 	.word	0x20000304

08001f68 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001f6c:	4802      	ldr	r0, [pc, #8]	; (8001f78 <I2C2_EV_IRQHandler+0x10>)
 8001f6e:	f001 fc81 	bl	8003874 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001f72:	bf00      	nop
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	200001f8 	.word	0x200001f8

08001f7c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001f80:	4802      	ldr	r0, [pc, #8]	; (8001f8c <TIM6_DAC_IRQHandler+0x10>)
 8001f82:	f005 ff1e 	bl	8007dc2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001f86:	bf00      	nop
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	2000034c 	.word	0x2000034c

08001f90 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001f94:	4802      	ldr	r0, [pc, #8]	; (8001fa0 <TIM7_IRQHandler+0x10>)
 8001f96:	f005 ff14 	bl	8007dc2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001f9a:	bf00      	nop
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	20000394 	.word	0x20000394

08001fa4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001fa8:	4802      	ldr	r0, [pc, #8]	; (8001fb4 <OTG_FS_IRQHandler+0x10>)
 8001faa:	f003 fca5 	bl	80058f8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001fae:	bf00      	nop
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	200008f4 	.word	0x200008f4

08001fb8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b086      	sub	sp, #24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	60f8      	str	r0, [r7, #12]
 8001fc0:	60b9      	str	r1, [r7, #8]
 8001fc2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	617b      	str	r3, [r7, #20]
 8001fc8:	e00a      	b.n	8001fe0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001fca:	f3af 8000 	nop.w
 8001fce:	4601      	mov	r1, r0
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	1c5a      	adds	r2, r3, #1
 8001fd4:	60ba      	str	r2, [r7, #8]
 8001fd6:	b2ca      	uxtb	r2, r1
 8001fd8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	3301      	adds	r3, #1
 8001fde:	617b      	str	r3, [r7, #20]
 8001fe0:	697a      	ldr	r2, [r7, #20]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	dbf0      	blt.n	8001fca <_read+0x12>
	}

return len;
 8001fe8:	687b      	ldr	r3, [r7, #4]
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3718      	adds	r7, #24
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b086      	sub	sp, #24
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	60f8      	str	r0, [r7, #12]
 8001ffa:	60b9      	str	r1, [r7, #8]
 8001ffc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ffe:	2300      	movs	r3, #0
 8002000:	617b      	str	r3, [r7, #20]
 8002002:	e009      	b.n	8002018 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	1c5a      	adds	r2, r3, #1
 8002008:	60ba      	str	r2, [r7, #8]
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	4618      	mov	r0, r3
 800200e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	3301      	adds	r3, #1
 8002016:	617b      	str	r3, [r7, #20]
 8002018:	697a      	ldr	r2, [r7, #20]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	429a      	cmp	r2, r3
 800201e:	dbf1      	blt.n	8002004 <_write+0x12>
	}
	return len;
 8002020:	687b      	ldr	r3, [r7, #4]
}
 8002022:	4618      	mov	r0, r3
 8002024:	3718      	adds	r7, #24
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <_close>:

int _close(int file)
{
 800202a:	b480      	push	{r7}
 800202c:	b083      	sub	sp, #12
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
	return -1;
 8002032:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002036:	4618      	mov	r0, r3
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr

08002042 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002042:	b480      	push	{r7}
 8002044:	b083      	sub	sp, #12
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
 800204a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002052:	605a      	str	r2, [r3, #4]
	return 0;
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	370c      	adds	r7, #12
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr

08002062 <_isatty>:

int _isatty(int file)
{
 8002062:	b480      	push	{r7}
 8002064:	b083      	sub	sp, #12
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
	return 1;
 800206a:	2301      	movs	r3, #1
}
 800206c:	4618      	mov	r0, r3
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002078:	b480      	push	{r7}
 800207a:	b085      	sub	sp, #20
 800207c:	af00      	add	r7, sp, #0
 800207e:	60f8      	str	r0, [r7, #12]
 8002080:	60b9      	str	r1, [r7, #8]
 8002082:	607a      	str	r2, [r7, #4]
	return 0;
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3714      	adds	r7, #20
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
	...

08002094 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b086      	sub	sp, #24
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800209c:	4a14      	ldr	r2, [pc, #80]	; (80020f0 <_sbrk+0x5c>)
 800209e:	4b15      	ldr	r3, [pc, #84]	; (80020f4 <_sbrk+0x60>)
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020a8:	4b13      	ldr	r3, [pc, #76]	; (80020f8 <_sbrk+0x64>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d102      	bne.n	80020b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020b0:	4b11      	ldr	r3, [pc, #68]	; (80020f8 <_sbrk+0x64>)
 80020b2:	4a12      	ldr	r2, [pc, #72]	; (80020fc <_sbrk+0x68>)
 80020b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020b6:	4b10      	ldr	r3, [pc, #64]	; (80020f8 <_sbrk+0x64>)
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4413      	add	r3, r2
 80020be:	693a      	ldr	r2, [r7, #16]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d207      	bcs.n	80020d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020c4:	f00a f810 	bl	800c0e8 <__errno>
 80020c8:	4603      	mov	r3, r0
 80020ca:	220c      	movs	r2, #12
 80020cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020ce:	f04f 33ff 	mov.w	r3, #4294967295
 80020d2:	e009      	b.n	80020e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020d4:	4b08      	ldr	r3, [pc, #32]	; (80020f8 <_sbrk+0x64>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020da:	4b07      	ldr	r3, [pc, #28]	; (80020f8 <_sbrk+0x64>)
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4413      	add	r3, r2
 80020e2:	4a05      	ldr	r2, [pc, #20]	; (80020f8 <_sbrk+0x64>)
 80020e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020e6:	68fb      	ldr	r3, [r7, #12]
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3718      	adds	r7, #24
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	20020000 	.word	0x20020000
 80020f4:	00000400 	.word	0x00000400
 80020f8:	2000040c 	.word	0x2000040c
 80020fc:	20000e28 	.word	0x20000e28

08002100 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002104:	4b06      	ldr	r3, [pc, #24]	; (8002120 <SystemInit+0x20>)
 8002106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800210a:	4a05      	ldr	r2, [pc, #20]	; (8002120 <SystemInit+0x20>)
 800210c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002110:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002114:	bf00      	nop
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	e000ed00 	.word	0xe000ed00

08002124 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002124:	f8df d034 	ldr.w	sp, [pc, #52]	; 800215c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002128:	480d      	ldr	r0, [pc, #52]	; (8002160 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800212a:	490e      	ldr	r1, [pc, #56]	; (8002164 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800212c:	4a0e      	ldr	r2, [pc, #56]	; (8002168 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800212e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002130:	e002      	b.n	8002138 <LoopCopyDataInit>

08002132 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002132:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002134:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002136:	3304      	adds	r3, #4

08002138 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002138:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800213a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800213c:	d3f9      	bcc.n	8002132 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800213e:	4a0b      	ldr	r2, [pc, #44]	; (800216c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002140:	4c0b      	ldr	r4, [pc, #44]	; (8002170 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002142:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002144:	e001      	b.n	800214a <LoopFillZerobss>

08002146 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002146:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002148:	3204      	adds	r2, #4

0800214a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800214a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800214c:	d3fb      	bcc.n	8002146 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800214e:	f7ff ffd7 	bl	8002100 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002152:	f009 ffcf 	bl	800c0f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002156:	f7ff f9bf 	bl	80014d8 <main>
  bx  lr    
 800215a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800215c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002160:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002164:	200001ac 	.word	0x200001ac
  ldr r2, =_sidata
 8002168:	08017bc0 	.word	0x08017bc0
  ldr r2, =_sbss
 800216c:	200001ac 	.word	0x200001ac
  ldr r4, =_ebss
 8002170:	20000e24 	.word	0x20000e24

08002174 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002174:	e7fe      	b.n	8002174 <ADC_IRQHandler>
	...

08002178 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800217c:	4b0e      	ldr	r3, [pc, #56]	; (80021b8 <HAL_Init+0x40>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a0d      	ldr	r2, [pc, #52]	; (80021b8 <HAL_Init+0x40>)
 8002182:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002186:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002188:	4b0b      	ldr	r3, [pc, #44]	; (80021b8 <HAL_Init+0x40>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a0a      	ldr	r2, [pc, #40]	; (80021b8 <HAL_Init+0x40>)
 800218e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002192:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002194:	4b08      	ldr	r3, [pc, #32]	; (80021b8 <HAL_Init+0x40>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a07      	ldr	r2, [pc, #28]	; (80021b8 <HAL_Init+0x40>)
 800219a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800219e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021a0:	2003      	movs	r0, #3
 80021a2:	f000 f94f 	bl	8002444 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021a6:	200f      	movs	r0, #15
 80021a8:	f000 f808 	bl	80021bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021ac:	f7ff fd28 	bl	8001c00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021b0:	2300      	movs	r3, #0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	40023c00 	.word	0x40023c00

080021bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021c4:	4b12      	ldr	r3, [pc, #72]	; (8002210 <HAL_InitTick+0x54>)
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	4b12      	ldr	r3, [pc, #72]	; (8002214 <HAL_InitTick+0x58>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	4619      	mov	r1, r3
 80021ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80021d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021da:	4618      	mov	r0, r3
 80021dc:	f000 f967 	bl	80024ae <HAL_SYSTICK_Config>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e00e      	b.n	8002208 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2b0f      	cmp	r3, #15
 80021ee:	d80a      	bhi.n	8002206 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021f0:	2200      	movs	r2, #0
 80021f2:	6879      	ldr	r1, [r7, #4]
 80021f4:	f04f 30ff 	mov.w	r0, #4294967295
 80021f8:	f000 f92f 	bl	800245a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021fc:	4a06      	ldr	r2, [pc, #24]	; (8002218 <HAL_InitTick+0x5c>)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002202:	2300      	movs	r3, #0
 8002204:	e000      	b.n	8002208 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
}
 8002208:	4618      	mov	r0, r3
 800220a:	3708      	adds	r7, #8
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	2000002c 	.word	0x2000002c
 8002214:	20000034 	.word	0x20000034
 8002218:	20000030 	.word	0x20000030

0800221c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002220:	4b06      	ldr	r3, [pc, #24]	; (800223c <HAL_IncTick+0x20>)
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	461a      	mov	r2, r3
 8002226:	4b06      	ldr	r3, [pc, #24]	; (8002240 <HAL_IncTick+0x24>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4413      	add	r3, r2
 800222c:	4a04      	ldr	r2, [pc, #16]	; (8002240 <HAL_IncTick+0x24>)
 800222e:	6013      	str	r3, [r2, #0]
}
 8002230:	bf00      	nop
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	20000034 	.word	0x20000034
 8002240:	20000410 	.word	0x20000410

08002244 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  return uwTick;
 8002248:	4b03      	ldr	r3, [pc, #12]	; (8002258 <HAL_GetTick+0x14>)
 800224a:	681b      	ldr	r3, [r3, #0]
}
 800224c:	4618      	mov	r0, r3
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	20000410 	.word	0x20000410

0800225c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002264:	f7ff ffee 	bl	8002244 <HAL_GetTick>
 8002268:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002274:	d005      	beq.n	8002282 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002276:	4b0a      	ldr	r3, [pc, #40]	; (80022a0 <HAL_Delay+0x44>)
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	461a      	mov	r2, r3
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	4413      	add	r3, r2
 8002280:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002282:	bf00      	nop
 8002284:	f7ff ffde 	bl	8002244 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	68fa      	ldr	r2, [r7, #12]
 8002290:	429a      	cmp	r2, r3
 8002292:	d8f7      	bhi.n	8002284 <HAL_Delay+0x28>
  {
  }
}
 8002294:	bf00      	nop
 8002296:	bf00      	nop
 8002298:	3710      	adds	r7, #16
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	20000034 	.word	0x20000034

080022a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b085      	sub	sp, #20
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f003 0307 	and.w	r3, r3, #7
 80022b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022b4:	4b0c      	ldr	r3, [pc, #48]	; (80022e8 <__NVIC_SetPriorityGrouping+0x44>)
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022ba:	68ba      	ldr	r2, [r7, #8]
 80022bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022c0:	4013      	ands	r3, r2
 80022c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022d6:	4a04      	ldr	r2, [pc, #16]	; (80022e8 <__NVIC_SetPriorityGrouping+0x44>)
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	60d3      	str	r3, [r2, #12]
}
 80022dc:	bf00      	nop
 80022de:	3714      	adds	r7, #20
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr
 80022e8:	e000ed00 	.word	0xe000ed00

080022ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022f0:	4b04      	ldr	r3, [pc, #16]	; (8002304 <__NVIC_GetPriorityGrouping+0x18>)
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	0a1b      	lsrs	r3, r3, #8
 80022f6:	f003 0307 	and.w	r3, r3, #7
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr
 8002304:	e000ed00 	.word	0xe000ed00

08002308 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	4603      	mov	r3, r0
 8002310:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002316:	2b00      	cmp	r3, #0
 8002318:	db0b      	blt.n	8002332 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800231a:	79fb      	ldrb	r3, [r7, #7]
 800231c:	f003 021f 	and.w	r2, r3, #31
 8002320:	4907      	ldr	r1, [pc, #28]	; (8002340 <__NVIC_EnableIRQ+0x38>)
 8002322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002326:	095b      	lsrs	r3, r3, #5
 8002328:	2001      	movs	r0, #1
 800232a:	fa00 f202 	lsl.w	r2, r0, r2
 800232e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002332:	bf00      	nop
 8002334:	370c      	adds	r7, #12
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	e000e100 	.word	0xe000e100

08002344 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	4603      	mov	r3, r0
 800234c:	6039      	str	r1, [r7, #0]
 800234e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002354:	2b00      	cmp	r3, #0
 8002356:	db0a      	blt.n	800236e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	b2da      	uxtb	r2, r3
 800235c:	490c      	ldr	r1, [pc, #48]	; (8002390 <__NVIC_SetPriority+0x4c>)
 800235e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002362:	0112      	lsls	r2, r2, #4
 8002364:	b2d2      	uxtb	r2, r2
 8002366:	440b      	add	r3, r1
 8002368:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800236c:	e00a      	b.n	8002384 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	b2da      	uxtb	r2, r3
 8002372:	4908      	ldr	r1, [pc, #32]	; (8002394 <__NVIC_SetPriority+0x50>)
 8002374:	79fb      	ldrb	r3, [r7, #7]
 8002376:	f003 030f 	and.w	r3, r3, #15
 800237a:	3b04      	subs	r3, #4
 800237c:	0112      	lsls	r2, r2, #4
 800237e:	b2d2      	uxtb	r2, r2
 8002380:	440b      	add	r3, r1
 8002382:	761a      	strb	r2, [r3, #24]
}
 8002384:	bf00      	nop
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr
 8002390:	e000e100 	.word	0xe000e100
 8002394:	e000ed00 	.word	0xe000ed00

08002398 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002398:	b480      	push	{r7}
 800239a:	b089      	sub	sp, #36	; 0x24
 800239c:	af00      	add	r7, sp, #0
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	60b9      	str	r1, [r7, #8]
 80023a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f003 0307 	and.w	r3, r3, #7
 80023aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	f1c3 0307 	rsb	r3, r3, #7
 80023b2:	2b04      	cmp	r3, #4
 80023b4:	bf28      	it	cs
 80023b6:	2304      	movcs	r3, #4
 80023b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	3304      	adds	r3, #4
 80023be:	2b06      	cmp	r3, #6
 80023c0:	d902      	bls.n	80023c8 <NVIC_EncodePriority+0x30>
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	3b03      	subs	r3, #3
 80023c6:	e000      	b.n	80023ca <NVIC_EncodePriority+0x32>
 80023c8:	2300      	movs	r3, #0
 80023ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023cc:	f04f 32ff 	mov.w	r2, #4294967295
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	fa02 f303 	lsl.w	r3, r2, r3
 80023d6:	43da      	mvns	r2, r3
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	401a      	ands	r2, r3
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023e0:	f04f 31ff 	mov.w	r1, #4294967295
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	fa01 f303 	lsl.w	r3, r1, r3
 80023ea:	43d9      	mvns	r1, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023f0:	4313      	orrs	r3, r2
         );
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3724      	adds	r7, #36	; 0x24
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
	...

08002400 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	3b01      	subs	r3, #1
 800240c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002410:	d301      	bcc.n	8002416 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002412:	2301      	movs	r3, #1
 8002414:	e00f      	b.n	8002436 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002416:	4a0a      	ldr	r2, [pc, #40]	; (8002440 <SysTick_Config+0x40>)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	3b01      	subs	r3, #1
 800241c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800241e:	210f      	movs	r1, #15
 8002420:	f04f 30ff 	mov.w	r0, #4294967295
 8002424:	f7ff ff8e 	bl	8002344 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002428:	4b05      	ldr	r3, [pc, #20]	; (8002440 <SysTick_Config+0x40>)
 800242a:	2200      	movs	r2, #0
 800242c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800242e:	4b04      	ldr	r3, [pc, #16]	; (8002440 <SysTick_Config+0x40>)
 8002430:	2207      	movs	r2, #7
 8002432:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	3708      	adds	r7, #8
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	e000e010 	.word	0xe000e010

08002444 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f7ff ff29 	bl	80022a4 <__NVIC_SetPriorityGrouping>
}
 8002452:	bf00      	nop
 8002454:	3708      	adds	r7, #8
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}

0800245a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800245a:	b580      	push	{r7, lr}
 800245c:	b086      	sub	sp, #24
 800245e:	af00      	add	r7, sp, #0
 8002460:	4603      	mov	r3, r0
 8002462:	60b9      	str	r1, [r7, #8]
 8002464:	607a      	str	r2, [r7, #4]
 8002466:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002468:	2300      	movs	r3, #0
 800246a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800246c:	f7ff ff3e 	bl	80022ec <__NVIC_GetPriorityGrouping>
 8002470:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	68b9      	ldr	r1, [r7, #8]
 8002476:	6978      	ldr	r0, [r7, #20]
 8002478:	f7ff ff8e 	bl	8002398 <NVIC_EncodePriority>
 800247c:	4602      	mov	r2, r0
 800247e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002482:	4611      	mov	r1, r2
 8002484:	4618      	mov	r0, r3
 8002486:	f7ff ff5d 	bl	8002344 <__NVIC_SetPriority>
}
 800248a:	bf00      	nop
 800248c:	3718      	adds	r7, #24
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}

08002492 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002492:	b580      	push	{r7, lr}
 8002494:	b082      	sub	sp, #8
 8002496:	af00      	add	r7, sp, #0
 8002498:	4603      	mov	r3, r0
 800249a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800249c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7ff ff31 	bl	8002308 <__NVIC_EnableIRQ>
}
 80024a6:	bf00      	nop
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}

080024ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024ae:	b580      	push	{r7, lr}
 80024b0:	b082      	sub	sp, #8
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f7ff ffa2 	bl	8002400 <SysTick_Config>
 80024bc:	4603      	mov	r3, r0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3708      	adds	r7, #8
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
	...

080024c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b086      	sub	sp, #24
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80024d0:	2300      	movs	r3, #0
 80024d2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80024d4:	f7ff feb6 	bl	8002244 <HAL_GetTick>
 80024d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d101      	bne.n	80024e4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e099      	b.n	8002618 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2202      	movs	r2, #2
 80024e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f022 0201 	bic.w	r2, r2, #1
 8002502:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002504:	e00f      	b.n	8002526 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002506:	f7ff fe9d 	bl	8002244 <HAL_GetTick>
 800250a:	4602      	mov	r2, r0
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	2b05      	cmp	r3, #5
 8002512:	d908      	bls.n	8002526 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2220      	movs	r2, #32
 8002518:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2203      	movs	r2, #3
 800251e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e078      	b.n	8002618 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0301 	and.w	r3, r3, #1
 8002530:	2b00      	cmp	r3, #0
 8002532:	d1e8      	bne.n	8002506 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800253c:	697a      	ldr	r2, [r7, #20]
 800253e:	4b38      	ldr	r3, [pc, #224]	; (8002620 <HAL_DMA_Init+0x158>)
 8002540:	4013      	ands	r3, r2
 8002542:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685a      	ldr	r2, [r3, #4]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002552:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	691b      	ldr	r3, [r3, #16]
 8002558:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800255e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	699b      	ldr	r3, [r3, #24]
 8002564:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800256a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a1b      	ldr	r3, [r3, #32]
 8002570:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002572:	697a      	ldr	r2, [r7, #20]
 8002574:	4313      	orrs	r3, r2
 8002576:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257c:	2b04      	cmp	r3, #4
 800257e:	d107      	bne.n	8002590 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002588:	4313      	orrs	r3, r2
 800258a:	697a      	ldr	r2, [r7, #20]
 800258c:	4313      	orrs	r3, r2
 800258e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	697a      	ldr	r2, [r7, #20]
 8002596:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	695b      	ldr	r3, [r3, #20]
 800259e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	f023 0307 	bic.w	r3, r3, #7
 80025a6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ac:	697a      	ldr	r2, [r7, #20]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b6:	2b04      	cmp	r3, #4
 80025b8:	d117      	bne.n	80025ea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025be:	697a      	ldr	r2, [r7, #20]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d00e      	beq.n	80025ea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f000 fa9f 	bl	8002b10 <DMA_CheckFifoParam>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d008      	beq.n	80025ea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2240      	movs	r2, #64	; 0x40
 80025dc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2201      	movs	r2, #1
 80025e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80025e6:	2301      	movs	r3, #1
 80025e8:	e016      	b.n	8002618 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	697a      	ldr	r2, [r7, #20]
 80025f0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f000 fa56 	bl	8002aa4 <DMA_CalcBaseAndBitshift>
 80025f8:	4603      	mov	r3, r0
 80025fa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002600:	223f      	movs	r2, #63	; 0x3f
 8002602:	409a      	lsls	r2, r3
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2200      	movs	r2, #0
 800260c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2201      	movs	r2, #1
 8002612:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002616:	2300      	movs	r3, #0
}
 8002618:	4618      	mov	r0, r3
 800261a:	3718      	adds	r7, #24
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	f010803f 	.word	0xf010803f

08002624 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b086      	sub	sp, #24
 8002628:	af00      	add	r7, sp, #0
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	60b9      	str	r1, [r7, #8]
 800262e:	607a      	str	r2, [r7, #4]
 8002630:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002632:	2300      	movs	r3, #0
 8002634:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800263a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002642:	2b01      	cmp	r3, #1
 8002644:	d101      	bne.n	800264a <HAL_DMA_Start_IT+0x26>
 8002646:	2302      	movs	r3, #2
 8002648:	e040      	b.n	80026cc <HAL_DMA_Start_IT+0xa8>
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2201      	movs	r2, #1
 800264e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002658:	b2db      	uxtb	r3, r3
 800265a:	2b01      	cmp	r3, #1
 800265c:	d12f      	bne.n	80026be <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2202      	movs	r2, #2
 8002662:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2200      	movs	r2, #0
 800266a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	68b9      	ldr	r1, [r7, #8]
 8002672:	68f8      	ldr	r0, [r7, #12]
 8002674:	f000 f9e8 	bl	8002a48 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800267c:	223f      	movs	r2, #63	; 0x3f
 800267e:	409a      	lsls	r2, r3
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f042 0216 	orr.w	r2, r2, #22
 8002692:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002698:	2b00      	cmp	r3, #0
 800269a:	d007      	beq.n	80026ac <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f042 0208 	orr.w	r2, r2, #8
 80026aa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f042 0201 	orr.w	r2, r2, #1
 80026ba:	601a      	str	r2, [r3, #0]
 80026bc:	e005      	b.n	80026ca <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2200      	movs	r2, #0
 80026c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80026c6:	2302      	movs	r3, #2
 80026c8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80026ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3718      	adds	r7, #24
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d004      	beq.n	80026f2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2280      	movs	r2, #128	; 0x80
 80026ec:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e00c      	b.n	800270c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2205      	movs	r2, #5
 80026f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f022 0201 	bic.w	r2, r2, #1
 8002708:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800270a:	2300      	movs	r3, #0
}
 800270c:	4618      	mov	r0, r3
 800270e:	370c      	adds	r7, #12
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr

08002718 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b086      	sub	sp, #24
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002720:	2300      	movs	r3, #0
 8002722:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002724:	4b8e      	ldr	r3, [pc, #568]	; (8002960 <HAL_DMA_IRQHandler+0x248>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a8e      	ldr	r2, [pc, #568]	; (8002964 <HAL_DMA_IRQHandler+0x24c>)
 800272a:	fba2 2303 	umull	r2, r3, r2, r3
 800272e:	0a9b      	lsrs	r3, r3, #10
 8002730:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002736:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002742:	2208      	movs	r2, #8
 8002744:	409a      	lsls	r2, r3
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	4013      	ands	r3, r2
 800274a:	2b00      	cmp	r3, #0
 800274c:	d01a      	beq.n	8002784 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0304 	and.w	r3, r3, #4
 8002758:	2b00      	cmp	r3, #0
 800275a:	d013      	beq.n	8002784 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f022 0204 	bic.w	r2, r2, #4
 800276a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002770:	2208      	movs	r2, #8
 8002772:	409a      	lsls	r2, r3
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800277c:	f043 0201 	orr.w	r2, r3, #1
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002788:	2201      	movs	r2, #1
 800278a:	409a      	lsls	r2, r3
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	4013      	ands	r3, r2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d012      	beq.n	80027ba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	695b      	ldr	r3, [r3, #20]
 800279a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d00b      	beq.n	80027ba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027a6:	2201      	movs	r2, #1
 80027a8:	409a      	lsls	r2, r3
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027b2:	f043 0202 	orr.w	r2, r3, #2
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027be:	2204      	movs	r2, #4
 80027c0:	409a      	lsls	r2, r3
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	4013      	ands	r3, r2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d012      	beq.n	80027f0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0302 	and.w	r3, r3, #2
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d00b      	beq.n	80027f0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027dc:	2204      	movs	r2, #4
 80027de:	409a      	lsls	r2, r3
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027e8:	f043 0204 	orr.w	r2, r3, #4
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027f4:	2210      	movs	r2, #16
 80027f6:	409a      	lsls	r2, r3
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	4013      	ands	r3, r2
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d043      	beq.n	8002888 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0308 	and.w	r3, r3, #8
 800280a:	2b00      	cmp	r3, #0
 800280c:	d03c      	beq.n	8002888 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002812:	2210      	movs	r2, #16
 8002814:	409a      	lsls	r2, r3
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d018      	beq.n	800285a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d108      	bne.n	8002848 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283a:	2b00      	cmp	r3, #0
 800283c:	d024      	beq.n	8002888 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	4798      	blx	r3
 8002846:	e01f      	b.n	8002888 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800284c:	2b00      	cmp	r3, #0
 800284e:	d01b      	beq.n	8002888 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	4798      	blx	r3
 8002858:	e016      	b.n	8002888 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002864:	2b00      	cmp	r3, #0
 8002866:	d107      	bne.n	8002878 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f022 0208 	bic.w	r2, r2, #8
 8002876:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287c:	2b00      	cmp	r3, #0
 800287e:	d003      	beq.n	8002888 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800288c:	2220      	movs	r2, #32
 800288e:	409a      	lsls	r2, r3
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	4013      	ands	r3, r2
 8002894:	2b00      	cmp	r3, #0
 8002896:	f000 808f 	beq.w	80029b8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0310 	and.w	r3, r3, #16
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	f000 8087 	beq.w	80029b8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ae:	2220      	movs	r2, #32
 80028b0:	409a      	lsls	r2, r3
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	2b05      	cmp	r3, #5
 80028c0:	d136      	bne.n	8002930 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f022 0216 	bic.w	r2, r2, #22
 80028d0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	695a      	ldr	r2, [r3, #20]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028e0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d103      	bne.n	80028f2 <HAL_DMA_IRQHandler+0x1da>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d007      	beq.n	8002902 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f022 0208 	bic.w	r2, r2, #8
 8002900:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002906:	223f      	movs	r2, #63	; 0x3f
 8002908:	409a      	lsls	r2, r3
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2201      	movs	r2, #1
 8002912:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002922:	2b00      	cmp	r3, #0
 8002924:	d07e      	beq.n	8002a24 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	4798      	blx	r3
        }
        return;
 800292e:	e079      	b.n	8002a24 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d01d      	beq.n	800297a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d10d      	bne.n	8002968 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002950:	2b00      	cmp	r3, #0
 8002952:	d031      	beq.n	80029b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	4798      	blx	r3
 800295c:	e02c      	b.n	80029b8 <HAL_DMA_IRQHandler+0x2a0>
 800295e:	bf00      	nop
 8002960:	2000002c 	.word	0x2000002c
 8002964:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800296c:	2b00      	cmp	r3, #0
 800296e:	d023      	beq.n	80029b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	4798      	blx	r3
 8002978:	e01e      	b.n	80029b8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002984:	2b00      	cmp	r3, #0
 8002986:	d10f      	bne.n	80029a8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f022 0210 	bic.w	r2, r2, #16
 8002996:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d003      	beq.n	80029b8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d032      	beq.n	8002a26 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029c4:	f003 0301 	and.w	r3, r3, #1
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d022      	beq.n	8002a12 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2205      	movs	r2, #5
 80029d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f022 0201 	bic.w	r2, r2, #1
 80029e2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	3301      	adds	r3, #1
 80029e8:	60bb      	str	r3, [r7, #8]
 80029ea:	697a      	ldr	r2, [r7, #20]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d307      	bcc.n	8002a00 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d1f2      	bne.n	80029e4 <HAL_DMA_IRQHandler+0x2cc>
 80029fe:	e000      	b.n	8002a02 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002a00:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2201      	movs	r2, #1
 8002a06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d005      	beq.n	8002a26 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	4798      	blx	r3
 8002a22:	e000      	b.n	8002a26 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002a24:	bf00      	nop
    }
  }
}
 8002a26:	3718      	adds	r7, #24
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a3a:	b2db      	uxtb	r3, r3
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	370c      	adds	r7, #12
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b085      	sub	sp, #20
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	607a      	str	r2, [r7, #4]
 8002a54:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a64:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	683a      	ldr	r2, [r7, #0]
 8002a6c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	2b40      	cmp	r3, #64	; 0x40
 8002a74:	d108      	bne.n	8002a88 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	68ba      	ldr	r2, [r7, #8]
 8002a84:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002a86:	e007      	b.n	8002a98 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	68ba      	ldr	r2, [r7, #8]
 8002a8e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	60da      	str	r2, [r3, #12]
}
 8002a98:	bf00      	nop
 8002a9a:	3714      	adds	r7, #20
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b085      	sub	sp, #20
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	3b10      	subs	r3, #16
 8002ab4:	4a14      	ldr	r2, [pc, #80]	; (8002b08 <DMA_CalcBaseAndBitshift+0x64>)
 8002ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aba:	091b      	lsrs	r3, r3, #4
 8002abc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002abe:	4a13      	ldr	r2, [pc, #76]	; (8002b0c <DMA_CalcBaseAndBitshift+0x68>)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2b03      	cmp	r3, #3
 8002ad0:	d909      	bls.n	8002ae6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002ada:	f023 0303 	bic.w	r3, r3, #3
 8002ade:	1d1a      	adds	r2, r3, #4
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	659a      	str	r2, [r3, #88]	; 0x58
 8002ae4:	e007      	b.n	8002af6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002aee:	f023 0303 	bic.w	r3, r3, #3
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3714      	adds	r7, #20
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	aaaaaaab 	.word	0xaaaaaaab
 8002b0c:	08017b10 	.word	0x08017b10

08002b10 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b085      	sub	sp, #20
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b20:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	699b      	ldr	r3, [r3, #24]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d11f      	bne.n	8002b6a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	2b03      	cmp	r3, #3
 8002b2e:	d856      	bhi.n	8002bde <DMA_CheckFifoParam+0xce>
 8002b30:	a201      	add	r2, pc, #4	; (adr r2, 8002b38 <DMA_CheckFifoParam+0x28>)
 8002b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b36:	bf00      	nop
 8002b38:	08002b49 	.word	0x08002b49
 8002b3c:	08002b5b 	.word	0x08002b5b
 8002b40:	08002b49 	.word	0x08002b49
 8002b44:	08002bdf 	.word	0x08002bdf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d046      	beq.n	8002be2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b58:	e043      	b.n	8002be2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b5e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b62:	d140      	bne.n	8002be6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b68:	e03d      	b.n	8002be6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	699b      	ldr	r3, [r3, #24]
 8002b6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b72:	d121      	bne.n	8002bb8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	2b03      	cmp	r3, #3
 8002b78:	d837      	bhi.n	8002bea <DMA_CheckFifoParam+0xda>
 8002b7a:	a201      	add	r2, pc, #4	; (adr r2, 8002b80 <DMA_CheckFifoParam+0x70>)
 8002b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b80:	08002b91 	.word	0x08002b91
 8002b84:	08002b97 	.word	0x08002b97
 8002b88:	08002b91 	.word	0x08002b91
 8002b8c:	08002ba9 	.word	0x08002ba9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	73fb      	strb	r3, [r7, #15]
      break;
 8002b94:	e030      	b.n	8002bf8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d025      	beq.n	8002bee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ba6:	e022      	b.n	8002bee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002bb0:	d11f      	bne.n	8002bf2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002bb6:	e01c      	b.n	8002bf2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d903      	bls.n	8002bc6 <DMA_CheckFifoParam+0xb6>
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	2b03      	cmp	r3, #3
 8002bc2:	d003      	beq.n	8002bcc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002bc4:	e018      	b.n	8002bf8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	73fb      	strb	r3, [r7, #15]
      break;
 8002bca:	e015      	b.n	8002bf8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d00e      	beq.n	8002bf6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	73fb      	strb	r3, [r7, #15]
      break;
 8002bdc:	e00b      	b.n	8002bf6 <DMA_CheckFifoParam+0xe6>
      break;
 8002bde:	bf00      	nop
 8002be0:	e00a      	b.n	8002bf8 <DMA_CheckFifoParam+0xe8>
      break;
 8002be2:	bf00      	nop
 8002be4:	e008      	b.n	8002bf8 <DMA_CheckFifoParam+0xe8>
      break;
 8002be6:	bf00      	nop
 8002be8:	e006      	b.n	8002bf8 <DMA_CheckFifoParam+0xe8>
      break;
 8002bea:	bf00      	nop
 8002bec:	e004      	b.n	8002bf8 <DMA_CheckFifoParam+0xe8>
      break;
 8002bee:	bf00      	nop
 8002bf0:	e002      	b.n	8002bf8 <DMA_CheckFifoParam+0xe8>
      break;   
 8002bf2:	bf00      	nop
 8002bf4:	e000      	b.n	8002bf8 <DMA_CheckFifoParam+0xe8>
      break;
 8002bf6:	bf00      	nop
    }
  } 
  
  return status; 
 8002bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3714      	adds	r7, #20
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop

08002c08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b089      	sub	sp, #36	; 0x24
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c12:	2300      	movs	r3, #0
 8002c14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c16:	2300      	movs	r3, #0
 8002c18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c1e:	2300      	movs	r3, #0
 8002c20:	61fb      	str	r3, [r7, #28]
 8002c22:	e16b      	b.n	8002efc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c24:	2201      	movs	r2, #1
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	697a      	ldr	r2, [r7, #20]
 8002c34:	4013      	ands	r3, r2
 8002c36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c38:	693a      	ldr	r2, [r7, #16]
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	f040 815a 	bne.w	8002ef6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f003 0303 	and.w	r3, r3, #3
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d005      	beq.n	8002c5a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d130      	bne.n	8002cbc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	005b      	lsls	r3, r3, #1
 8002c64:	2203      	movs	r2, #3
 8002c66:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6a:	43db      	mvns	r3, r3
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	4013      	ands	r3, r2
 8002c70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	68da      	ldr	r2, [r3, #12]
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	005b      	lsls	r3, r3, #1
 8002c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7e:	69ba      	ldr	r2, [r7, #24]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	69ba      	ldr	r2, [r7, #24]
 8002c88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c90:	2201      	movs	r2, #1
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	fa02 f303 	lsl.w	r3, r2, r3
 8002c98:	43db      	mvns	r3, r3
 8002c9a:	69ba      	ldr	r2, [r7, #24]
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	091b      	lsrs	r3, r3, #4
 8002ca6:	f003 0201 	and.w	r2, r3, #1
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb0:	69ba      	ldr	r2, [r7, #24]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	69ba      	ldr	r2, [r7, #24]
 8002cba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f003 0303 	and.w	r3, r3, #3
 8002cc4:	2b03      	cmp	r3, #3
 8002cc6:	d017      	beq.n	8002cf8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	005b      	lsls	r3, r3, #1
 8002cd2:	2203      	movs	r2, #3
 8002cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd8:	43db      	mvns	r3, r3
 8002cda:	69ba      	ldr	r2, [r7, #24]
 8002cdc:	4013      	ands	r3, r2
 8002cde:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	689a      	ldr	r2, [r3, #8]
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	005b      	lsls	r3, r3, #1
 8002ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	69ba      	ldr	r2, [r7, #24]
 8002cf6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f003 0303 	and.w	r3, r3, #3
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d123      	bne.n	8002d4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	08da      	lsrs	r2, r3, #3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	3208      	adds	r2, #8
 8002d0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	f003 0307 	and.w	r3, r3, #7
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	220f      	movs	r2, #15
 8002d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d20:	43db      	mvns	r3, r3
 8002d22:	69ba      	ldr	r2, [r7, #24]
 8002d24:	4013      	ands	r3, r2
 8002d26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	691a      	ldr	r2, [r3, #16]
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	f003 0307 	and.w	r3, r3, #7
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	fa02 f303 	lsl.w	r3, r2, r3
 8002d38:	69ba      	ldr	r2, [r7, #24]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	08da      	lsrs	r2, r3, #3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	3208      	adds	r2, #8
 8002d46:	69b9      	ldr	r1, [r7, #24]
 8002d48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	005b      	lsls	r3, r3, #1
 8002d56:	2203      	movs	r2, #3
 8002d58:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5c:	43db      	mvns	r3, r3
 8002d5e:	69ba      	ldr	r2, [r7, #24]
 8002d60:	4013      	ands	r3, r2
 8002d62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f003 0203 	and.w	r2, r3, #3
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	005b      	lsls	r3, r3, #1
 8002d70:	fa02 f303 	lsl.w	r3, r2, r3
 8002d74:	69ba      	ldr	r2, [r7, #24]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	f000 80b4 	beq.w	8002ef6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d8e:	2300      	movs	r3, #0
 8002d90:	60fb      	str	r3, [r7, #12]
 8002d92:	4b60      	ldr	r3, [pc, #384]	; (8002f14 <HAL_GPIO_Init+0x30c>)
 8002d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d96:	4a5f      	ldr	r2, [pc, #380]	; (8002f14 <HAL_GPIO_Init+0x30c>)
 8002d98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d9c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d9e:	4b5d      	ldr	r3, [pc, #372]	; (8002f14 <HAL_GPIO_Init+0x30c>)
 8002da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002da6:	60fb      	str	r3, [r7, #12]
 8002da8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002daa:	4a5b      	ldr	r2, [pc, #364]	; (8002f18 <HAL_GPIO_Init+0x310>)
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	089b      	lsrs	r3, r3, #2
 8002db0:	3302      	adds	r3, #2
 8002db2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002db6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	f003 0303 	and.w	r3, r3, #3
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	220f      	movs	r2, #15
 8002dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc6:	43db      	mvns	r3, r3
 8002dc8:	69ba      	ldr	r2, [r7, #24]
 8002dca:	4013      	ands	r3, r2
 8002dcc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a52      	ldr	r2, [pc, #328]	; (8002f1c <HAL_GPIO_Init+0x314>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d02b      	beq.n	8002e2e <HAL_GPIO_Init+0x226>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a51      	ldr	r2, [pc, #324]	; (8002f20 <HAL_GPIO_Init+0x318>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d025      	beq.n	8002e2a <HAL_GPIO_Init+0x222>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a50      	ldr	r2, [pc, #320]	; (8002f24 <HAL_GPIO_Init+0x31c>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d01f      	beq.n	8002e26 <HAL_GPIO_Init+0x21e>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a4f      	ldr	r2, [pc, #316]	; (8002f28 <HAL_GPIO_Init+0x320>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d019      	beq.n	8002e22 <HAL_GPIO_Init+0x21a>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a4e      	ldr	r2, [pc, #312]	; (8002f2c <HAL_GPIO_Init+0x324>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d013      	beq.n	8002e1e <HAL_GPIO_Init+0x216>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a4d      	ldr	r2, [pc, #308]	; (8002f30 <HAL_GPIO_Init+0x328>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d00d      	beq.n	8002e1a <HAL_GPIO_Init+0x212>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a4c      	ldr	r2, [pc, #304]	; (8002f34 <HAL_GPIO_Init+0x32c>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d007      	beq.n	8002e16 <HAL_GPIO_Init+0x20e>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a4b      	ldr	r2, [pc, #300]	; (8002f38 <HAL_GPIO_Init+0x330>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d101      	bne.n	8002e12 <HAL_GPIO_Init+0x20a>
 8002e0e:	2307      	movs	r3, #7
 8002e10:	e00e      	b.n	8002e30 <HAL_GPIO_Init+0x228>
 8002e12:	2308      	movs	r3, #8
 8002e14:	e00c      	b.n	8002e30 <HAL_GPIO_Init+0x228>
 8002e16:	2306      	movs	r3, #6
 8002e18:	e00a      	b.n	8002e30 <HAL_GPIO_Init+0x228>
 8002e1a:	2305      	movs	r3, #5
 8002e1c:	e008      	b.n	8002e30 <HAL_GPIO_Init+0x228>
 8002e1e:	2304      	movs	r3, #4
 8002e20:	e006      	b.n	8002e30 <HAL_GPIO_Init+0x228>
 8002e22:	2303      	movs	r3, #3
 8002e24:	e004      	b.n	8002e30 <HAL_GPIO_Init+0x228>
 8002e26:	2302      	movs	r3, #2
 8002e28:	e002      	b.n	8002e30 <HAL_GPIO_Init+0x228>
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e000      	b.n	8002e30 <HAL_GPIO_Init+0x228>
 8002e2e:	2300      	movs	r3, #0
 8002e30:	69fa      	ldr	r2, [r7, #28]
 8002e32:	f002 0203 	and.w	r2, r2, #3
 8002e36:	0092      	lsls	r2, r2, #2
 8002e38:	4093      	lsls	r3, r2
 8002e3a:	69ba      	ldr	r2, [r7, #24]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e40:	4935      	ldr	r1, [pc, #212]	; (8002f18 <HAL_GPIO_Init+0x310>)
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	089b      	lsrs	r3, r3, #2
 8002e46:	3302      	adds	r3, #2
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e4e:	4b3b      	ldr	r3, [pc, #236]	; (8002f3c <HAL_GPIO_Init+0x334>)
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	43db      	mvns	r3, r3
 8002e58:	69ba      	ldr	r2, [r7, #24]
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d003      	beq.n	8002e72 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002e6a:	69ba      	ldr	r2, [r7, #24]
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e72:	4a32      	ldr	r2, [pc, #200]	; (8002f3c <HAL_GPIO_Init+0x334>)
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e78:	4b30      	ldr	r3, [pc, #192]	; (8002f3c <HAL_GPIO_Init+0x334>)
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	43db      	mvns	r3, r3
 8002e82:	69ba      	ldr	r2, [r7, #24]
 8002e84:	4013      	ands	r3, r2
 8002e86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d003      	beq.n	8002e9c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002e94:	69ba      	ldr	r2, [r7, #24]
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e9c:	4a27      	ldr	r2, [pc, #156]	; (8002f3c <HAL_GPIO_Init+0x334>)
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ea2:	4b26      	ldr	r3, [pc, #152]	; (8002f3c <HAL_GPIO_Init+0x334>)
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	43db      	mvns	r3, r3
 8002eac:	69ba      	ldr	r2, [r7, #24]
 8002eae:	4013      	ands	r3, r2
 8002eb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d003      	beq.n	8002ec6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002ebe:	69ba      	ldr	r2, [r7, #24]
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ec6:	4a1d      	ldr	r2, [pc, #116]	; (8002f3c <HAL_GPIO_Init+0x334>)
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ecc:	4b1b      	ldr	r3, [pc, #108]	; (8002f3c <HAL_GPIO_Init+0x334>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	43db      	mvns	r3, r3
 8002ed6:	69ba      	ldr	r2, [r7, #24]
 8002ed8:	4013      	ands	r3, r2
 8002eda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d003      	beq.n	8002ef0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002ee8:	69ba      	ldr	r2, [r7, #24]
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ef0:	4a12      	ldr	r2, [pc, #72]	; (8002f3c <HAL_GPIO_Init+0x334>)
 8002ef2:	69bb      	ldr	r3, [r7, #24]
 8002ef4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	3301      	adds	r3, #1
 8002efa:	61fb      	str	r3, [r7, #28]
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	2b0f      	cmp	r3, #15
 8002f00:	f67f ae90 	bls.w	8002c24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f04:	bf00      	nop
 8002f06:	bf00      	nop
 8002f08:	3724      	adds	r7, #36	; 0x24
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	40023800 	.word	0x40023800
 8002f18:	40013800 	.word	0x40013800
 8002f1c:	40020000 	.word	0x40020000
 8002f20:	40020400 	.word	0x40020400
 8002f24:	40020800 	.word	0x40020800
 8002f28:	40020c00 	.word	0x40020c00
 8002f2c:	40021000 	.word	0x40021000
 8002f30:	40021400 	.word	0x40021400
 8002f34:	40021800 	.word	0x40021800
 8002f38:	40021c00 	.word	0x40021c00
 8002f3c:	40013c00 	.word	0x40013c00

08002f40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b085      	sub	sp, #20
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	460b      	mov	r3, r1
 8002f4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	691a      	ldr	r2, [r3, #16]
 8002f50:	887b      	ldrh	r3, [r7, #2]
 8002f52:	4013      	ands	r3, r2
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d002      	beq.n	8002f5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	73fb      	strb	r3, [r7, #15]
 8002f5c:	e001      	b.n	8002f62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f62:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3714      	adds	r7, #20
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr

08002f70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	460b      	mov	r3, r1
 8002f7a:	807b      	strh	r3, [r7, #2]
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f80:	787b      	ldrb	r3, [r7, #1]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d003      	beq.n	8002f8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f86:	887a      	ldrh	r2, [r7, #2]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f8c:	e003      	b.n	8002f96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f8e:	887b      	ldrh	r3, [r7, #2]
 8002f90:	041a      	lsls	r2, r3, #16
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	619a      	str	r2, [r3, #24]
}
 8002f96:	bf00      	nop
 8002f98:	370c      	adds	r7, #12
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
	...

08002fa4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d101      	bne.n	8002fb6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e12b      	b.n	800320e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d106      	bne.n	8002fd0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f7fe fe40 	bl	8001c50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2224      	movs	r2, #36	; 0x24
 8002fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f022 0201 	bic.w	r2, r2, #1
 8002fe6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ff6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003006:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003008:	f004 f9fc 	bl	8007404 <HAL_RCC_GetPCLK1Freq>
 800300c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	4a81      	ldr	r2, [pc, #516]	; (8003218 <HAL_I2C_Init+0x274>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d807      	bhi.n	8003028 <HAL_I2C_Init+0x84>
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	4a80      	ldr	r2, [pc, #512]	; (800321c <HAL_I2C_Init+0x278>)
 800301c:	4293      	cmp	r3, r2
 800301e:	bf94      	ite	ls
 8003020:	2301      	movls	r3, #1
 8003022:	2300      	movhi	r3, #0
 8003024:	b2db      	uxtb	r3, r3
 8003026:	e006      	b.n	8003036 <HAL_I2C_Init+0x92>
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	4a7d      	ldr	r2, [pc, #500]	; (8003220 <HAL_I2C_Init+0x27c>)
 800302c:	4293      	cmp	r3, r2
 800302e:	bf94      	ite	ls
 8003030:	2301      	movls	r3, #1
 8003032:	2300      	movhi	r3, #0
 8003034:	b2db      	uxtb	r3, r3
 8003036:	2b00      	cmp	r3, #0
 8003038:	d001      	beq.n	800303e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e0e7      	b.n	800320e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	4a78      	ldr	r2, [pc, #480]	; (8003224 <HAL_I2C_Init+0x280>)
 8003042:	fba2 2303 	umull	r2, r3, r2, r3
 8003046:	0c9b      	lsrs	r3, r3, #18
 8003048:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	68ba      	ldr	r2, [r7, #8]
 800305a:	430a      	orrs	r2, r1
 800305c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	6a1b      	ldr	r3, [r3, #32]
 8003064:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	4a6a      	ldr	r2, [pc, #424]	; (8003218 <HAL_I2C_Init+0x274>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d802      	bhi.n	8003078 <HAL_I2C_Init+0xd4>
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	3301      	adds	r3, #1
 8003076:	e009      	b.n	800308c <HAL_I2C_Init+0xe8>
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800307e:	fb02 f303 	mul.w	r3, r2, r3
 8003082:	4a69      	ldr	r2, [pc, #420]	; (8003228 <HAL_I2C_Init+0x284>)
 8003084:	fba2 2303 	umull	r2, r3, r2, r3
 8003088:	099b      	lsrs	r3, r3, #6
 800308a:	3301      	adds	r3, #1
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	6812      	ldr	r2, [r2, #0]
 8003090:	430b      	orrs	r3, r1
 8003092:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	69db      	ldr	r3, [r3, #28]
 800309a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800309e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	495c      	ldr	r1, [pc, #368]	; (8003218 <HAL_I2C_Init+0x274>)
 80030a8:	428b      	cmp	r3, r1
 80030aa:	d819      	bhi.n	80030e0 <HAL_I2C_Init+0x13c>
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	1e59      	subs	r1, r3, #1
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	005b      	lsls	r3, r3, #1
 80030b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80030ba:	1c59      	adds	r1, r3, #1
 80030bc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80030c0:	400b      	ands	r3, r1
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d00a      	beq.n	80030dc <HAL_I2C_Init+0x138>
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	1e59      	subs	r1, r3, #1
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	005b      	lsls	r3, r3, #1
 80030d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80030d4:	3301      	adds	r3, #1
 80030d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030da:	e051      	b.n	8003180 <HAL_I2C_Init+0x1dc>
 80030dc:	2304      	movs	r3, #4
 80030de:	e04f      	b.n	8003180 <HAL_I2C_Init+0x1dc>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d111      	bne.n	800310c <HAL_I2C_Init+0x168>
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	1e58      	subs	r0, r3, #1
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6859      	ldr	r1, [r3, #4]
 80030f0:	460b      	mov	r3, r1
 80030f2:	005b      	lsls	r3, r3, #1
 80030f4:	440b      	add	r3, r1
 80030f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80030fa:	3301      	adds	r3, #1
 80030fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003100:	2b00      	cmp	r3, #0
 8003102:	bf0c      	ite	eq
 8003104:	2301      	moveq	r3, #1
 8003106:	2300      	movne	r3, #0
 8003108:	b2db      	uxtb	r3, r3
 800310a:	e012      	b.n	8003132 <HAL_I2C_Init+0x18e>
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	1e58      	subs	r0, r3, #1
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6859      	ldr	r1, [r3, #4]
 8003114:	460b      	mov	r3, r1
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	440b      	add	r3, r1
 800311a:	0099      	lsls	r1, r3, #2
 800311c:	440b      	add	r3, r1
 800311e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003122:	3301      	adds	r3, #1
 8003124:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003128:	2b00      	cmp	r3, #0
 800312a:	bf0c      	ite	eq
 800312c:	2301      	moveq	r3, #1
 800312e:	2300      	movne	r3, #0
 8003130:	b2db      	uxtb	r3, r3
 8003132:	2b00      	cmp	r3, #0
 8003134:	d001      	beq.n	800313a <HAL_I2C_Init+0x196>
 8003136:	2301      	movs	r3, #1
 8003138:	e022      	b.n	8003180 <HAL_I2C_Init+0x1dc>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d10e      	bne.n	8003160 <HAL_I2C_Init+0x1bc>
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	1e58      	subs	r0, r3, #1
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6859      	ldr	r1, [r3, #4]
 800314a:	460b      	mov	r3, r1
 800314c:	005b      	lsls	r3, r3, #1
 800314e:	440b      	add	r3, r1
 8003150:	fbb0 f3f3 	udiv	r3, r0, r3
 8003154:	3301      	adds	r3, #1
 8003156:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800315a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800315e:	e00f      	b.n	8003180 <HAL_I2C_Init+0x1dc>
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	1e58      	subs	r0, r3, #1
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6859      	ldr	r1, [r3, #4]
 8003168:	460b      	mov	r3, r1
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	440b      	add	r3, r1
 800316e:	0099      	lsls	r1, r3, #2
 8003170:	440b      	add	r3, r1
 8003172:	fbb0 f3f3 	udiv	r3, r0, r3
 8003176:	3301      	adds	r3, #1
 8003178:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800317c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003180:	6879      	ldr	r1, [r7, #4]
 8003182:	6809      	ldr	r1, [r1, #0]
 8003184:	4313      	orrs	r3, r2
 8003186:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	69da      	ldr	r2, [r3, #28]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a1b      	ldr	r3, [r3, #32]
 800319a:	431a      	orrs	r2, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	430a      	orrs	r2, r1
 80031a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80031ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	6911      	ldr	r1, [r2, #16]
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	68d2      	ldr	r2, [r2, #12]
 80031ba:	4311      	orrs	r1, r2
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	6812      	ldr	r2, [r2, #0]
 80031c0:	430b      	orrs	r3, r1
 80031c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	695a      	ldr	r2, [r3, #20]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	699b      	ldr	r3, [r3, #24]
 80031d6:	431a      	orrs	r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	430a      	orrs	r2, r1
 80031de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f042 0201 	orr.w	r2, r2, #1
 80031ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2220      	movs	r2, #32
 80031fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800320c:	2300      	movs	r3, #0
}
 800320e:	4618      	mov	r0, r3
 8003210:	3710      	adds	r7, #16
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	000186a0 	.word	0x000186a0
 800321c:	001e847f 	.word	0x001e847f
 8003220:	003d08ff 	.word	0x003d08ff
 8003224:	431bde83 	.word	0x431bde83
 8003228:	10624dd3 	.word	0x10624dd3

0800322c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b088      	sub	sp, #32
 8003230:	af02      	add	r7, sp, #8
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	607a      	str	r2, [r7, #4]
 8003236:	461a      	mov	r2, r3
 8003238:	460b      	mov	r3, r1
 800323a:	817b      	strh	r3, [r7, #10]
 800323c:	4613      	mov	r3, r2
 800323e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003240:	f7ff f800 	bl	8002244 <HAL_GetTick>
 8003244:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800324c:	b2db      	uxtb	r3, r3
 800324e:	2b20      	cmp	r3, #32
 8003250:	f040 80e0 	bne.w	8003414 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	9300      	str	r3, [sp, #0]
 8003258:	2319      	movs	r3, #25
 800325a:	2201      	movs	r2, #1
 800325c:	4970      	ldr	r1, [pc, #448]	; (8003420 <HAL_I2C_Master_Transmit+0x1f4>)
 800325e:	68f8      	ldr	r0, [r7, #12]
 8003260:	f001 ffd0 	bl	8005204 <I2C_WaitOnFlagUntilTimeout>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d001      	beq.n	800326e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800326a:	2302      	movs	r3, #2
 800326c:	e0d3      	b.n	8003416 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003274:	2b01      	cmp	r3, #1
 8003276:	d101      	bne.n	800327c <HAL_I2C_Master_Transmit+0x50>
 8003278:	2302      	movs	r3, #2
 800327a:	e0cc      	b.n	8003416 <HAL_I2C_Master_Transmit+0x1ea>
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0301 	and.w	r3, r3, #1
 800328e:	2b01      	cmp	r3, #1
 8003290:	d007      	beq.n	80032a2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f042 0201 	orr.w	r2, r2, #1
 80032a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032b0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2221      	movs	r2, #33	; 0x21
 80032b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2210      	movs	r2, #16
 80032be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2200      	movs	r2, #0
 80032c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	893a      	ldrh	r2, [r7, #8]
 80032d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032d8:	b29a      	uxth	r2, r3
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	4a50      	ldr	r2, [pc, #320]	; (8003424 <HAL_I2C_Master_Transmit+0x1f8>)
 80032e2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80032e4:	8979      	ldrh	r1, [r7, #10]
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	6a3a      	ldr	r2, [r7, #32]
 80032ea:	68f8      	ldr	r0, [r7, #12]
 80032ec:	f001 fd92 	bl	8004e14 <I2C_MasterRequestWrite>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d001      	beq.n	80032fa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e08d      	b.n	8003416 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032fa:	2300      	movs	r3, #0
 80032fc:	613b      	str	r3, [r7, #16]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	695b      	ldr	r3, [r3, #20]
 8003304:	613b      	str	r3, [r7, #16]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	699b      	ldr	r3, [r3, #24]
 800330c:	613b      	str	r3, [r7, #16]
 800330e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003310:	e066      	b.n	80033e0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003312:	697a      	ldr	r2, [r7, #20]
 8003314:	6a39      	ldr	r1, [r7, #32]
 8003316:	68f8      	ldr	r0, [r7, #12]
 8003318:	f002 f84a 	bl	80053b0 <I2C_WaitOnTXEFlagUntilTimeout>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d00d      	beq.n	800333e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003326:	2b04      	cmp	r3, #4
 8003328:	d107      	bne.n	800333a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003338:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e06b      	b.n	8003416 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003342:	781a      	ldrb	r2, [r3, #0]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334e:	1c5a      	adds	r2, r3, #1
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003358:	b29b      	uxth	r3, r3
 800335a:	3b01      	subs	r3, #1
 800335c:	b29a      	uxth	r2, r3
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003366:	3b01      	subs	r3, #1
 8003368:	b29a      	uxth	r2, r3
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	695b      	ldr	r3, [r3, #20]
 8003374:	f003 0304 	and.w	r3, r3, #4
 8003378:	2b04      	cmp	r3, #4
 800337a:	d11b      	bne.n	80033b4 <HAL_I2C_Master_Transmit+0x188>
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003380:	2b00      	cmp	r3, #0
 8003382:	d017      	beq.n	80033b4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003388:	781a      	ldrb	r2, [r3, #0]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003394:	1c5a      	adds	r2, r3, #1
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800339e:	b29b      	uxth	r3, r3
 80033a0:	3b01      	subs	r3, #1
 80033a2:	b29a      	uxth	r2, r3
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ac:	3b01      	subs	r3, #1
 80033ae:	b29a      	uxth	r2, r3
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033b4:	697a      	ldr	r2, [r7, #20]
 80033b6:	6a39      	ldr	r1, [r7, #32]
 80033b8:	68f8      	ldr	r0, [r7, #12]
 80033ba:	f002 f83a 	bl	8005432 <I2C_WaitOnBTFFlagUntilTimeout>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d00d      	beq.n	80033e0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c8:	2b04      	cmp	r3, #4
 80033ca:	d107      	bne.n	80033dc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033da:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e01a      	b.n	8003416 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d194      	bne.n	8003312 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2220      	movs	r2, #32
 80033fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2200      	movs	r2, #0
 8003404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2200      	movs	r2, #0
 800340c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003410:	2300      	movs	r3, #0
 8003412:	e000      	b.n	8003416 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003414:	2302      	movs	r3, #2
  }
}
 8003416:	4618      	mov	r0, r3
 8003418:	3718      	adds	r7, #24
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	00100002 	.word	0x00100002
 8003424:	ffff0000 	.word	0xffff0000

08003428 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b08c      	sub	sp, #48	; 0x30
 800342c:	af02      	add	r7, sp, #8
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	607a      	str	r2, [r7, #4]
 8003432:	461a      	mov	r2, r3
 8003434:	460b      	mov	r3, r1
 8003436:	817b      	strh	r3, [r7, #10]
 8003438:	4613      	mov	r3, r2
 800343a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800343c:	f7fe ff02 	bl	8002244 <HAL_GetTick>
 8003440:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003448:	b2db      	uxtb	r3, r3
 800344a:	2b20      	cmp	r3, #32
 800344c:	f040 820b 	bne.w	8003866 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003452:	9300      	str	r3, [sp, #0]
 8003454:	2319      	movs	r3, #25
 8003456:	2201      	movs	r2, #1
 8003458:	497c      	ldr	r1, [pc, #496]	; (800364c <HAL_I2C_Master_Receive+0x224>)
 800345a:	68f8      	ldr	r0, [r7, #12]
 800345c:	f001 fed2 	bl	8005204 <I2C_WaitOnFlagUntilTimeout>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d001      	beq.n	800346a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003466:	2302      	movs	r3, #2
 8003468:	e1fe      	b.n	8003868 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003470:	2b01      	cmp	r3, #1
 8003472:	d101      	bne.n	8003478 <HAL_I2C_Master_Receive+0x50>
 8003474:	2302      	movs	r3, #2
 8003476:	e1f7      	b.n	8003868 <HAL_I2C_Master_Receive+0x440>
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0301 	and.w	r3, r3, #1
 800348a:	2b01      	cmp	r3, #1
 800348c:	d007      	beq.n	800349e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f042 0201 	orr.w	r2, r2, #1
 800349c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034ac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2222      	movs	r2, #34	; 0x22
 80034b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2210      	movs	r2, #16
 80034ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2200      	movs	r2, #0
 80034c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	893a      	ldrh	r2, [r7, #8]
 80034ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034d4:	b29a      	uxth	r2, r3
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	4a5c      	ldr	r2, [pc, #368]	; (8003650 <HAL_I2C_Master_Receive+0x228>)
 80034de:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80034e0:	8979      	ldrh	r1, [r7, #10]
 80034e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034e6:	68f8      	ldr	r0, [r7, #12]
 80034e8:	f001 fd16 	bl	8004f18 <I2C_MasterRequestRead>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d001      	beq.n	80034f6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e1b8      	b.n	8003868 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d113      	bne.n	8003526 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034fe:	2300      	movs	r3, #0
 8003500:	623b      	str	r3, [r7, #32]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	695b      	ldr	r3, [r3, #20]
 8003508:	623b      	str	r3, [r7, #32]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	699b      	ldr	r3, [r3, #24]
 8003510:	623b      	str	r3, [r7, #32]
 8003512:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003522:	601a      	str	r2, [r3, #0]
 8003524:	e18c      	b.n	8003840 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800352a:	2b01      	cmp	r3, #1
 800352c:	d11b      	bne.n	8003566 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800353c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800353e:	2300      	movs	r3, #0
 8003540:	61fb      	str	r3, [r7, #28]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	695b      	ldr	r3, [r3, #20]
 8003548:	61fb      	str	r3, [r7, #28]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	699b      	ldr	r3, [r3, #24]
 8003550:	61fb      	str	r3, [r7, #28]
 8003552:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003562:	601a      	str	r2, [r3, #0]
 8003564:	e16c      	b.n	8003840 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800356a:	2b02      	cmp	r3, #2
 800356c:	d11b      	bne.n	80035a6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800357c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800358c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800358e:	2300      	movs	r3, #0
 8003590:	61bb      	str	r3, [r7, #24]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	695b      	ldr	r3, [r3, #20]
 8003598:	61bb      	str	r3, [r7, #24]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	699b      	ldr	r3, [r3, #24]
 80035a0:	61bb      	str	r3, [r7, #24]
 80035a2:	69bb      	ldr	r3, [r7, #24]
 80035a4:	e14c      	b.n	8003840 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80035b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035b6:	2300      	movs	r3, #0
 80035b8:	617b      	str	r3, [r7, #20]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	695b      	ldr	r3, [r3, #20]
 80035c0:	617b      	str	r3, [r7, #20]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	699b      	ldr	r3, [r3, #24]
 80035c8:	617b      	str	r3, [r7, #20]
 80035ca:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80035cc:	e138      	b.n	8003840 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035d2:	2b03      	cmp	r3, #3
 80035d4:	f200 80f1 	bhi.w	80037ba <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d123      	bne.n	8003628 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80035e4:	68f8      	ldr	r0, [r7, #12]
 80035e6:	f001 ff97 	bl	8005518 <I2C_WaitOnRXNEFlagUntilTimeout>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d001      	beq.n	80035f4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e139      	b.n	8003868 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	691a      	ldr	r2, [r3, #16]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fe:	b2d2      	uxtb	r2, r2
 8003600:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003606:	1c5a      	adds	r2, r3, #1
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003610:	3b01      	subs	r3, #1
 8003612:	b29a      	uxth	r2, r3
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800361c:	b29b      	uxth	r3, r3
 800361e:	3b01      	subs	r3, #1
 8003620:	b29a      	uxth	r2, r3
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003626:	e10b      	b.n	8003840 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800362c:	2b02      	cmp	r3, #2
 800362e:	d14e      	bne.n	80036ce <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003632:	9300      	str	r3, [sp, #0]
 8003634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003636:	2200      	movs	r2, #0
 8003638:	4906      	ldr	r1, [pc, #24]	; (8003654 <HAL_I2C_Master_Receive+0x22c>)
 800363a:	68f8      	ldr	r0, [r7, #12]
 800363c:	f001 fde2 	bl	8005204 <I2C_WaitOnFlagUntilTimeout>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d008      	beq.n	8003658 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e10e      	b.n	8003868 <HAL_I2C_Master_Receive+0x440>
 800364a:	bf00      	nop
 800364c:	00100002 	.word	0x00100002
 8003650:	ffff0000 	.word	0xffff0000
 8003654:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003666:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	691a      	ldr	r2, [r3, #16]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003672:	b2d2      	uxtb	r2, r2
 8003674:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367a:	1c5a      	adds	r2, r3, #1
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003684:	3b01      	subs	r3, #1
 8003686:	b29a      	uxth	r2, r3
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003690:	b29b      	uxth	r3, r3
 8003692:	3b01      	subs	r3, #1
 8003694:	b29a      	uxth	r2, r3
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	691a      	ldr	r2, [r3, #16]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a4:	b2d2      	uxtb	r2, r2
 80036a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ac:	1c5a      	adds	r2, r3, #1
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036b6:	3b01      	subs	r3, #1
 80036b8:	b29a      	uxth	r2, r3
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	3b01      	subs	r3, #1
 80036c6:	b29a      	uxth	r2, r3
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 80036cc:	e0b8      	b.n	8003840 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80036ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d0:	9300      	str	r3, [sp, #0]
 80036d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d4:	2200      	movs	r2, #0
 80036d6:	4966      	ldr	r1, [pc, #408]	; (8003870 <HAL_I2C_Master_Receive+0x448>)
 80036d8:	68f8      	ldr	r0, [r7, #12]
 80036da:	f001 fd93 	bl	8005204 <I2C_WaitOnFlagUntilTimeout>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d001      	beq.n	80036e8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e0bf      	b.n	8003868 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	691a      	ldr	r2, [r3, #16]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003702:	b2d2      	uxtb	r2, r2
 8003704:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370a:	1c5a      	adds	r2, r3, #1
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003714:	3b01      	subs	r3, #1
 8003716:	b29a      	uxth	r2, r3
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003720:	b29b      	uxth	r3, r3
 8003722:	3b01      	subs	r3, #1
 8003724:	b29a      	uxth	r2, r3
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800372a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372c:	9300      	str	r3, [sp, #0]
 800372e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003730:	2200      	movs	r2, #0
 8003732:	494f      	ldr	r1, [pc, #316]	; (8003870 <HAL_I2C_Master_Receive+0x448>)
 8003734:	68f8      	ldr	r0, [r7, #12]
 8003736:	f001 fd65 	bl	8005204 <I2C_WaitOnFlagUntilTimeout>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d001      	beq.n	8003744 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e091      	b.n	8003868 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003752:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	691a      	ldr	r2, [r3, #16]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375e:	b2d2      	uxtb	r2, r2
 8003760:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003766:	1c5a      	adds	r2, r3, #1
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003770:	3b01      	subs	r3, #1
 8003772:	b29a      	uxth	r2, r3
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800377c:	b29b      	uxth	r3, r3
 800377e:	3b01      	subs	r3, #1
 8003780:	b29a      	uxth	r2, r3
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	691a      	ldr	r2, [r3, #16]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003790:	b2d2      	uxtb	r2, r2
 8003792:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003798:	1c5a      	adds	r2, r3, #1
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037a2:	3b01      	subs	r3, #1
 80037a4:	b29a      	uxth	r2, r3
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	3b01      	subs	r3, #1
 80037b2:	b29a      	uxth	r2, r3
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80037b8:	e042      	b.n	8003840 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80037be:	68f8      	ldr	r0, [r7, #12]
 80037c0:	f001 feaa 	bl	8005518 <I2C_WaitOnRXNEFlagUntilTimeout>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d001      	beq.n	80037ce <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e04c      	b.n	8003868 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	691a      	ldr	r2, [r3, #16]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d8:	b2d2      	uxtb	r2, r2
 80037da:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e0:	1c5a      	adds	r2, r3, #1
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ea:	3b01      	subs	r3, #1
 80037ec:	b29a      	uxth	r2, r3
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037f6:	b29b      	uxth	r3, r3
 80037f8:	3b01      	subs	r3, #1
 80037fa:	b29a      	uxth	r2, r3
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	695b      	ldr	r3, [r3, #20]
 8003806:	f003 0304 	and.w	r3, r3, #4
 800380a:	2b04      	cmp	r3, #4
 800380c:	d118      	bne.n	8003840 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	691a      	ldr	r2, [r3, #16]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003818:	b2d2      	uxtb	r2, r2
 800381a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003820:	1c5a      	adds	r2, r3, #1
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800382a:	3b01      	subs	r3, #1
 800382c:	b29a      	uxth	r2, r3
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003836:	b29b      	uxth	r3, r3
 8003838:	3b01      	subs	r3, #1
 800383a:	b29a      	uxth	r2, r3
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003844:	2b00      	cmp	r3, #0
 8003846:	f47f aec2 	bne.w	80035ce <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2220      	movs	r2, #32
 800384e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2200      	movs	r2, #0
 8003856:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003862:	2300      	movs	r3, #0
 8003864:	e000      	b.n	8003868 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003866:	2302      	movs	r3, #2
  }
}
 8003868:	4618      	mov	r0, r3
 800386a:	3728      	adds	r7, #40	; 0x28
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}
 8003870:	00010004 	.word	0x00010004

08003874 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b088      	sub	sp, #32
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800387c:	2300      	movs	r3, #0
 800387e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800388c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003894:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800389c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800389e:	7bfb      	ldrb	r3, [r7, #15]
 80038a0:	2b10      	cmp	r3, #16
 80038a2:	d003      	beq.n	80038ac <HAL_I2C_EV_IRQHandler+0x38>
 80038a4:	7bfb      	ldrb	r3, [r7, #15]
 80038a6:	2b40      	cmp	r3, #64	; 0x40
 80038a8:	f040 80c1 	bne.w	8003a2e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	699b      	ldr	r3, [r3, #24]
 80038b2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	695b      	ldr	r3, [r3, #20]
 80038ba:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	f003 0301 	and.w	r3, r3, #1
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d10d      	bne.n	80038e2 <HAL_I2C_EV_IRQHandler+0x6e>
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80038cc:	d003      	beq.n	80038d6 <HAL_I2C_EV_IRQHandler+0x62>
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80038d4:	d101      	bne.n	80038da <HAL_I2C_EV_IRQHandler+0x66>
 80038d6:	2301      	movs	r3, #1
 80038d8:	e000      	b.n	80038dc <HAL_I2C_EV_IRQHandler+0x68>
 80038da:	2300      	movs	r3, #0
 80038dc:	2b01      	cmp	r3, #1
 80038de:	f000 8132 	beq.w	8003b46 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	f003 0301 	and.w	r3, r3, #1
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d00c      	beq.n	8003906 <HAL_I2C_EV_IRQHandler+0x92>
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	0a5b      	lsrs	r3, r3, #9
 80038f0:	f003 0301 	and.w	r3, r3, #1
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d006      	beq.n	8003906 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f001 fe92 	bl	8005622 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f000 fcdc 	bl	80042bc <I2C_Master_SB>
 8003904:	e092      	b.n	8003a2c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	08db      	lsrs	r3, r3, #3
 800390a:	f003 0301 	and.w	r3, r3, #1
 800390e:	2b00      	cmp	r3, #0
 8003910:	d009      	beq.n	8003926 <HAL_I2C_EV_IRQHandler+0xb2>
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	0a5b      	lsrs	r3, r3, #9
 8003916:	f003 0301 	and.w	r3, r3, #1
 800391a:	2b00      	cmp	r3, #0
 800391c:	d003      	beq.n	8003926 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f000 fd52 	bl	80043c8 <I2C_Master_ADD10>
 8003924:	e082      	b.n	8003a2c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	085b      	lsrs	r3, r3, #1
 800392a:	f003 0301 	and.w	r3, r3, #1
 800392e:	2b00      	cmp	r3, #0
 8003930:	d009      	beq.n	8003946 <HAL_I2C_EV_IRQHandler+0xd2>
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	0a5b      	lsrs	r3, r3, #9
 8003936:	f003 0301 	and.w	r3, r3, #1
 800393a:	2b00      	cmp	r3, #0
 800393c:	d003      	beq.n	8003946 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 fd6c 	bl	800441c <I2C_Master_ADDR>
 8003944:	e072      	b.n	8003a2c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	089b      	lsrs	r3, r3, #2
 800394a:	f003 0301 	and.w	r3, r3, #1
 800394e:	2b00      	cmp	r3, #0
 8003950:	d03b      	beq.n	80039ca <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800395c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003960:	f000 80f3 	beq.w	8003b4a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	09db      	lsrs	r3, r3, #7
 8003968:	f003 0301 	and.w	r3, r3, #1
 800396c:	2b00      	cmp	r3, #0
 800396e:	d00f      	beq.n	8003990 <HAL_I2C_EV_IRQHandler+0x11c>
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	0a9b      	lsrs	r3, r3, #10
 8003974:	f003 0301 	and.w	r3, r3, #1
 8003978:	2b00      	cmp	r3, #0
 800397a:	d009      	beq.n	8003990 <HAL_I2C_EV_IRQHandler+0x11c>
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	089b      	lsrs	r3, r3, #2
 8003980:	f003 0301 	and.w	r3, r3, #1
 8003984:	2b00      	cmp	r3, #0
 8003986:	d103      	bne.n	8003990 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f000 f94c 	bl	8003c26 <I2C_MasterTransmit_TXE>
 800398e:	e04d      	b.n	8003a2c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	089b      	lsrs	r3, r3, #2
 8003994:	f003 0301 	and.w	r3, r3, #1
 8003998:	2b00      	cmp	r3, #0
 800399a:	f000 80d6 	beq.w	8003b4a <HAL_I2C_EV_IRQHandler+0x2d6>
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	0a5b      	lsrs	r3, r3, #9
 80039a2:	f003 0301 	and.w	r3, r3, #1
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	f000 80cf 	beq.w	8003b4a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80039ac:	7bbb      	ldrb	r3, [r7, #14]
 80039ae:	2b21      	cmp	r3, #33	; 0x21
 80039b0:	d103      	bne.n	80039ba <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 f9d3 	bl	8003d5e <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039b8:	e0c7      	b.n	8003b4a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80039ba:	7bfb      	ldrb	r3, [r7, #15]
 80039bc:	2b40      	cmp	r3, #64	; 0x40
 80039be:	f040 80c4 	bne.w	8003b4a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f000 fa41 	bl	8003e4a <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039c8:	e0bf      	b.n	8003b4a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039d8:	f000 80b7 	beq.w	8003b4a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	099b      	lsrs	r3, r3, #6
 80039e0:	f003 0301 	and.w	r3, r3, #1
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d00f      	beq.n	8003a08 <HAL_I2C_EV_IRQHandler+0x194>
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	0a9b      	lsrs	r3, r3, #10
 80039ec:	f003 0301 	and.w	r3, r3, #1
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d009      	beq.n	8003a08 <HAL_I2C_EV_IRQHandler+0x194>
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	089b      	lsrs	r3, r3, #2
 80039f8:	f003 0301 	and.w	r3, r3, #1
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d103      	bne.n	8003a08 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f000 fab6 	bl	8003f72 <I2C_MasterReceive_RXNE>
 8003a06:	e011      	b.n	8003a2c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	089b      	lsrs	r3, r3, #2
 8003a0c:	f003 0301 	and.w	r3, r3, #1
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	f000 809a 	beq.w	8003b4a <HAL_I2C_EV_IRQHandler+0x2d6>
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	0a5b      	lsrs	r3, r3, #9
 8003a1a:	f003 0301 	and.w	r3, r3, #1
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	f000 8093 	beq.w	8003b4a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f000 fb5f 	bl	80040e8 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a2a:	e08e      	b.n	8003b4a <HAL_I2C_EV_IRQHandler+0x2d6>
 8003a2c:	e08d      	b.n	8003b4a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d004      	beq.n	8003a40 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	695b      	ldr	r3, [r3, #20]
 8003a3c:	61fb      	str	r3, [r7, #28]
 8003a3e:	e007      	b.n	8003a50 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	699b      	ldr	r3, [r3, #24]
 8003a46:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	695b      	ldr	r3, [r3, #20]
 8003a4e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	085b      	lsrs	r3, r3, #1
 8003a54:	f003 0301 	and.w	r3, r3, #1
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d012      	beq.n	8003a82 <HAL_I2C_EV_IRQHandler+0x20e>
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	0a5b      	lsrs	r3, r3, #9
 8003a60:	f003 0301 	and.w	r3, r3, #1
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d00c      	beq.n	8003a82 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d003      	beq.n	8003a78 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	699b      	ldr	r3, [r3, #24]
 8003a76:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003a78:	69b9      	ldr	r1, [r7, #24]
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f000 ff1d 	bl	80048ba <I2C_Slave_ADDR>
 8003a80:	e066      	b.n	8003b50 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	091b      	lsrs	r3, r3, #4
 8003a86:	f003 0301 	and.w	r3, r3, #1
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d009      	beq.n	8003aa2 <HAL_I2C_EV_IRQHandler+0x22e>
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	0a5b      	lsrs	r3, r3, #9
 8003a92:	f003 0301 	and.w	r3, r3, #1
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d003      	beq.n	8003aa2 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f000 ff58 	bl	8004950 <I2C_Slave_STOPF>
 8003aa0:	e056      	b.n	8003b50 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003aa2:	7bbb      	ldrb	r3, [r7, #14]
 8003aa4:	2b21      	cmp	r3, #33	; 0x21
 8003aa6:	d002      	beq.n	8003aae <HAL_I2C_EV_IRQHandler+0x23a>
 8003aa8:	7bbb      	ldrb	r3, [r7, #14]
 8003aaa:	2b29      	cmp	r3, #41	; 0x29
 8003aac:	d125      	bne.n	8003afa <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	09db      	lsrs	r3, r3, #7
 8003ab2:	f003 0301 	and.w	r3, r3, #1
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d00f      	beq.n	8003ada <HAL_I2C_EV_IRQHandler+0x266>
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	0a9b      	lsrs	r3, r3, #10
 8003abe:	f003 0301 	and.w	r3, r3, #1
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d009      	beq.n	8003ada <HAL_I2C_EV_IRQHandler+0x266>
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	089b      	lsrs	r3, r3, #2
 8003aca:	f003 0301 	and.w	r3, r3, #1
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d103      	bne.n	8003ada <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f000 fe33 	bl	800473e <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003ad8:	e039      	b.n	8003b4e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	089b      	lsrs	r3, r3, #2
 8003ade:	f003 0301 	and.w	r3, r3, #1
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d033      	beq.n	8003b4e <HAL_I2C_EV_IRQHandler+0x2da>
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	0a5b      	lsrs	r3, r3, #9
 8003aea:	f003 0301 	and.w	r3, r3, #1
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d02d      	beq.n	8003b4e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f000 fe60 	bl	80047b8 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003af8:	e029      	b.n	8003b4e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	099b      	lsrs	r3, r3, #6
 8003afe:	f003 0301 	and.w	r3, r3, #1
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d00f      	beq.n	8003b26 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	0a9b      	lsrs	r3, r3, #10
 8003b0a:	f003 0301 	and.w	r3, r3, #1
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d009      	beq.n	8003b26 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	089b      	lsrs	r3, r3, #2
 8003b16:	f003 0301 	and.w	r3, r3, #1
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d103      	bne.n	8003b26 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f000 fe6b 	bl	80047fa <I2C_SlaveReceive_RXNE>
 8003b24:	e014      	b.n	8003b50 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	089b      	lsrs	r3, r3, #2
 8003b2a:	f003 0301 	and.w	r3, r3, #1
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d00e      	beq.n	8003b50 <HAL_I2C_EV_IRQHandler+0x2dc>
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	0a5b      	lsrs	r3, r3, #9
 8003b36:	f003 0301 	and.w	r3, r3, #1
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d008      	beq.n	8003b50 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f000 fe99 	bl	8004876 <I2C_SlaveReceive_BTF>
 8003b44:	e004      	b.n	8003b50 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003b46:	bf00      	nop
 8003b48:	e002      	b.n	8003b50 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b4a:	bf00      	nop
 8003b4c:	e000      	b.n	8003b50 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003b4e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003b50:	3720      	adds	r7, #32
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}

08003b56 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b56:	b480      	push	{r7}
 8003b58:	b083      	sub	sp, #12
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003b5e:	bf00      	nop
 8003b60:	370c      	adds	r7, #12
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr

08003b6a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b6a:	b480      	push	{r7}
 8003b6c:	b083      	sub	sp, #12
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003b72:	bf00      	nop
 8003b74:	370c      	adds	r7, #12
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr

08003b7e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b7e:	b480      	push	{r7}
 8003b80:	b083      	sub	sp, #12
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003b86:	bf00      	nop
 8003b88:	370c      	adds	r7, #12
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr

08003b92 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b92:	b480      	push	{r7}
 8003b94:	b083      	sub	sp, #12
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003b9a:	bf00      	nop
 8003b9c:	370c      	adds	r7, #12
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr

08003ba6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003ba6:	b480      	push	{r7}
 8003ba8:	b083      	sub	sp, #12
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
 8003bae:	460b      	mov	r3, r1
 8003bb0:	70fb      	strb	r3, [r7, #3]
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003bb6:	bf00      	nop
 8003bb8:	370c      	adds	r7, #12
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr

08003bc2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003bc2:	b480      	push	{r7}
 8003bc4:	b083      	sub	sp, #12
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003bca:	bf00      	nop
 8003bcc:	370c      	adds	r7, #12
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr

08003bd6 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003bd6:	b480      	push	{r7}
 8003bd8:	b083      	sub	sp, #12
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003bde:	bf00      	nop
 8003be0:	370c      	adds	r7, #12
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr

08003bea <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003bea:	b480      	push	{r7}
 8003bec:	b083      	sub	sp, #12
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003bf2:	bf00      	nop
 8003bf4:	370c      	adds	r7, #12
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr

08003bfe <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003bfe:	b480      	push	{r7}
 8003c00:	b083      	sub	sp, #12
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003c06:	bf00      	nop
 8003c08:	370c      	adds	r7, #12
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr

08003c12 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c12:	b480      	push	{r7}
 8003c14:	b083      	sub	sp, #12
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003c1a:	bf00      	nop
 8003c1c:	370c      	adds	r7, #12
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr

08003c26 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003c26:	b580      	push	{r7, lr}
 8003c28:	b084      	sub	sp, #16
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c34:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c3c:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c42:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d150      	bne.n	8003cee <I2C_MasterTransmit_TXE+0xc8>
 8003c4c:	7bfb      	ldrb	r3, [r7, #15]
 8003c4e:	2b21      	cmp	r3, #33	; 0x21
 8003c50:	d14d      	bne.n	8003cee <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	2b08      	cmp	r3, #8
 8003c56:	d01d      	beq.n	8003c94 <I2C_MasterTransmit_TXE+0x6e>
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	2b20      	cmp	r3, #32
 8003c5c:	d01a      	beq.n	8003c94 <I2C_MasterTransmit_TXE+0x6e>
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003c64:	d016      	beq.n	8003c94 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	685a      	ldr	r2, [r3, #4]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003c74:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2211      	movs	r2, #17
 8003c7a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2220      	movs	r2, #32
 8003c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f7ff ff62 	bl	8003b56 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003c92:	e060      	b.n	8003d56 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	685a      	ldr	r2, [r3, #4]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003ca2:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cb2:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2220      	movs	r2, #32
 8003cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	2b40      	cmp	r3, #64	; 0x40
 8003ccc:	d107      	bne.n	8003cde <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f7ff ff7d 	bl	8003bd6 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003cdc:	e03b      	b.n	8003d56 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f7ff ff35 	bl	8003b56 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003cec:	e033      	b.n	8003d56 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003cee:	7bfb      	ldrb	r3, [r7, #15]
 8003cf0:	2b21      	cmp	r3, #33	; 0x21
 8003cf2:	d005      	beq.n	8003d00 <I2C_MasterTransmit_TXE+0xda>
 8003cf4:	7bbb      	ldrb	r3, [r7, #14]
 8003cf6:	2b40      	cmp	r3, #64	; 0x40
 8003cf8:	d12d      	bne.n	8003d56 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003cfa:	7bfb      	ldrb	r3, [r7, #15]
 8003cfc:	2b22      	cmp	r3, #34	; 0x22
 8003cfe:	d12a      	bne.n	8003d56 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d108      	bne.n	8003d1c <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	685a      	ldr	r2, [r3, #4]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d18:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003d1a:	e01c      	b.n	8003d56 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	2b40      	cmp	r3, #64	; 0x40
 8003d26:	d103      	bne.n	8003d30 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f000 f88e 	bl	8003e4a <I2C_MemoryTransmit_TXE_BTF>
}
 8003d2e:	e012      	b.n	8003d56 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d34:	781a      	ldrb	r2, [r3, #0]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d40:	1c5a      	adds	r2, r3, #1
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	3b01      	subs	r3, #1
 8003d4e:	b29a      	uxth	r2, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003d54:	e7ff      	b.n	8003d56 <I2C_MasterTransmit_TXE+0x130>
 8003d56:	bf00      	nop
 8003d58:	3710      	adds	r7, #16
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}

08003d5e <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003d5e:	b580      	push	{r7, lr}
 8003d60:	b084      	sub	sp, #16
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d6a:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	2b21      	cmp	r3, #33	; 0x21
 8003d76:	d164      	bne.n	8003e42 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d012      	beq.n	8003da8 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d86:	781a      	ldrb	r2, [r3, #0]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d92:	1c5a      	adds	r2, r3, #1
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	3b01      	subs	r3, #1
 8003da0:	b29a      	uxth	r2, r3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003da6:	e04c      	b.n	8003e42 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2b08      	cmp	r3, #8
 8003dac:	d01d      	beq.n	8003dea <I2C_MasterTransmit_BTF+0x8c>
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2b20      	cmp	r3, #32
 8003db2:	d01a      	beq.n	8003dea <I2C_MasterTransmit_BTF+0x8c>
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003dba:	d016      	beq.n	8003dea <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	685a      	ldr	r2, [r3, #4]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003dca:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2211      	movs	r2, #17
 8003dd0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2220      	movs	r2, #32
 8003dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f7ff feb7 	bl	8003b56 <HAL_I2C_MasterTxCpltCallback>
}
 8003de8:	e02b      	b.n	8003e42 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	685a      	ldr	r2, [r3, #4]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003df8:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e08:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2220      	movs	r2, #32
 8003e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	2b40      	cmp	r3, #64	; 0x40
 8003e22:	d107      	bne.n	8003e34 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f7ff fed2 	bl	8003bd6 <HAL_I2C_MemTxCpltCallback>
}
 8003e32:	e006      	b.n	8003e42 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f7ff fe8a 	bl	8003b56 <HAL_I2C_MasterTxCpltCallback>
}
 8003e42:	bf00      	nop
 8003e44:	3710      	adds	r7, #16
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}

08003e4a <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003e4a:	b580      	push	{r7, lr}
 8003e4c:	b084      	sub	sp, #16
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e58:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d11d      	bne.n	8003e9e <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d10b      	bne.n	8003e82 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e6e:	b2da      	uxtb	r2, r3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e7a:	1c9a      	adds	r2, r3, #2
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003e80:	e073      	b.n	8003f6a <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	121b      	asrs	r3, r3, #8
 8003e8a:	b2da      	uxtb	r2, r3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e96:	1c5a      	adds	r2, r3, #1
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003e9c:	e065      	b.n	8003f6a <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d10b      	bne.n	8003ebe <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003eaa:	b2da      	uxtb	r2, r3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eb6:	1c5a      	adds	r2, r3, #1
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003ebc:	e055      	b.n	8003f6a <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d151      	bne.n	8003f6a <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003ec6:	7bfb      	ldrb	r3, [r7, #15]
 8003ec8:	2b22      	cmp	r3, #34	; 0x22
 8003eca:	d10d      	bne.n	8003ee8 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003eda:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ee0:	1c5a      	adds	r2, r3, #1
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003ee6:	e040      	b.n	8003f6a <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d015      	beq.n	8003f1e <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003ef2:	7bfb      	ldrb	r3, [r7, #15]
 8003ef4:	2b21      	cmp	r3, #33	; 0x21
 8003ef6:	d112      	bne.n	8003f1e <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efc:	781a      	ldrb	r2, [r3, #0]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f08:	1c5a      	adds	r2, r3, #1
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	3b01      	subs	r3, #1
 8003f16:	b29a      	uxth	r2, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003f1c:	e025      	b.n	8003f6a <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d120      	bne.n	8003f6a <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003f28:	7bfb      	ldrb	r3, [r7, #15]
 8003f2a:	2b21      	cmp	r3, #33	; 0x21
 8003f2c:	d11d      	bne.n	8003f6a <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	685a      	ldr	r2, [r3, #4]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003f3c:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f4c:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2220      	movs	r2, #32
 8003f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f7ff fe36 	bl	8003bd6 <HAL_I2C_MemTxCpltCallback>
}
 8003f6a:	bf00      	nop
 8003f6c:	3710      	adds	r7, #16
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}

08003f72 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003f72:	b580      	push	{r7, lr}
 8003f74:	b084      	sub	sp, #16
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	2b22      	cmp	r3, #34	; 0x22
 8003f84:	f040 80ac 	bne.w	80040e0 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2b03      	cmp	r3, #3
 8003f94:	d921      	bls.n	8003fda <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	691a      	ldr	r2, [r3, #16]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa0:	b2d2      	uxtb	r2, r2
 8003fa2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa8:	1c5a      	adds	r2, r3, #1
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	3b01      	subs	r3, #1
 8003fb6:	b29a      	uxth	r2, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	2b03      	cmp	r3, #3
 8003fc4:	f040 808c 	bne.w	80040e0 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	685a      	ldr	r2, [r3, #4]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fd6:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003fd8:	e082      	b.n	80040e0 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d075      	beq.n	80040ce <I2C_MasterReceive_RXNE+0x15c>
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d002      	beq.n	8003fee <I2C_MasterReceive_RXNE+0x7c>
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d16f      	bne.n	80040ce <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f001 fa60 	bl	80054b4 <I2C_WaitOnSTOPRequestThroughIT>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d142      	bne.n	8004080 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004008:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	685a      	ldr	r2, [r3, #4]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004018:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	691a      	ldr	r2, [r3, #16]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004024:	b2d2      	uxtb	r2, r2
 8004026:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402c:	1c5a      	adds	r2, r3, #1
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004036:	b29b      	uxth	r3, r3
 8004038:	3b01      	subs	r3, #1
 800403a:	b29a      	uxth	r2, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2220      	movs	r2, #32
 8004044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800404e:	b2db      	uxtb	r3, r3
 8004050:	2b40      	cmp	r3, #64	; 0x40
 8004052:	d10a      	bne.n	800406a <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2200      	movs	r2, #0
 8004060:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f7ff fdc1 	bl	8003bea <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004068:	e03a      	b.n	80040e0 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2212      	movs	r2, #18
 8004076:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f7ff fd76 	bl	8003b6a <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800407e:	e02f      	b.n	80040e0 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	685a      	ldr	r2, [r3, #4]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800408e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	691a      	ldr	r2, [r3, #16]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409a:	b2d2      	uxtb	r2, r2
 800409c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a2:	1c5a      	adds	r2, r3, #1
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ac:	b29b      	uxth	r3, r3
 80040ae:	3b01      	subs	r3, #1
 80040b0:	b29a      	uxth	r2, r3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2220      	movs	r2, #32
 80040ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f7ff fd99 	bl	8003bfe <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80040cc:	e008      	b.n	80040e0 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	685a      	ldr	r2, [r3, #4]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040dc:	605a      	str	r2, [r3, #4]
}
 80040de:	e7ff      	b.n	80040e0 <I2C_MasterReceive_RXNE+0x16e>
 80040e0:	bf00      	nop
 80040e2:	3710      	adds	r7, #16
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f4:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	2b04      	cmp	r3, #4
 80040fe:	d11b      	bne.n	8004138 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	685a      	ldr	r2, [r3, #4]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800410e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	691a      	ldr	r2, [r3, #16]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411a:	b2d2      	uxtb	r2, r2
 800411c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004122:	1c5a      	adds	r2, r3, #1
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800412c:	b29b      	uxth	r3, r3
 800412e:	3b01      	subs	r3, #1
 8004130:	b29a      	uxth	r2, r3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004136:	e0bd      	b.n	80042b4 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800413c:	b29b      	uxth	r3, r3
 800413e:	2b03      	cmp	r3, #3
 8004140:	d129      	bne.n	8004196 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	685a      	ldr	r2, [r3, #4]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004150:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2b04      	cmp	r3, #4
 8004156:	d00a      	beq.n	800416e <I2C_MasterReceive_BTF+0x86>
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2b02      	cmp	r3, #2
 800415c:	d007      	beq.n	800416e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800416c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	691a      	ldr	r2, [r3, #16]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004178:	b2d2      	uxtb	r2, r2
 800417a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004180:	1c5a      	adds	r2, r3, #1
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800418a:	b29b      	uxth	r3, r3
 800418c:	3b01      	subs	r3, #1
 800418e:	b29a      	uxth	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004194:	e08e      	b.n	80042b4 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800419a:	b29b      	uxth	r3, r3
 800419c:	2b02      	cmp	r3, #2
 800419e:	d176      	bne.n	800428e <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d002      	beq.n	80041ac <I2C_MasterReceive_BTF+0xc4>
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2b10      	cmp	r3, #16
 80041aa:	d108      	bne.n	80041be <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041ba:	601a      	str	r2, [r3, #0]
 80041bc:	e019      	b.n	80041f2 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2b04      	cmp	r3, #4
 80041c2:	d002      	beq.n	80041ca <I2C_MasterReceive_BTF+0xe2>
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d108      	bne.n	80041dc <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80041d8:	601a      	str	r2, [r3, #0]
 80041da:	e00a      	b.n	80041f2 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2b10      	cmp	r3, #16
 80041e0:	d007      	beq.n	80041f2 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041f0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	691a      	ldr	r2, [r3, #16]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fc:	b2d2      	uxtb	r2, r2
 80041fe:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004204:	1c5a      	adds	r2, r3, #1
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800420e:	b29b      	uxth	r3, r3
 8004210:	3b01      	subs	r3, #1
 8004212:	b29a      	uxth	r2, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	691a      	ldr	r2, [r3, #16]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004222:	b2d2      	uxtb	r2, r2
 8004224:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422a:	1c5a      	adds	r2, r3, #1
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004234:	b29b      	uxth	r3, r3
 8004236:	3b01      	subs	r3, #1
 8004238:	b29a      	uxth	r2, r3
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	685a      	ldr	r2, [r3, #4]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800424c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2220      	movs	r2, #32
 8004252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800425c:	b2db      	uxtb	r3, r3
 800425e:	2b40      	cmp	r3, #64	; 0x40
 8004260:	d10a      	bne.n	8004278 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f7ff fcba 	bl	8003bea <HAL_I2C_MemRxCpltCallback>
}
 8004276:	e01d      	b.n	80042b4 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2212      	movs	r2, #18
 8004284:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f7ff fc6f 	bl	8003b6a <HAL_I2C_MasterRxCpltCallback>
}
 800428c:	e012      	b.n	80042b4 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	691a      	ldr	r2, [r3, #16]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004298:	b2d2      	uxtb	r2, r2
 800429a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a0:	1c5a      	adds	r2, r3, #1
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	3b01      	subs	r3, #1
 80042ae:	b29a      	uxth	r2, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80042b4:	bf00      	nop
 80042b6:	3710      	adds	r7, #16
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}

080042bc <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	2b40      	cmp	r3, #64	; 0x40
 80042ce:	d117      	bne.n	8004300 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d109      	bne.n	80042ec <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	461a      	mov	r2, r3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80042e8:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80042ea:	e067      	b.n	80043bc <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	f043 0301 	orr.w	r3, r3, #1
 80042f6:	b2da      	uxtb	r2, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	611a      	str	r2, [r3, #16]
}
 80042fe:	e05d      	b.n	80043bc <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	691b      	ldr	r3, [r3, #16]
 8004304:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004308:	d133      	bne.n	8004372 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004310:	b2db      	uxtb	r3, r3
 8004312:	2b21      	cmp	r3, #33	; 0x21
 8004314:	d109      	bne.n	800432a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800431a:	b2db      	uxtb	r3, r3
 800431c:	461a      	mov	r2, r3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004326:	611a      	str	r2, [r3, #16]
 8004328:	e008      	b.n	800433c <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800432e:	b2db      	uxtb	r3, r3
 8004330:	f043 0301 	orr.w	r3, r3, #1
 8004334:	b2da      	uxtb	r2, r3
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004340:	2b00      	cmp	r3, #0
 8004342:	d004      	beq.n	800434e <I2C_Master_SB+0x92>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800434a:	2b00      	cmp	r3, #0
 800434c:	d108      	bne.n	8004360 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004352:	2b00      	cmp	r3, #0
 8004354:	d032      	beq.n	80043bc <I2C_Master_SB+0x100>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800435a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800435c:	2b00      	cmp	r3, #0
 800435e:	d02d      	beq.n	80043bc <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	685a      	ldr	r2, [r3, #4]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800436e:	605a      	str	r2, [r3, #4]
}
 8004370:	e024      	b.n	80043bc <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004376:	2b00      	cmp	r3, #0
 8004378:	d10e      	bne.n	8004398 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800437e:	b29b      	uxth	r3, r3
 8004380:	11db      	asrs	r3, r3, #7
 8004382:	b2db      	uxtb	r3, r3
 8004384:	f003 0306 	and.w	r3, r3, #6
 8004388:	b2db      	uxtb	r3, r3
 800438a:	f063 030f 	orn	r3, r3, #15
 800438e:	b2da      	uxtb	r2, r3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	611a      	str	r2, [r3, #16]
}
 8004396:	e011      	b.n	80043bc <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800439c:	2b01      	cmp	r3, #1
 800439e:	d10d      	bne.n	80043bc <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	11db      	asrs	r3, r3, #7
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	f003 0306 	and.w	r3, r3, #6
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	f063 030e 	orn	r3, r3, #14
 80043b4:	b2da      	uxtb	r2, r3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	611a      	str	r2, [r3, #16]
}
 80043bc:	bf00      	nop
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043d4:	b2da      	uxtb	r2, r3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d004      	beq.n	80043ee <I2C_Master_ADD10+0x26>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d108      	bne.n	8004400 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d00c      	beq.n	8004410 <I2C_Master_ADD10+0x48>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d007      	beq.n	8004410 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	685a      	ldr	r2, [r3, #4]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800440e:	605a      	str	r2, [r3, #4]
  }
}
 8004410:	bf00      	nop
 8004412:	370c      	adds	r7, #12
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800441c:	b480      	push	{r7}
 800441e:	b091      	sub	sp, #68	; 0x44
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800442a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004432:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004438:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004440:	b2db      	uxtb	r3, r3
 8004442:	2b22      	cmp	r3, #34	; 0x22
 8004444:	f040 8169 	bne.w	800471a <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800444c:	2b00      	cmp	r3, #0
 800444e:	d10f      	bne.n	8004470 <I2C_Master_ADDR+0x54>
 8004450:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004454:	2b40      	cmp	r3, #64	; 0x40
 8004456:	d10b      	bne.n	8004470 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004458:	2300      	movs	r3, #0
 800445a:	633b      	str	r3, [r7, #48]	; 0x30
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	695b      	ldr	r3, [r3, #20]
 8004462:	633b      	str	r3, [r7, #48]	; 0x30
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	699b      	ldr	r3, [r3, #24]
 800446a:	633b      	str	r3, [r7, #48]	; 0x30
 800446c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800446e:	e160      	b.n	8004732 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004474:	2b00      	cmp	r3, #0
 8004476:	d11d      	bne.n	80044b4 <I2C_Master_ADDR+0x98>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	691b      	ldr	r3, [r3, #16]
 800447c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004480:	d118      	bne.n	80044b4 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004482:	2300      	movs	r3, #0
 8004484:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	695b      	ldr	r3, [r3, #20]
 800448c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	699b      	ldr	r3, [r3, #24]
 8004494:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004496:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044a6:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044ac:	1c5a      	adds	r2, r3, #1
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	651a      	str	r2, [r3, #80]	; 0x50
 80044b2:	e13e      	b.n	8004732 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d113      	bne.n	80044e6 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044be:	2300      	movs	r3, #0
 80044c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	695b      	ldr	r3, [r3, #20]
 80044c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	699b      	ldr	r3, [r3, #24]
 80044d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80044d2:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044e2:	601a      	str	r2, [r3, #0]
 80044e4:	e115      	b.n	8004712 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	f040 808a 	bne.w	8004606 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80044f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80044f8:	d137      	bne.n	800456a <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004508:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004514:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004518:	d113      	bne.n	8004542 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004528:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800452a:	2300      	movs	r3, #0
 800452c:	627b      	str	r3, [r7, #36]	; 0x24
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	695b      	ldr	r3, [r3, #20]
 8004534:	627b      	str	r3, [r7, #36]	; 0x24
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	699b      	ldr	r3, [r3, #24]
 800453c:	627b      	str	r3, [r7, #36]	; 0x24
 800453e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004540:	e0e7      	b.n	8004712 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004542:	2300      	movs	r3, #0
 8004544:	623b      	str	r3, [r7, #32]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	695b      	ldr	r3, [r3, #20]
 800454c:	623b      	str	r3, [r7, #32]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	699b      	ldr	r3, [r3, #24]
 8004554:	623b      	str	r3, [r7, #32]
 8004556:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004566:	601a      	str	r2, [r3, #0]
 8004568:	e0d3      	b.n	8004712 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800456a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800456c:	2b08      	cmp	r3, #8
 800456e:	d02e      	beq.n	80045ce <I2C_Master_ADDR+0x1b2>
 8004570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004572:	2b20      	cmp	r3, #32
 8004574:	d02b      	beq.n	80045ce <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004578:	2b12      	cmp	r3, #18
 800457a:	d102      	bne.n	8004582 <I2C_Master_ADDR+0x166>
 800457c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800457e:	2b01      	cmp	r3, #1
 8004580:	d125      	bne.n	80045ce <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004584:	2b04      	cmp	r3, #4
 8004586:	d00e      	beq.n	80045a6 <I2C_Master_ADDR+0x18a>
 8004588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800458a:	2b02      	cmp	r3, #2
 800458c:	d00b      	beq.n	80045a6 <I2C_Master_ADDR+0x18a>
 800458e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004590:	2b10      	cmp	r3, #16
 8004592:	d008      	beq.n	80045a6 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045a2:	601a      	str	r2, [r3, #0]
 80045a4:	e007      	b.n	80045b6 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80045b4:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045b6:	2300      	movs	r3, #0
 80045b8:	61fb      	str	r3, [r7, #28]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	695b      	ldr	r3, [r3, #20]
 80045c0:	61fb      	str	r3, [r7, #28]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	699b      	ldr	r3, [r3, #24]
 80045c8:	61fb      	str	r3, [r7, #28]
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	e0a1      	b.n	8004712 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045dc:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045de:	2300      	movs	r3, #0
 80045e0:	61bb      	str	r3, [r7, #24]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	695b      	ldr	r3, [r3, #20]
 80045e8:	61bb      	str	r3, [r7, #24]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	699b      	ldr	r3, [r3, #24]
 80045f0:	61bb      	str	r3, [r7, #24]
 80045f2:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004602:	601a      	str	r2, [r3, #0]
 8004604:	e085      	b.n	8004712 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800460a:	b29b      	uxth	r3, r3
 800460c:	2b02      	cmp	r3, #2
 800460e:	d14d      	bne.n	80046ac <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004612:	2b04      	cmp	r3, #4
 8004614:	d016      	beq.n	8004644 <I2C_Master_ADDR+0x228>
 8004616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004618:	2b02      	cmp	r3, #2
 800461a:	d013      	beq.n	8004644 <I2C_Master_ADDR+0x228>
 800461c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800461e:	2b10      	cmp	r3, #16
 8004620:	d010      	beq.n	8004644 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004630:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004640:	601a      	str	r2, [r3, #0]
 8004642:	e007      	b.n	8004654 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004652:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800465e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004662:	d117      	bne.n	8004694 <I2C_Master_ADDR+0x278>
 8004664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004666:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800466a:	d00b      	beq.n	8004684 <I2C_Master_ADDR+0x268>
 800466c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800466e:	2b01      	cmp	r3, #1
 8004670:	d008      	beq.n	8004684 <I2C_Master_ADDR+0x268>
 8004672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004674:	2b08      	cmp	r3, #8
 8004676:	d005      	beq.n	8004684 <I2C_Master_ADDR+0x268>
 8004678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800467a:	2b10      	cmp	r3, #16
 800467c:	d002      	beq.n	8004684 <I2C_Master_ADDR+0x268>
 800467e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004680:	2b20      	cmp	r3, #32
 8004682:	d107      	bne.n	8004694 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	685a      	ldr	r2, [r3, #4]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004692:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004694:	2300      	movs	r3, #0
 8004696:	617b      	str	r3, [r7, #20]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	695b      	ldr	r3, [r3, #20]
 800469e:	617b      	str	r3, [r7, #20]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	699b      	ldr	r3, [r3, #24]
 80046a6:	617b      	str	r3, [r7, #20]
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	e032      	b.n	8004712 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80046ba:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046ca:	d117      	bne.n	80046fc <I2C_Master_ADDR+0x2e0>
 80046cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ce:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80046d2:	d00b      	beq.n	80046ec <I2C_Master_ADDR+0x2d0>
 80046d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d008      	beq.n	80046ec <I2C_Master_ADDR+0x2d0>
 80046da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046dc:	2b08      	cmp	r3, #8
 80046de:	d005      	beq.n	80046ec <I2C_Master_ADDR+0x2d0>
 80046e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046e2:	2b10      	cmp	r3, #16
 80046e4:	d002      	beq.n	80046ec <I2C_Master_ADDR+0x2d0>
 80046e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046e8:	2b20      	cmp	r3, #32
 80046ea:	d107      	bne.n	80046fc <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	685a      	ldr	r2, [r3, #4]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80046fa:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046fc:	2300      	movs	r3, #0
 80046fe:	613b      	str	r3, [r7, #16]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	695b      	ldr	r3, [r3, #20]
 8004706:	613b      	str	r3, [r7, #16]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	699b      	ldr	r3, [r3, #24]
 800470e:	613b      	str	r3, [r7, #16]
 8004710:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004718:	e00b      	b.n	8004732 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800471a:	2300      	movs	r3, #0
 800471c:	60fb      	str	r3, [r7, #12]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	695b      	ldr	r3, [r3, #20]
 8004724:	60fb      	str	r3, [r7, #12]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	699b      	ldr	r3, [r3, #24]
 800472c:	60fb      	str	r3, [r7, #12]
 800472e:	68fb      	ldr	r3, [r7, #12]
}
 8004730:	e7ff      	b.n	8004732 <I2C_Master_ADDR+0x316>
 8004732:	bf00      	nop
 8004734:	3744      	adds	r7, #68	; 0x44
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr

0800473e <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800473e:	b580      	push	{r7, lr}
 8004740:	b084      	sub	sp, #16
 8004742:	af00      	add	r7, sp, #0
 8004744:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800474c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004752:	b29b      	uxth	r3, r3
 8004754:	2b00      	cmp	r3, #0
 8004756:	d02b      	beq.n	80047b0 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475c:	781a      	ldrb	r2, [r3, #0]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004768:	1c5a      	adds	r2, r3, #1
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004772:	b29b      	uxth	r3, r3
 8004774:	3b01      	subs	r3, #1
 8004776:	b29a      	uxth	r2, r3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004780:	b29b      	uxth	r3, r3
 8004782:	2b00      	cmp	r3, #0
 8004784:	d114      	bne.n	80047b0 <I2C_SlaveTransmit_TXE+0x72>
 8004786:	7bfb      	ldrb	r3, [r7, #15]
 8004788:	2b29      	cmp	r3, #41	; 0x29
 800478a:	d111      	bne.n	80047b0 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	685a      	ldr	r2, [r3, #4]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800479a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2221      	movs	r2, #33	; 0x21
 80047a0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2228      	movs	r2, #40	; 0x28
 80047a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f7ff f9e7 	bl	8003b7e <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80047b0:	bf00      	nop
 80047b2:	3710      	adds	r7, #16
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}

080047b8 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d011      	beq.n	80047ee <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ce:	781a      	ldrb	r2, [r3, #0]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047da:	1c5a      	adds	r2, r3, #1
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	3b01      	subs	r3, #1
 80047e8:	b29a      	uxth	r2, r3
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80047ee:	bf00      	nop
 80047f0:	370c      	adds	r7, #12
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr

080047fa <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80047fa:	b580      	push	{r7, lr}
 80047fc:	b084      	sub	sp, #16
 80047fe:	af00      	add	r7, sp, #0
 8004800:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004808:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800480e:	b29b      	uxth	r3, r3
 8004810:	2b00      	cmp	r3, #0
 8004812:	d02c      	beq.n	800486e <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	691a      	ldr	r2, [r3, #16]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481e:	b2d2      	uxtb	r2, r2
 8004820:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004826:	1c5a      	adds	r2, r3, #1
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004830:	b29b      	uxth	r3, r3
 8004832:	3b01      	subs	r3, #1
 8004834:	b29a      	uxth	r2, r3
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800483e:	b29b      	uxth	r3, r3
 8004840:	2b00      	cmp	r3, #0
 8004842:	d114      	bne.n	800486e <I2C_SlaveReceive_RXNE+0x74>
 8004844:	7bfb      	ldrb	r3, [r7, #15]
 8004846:	2b2a      	cmp	r3, #42	; 0x2a
 8004848:	d111      	bne.n	800486e <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	685a      	ldr	r2, [r3, #4]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004858:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2222      	movs	r2, #34	; 0x22
 800485e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2228      	movs	r2, #40	; 0x28
 8004864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f7ff f992 	bl	8003b92 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800486e:	bf00      	nop
 8004870:	3710      	adds	r7, #16
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}

08004876 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004876:	b480      	push	{r7}
 8004878:	b083      	sub	sp, #12
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004882:	b29b      	uxth	r3, r3
 8004884:	2b00      	cmp	r3, #0
 8004886:	d012      	beq.n	80048ae <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	691a      	ldr	r2, [r3, #16]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004892:	b2d2      	uxtb	r2, r2
 8004894:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489a:	1c5a      	adds	r2, r3, #1
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	3b01      	subs	r3, #1
 80048a8:	b29a      	uxth	r2, r3
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80048ae:	bf00      	nop
 80048b0:	370c      	adds	r7, #12
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr

080048ba <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80048ba:	b580      	push	{r7, lr}
 80048bc:	b084      	sub	sp, #16
 80048be:	af00      	add	r7, sp, #0
 80048c0:	6078      	str	r0, [r7, #4]
 80048c2:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80048c4:	2300      	movs	r3, #0
 80048c6:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80048d4:	2b28      	cmp	r3, #40	; 0x28
 80048d6:	d127      	bne.n	8004928 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	685a      	ldr	r2, [r3, #4]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048e6:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	089b      	lsrs	r3, r3, #2
 80048ec:	f003 0301 	and.w	r3, r3, #1
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d101      	bne.n	80048f8 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80048f4:	2301      	movs	r3, #1
 80048f6:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	09db      	lsrs	r3, r3, #7
 80048fc:	f003 0301 	and.w	r3, r3, #1
 8004900:	2b00      	cmp	r3, #0
 8004902:	d103      	bne.n	800490c <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	81bb      	strh	r3, [r7, #12]
 800490a:	e002      	b.n	8004912 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	699b      	ldr	r3, [r3, #24]
 8004910:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800491a:	89ba      	ldrh	r2, [r7, #12]
 800491c:	7bfb      	ldrb	r3, [r7, #15]
 800491e:	4619      	mov	r1, r3
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f7ff f940 	bl	8003ba6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004926:	e00e      	b.n	8004946 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004928:	2300      	movs	r3, #0
 800492a:	60bb      	str	r3, [r7, #8]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	695b      	ldr	r3, [r3, #20]
 8004932:	60bb      	str	r3, [r7, #8]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	699b      	ldr	r3, [r3, #24]
 800493a:	60bb      	str	r3, [r7, #8]
 800493c:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004946:	bf00      	nop
 8004948:	3710      	adds	r7, #16
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
	...

08004950 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b084      	sub	sp, #16
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800495e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	685a      	ldr	r2, [r3, #4]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800496e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004970:	2300      	movs	r3, #0
 8004972:	60bb      	str	r3, [r7, #8]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	695b      	ldr	r3, [r3, #20]
 800497a:	60bb      	str	r3, [r7, #8]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f042 0201 	orr.w	r2, r2, #1
 800498a:	601a      	str	r2, [r3, #0]
 800498c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800499c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049ac:	d172      	bne.n	8004a94 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80049ae:	7bfb      	ldrb	r3, [r7, #15]
 80049b0:	2b22      	cmp	r3, #34	; 0x22
 80049b2:	d002      	beq.n	80049ba <I2C_Slave_STOPF+0x6a>
 80049b4:	7bfb      	ldrb	r3, [r7, #15]
 80049b6:	2b2a      	cmp	r3, #42	; 0x2a
 80049b8:	d135      	bne.n	8004a26 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	b29a      	uxth	r2, r3
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d005      	beq.n	80049de <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d6:	f043 0204 	orr.w	r2, r3, #4
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	685a      	ldr	r2, [r3, #4]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049ec:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f2:	4618      	mov	r0, r3
 80049f4:	f7fe f81a 	bl	8002a2c <HAL_DMA_GetState>
 80049f8:	4603      	mov	r3, r0
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d049      	beq.n	8004a92 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a02:	4a69      	ldr	r2, [pc, #420]	; (8004ba8 <I2C_Slave_STOPF+0x258>)
 8004a04:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f7fd fe62 	bl	80026d4 <HAL_DMA_Abort_IT>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d03d      	beq.n	8004a92 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a20:	4610      	mov	r0, r2
 8004a22:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004a24:	e035      	b.n	8004a92 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	b29a      	uxth	r2, r3
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d005      	beq.n	8004a4a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a42:	f043 0204 	orr.w	r2, r3, #4
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	685a      	ldr	r2, [r3, #4]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a58:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f7fd ffe4 	bl	8002a2c <HAL_DMA_GetState>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d014      	beq.n	8004a94 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a6e:	4a4e      	ldr	r2, [pc, #312]	; (8004ba8 <I2C_Slave_STOPF+0x258>)
 8004a70:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a76:	4618      	mov	r0, r3
 8004a78:	f7fd fe2c 	bl	80026d4 <HAL_DMA_Abort_IT>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d008      	beq.n	8004a94 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004a8c:	4610      	mov	r0, r2
 8004a8e:	4798      	blx	r3
 8004a90:	e000      	b.n	8004a94 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004a92:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d03e      	beq.n	8004b1c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	695b      	ldr	r3, [r3, #20]
 8004aa4:	f003 0304 	and.w	r3, r3, #4
 8004aa8:	2b04      	cmp	r3, #4
 8004aaa:	d112      	bne.n	8004ad2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	691a      	ldr	r2, [r3, #16]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab6:	b2d2      	uxtb	r2, r2
 8004ab8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004abe:	1c5a      	adds	r2, r3, #1
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	3b01      	subs	r3, #1
 8004acc:	b29a      	uxth	r2, r3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	695b      	ldr	r3, [r3, #20]
 8004ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004adc:	2b40      	cmp	r3, #64	; 0x40
 8004ade:	d112      	bne.n	8004b06 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	691a      	ldr	r2, [r3, #16]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aea:	b2d2      	uxtb	r2, r2
 8004aec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af2:	1c5a      	adds	r2, r3, #1
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	3b01      	subs	r3, #1
 8004b00:	b29a      	uxth	r2, r3
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d005      	beq.n	8004b1c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b14:	f043 0204 	orr.w	r2, r3, #4
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d003      	beq.n	8004b2c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f000 f843 	bl	8004bb0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004b2a:	e039      	b.n	8004ba0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004b2c:	7bfb      	ldrb	r3, [r7, #15]
 8004b2e:	2b2a      	cmp	r3, #42	; 0x2a
 8004b30:	d109      	bne.n	8004b46 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2228      	movs	r2, #40	; 0x28
 8004b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f7ff f826 	bl	8003b92 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	2b28      	cmp	r3, #40	; 0x28
 8004b50:	d111      	bne.n	8004b76 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4a15      	ldr	r2, [pc, #84]	; (8004bac <I2C_Slave_STOPF+0x25c>)
 8004b56:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2220      	movs	r2, #32
 8004b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f7ff f827 	bl	8003bc2 <HAL_I2C_ListenCpltCallback>
}
 8004b74:	e014      	b.n	8004ba0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b7a:	2b22      	cmp	r3, #34	; 0x22
 8004b7c:	d002      	beq.n	8004b84 <I2C_Slave_STOPF+0x234>
 8004b7e:	7bfb      	ldrb	r3, [r7, #15]
 8004b80:	2b22      	cmp	r3, #34	; 0x22
 8004b82:	d10d      	bne.n	8004ba0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2220      	movs	r2, #32
 8004b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f7fe fff9 	bl	8003b92 <HAL_I2C_SlaveRxCpltCallback>
}
 8004ba0:	bf00      	nop
 8004ba2:	3710      	adds	r7, #16
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}
 8004ba8:	080050b5 	.word	0x080050b5
 8004bac:	ffff0000 	.word	0xffff0000

08004bb0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b084      	sub	sp, #16
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bbe:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bc6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004bc8:	7bbb      	ldrb	r3, [r7, #14]
 8004bca:	2b10      	cmp	r3, #16
 8004bcc:	d002      	beq.n	8004bd4 <I2C_ITError+0x24>
 8004bce:	7bbb      	ldrb	r3, [r7, #14]
 8004bd0:	2b40      	cmp	r3, #64	; 0x40
 8004bd2:	d10a      	bne.n	8004bea <I2C_ITError+0x3a>
 8004bd4:	7bfb      	ldrb	r3, [r7, #15]
 8004bd6:	2b22      	cmp	r3, #34	; 0x22
 8004bd8:	d107      	bne.n	8004bea <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004be8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004bea:	7bfb      	ldrb	r3, [r7, #15]
 8004bec:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004bf0:	2b28      	cmp	r3, #40	; 0x28
 8004bf2:	d107      	bne.n	8004c04 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2228      	movs	r2, #40	; 0x28
 8004bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004c02:	e015      	b.n	8004c30 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c12:	d00a      	beq.n	8004c2a <I2C_ITError+0x7a>
 8004c14:	7bfb      	ldrb	r3, [r7, #15]
 8004c16:	2b60      	cmp	r3, #96	; 0x60
 8004c18:	d007      	beq.n	8004c2a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2220      	movs	r2, #32
 8004c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2200      	movs	r2, #0
 8004c26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c3e:	d162      	bne.n	8004d06 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	685a      	ldr	r2, [r3, #4]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c4e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d020      	beq.n	8004ca0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c62:	4a6a      	ldr	r2, [pc, #424]	; (8004e0c <I2C_ITError+0x25c>)
 8004c64:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f7fd fd32 	bl	80026d4 <HAL_DMA_Abort_IT>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	f000 8089 	beq.w	8004d8a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f022 0201 	bic.w	r2, r2, #1
 8004c86:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2220      	movs	r2, #32
 8004c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004c9a:	4610      	mov	r0, r2
 8004c9c:	4798      	blx	r3
 8004c9e:	e074      	b.n	8004d8a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca4:	4a59      	ldr	r2, [pc, #356]	; (8004e0c <I2C_ITError+0x25c>)
 8004ca6:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cac:	4618      	mov	r0, r3
 8004cae:	f7fd fd11 	bl	80026d4 <HAL_DMA_Abort_IT>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d068      	beq.n	8004d8a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	695b      	ldr	r3, [r3, #20]
 8004cbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cc2:	2b40      	cmp	r3, #64	; 0x40
 8004cc4:	d10b      	bne.n	8004cde <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	691a      	ldr	r2, [r3, #16]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd0:	b2d2      	uxtb	r2, r2
 8004cd2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd8:	1c5a      	adds	r2, r3, #1
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f022 0201 	bic.w	r2, r2, #1
 8004cec:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2220      	movs	r2, #32
 8004cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004d00:	4610      	mov	r0, r2
 8004d02:	4798      	blx	r3
 8004d04:	e041      	b.n	8004d8a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	2b60      	cmp	r3, #96	; 0x60
 8004d10:	d125      	bne.n	8004d5e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2220      	movs	r2, #32
 8004d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	695b      	ldr	r3, [r3, #20]
 8004d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d2a:	2b40      	cmp	r3, #64	; 0x40
 8004d2c:	d10b      	bne.n	8004d46 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	691a      	ldr	r2, [r3, #16]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d38:	b2d2      	uxtb	r2, r2
 8004d3a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d40:	1c5a      	adds	r2, r3, #1
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f022 0201 	bic.w	r2, r2, #1
 8004d54:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f7fe ff5b 	bl	8003c12 <HAL_I2C_AbortCpltCallback>
 8004d5c:	e015      	b.n	8004d8a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	695b      	ldr	r3, [r3, #20]
 8004d64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d68:	2b40      	cmp	r3, #64	; 0x40
 8004d6a:	d10b      	bne.n	8004d84 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	691a      	ldr	r2, [r3, #16]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d76:	b2d2      	uxtb	r2, r2
 8004d78:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7e:	1c5a      	adds	r2, r3, #1
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f7fe ff3a 	bl	8003bfe <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	f003 0301 	and.w	r3, r3, #1
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d10e      	bne.n	8004db8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d109      	bne.n	8004db8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d104      	bne.n	8004db8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d007      	beq.n	8004dc8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	685a      	ldr	r2, [r3, #4]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004dc6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dce:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd4:	f003 0304 	and.w	r3, r3, #4
 8004dd8:	2b04      	cmp	r3, #4
 8004dda:	d113      	bne.n	8004e04 <I2C_ITError+0x254>
 8004ddc:	7bfb      	ldrb	r3, [r7, #15]
 8004dde:	2b28      	cmp	r3, #40	; 0x28
 8004de0:	d110      	bne.n	8004e04 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4a0a      	ldr	r2, [pc, #40]	; (8004e10 <I2C_ITError+0x260>)
 8004de6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2220      	movs	r2, #32
 8004df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f7fe fedf 	bl	8003bc2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004e04:	bf00      	nop
 8004e06:	3710      	adds	r7, #16
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}
 8004e0c:	080050b5 	.word	0x080050b5
 8004e10:	ffff0000 	.word	0xffff0000

08004e14 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b088      	sub	sp, #32
 8004e18:	af02      	add	r7, sp, #8
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	607a      	str	r2, [r7, #4]
 8004e1e:	603b      	str	r3, [r7, #0]
 8004e20:	460b      	mov	r3, r1
 8004e22:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e28:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	2b08      	cmp	r3, #8
 8004e2e:	d006      	beq.n	8004e3e <I2C_MasterRequestWrite+0x2a>
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d003      	beq.n	8004e3e <I2C_MasterRequestWrite+0x2a>
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004e3c:	d108      	bne.n	8004e50 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e4c:	601a      	str	r2, [r3, #0]
 8004e4e:	e00b      	b.n	8004e68 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e54:	2b12      	cmp	r3, #18
 8004e56:	d107      	bne.n	8004e68 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e66:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	9300      	str	r3, [sp, #0]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e74:	68f8      	ldr	r0, [r7, #12]
 8004e76:	f000 f9c5 	bl	8005204 <I2C_WaitOnFlagUntilTimeout>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d00d      	beq.n	8004e9c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e8e:	d103      	bne.n	8004e98 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e96:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	e035      	b.n	8004f08 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	691b      	ldr	r3, [r3, #16]
 8004ea0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ea4:	d108      	bne.n	8004eb8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004ea6:	897b      	ldrh	r3, [r7, #10]
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	461a      	mov	r2, r3
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004eb4:	611a      	str	r2, [r3, #16]
 8004eb6:	e01b      	b.n	8004ef0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004eb8:	897b      	ldrh	r3, [r7, #10]
 8004eba:	11db      	asrs	r3, r3, #7
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	f003 0306 	and.w	r3, r3, #6
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	f063 030f 	orn	r3, r3, #15
 8004ec8:	b2da      	uxtb	r2, r3
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	490e      	ldr	r1, [pc, #56]	; (8004f10 <I2C_MasterRequestWrite+0xfc>)
 8004ed6:	68f8      	ldr	r0, [r7, #12]
 8004ed8:	f000 f9eb 	bl	80052b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004edc:	4603      	mov	r3, r0
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d001      	beq.n	8004ee6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e010      	b.n	8004f08 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004ee6:	897b      	ldrh	r3, [r7, #10]
 8004ee8:	b2da      	uxtb	r2, r3
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	4907      	ldr	r1, [pc, #28]	; (8004f14 <I2C_MasterRequestWrite+0x100>)
 8004ef6:	68f8      	ldr	r0, [r7, #12]
 8004ef8:	f000 f9db 	bl	80052b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004efc:	4603      	mov	r3, r0
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d001      	beq.n	8004f06 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e000      	b.n	8004f08 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004f06:	2300      	movs	r3, #0
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3718      	adds	r7, #24
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}
 8004f10:	00010008 	.word	0x00010008
 8004f14:	00010002 	.word	0x00010002

08004f18 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b088      	sub	sp, #32
 8004f1c:	af02      	add	r7, sp, #8
 8004f1e:	60f8      	str	r0, [r7, #12]
 8004f20:	607a      	str	r2, [r7, #4]
 8004f22:	603b      	str	r3, [r7, #0]
 8004f24:	460b      	mov	r3, r1
 8004f26:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f2c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f3c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	2b08      	cmp	r3, #8
 8004f42:	d006      	beq.n	8004f52 <I2C_MasterRequestRead+0x3a>
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d003      	beq.n	8004f52 <I2C_MasterRequestRead+0x3a>
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004f50:	d108      	bne.n	8004f64 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f60:	601a      	str	r2, [r3, #0]
 8004f62:	e00b      	b.n	8004f7c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f68:	2b11      	cmp	r3, #17
 8004f6a:	d107      	bne.n	8004f7c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f7a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	9300      	str	r3, [sp, #0]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f88:	68f8      	ldr	r0, [r7, #12]
 8004f8a:	f000 f93b 	bl	8005204 <I2C_WaitOnFlagUntilTimeout>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d00d      	beq.n	8004fb0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fa2:	d103      	bne.n	8004fac <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004faa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004fac:	2303      	movs	r3, #3
 8004fae:	e079      	b.n	80050a4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	691b      	ldr	r3, [r3, #16]
 8004fb4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004fb8:	d108      	bne.n	8004fcc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004fba:	897b      	ldrh	r3, [r7, #10]
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	f043 0301 	orr.w	r3, r3, #1
 8004fc2:	b2da      	uxtb	r2, r3
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	611a      	str	r2, [r3, #16]
 8004fca:	e05f      	b.n	800508c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004fcc:	897b      	ldrh	r3, [r7, #10]
 8004fce:	11db      	asrs	r3, r3, #7
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	f003 0306 	and.w	r3, r3, #6
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	f063 030f 	orn	r3, r3, #15
 8004fdc:	b2da      	uxtb	r2, r3
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	4930      	ldr	r1, [pc, #192]	; (80050ac <I2C_MasterRequestRead+0x194>)
 8004fea:	68f8      	ldr	r0, [r7, #12]
 8004fec:	f000 f961 	bl	80052b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d001      	beq.n	8004ffa <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e054      	b.n	80050a4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004ffa:	897b      	ldrh	r3, [r7, #10]
 8004ffc:	b2da      	uxtb	r2, r3
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	4929      	ldr	r1, [pc, #164]	; (80050b0 <I2C_MasterRequestRead+0x198>)
 800500a:	68f8      	ldr	r0, [r7, #12]
 800500c:	f000 f951 	bl	80052b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005010:	4603      	mov	r3, r0
 8005012:	2b00      	cmp	r3, #0
 8005014:	d001      	beq.n	800501a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	e044      	b.n	80050a4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800501a:	2300      	movs	r3, #0
 800501c:	613b      	str	r3, [r7, #16]
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	695b      	ldr	r3, [r3, #20]
 8005024:	613b      	str	r3, [r7, #16]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	699b      	ldr	r3, [r3, #24]
 800502c:	613b      	str	r3, [r7, #16]
 800502e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800503e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	9300      	str	r3, [sp, #0]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800504c:	68f8      	ldr	r0, [r7, #12]
 800504e:	f000 f8d9 	bl	8005204 <I2C_WaitOnFlagUntilTimeout>
 8005052:	4603      	mov	r3, r0
 8005054:	2b00      	cmp	r3, #0
 8005056:	d00d      	beq.n	8005074 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005062:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005066:	d103      	bne.n	8005070 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800506e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005070:	2303      	movs	r3, #3
 8005072:	e017      	b.n	80050a4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005074:	897b      	ldrh	r3, [r7, #10]
 8005076:	11db      	asrs	r3, r3, #7
 8005078:	b2db      	uxtb	r3, r3
 800507a:	f003 0306 	and.w	r3, r3, #6
 800507e:	b2db      	uxtb	r3, r3
 8005080:	f063 030e 	orn	r3, r3, #14
 8005084:	b2da      	uxtb	r2, r3
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	4907      	ldr	r1, [pc, #28]	; (80050b0 <I2C_MasterRequestRead+0x198>)
 8005092:	68f8      	ldr	r0, [r7, #12]
 8005094:	f000 f90d 	bl	80052b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005098:	4603      	mov	r3, r0
 800509a:	2b00      	cmp	r3, #0
 800509c:	d001      	beq.n	80050a2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e000      	b.n	80050a4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80050a2:	2300      	movs	r3, #0
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3718      	adds	r7, #24
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}
 80050ac:	00010008 	.word	0x00010008
 80050b0:	00010002 	.word	0x00010002

080050b4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b086      	sub	sp, #24
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80050bc:	2300      	movs	r3, #0
 80050be:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050cc:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80050ce:	4b4b      	ldr	r3, [pc, #300]	; (80051fc <I2C_DMAAbort+0x148>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	08db      	lsrs	r3, r3, #3
 80050d4:	4a4a      	ldr	r2, [pc, #296]	; (8005200 <I2C_DMAAbort+0x14c>)
 80050d6:	fba2 2303 	umull	r2, r3, r2, r3
 80050da:	0a1a      	lsrs	r2, r3, #8
 80050dc:	4613      	mov	r3, r2
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	4413      	add	r3, r2
 80050e2:	00da      	lsls	r2, r3, #3
 80050e4:	1ad3      	subs	r3, r2, r3
 80050e6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d106      	bne.n	80050fc <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f2:	f043 0220 	orr.w	r2, r3, #32
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80050fa:	e00a      	b.n	8005112 <I2C_DMAAbort+0x5e>
    }
    count--;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	3b01      	subs	r3, #1
 8005100:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800510c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005110:	d0ea      	beq.n	80050e8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005116:	2b00      	cmp	r3, #0
 8005118:	d003      	beq.n	8005122 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800511e:	2200      	movs	r2, #0
 8005120:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005126:	2b00      	cmp	r3, #0
 8005128:	d003      	beq.n	8005132 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800512e:	2200      	movs	r2, #0
 8005130:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005140:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	2200      	movs	r2, #0
 8005146:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800514c:	2b00      	cmp	r3, #0
 800514e:	d003      	beq.n	8005158 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005154:	2200      	movs	r2, #0
 8005156:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800515c:	2b00      	cmp	r3, #0
 800515e:	d003      	beq.n	8005168 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005164:	2200      	movs	r2, #0
 8005166:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f022 0201 	bic.w	r2, r2, #1
 8005176:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800517e:	b2db      	uxtb	r3, r3
 8005180:	2b60      	cmp	r3, #96	; 0x60
 8005182:	d10e      	bne.n	80051a2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	2220      	movs	r2, #32
 8005188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	2200      	movs	r2, #0
 8005190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	2200      	movs	r2, #0
 8005198:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800519a:	6978      	ldr	r0, [r7, #20]
 800519c:	f7fe fd39 	bl	8003c12 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80051a0:	e027      	b.n	80051f2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80051a2:	7cfb      	ldrb	r3, [r7, #19]
 80051a4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80051a8:	2b28      	cmp	r3, #40	; 0x28
 80051aa:	d117      	bne.n	80051dc <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f042 0201 	orr.w	r2, r2, #1
 80051ba:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80051ca:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	2200      	movs	r2, #0
 80051d0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	2228      	movs	r2, #40	; 0x28
 80051d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80051da:	e007      	b.n	80051ec <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	2220      	movs	r2, #32
 80051e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	2200      	movs	r2, #0
 80051e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80051ec:	6978      	ldr	r0, [r7, #20]
 80051ee:	f7fe fd06 	bl	8003bfe <HAL_I2C_ErrorCallback>
}
 80051f2:	bf00      	nop
 80051f4:	3718      	adds	r7, #24
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
 80051fa:	bf00      	nop
 80051fc:	2000002c 	.word	0x2000002c
 8005200:	14f8b589 	.word	0x14f8b589

08005204 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b084      	sub	sp, #16
 8005208:	af00      	add	r7, sp, #0
 800520a:	60f8      	str	r0, [r7, #12]
 800520c:	60b9      	str	r1, [r7, #8]
 800520e:	603b      	str	r3, [r7, #0]
 8005210:	4613      	mov	r3, r2
 8005212:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005214:	e025      	b.n	8005262 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800521c:	d021      	beq.n	8005262 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800521e:	f7fd f811 	bl	8002244 <HAL_GetTick>
 8005222:	4602      	mov	r2, r0
 8005224:	69bb      	ldr	r3, [r7, #24]
 8005226:	1ad3      	subs	r3, r2, r3
 8005228:	683a      	ldr	r2, [r7, #0]
 800522a:	429a      	cmp	r2, r3
 800522c:	d302      	bcc.n	8005234 <I2C_WaitOnFlagUntilTimeout+0x30>
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d116      	bne.n	8005262 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2200      	movs	r2, #0
 8005238:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2220      	movs	r2, #32
 800523e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2200      	movs	r2, #0
 8005246:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800524e:	f043 0220 	orr.w	r2, r3, #32
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2200      	movs	r2, #0
 800525a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e023      	b.n	80052aa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	0c1b      	lsrs	r3, r3, #16
 8005266:	b2db      	uxtb	r3, r3
 8005268:	2b01      	cmp	r3, #1
 800526a:	d10d      	bne.n	8005288 <I2C_WaitOnFlagUntilTimeout+0x84>
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	695b      	ldr	r3, [r3, #20]
 8005272:	43da      	mvns	r2, r3
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	4013      	ands	r3, r2
 8005278:	b29b      	uxth	r3, r3
 800527a:	2b00      	cmp	r3, #0
 800527c:	bf0c      	ite	eq
 800527e:	2301      	moveq	r3, #1
 8005280:	2300      	movne	r3, #0
 8005282:	b2db      	uxtb	r3, r3
 8005284:	461a      	mov	r2, r3
 8005286:	e00c      	b.n	80052a2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	699b      	ldr	r3, [r3, #24]
 800528e:	43da      	mvns	r2, r3
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	4013      	ands	r3, r2
 8005294:	b29b      	uxth	r3, r3
 8005296:	2b00      	cmp	r3, #0
 8005298:	bf0c      	ite	eq
 800529a:	2301      	moveq	r3, #1
 800529c:	2300      	movne	r3, #0
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	461a      	mov	r2, r3
 80052a2:	79fb      	ldrb	r3, [r7, #7]
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d0b6      	beq.n	8005216 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80052a8:	2300      	movs	r3, #0
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3710      	adds	r7, #16
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}

080052b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80052b2:	b580      	push	{r7, lr}
 80052b4:	b084      	sub	sp, #16
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	60f8      	str	r0, [r7, #12]
 80052ba:	60b9      	str	r1, [r7, #8]
 80052bc:	607a      	str	r2, [r7, #4]
 80052be:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80052c0:	e051      	b.n	8005366 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	695b      	ldr	r3, [r3, #20]
 80052c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052d0:	d123      	bne.n	800531a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052e0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80052ea:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2200      	movs	r2, #0
 80052f0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2220      	movs	r2, #32
 80052f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2200      	movs	r2, #0
 80052fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005306:	f043 0204 	orr.w	r2, r3, #4
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2200      	movs	r2, #0
 8005312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e046      	b.n	80053a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005320:	d021      	beq.n	8005366 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005322:	f7fc ff8f 	bl	8002244 <HAL_GetTick>
 8005326:	4602      	mov	r2, r0
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	1ad3      	subs	r3, r2, r3
 800532c:	687a      	ldr	r2, [r7, #4]
 800532e:	429a      	cmp	r2, r3
 8005330:	d302      	bcc.n	8005338 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d116      	bne.n	8005366 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2200      	movs	r2, #0
 800533c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2220      	movs	r2, #32
 8005342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2200      	movs	r2, #0
 800534a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005352:	f043 0220 	orr.w	r2, r3, #32
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2200      	movs	r2, #0
 800535e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e020      	b.n	80053a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	0c1b      	lsrs	r3, r3, #16
 800536a:	b2db      	uxtb	r3, r3
 800536c:	2b01      	cmp	r3, #1
 800536e:	d10c      	bne.n	800538a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	695b      	ldr	r3, [r3, #20]
 8005376:	43da      	mvns	r2, r3
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	4013      	ands	r3, r2
 800537c:	b29b      	uxth	r3, r3
 800537e:	2b00      	cmp	r3, #0
 8005380:	bf14      	ite	ne
 8005382:	2301      	movne	r3, #1
 8005384:	2300      	moveq	r3, #0
 8005386:	b2db      	uxtb	r3, r3
 8005388:	e00b      	b.n	80053a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	699b      	ldr	r3, [r3, #24]
 8005390:	43da      	mvns	r2, r3
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	4013      	ands	r3, r2
 8005396:	b29b      	uxth	r3, r3
 8005398:	2b00      	cmp	r3, #0
 800539a:	bf14      	ite	ne
 800539c:	2301      	movne	r3, #1
 800539e:	2300      	moveq	r3, #0
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d18d      	bne.n	80052c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80053a6:	2300      	movs	r3, #0
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	3710      	adds	r7, #16
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}

080053b0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b084      	sub	sp, #16
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	60f8      	str	r0, [r7, #12]
 80053b8:	60b9      	str	r1, [r7, #8]
 80053ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80053bc:	e02d      	b.n	800541a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80053be:	68f8      	ldr	r0, [r7, #12]
 80053c0:	f000 f900 	bl	80055c4 <I2C_IsAcknowledgeFailed>
 80053c4:	4603      	mov	r3, r0
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d001      	beq.n	80053ce <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	e02d      	b.n	800542a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053d4:	d021      	beq.n	800541a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053d6:	f7fc ff35 	bl	8002244 <HAL_GetTick>
 80053da:	4602      	mov	r2, r0
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	1ad3      	subs	r3, r2, r3
 80053e0:	68ba      	ldr	r2, [r7, #8]
 80053e2:	429a      	cmp	r2, r3
 80053e4:	d302      	bcc.n	80053ec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d116      	bne.n	800541a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2200      	movs	r2, #0
 80053f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2220      	movs	r2, #32
 80053f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2200      	movs	r2, #0
 80053fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005406:	f043 0220 	orr.w	r2, r3, #32
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2200      	movs	r2, #0
 8005412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	e007      	b.n	800542a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	695b      	ldr	r3, [r3, #20]
 8005420:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005424:	2b80      	cmp	r3, #128	; 0x80
 8005426:	d1ca      	bne.n	80053be <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005428:	2300      	movs	r3, #0
}
 800542a:	4618      	mov	r0, r3
 800542c:	3710      	adds	r7, #16
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}

08005432 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005432:	b580      	push	{r7, lr}
 8005434:	b084      	sub	sp, #16
 8005436:	af00      	add	r7, sp, #0
 8005438:	60f8      	str	r0, [r7, #12]
 800543a:	60b9      	str	r1, [r7, #8]
 800543c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800543e:	e02d      	b.n	800549c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005440:	68f8      	ldr	r0, [r7, #12]
 8005442:	f000 f8bf 	bl	80055c4 <I2C_IsAcknowledgeFailed>
 8005446:	4603      	mov	r3, r0
 8005448:	2b00      	cmp	r3, #0
 800544a:	d001      	beq.n	8005450 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	e02d      	b.n	80054ac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005456:	d021      	beq.n	800549c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005458:	f7fc fef4 	bl	8002244 <HAL_GetTick>
 800545c:	4602      	mov	r2, r0
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	1ad3      	subs	r3, r2, r3
 8005462:	68ba      	ldr	r2, [r7, #8]
 8005464:	429a      	cmp	r2, r3
 8005466:	d302      	bcc.n	800546e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d116      	bne.n	800549c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2200      	movs	r2, #0
 8005472:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2220      	movs	r2, #32
 8005478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2200      	movs	r2, #0
 8005480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005488:	f043 0220 	orr.w	r2, r3, #32
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2200      	movs	r2, #0
 8005494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	e007      	b.n	80054ac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	695b      	ldr	r3, [r3, #20]
 80054a2:	f003 0304 	and.w	r3, r3, #4
 80054a6:	2b04      	cmp	r3, #4
 80054a8:	d1ca      	bne.n	8005440 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80054aa:	2300      	movs	r3, #0
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3710      	adds	r7, #16
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}

080054b4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b085      	sub	sp, #20
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80054bc:	2300      	movs	r3, #0
 80054be:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80054c0:	4b13      	ldr	r3, [pc, #76]	; (8005510 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	08db      	lsrs	r3, r3, #3
 80054c6:	4a13      	ldr	r2, [pc, #76]	; (8005514 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80054c8:	fba2 2303 	umull	r2, r3, r2, r3
 80054cc:	0a1a      	lsrs	r2, r3, #8
 80054ce:	4613      	mov	r3, r2
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	4413      	add	r3, r2
 80054d4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	3b01      	subs	r3, #1
 80054da:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d107      	bne.n	80054f2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e6:	f043 0220 	orr.w	r2, r3, #32
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	e008      	b.n	8005504 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005500:	d0e9      	beq.n	80054d6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005502:	2300      	movs	r3, #0
}
 8005504:	4618      	mov	r0, r3
 8005506:	3714      	adds	r7, #20
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr
 8005510:	2000002c 	.word	0x2000002c
 8005514:	14f8b589 	.word	0x14f8b589

08005518 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b084      	sub	sp, #16
 800551c:	af00      	add	r7, sp, #0
 800551e:	60f8      	str	r0, [r7, #12]
 8005520:	60b9      	str	r1, [r7, #8]
 8005522:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005524:	e042      	b.n	80055ac <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	695b      	ldr	r3, [r3, #20]
 800552c:	f003 0310 	and.w	r3, r3, #16
 8005530:	2b10      	cmp	r3, #16
 8005532:	d119      	bne.n	8005568 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f06f 0210 	mvn.w	r2, #16
 800553c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2200      	movs	r2, #0
 8005542:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2220      	movs	r2, #32
 8005548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2200      	movs	r2, #0
 8005550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2200      	movs	r2, #0
 8005560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	e029      	b.n	80055bc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005568:	f7fc fe6c 	bl	8002244 <HAL_GetTick>
 800556c:	4602      	mov	r2, r0
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	1ad3      	subs	r3, r2, r3
 8005572:	68ba      	ldr	r2, [r7, #8]
 8005574:	429a      	cmp	r2, r3
 8005576:	d302      	bcc.n	800557e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d116      	bne.n	80055ac <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2200      	movs	r2, #0
 8005582:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2220      	movs	r2, #32
 8005588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2200      	movs	r2, #0
 8005590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005598:	f043 0220 	orr.w	r2, r3, #32
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2200      	movs	r2, #0
 80055a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	e007      	b.n	80055bc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	695b      	ldr	r3, [r3, #20]
 80055b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055b6:	2b40      	cmp	r3, #64	; 0x40
 80055b8:	d1b5      	bne.n	8005526 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80055ba:	2300      	movs	r3, #0
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3710      	adds	r7, #16
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}

080055c4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b083      	sub	sp, #12
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	695b      	ldr	r3, [r3, #20]
 80055d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055da:	d11b      	bne.n	8005614 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80055e4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2200      	movs	r2, #0
 80055ea:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2220      	movs	r2, #32
 80055f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2200      	movs	r2, #0
 80055f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005600:	f043 0204 	orr.w	r2, r3, #4
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	e000      	b.n	8005616 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005614:	2300      	movs	r3, #0
}
 8005616:	4618      	mov	r0, r3
 8005618:	370c      	adds	r7, #12
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr

08005622 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005622:	b480      	push	{r7}
 8005624:	b083      	sub	sp, #12
 8005626:	af00      	add	r7, sp, #0
 8005628:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800562e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005632:	d103      	bne.n	800563c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2201      	movs	r2, #1
 8005638:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800563a:	e007      	b.n	800564c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005640:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005644:	d102      	bne.n	800564c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2208      	movs	r2, #8
 800564a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800564c:	bf00      	nop
 800564e:	370c      	adds	r7, #12
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr

08005658 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005658:	b5f0      	push	{r4, r5, r6, r7, lr}
 800565a:	b08f      	sub	sp, #60	; 0x3c
 800565c:	af0a      	add	r7, sp, #40	; 0x28
 800565e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d101      	bne.n	800566a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	e10f      	b.n	800588a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8005676:	b2db      	uxtb	r3, r3
 8005678:	2b00      	cmp	r3, #0
 800567a:	d106      	bne.n	800568a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2200      	movs	r2, #0
 8005680:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f006 fa2d 	bl	800bae4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2203      	movs	r2, #3
 800568e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800569a:	2b00      	cmp	r3, #0
 800569c:	d102      	bne.n	80056a4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2200      	movs	r2, #0
 80056a2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4618      	mov	r0, r3
 80056aa:	f003 f860 	bl	800876e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	603b      	str	r3, [r7, #0]
 80056b4:	687e      	ldr	r6, [r7, #4]
 80056b6:	466d      	mov	r5, sp
 80056b8:	f106 0410 	add.w	r4, r6, #16
 80056bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80056be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80056c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80056c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80056c4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80056c8:	e885 0003 	stmia.w	r5, {r0, r1}
 80056cc:	1d33      	adds	r3, r6, #4
 80056ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80056d0:	6838      	ldr	r0, [r7, #0]
 80056d2:	f002 ff37 	bl	8008544 <USB_CoreInit>
 80056d6:	4603      	mov	r3, r0
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d005      	beq.n	80056e8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2202      	movs	r2, #2
 80056e0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	e0d0      	b.n	800588a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	2100      	movs	r1, #0
 80056ee:	4618      	mov	r0, r3
 80056f0:	f003 f84e 	bl	8008790 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056f4:	2300      	movs	r3, #0
 80056f6:	73fb      	strb	r3, [r7, #15]
 80056f8:	e04a      	b.n	8005790 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80056fa:	7bfa      	ldrb	r2, [r7, #15]
 80056fc:	6879      	ldr	r1, [r7, #4]
 80056fe:	4613      	mov	r3, r2
 8005700:	00db      	lsls	r3, r3, #3
 8005702:	4413      	add	r3, r2
 8005704:	009b      	lsls	r3, r3, #2
 8005706:	440b      	add	r3, r1
 8005708:	333d      	adds	r3, #61	; 0x3d
 800570a:	2201      	movs	r2, #1
 800570c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800570e:	7bfa      	ldrb	r2, [r7, #15]
 8005710:	6879      	ldr	r1, [r7, #4]
 8005712:	4613      	mov	r3, r2
 8005714:	00db      	lsls	r3, r3, #3
 8005716:	4413      	add	r3, r2
 8005718:	009b      	lsls	r3, r3, #2
 800571a:	440b      	add	r3, r1
 800571c:	333c      	adds	r3, #60	; 0x3c
 800571e:	7bfa      	ldrb	r2, [r7, #15]
 8005720:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005722:	7bfa      	ldrb	r2, [r7, #15]
 8005724:	7bfb      	ldrb	r3, [r7, #15]
 8005726:	b298      	uxth	r0, r3
 8005728:	6879      	ldr	r1, [r7, #4]
 800572a:	4613      	mov	r3, r2
 800572c:	00db      	lsls	r3, r3, #3
 800572e:	4413      	add	r3, r2
 8005730:	009b      	lsls	r3, r3, #2
 8005732:	440b      	add	r3, r1
 8005734:	3344      	adds	r3, #68	; 0x44
 8005736:	4602      	mov	r2, r0
 8005738:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800573a:	7bfa      	ldrb	r2, [r7, #15]
 800573c:	6879      	ldr	r1, [r7, #4]
 800573e:	4613      	mov	r3, r2
 8005740:	00db      	lsls	r3, r3, #3
 8005742:	4413      	add	r3, r2
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	440b      	add	r3, r1
 8005748:	3340      	adds	r3, #64	; 0x40
 800574a:	2200      	movs	r2, #0
 800574c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800574e:	7bfa      	ldrb	r2, [r7, #15]
 8005750:	6879      	ldr	r1, [r7, #4]
 8005752:	4613      	mov	r3, r2
 8005754:	00db      	lsls	r3, r3, #3
 8005756:	4413      	add	r3, r2
 8005758:	009b      	lsls	r3, r3, #2
 800575a:	440b      	add	r3, r1
 800575c:	3348      	adds	r3, #72	; 0x48
 800575e:	2200      	movs	r2, #0
 8005760:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005762:	7bfa      	ldrb	r2, [r7, #15]
 8005764:	6879      	ldr	r1, [r7, #4]
 8005766:	4613      	mov	r3, r2
 8005768:	00db      	lsls	r3, r3, #3
 800576a:	4413      	add	r3, r2
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	440b      	add	r3, r1
 8005770:	334c      	adds	r3, #76	; 0x4c
 8005772:	2200      	movs	r2, #0
 8005774:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005776:	7bfa      	ldrb	r2, [r7, #15]
 8005778:	6879      	ldr	r1, [r7, #4]
 800577a:	4613      	mov	r3, r2
 800577c:	00db      	lsls	r3, r3, #3
 800577e:	4413      	add	r3, r2
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	440b      	add	r3, r1
 8005784:	3354      	adds	r3, #84	; 0x54
 8005786:	2200      	movs	r2, #0
 8005788:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800578a:	7bfb      	ldrb	r3, [r7, #15]
 800578c:	3301      	adds	r3, #1
 800578e:	73fb      	strb	r3, [r7, #15]
 8005790:	7bfa      	ldrb	r2, [r7, #15]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	429a      	cmp	r2, r3
 8005798:	d3af      	bcc.n	80056fa <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800579a:	2300      	movs	r3, #0
 800579c:	73fb      	strb	r3, [r7, #15]
 800579e:	e044      	b.n	800582a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80057a0:	7bfa      	ldrb	r2, [r7, #15]
 80057a2:	6879      	ldr	r1, [r7, #4]
 80057a4:	4613      	mov	r3, r2
 80057a6:	00db      	lsls	r3, r3, #3
 80057a8:	4413      	add	r3, r2
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	440b      	add	r3, r1
 80057ae:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80057b2:	2200      	movs	r2, #0
 80057b4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80057b6:	7bfa      	ldrb	r2, [r7, #15]
 80057b8:	6879      	ldr	r1, [r7, #4]
 80057ba:	4613      	mov	r3, r2
 80057bc:	00db      	lsls	r3, r3, #3
 80057be:	4413      	add	r3, r2
 80057c0:	009b      	lsls	r3, r3, #2
 80057c2:	440b      	add	r3, r1
 80057c4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80057c8:	7bfa      	ldrb	r2, [r7, #15]
 80057ca:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80057cc:	7bfa      	ldrb	r2, [r7, #15]
 80057ce:	6879      	ldr	r1, [r7, #4]
 80057d0:	4613      	mov	r3, r2
 80057d2:	00db      	lsls	r3, r3, #3
 80057d4:	4413      	add	r3, r2
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	440b      	add	r3, r1
 80057da:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80057de:	2200      	movs	r2, #0
 80057e0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80057e2:	7bfa      	ldrb	r2, [r7, #15]
 80057e4:	6879      	ldr	r1, [r7, #4]
 80057e6:	4613      	mov	r3, r2
 80057e8:	00db      	lsls	r3, r3, #3
 80057ea:	4413      	add	r3, r2
 80057ec:	009b      	lsls	r3, r3, #2
 80057ee:	440b      	add	r3, r1
 80057f0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80057f4:	2200      	movs	r2, #0
 80057f6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80057f8:	7bfa      	ldrb	r2, [r7, #15]
 80057fa:	6879      	ldr	r1, [r7, #4]
 80057fc:	4613      	mov	r3, r2
 80057fe:	00db      	lsls	r3, r3, #3
 8005800:	4413      	add	r3, r2
 8005802:	009b      	lsls	r3, r3, #2
 8005804:	440b      	add	r3, r1
 8005806:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800580a:	2200      	movs	r2, #0
 800580c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800580e:	7bfa      	ldrb	r2, [r7, #15]
 8005810:	6879      	ldr	r1, [r7, #4]
 8005812:	4613      	mov	r3, r2
 8005814:	00db      	lsls	r3, r3, #3
 8005816:	4413      	add	r3, r2
 8005818:	009b      	lsls	r3, r3, #2
 800581a:	440b      	add	r3, r1
 800581c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005820:	2200      	movs	r2, #0
 8005822:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005824:	7bfb      	ldrb	r3, [r7, #15]
 8005826:	3301      	adds	r3, #1
 8005828:	73fb      	strb	r3, [r7, #15]
 800582a:	7bfa      	ldrb	r2, [r7, #15]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	429a      	cmp	r2, r3
 8005832:	d3b5      	bcc.n	80057a0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	603b      	str	r3, [r7, #0]
 800583a:	687e      	ldr	r6, [r7, #4]
 800583c:	466d      	mov	r5, sp
 800583e:	f106 0410 	add.w	r4, r6, #16
 8005842:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005844:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005846:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005848:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800584a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800584e:	e885 0003 	stmia.w	r5, {r0, r1}
 8005852:	1d33      	adds	r3, r6, #4
 8005854:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005856:	6838      	ldr	r0, [r7, #0]
 8005858:	f002 ffe6 	bl	8008828 <USB_DevInit>
 800585c:	4603      	mov	r3, r0
 800585e:	2b00      	cmp	r3, #0
 8005860:	d005      	beq.n	800586e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2202      	movs	r2, #2
 8005866:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	e00d      	b.n	800588a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2201      	movs	r2, #1
 800587a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4618      	mov	r0, r3
 8005884:	f004 f935 	bl	8009af2 <USB_DevDisconnect>

  return HAL_OK;
 8005888:	2300      	movs	r3, #0
}
 800588a:	4618      	mov	r0, r3
 800588c:	3714      	adds	r7, #20
 800588e:	46bd      	mov	sp, r7
 8005890:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005892 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005892:	b580      	push	{r7, lr}
 8005894:	b084      	sub	sp, #16
 8005896:	af00      	add	r7, sp, #0
 8005898:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d101      	bne.n	80058ae <HAL_PCD_Start+0x1c>
 80058aa:	2302      	movs	r3, #2
 80058ac:	e020      	b.n	80058f0 <HAL_PCD_Start+0x5e>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2201      	movs	r2, #1
 80058b2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d109      	bne.n	80058d2 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d005      	beq.n	80058d2 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4618      	mov	r0, r3
 80058d8:	f002 ff38 	bl	800874c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4618      	mov	r0, r3
 80058e2:	f004 f8e5 	bl	8009ab0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2200      	movs	r2, #0
 80058ea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80058ee:	2300      	movs	r3, #0
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3710      	adds	r7, #16
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80058f8:	b590      	push	{r4, r7, lr}
 80058fa:	b08d      	sub	sp, #52	; 0x34
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005906:	6a3b      	ldr	r3, [r7, #32]
 8005908:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4618      	mov	r0, r3
 8005910:	f004 f9a3 	bl	8009c5a <USB_GetMode>
 8005914:	4603      	mov	r3, r0
 8005916:	2b00      	cmp	r3, #0
 8005918:	f040 848a 	bne.w	8006230 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4618      	mov	r0, r3
 8005922:	f004 f907 	bl	8009b34 <USB_ReadInterrupts>
 8005926:	4603      	mov	r3, r0
 8005928:	2b00      	cmp	r3, #0
 800592a:	f000 8480 	beq.w	800622e <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800592e:	69fb      	ldr	r3, [r7, #28]
 8005930:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	0a1b      	lsrs	r3, r3, #8
 8005938:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4618      	mov	r0, r3
 8005948:	f004 f8f4 	bl	8009b34 <USB_ReadInterrupts>
 800594c:	4603      	mov	r3, r0
 800594e:	f003 0302 	and.w	r3, r3, #2
 8005952:	2b02      	cmp	r3, #2
 8005954:	d107      	bne.n	8005966 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	695a      	ldr	r2, [r3, #20]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f002 0202 	and.w	r2, r2, #2
 8005964:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4618      	mov	r0, r3
 800596c:	f004 f8e2 	bl	8009b34 <USB_ReadInterrupts>
 8005970:	4603      	mov	r3, r0
 8005972:	f003 0310 	and.w	r3, r3, #16
 8005976:	2b10      	cmp	r3, #16
 8005978:	d161      	bne.n	8005a3e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	699a      	ldr	r2, [r3, #24]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f022 0210 	bic.w	r2, r2, #16
 8005988:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800598a:	6a3b      	ldr	r3, [r7, #32]
 800598c:	6a1b      	ldr	r3, [r3, #32]
 800598e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005990:	69bb      	ldr	r3, [r7, #24]
 8005992:	f003 020f 	and.w	r2, r3, #15
 8005996:	4613      	mov	r3, r2
 8005998:	00db      	lsls	r3, r3, #3
 800599a:	4413      	add	r3, r2
 800599c:	009b      	lsls	r3, r3, #2
 800599e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80059a2:	687a      	ldr	r2, [r7, #4]
 80059a4:	4413      	add	r3, r2
 80059a6:	3304      	adds	r3, #4
 80059a8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80059aa:	69bb      	ldr	r3, [r7, #24]
 80059ac:	0c5b      	lsrs	r3, r3, #17
 80059ae:	f003 030f 	and.w	r3, r3, #15
 80059b2:	2b02      	cmp	r3, #2
 80059b4:	d124      	bne.n	8005a00 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80059b6:	69ba      	ldr	r2, [r7, #24]
 80059b8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80059bc:	4013      	ands	r3, r2
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d035      	beq.n	8005a2e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80059c6:	69bb      	ldr	r3, [r7, #24]
 80059c8:	091b      	lsrs	r3, r3, #4
 80059ca:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80059cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	461a      	mov	r2, r3
 80059d4:	6a38      	ldr	r0, [r7, #32]
 80059d6:	f003 ff19 	bl	800980c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	691a      	ldr	r2, [r3, #16]
 80059de:	69bb      	ldr	r3, [r7, #24]
 80059e0:	091b      	lsrs	r3, r3, #4
 80059e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80059e6:	441a      	add	r2, r3
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	6a1a      	ldr	r2, [r3, #32]
 80059f0:	69bb      	ldr	r3, [r7, #24]
 80059f2:	091b      	lsrs	r3, r3, #4
 80059f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80059f8:	441a      	add	r2, r3
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	621a      	str	r2, [r3, #32]
 80059fe:	e016      	b.n	8005a2e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005a00:	69bb      	ldr	r3, [r7, #24]
 8005a02:	0c5b      	lsrs	r3, r3, #17
 8005a04:	f003 030f 	and.w	r3, r3, #15
 8005a08:	2b06      	cmp	r3, #6
 8005a0a:	d110      	bne.n	8005a2e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005a12:	2208      	movs	r2, #8
 8005a14:	4619      	mov	r1, r3
 8005a16:	6a38      	ldr	r0, [r7, #32]
 8005a18:	f003 fef8 	bl	800980c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	6a1a      	ldr	r2, [r3, #32]
 8005a20:	69bb      	ldr	r3, [r7, #24]
 8005a22:	091b      	lsrs	r3, r3, #4
 8005a24:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a28:	441a      	add	r2, r3
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	699a      	ldr	r2, [r3, #24]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f042 0210 	orr.w	r2, r2, #16
 8005a3c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4618      	mov	r0, r3
 8005a44:	f004 f876 	bl	8009b34 <USB_ReadInterrupts>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a4e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005a52:	f040 80a7 	bne.w	8005ba4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005a56:	2300      	movs	r3, #0
 8005a58:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f004 f87b 	bl	8009b5a <USB_ReadDevAllOutEpInterrupt>
 8005a64:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005a66:	e099      	b.n	8005b9c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a6a:	f003 0301 	and.w	r3, r3, #1
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	f000 808e 	beq.w	8005b90 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a7a:	b2d2      	uxtb	r2, r2
 8005a7c:	4611      	mov	r1, r2
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f004 f89f 	bl	8009bc2 <USB_ReadDevOutEPInterrupt>
 8005a84:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	f003 0301 	and.w	r3, r3, #1
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d00c      	beq.n	8005aaa <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a92:	015a      	lsls	r2, r3, #5
 8005a94:	69fb      	ldr	r3, [r7, #28]
 8005a96:	4413      	add	r3, r2
 8005a98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a9c:	461a      	mov	r2, r3
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005aa2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f000 feab 	bl	8006800 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	f003 0308 	and.w	r3, r3, #8
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d00c      	beq.n	8005ace <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab6:	015a      	lsls	r2, r3, #5
 8005ab8:	69fb      	ldr	r3, [r7, #28]
 8005aba:	4413      	add	r3, r2
 8005abc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	2308      	movs	r3, #8
 8005ac4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005ac6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f000 ff81 	bl	80069d0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	f003 0310 	and.w	r3, r3, #16
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d008      	beq.n	8005aea <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ada:	015a      	lsls	r2, r3, #5
 8005adc:	69fb      	ldr	r3, [r7, #28]
 8005ade:	4413      	add	r3, r2
 8005ae0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	2310      	movs	r3, #16
 8005ae8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	f003 0302 	and.w	r3, r3, #2
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d030      	beq.n	8005b56 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005af4:	6a3b      	ldr	r3, [r7, #32]
 8005af6:	695b      	ldr	r3, [r3, #20]
 8005af8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005afc:	2b80      	cmp	r3, #128	; 0x80
 8005afe:	d109      	bne.n	8005b14 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005b00:	69fb      	ldr	r3, [r7, #28]
 8005b02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	69fa      	ldr	r2, [r7, #28]
 8005b0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005b12:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005b14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b16:	4613      	mov	r3, r2
 8005b18:	00db      	lsls	r3, r3, #3
 8005b1a:	4413      	add	r3, r2
 8005b1c:	009b      	lsls	r3, r3, #2
 8005b1e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005b22:	687a      	ldr	r2, [r7, #4]
 8005b24:	4413      	add	r3, r2
 8005b26:	3304      	adds	r3, #4
 8005b28:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	78db      	ldrb	r3, [r3, #3]
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	d108      	bne.n	8005b44 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	2200      	movs	r2, #0
 8005b36:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b3a:	b2db      	uxtb	r3, r3
 8005b3c:	4619      	mov	r1, r3
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f006 f8d6 	bl	800bcf0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b46:	015a      	lsls	r2, r3, #5
 8005b48:	69fb      	ldr	r3, [r7, #28]
 8005b4a:	4413      	add	r3, r2
 8005b4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b50:	461a      	mov	r2, r3
 8005b52:	2302      	movs	r3, #2
 8005b54:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	f003 0320 	and.w	r3, r3, #32
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d008      	beq.n	8005b72 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b62:	015a      	lsls	r2, r3, #5
 8005b64:	69fb      	ldr	r3, [r7, #28]
 8005b66:	4413      	add	r3, r2
 8005b68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b6c:	461a      	mov	r2, r3
 8005b6e:	2320      	movs	r3, #32
 8005b70:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d009      	beq.n	8005b90 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7e:	015a      	lsls	r2, r3, #5
 8005b80:	69fb      	ldr	r3, [r7, #28]
 8005b82:	4413      	add	r3, r2
 8005b84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b88:	461a      	mov	r2, r3
 8005b8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005b8e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b92:	3301      	adds	r3, #1
 8005b94:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b98:	085b      	lsrs	r3, r3, #1
 8005b9a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	f47f af62 	bne.w	8005a68 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f003 ffc3 	bl	8009b34 <USB_ReadInterrupts>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005bb4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005bb8:	f040 80db 	bne.w	8005d72 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f003 ffe4 	bl	8009b8e <USB_ReadDevAllInEpInterrupt>
 8005bc6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005bcc:	e0cd      	b.n	8005d6a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bd0:	f003 0301 	and.w	r3, r3, #1
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	f000 80c2 	beq.w	8005d5e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005be0:	b2d2      	uxtb	r2, r2
 8005be2:	4611      	mov	r1, r2
 8005be4:	4618      	mov	r0, r3
 8005be6:	f004 f80a 	bl	8009bfe <USB_ReadDevInEPInterrupt>
 8005bea:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	f003 0301 	and.w	r3, r3, #1
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d057      	beq.n	8005ca6 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf8:	f003 030f 	and.w	r3, r3, #15
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8005c02:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005c04:	69fb      	ldr	r3, [r7, #28]
 8005c06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	43db      	mvns	r3, r3
 8005c10:	69f9      	ldr	r1, [r7, #28]
 8005c12:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c16:	4013      	ands	r3, r2
 8005c18:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1c:	015a      	lsls	r2, r3, #5
 8005c1e:	69fb      	ldr	r3, [r7, #28]
 8005c20:	4413      	add	r3, r2
 8005c22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c26:	461a      	mov	r2, r3
 8005c28:	2301      	movs	r3, #1
 8005c2a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	691b      	ldr	r3, [r3, #16]
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d132      	bne.n	8005c9a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005c34:	6879      	ldr	r1, [r7, #4]
 8005c36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c38:	4613      	mov	r3, r2
 8005c3a:	00db      	lsls	r3, r3, #3
 8005c3c:	4413      	add	r3, r2
 8005c3e:	009b      	lsls	r3, r3, #2
 8005c40:	440b      	add	r3, r1
 8005c42:	334c      	adds	r3, #76	; 0x4c
 8005c44:	6819      	ldr	r1, [r3, #0]
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c4a:	4613      	mov	r3, r2
 8005c4c:	00db      	lsls	r3, r3, #3
 8005c4e:	4413      	add	r3, r2
 8005c50:	009b      	lsls	r3, r3, #2
 8005c52:	4403      	add	r3, r0
 8005c54:	3348      	adds	r3, #72	; 0x48
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4419      	add	r1, r3
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c5e:	4613      	mov	r3, r2
 8005c60:	00db      	lsls	r3, r3, #3
 8005c62:	4413      	add	r3, r2
 8005c64:	009b      	lsls	r3, r3, #2
 8005c66:	4403      	add	r3, r0
 8005c68:	334c      	adds	r3, #76	; 0x4c
 8005c6a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d113      	bne.n	8005c9a <HAL_PCD_IRQHandler+0x3a2>
 8005c72:	6879      	ldr	r1, [r7, #4]
 8005c74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c76:	4613      	mov	r3, r2
 8005c78:	00db      	lsls	r3, r3, #3
 8005c7a:	4413      	add	r3, r2
 8005c7c:	009b      	lsls	r3, r3, #2
 8005c7e:	440b      	add	r3, r1
 8005c80:	3354      	adds	r3, #84	; 0x54
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d108      	bne.n	8005c9a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6818      	ldr	r0, [r3, #0]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005c92:	461a      	mov	r2, r3
 8005c94:	2101      	movs	r1, #1
 8005c96:	f004 f811 	bl	8009cbc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	4619      	mov	r1, r3
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f005 ffa0 	bl	800bbe6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	f003 0308 	and.w	r3, r3, #8
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d008      	beq.n	8005cc2 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb2:	015a      	lsls	r2, r3, #5
 8005cb4:	69fb      	ldr	r3, [r7, #28]
 8005cb6:	4413      	add	r3, r2
 8005cb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	2308      	movs	r3, #8
 8005cc0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	f003 0310 	and.w	r3, r3, #16
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d008      	beq.n	8005cde <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cce:	015a      	lsls	r2, r3, #5
 8005cd0:	69fb      	ldr	r3, [r7, #28]
 8005cd2:	4413      	add	r3, r2
 8005cd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cd8:	461a      	mov	r2, r3
 8005cda:	2310      	movs	r3, #16
 8005cdc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d008      	beq.n	8005cfa <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cea:	015a      	lsls	r2, r3, #5
 8005cec:	69fb      	ldr	r3, [r7, #28]
 8005cee:	4413      	add	r3, r2
 8005cf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cf4:	461a      	mov	r2, r3
 8005cf6:	2340      	movs	r3, #64	; 0x40
 8005cf8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	f003 0302 	and.w	r3, r3, #2
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d023      	beq.n	8005d4c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005d04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005d06:	6a38      	ldr	r0, [r7, #32]
 8005d08:	f002 fef2 	bl	8008af0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005d0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d0e:	4613      	mov	r3, r2
 8005d10:	00db      	lsls	r3, r3, #3
 8005d12:	4413      	add	r3, r2
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	3338      	adds	r3, #56	; 0x38
 8005d18:	687a      	ldr	r2, [r7, #4]
 8005d1a:	4413      	add	r3, r2
 8005d1c:	3304      	adds	r3, #4
 8005d1e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	78db      	ldrb	r3, [r3, #3]
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d108      	bne.n	8005d3a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	4619      	mov	r1, r3
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f005 ffed 	bl	800bd14 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3c:	015a      	lsls	r2, r3, #5
 8005d3e:	69fb      	ldr	r3, [r7, #28]
 8005d40:	4413      	add	r3, r2
 8005d42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d46:	461a      	mov	r2, r3
 8005d48:	2302      	movs	r3, #2
 8005d4a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d003      	beq.n	8005d5e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005d56:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f000 fcc3 	bl	80066e4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d60:	3301      	adds	r3, #1
 8005d62:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d66:	085b      	lsrs	r3, r3, #1
 8005d68:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	f47f af2e 	bne.w	8005bce <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4618      	mov	r0, r3
 8005d78:	f003 fedc 	bl	8009b34 <USB_ReadInterrupts>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d86:	d122      	bne.n	8005dce <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005d88:	69fb      	ldr	r3, [r7, #28]
 8005d8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	69fa      	ldr	r2, [r7, #28]
 8005d92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d96:	f023 0301 	bic.w	r3, r3, #1
 8005d9a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d108      	bne.n	8005db8 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2200      	movs	r2, #0
 8005daa:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005dae:	2100      	movs	r1, #0
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	f000 feab 	bl	8006b0c <HAL_PCDEx_LPM_Callback>
 8005db6:	e002      	b.n	8005dbe <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f005 ff8b 	bl	800bcd4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	695a      	ldr	r2, [r3, #20]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005dcc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f003 feae 	bl	8009b34 <USB_ReadInterrupts>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005dde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005de2:	d112      	bne.n	8005e0a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005de4:	69fb      	ldr	r3, [r7, #28]
 8005de6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dea:	689b      	ldr	r3, [r3, #8]
 8005dec:	f003 0301 	and.w	r3, r3, #1
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d102      	bne.n	8005dfa <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f005 ff47 	bl	800bc88 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	695a      	ldr	r2, [r3, #20]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005e08:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f003 fe90 	bl	8009b34 <USB_ReadInterrupts>
 8005e14:	4603      	mov	r3, r0
 8005e16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e1e:	f040 80b7 	bne.w	8005f90 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005e22:	69fb      	ldr	r3, [r7, #28]
 8005e24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	69fa      	ldr	r2, [r7, #28]
 8005e2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e30:	f023 0301 	bic.w	r3, r3, #1
 8005e34:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	2110      	movs	r1, #16
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f002 fe57 	bl	8008af0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e42:	2300      	movs	r3, #0
 8005e44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e46:	e046      	b.n	8005ed6 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e4a:	015a      	lsls	r2, r3, #5
 8005e4c:	69fb      	ldr	r3, [r7, #28]
 8005e4e:	4413      	add	r3, r2
 8005e50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e54:	461a      	mov	r2, r3
 8005e56:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005e5a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e5e:	015a      	lsls	r2, r3, #5
 8005e60:	69fb      	ldr	r3, [r7, #28]
 8005e62:	4413      	add	r3, r2
 8005e64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e6c:	0151      	lsls	r1, r2, #5
 8005e6e:	69fa      	ldr	r2, [r7, #28]
 8005e70:	440a      	add	r2, r1
 8005e72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e76:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005e7a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e7e:	015a      	lsls	r2, r3, #5
 8005e80:	69fb      	ldr	r3, [r7, #28]
 8005e82:	4413      	add	r3, r2
 8005e84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e88:	461a      	mov	r2, r3
 8005e8a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005e8e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e92:	015a      	lsls	r2, r3, #5
 8005e94:	69fb      	ldr	r3, [r7, #28]
 8005e96:	4413      	add	r3, r2
 8005e98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ea0:	0151      	lsls	r1, r2, #5
 8005ea2:	69fa      	ldr	r2, [r7, #28]
 8005ea4:	440a      	add	r2, r1
 8005ea6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005eaa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005eae:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eb2:	015a      	lsls	r2, r3, #5
 8005eb4:	69fb      	ldr	r3, [r7, #28]
 8005eb6:	4413      	add	r3, r2
 8005eb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ec0:	0151      	lsls	r1, r2, #5
 8005ec2:	69fa      	ldr	r2, [r7, #28]
 8005ec4:	440a      	add	r2, r1
 8005ec6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005eca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005ece:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ed2:	3301      	adds	r3, #1
 8005ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d3b3      	bcc.n	8005e48 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005ee0:	69fb      	ldr	r3, [r7, #28]
 8005ee2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ee6:	69db      	ldr	r3, [r3, #28]
 8005ee8:	69fa      	ldr	r2, [r7, #28]
 8005eea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005eee:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005ef2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d016      	beq.n	8005f2a <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005efc:	69fb      	ldr	r3, [r7, #28]
 8005efe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f06:	69fa      	ldr	r2, [r7, #28]
 8005f08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f0c:	f043 030b 	orr.w	r3, r3, #11
 8005f10:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005f14:	69fb      	ldr	r3, [r7, #28]
 8005f16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f1c:	69fa      	ldr	r2, [r7, #28]
 8005f1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f22:	f043 030b 	orr.w	r3, r3, #11
 8005f26:	6453      	str	r3, [r2, #68]	; 0x44
 8005f28:	e015      	b.n	8005f56 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005f2a:	69fb      	ldr	r3, [r7, #28]
 8005f2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f30:	695b      	ldr	r3, [r3, #20]
 8005f32:	69fa      	ldr	r2, [r7, #28]
 8005f34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f38:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005f3c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005f40:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005f42:	69fb      	ldr	r3, [r7, #28]
 8005f44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f48:	691b      	ldr	r3, [r3, #16]
 8005f4a:	69fa      	ldr	r2, [r7, #28]
 8005f4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f50:	f043 030b 	orr.w	r3, r3, #11
 8005f54:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005f56:	69fb      	ldr	r3, [r7, #28]
 8005f58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	69fa      	ldr	r2, [r7, #28]
 8005f60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f64:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005f68:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6818      	ldr	r0, [r3, #0]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	691b      	ldr	r3, [r3, #16]
 8005f72:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005f7a:	461a      	mov	r2, r3
 8005f7c:	f003 fe9e 	bl	8009cbc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	695a      	ldr	r2, [r3, #20]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005f8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4618      	mov	r0, r3
 8005f96:	f003 fdcd 	bl	8009b34 <USB_ReadInterrupts>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005fa0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fa4:	d124      	bne.n	8005ff0 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4618      	mov	r0, r3
 8005fac:	f003 fe63 	bl	8009c76 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f002 fe18 	bl	8008bea <USB_GetDevSpeed>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681c      	ldr	r4, [r3, #0]
 8005fc6:	f001 fa11 	bl	80073ec <HAL_RCC_GetHCLKFreq>
 8005fca:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	4620      	mov	r0, r4
 8005fd6:	f002 fb17 	bl	8008608 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f005 fe2b 	bl	800bc36 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	695a      	ldr	r2, [r3, #20]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005fee:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f003 fd9d 	bl	8009b34 <USB_ReadInterrupts>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	f003 0308 	and.w	r3, r3, #8
 8006000:	2b08      	cmp	r3, #8
 8006002:	d10a      	bne.n	800601a <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f005 fe08 	bl	800bc1a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	695a      	ldr	r2, [r3, #20]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f002 0208 	and.w	r2, r2, #8
 8006018:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4618      	mov	r0, r3
 8006020:	f003 fd88 	bl	8009b34 <USB_ReadInterrupts>
 8006024:	4603      	mov	r3, r0
 8006026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800602a:	2b80      	cmp	r3, #128	; 0x80
 800602c:	d122      	bne.n	8006074 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800602e:	6a3b      	ldr	r3, [r7, #32]
 8006030:	699b      	ldr	r3, [r3, #24]
 8006032:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006036:	6a3b      	ldr	r3, [r7, #32]
 8006038:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800603a:	2301      	movs	r3, #1
 800603c:	627b      	str	r3, [r7, #36]	; 0x24
 800603e:	e014      	b.n	800606a <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8006040:	6879      	ldr	r1, [r7, #4]
 8006042:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006044:	4613      	mov	r3, r2
 8006046:	00db      	lsls	r3, r3, #3
 8006048:	4413      	add	r3, r2
 800604a:	009b      	lsls	r3, r3, #2
 800604c:	440b      	add	r3, r1
 800604e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	2b01      	cmp	r3, #1
 8006056:	d105      	bne.n	8006064 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8006058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800605a:	b2db      	uxtb	r3, r3
 800605c:	4619      	mov	r1, r3
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f000 fb0f 	bl	8006682 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006066:	3301      	adds	r3, #1
 8006068:	627b      	str	r3, [r7, #36]	; 0x24
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006070:	429a      	cmp	r2, r3
 8006072:	d3e5      	bcc.n	8006040 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4618      	mov	r0, r3
 800607a:	f003 fd5b 	bl	8009b34 <USB_ReadInterrupts>
 800607e:	4603      	mov	r3, r0
 8006080:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006084:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006088:	d13b      	bne.n	8006102 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800608a:	2301      	movs	r3, #1
 800608c:	627b      	str	r3, [r7, #36]	; 0x24
 800608e:	e02b      	b.n	80060e8 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8006090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006092:	015a      	lsls	r2, r3, #5
 8006094:	69fb      	ldr	r3, [r7, #28]
 8006096:	4413      	add	r3, r2
 8006098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80060a0:	6879      	ldr	r1, [r7, #4]
 80060a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060a4:	4613      	mov	r3, r2
 80060a6:	00db      	lsls	r3, r3, #3
 80060a8:	4413      	add	r3, r2
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	440b      	add	r3, r1
 80060ae:	3340      	adds	r3, #64	; 0x40
 80060b0:	781b      	ldrb	r3, [r3, #0]
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	d115      	bne.n	80060e2 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80060b6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	da12      	bge.n	80060e2 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80060bc:	6879      	ldr	r1, [r7, #4]
 80060be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060c0:	4613      	mov	r3, r2
 80060c2:	00db      	lsls	r3, r3, #3
 80060c4:	4413      	add	r3, r2
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	440b      	add	r3, r1
 80060ca:	333f      	adds	r3, #63	; 0x3f
 80060cc:	2201      	movs	r2, #1
 80060ce:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80060d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d2:	b2db      	uxtb	r3, r3
 80060d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80060d8:	b2db      	uxtb	r3, r3
 80060da:	4619      	mov	r1, r3
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f000 fad0 	bl	8006682 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80060e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e4:	3301      	adds	r3, #1
 80060e6:	627b      	str	r3, [r7, #36]	; 0x24
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060ee:	429a      	cmp	r2, r3
 80060f0:	d3ce      	bcc.n	8006090 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	695a      	ldr	r2, [r3, #20]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8006100:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4618      	mov	r0, r3
 8006108:	f003 fd14 	bl	8009b34 <USB_ReadInterrupts>
 800610c:	4603      	mov	r3, r0
 800610e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006112:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006116:	d155      	bne.n	80061c4 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006118:	2301      	movs	r3, #1
 800611a:	627b      	str	r3, [r7, #36]	; 0x24
 800611c:	e045      	b.n	80061aa <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800611e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006120:	015a      	lsls	r2, r3, #5
 8006122:	69fb      	ldr	r3, [r7, #28]
 8006124:	4413      	add	r3, r2
 8006126:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800612e:	6879      	ldr	r1, [r7, #4]
 8006130:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006132:	4613      	mov	r3, r2
 8006134:	00db      	lsls	r3, r3, #3
 8006136:	4413      	add	r3, r2
 8006138:	009b      	lsls	r3, r3, #2
 800613a:	440b      	add	r3, r1
 800613c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006140:	781b      	ldrb	r3, [r3, #0]
 8006142:	2b01      	cmp	r3, #1
 8006144:	d12e      	bne.n	80061a4 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006146:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006148:	2b00      	cmp	r3, #0
 800614a:	da2b      	bge.n	80061a4 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800614c:	69bb      	ldr	r3, [r7, #24]
 800614e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8006158:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800615c:	429a      	cmp	r2, r3
 800615e:	d121      	bne.n	80061a4 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8006160:	6879      	ldr	r1, [r7, #4]
 8006162:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006164:	4613      	mov	r3, r2
 8006166:	00db      	lsls	r3, r3, #3
 8006168:	4413      	add	r3, r2
 800616a:	009b      	lsls	r3, r3, #2
 800616c:	440b      	add	r3, r1
 800616e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8006172:	2201      	movs	r2, #1
 8006174:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8006176:	6a3b      	ldr	r3, [r7, #32]
 8006178:	699b      	ldr	r3, [r3, #24]
 800617a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800617e:	6a3b      	ldr	r3, [r7, #32]
 8006180:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8006182:	6a3b      	ldr	r3, [r7, #32]
 8006184:	695b      	ldr	r3, [r3, #20]
 8006186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800618a:	2b00      	cmp	r3, #0
 800618c:	d10a      	bne.n	80061a4 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800618e:	69fb      	ldr	r3, [r7, #28]
 8006190:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	69fa      	ldr	r2, [r7, #28]
 8006198:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800619c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80061a0:	6053      	str	r3, [r2, #4]
            break;
 80061a2:	e007      	b.n	80061b4 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80061a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a6:	3301      	adds	r3, #1
 80061a8:	627b      	str	r3, [r7, #36]	; 0x24
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061b0:	429a      	cmp	r2, r3
 80061b2:	d3b4      	bcc.n	800611e <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	695a      	ldr	r2, [r3, #20]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80061c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4618      	mov	r0, r3
 80061ca:	f003 fcb3 	bl	8009b34 <USB_ReadInterrupts>
 80061ce:	4603      	mov	r3, r0
 80061d0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80061d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061d8:	d10a      	bne.n	80061f0 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f005 fdac 	bl	800bd38 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	695a      	ldr	r2, [r3, #20]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80061ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4618      	mov	r0, r3
 80061f6:	f003 fc9d 	bl	8009b34 <USB_ReadInterrupts>
 80061fa:	4603      	mov	r3, r0
 80061fc:	f003 0304 	and.w	r3, r3, #4
 8006200:	2b04      	cmp	r3, #4
 8006202:	d115      	bne.n	8006230 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800620c:	69bb      	ldr	r3, [r7, #24]
 800620e:	f003 0304 	and.w	r3, r3, #4
 8006212:	2b00      	cmp	r3, #0
 8006214:	d002      	beq.n	800621c <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f005 fd9c 	bl	800bd54 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	6859      	ldr	r1, [r3, #4]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	69ba      	ldr	r2, [r7, #24]
 8006228:	430a      	orrs	r2, r1
 800622a:	605a      	str	r2, [r3, #4]
 800622c:	e000      	b.n	8006230 <HAL_PCD_IRQHandler+0x938>
      return;
 800622e:	bf00      	nop
    }
  }
}
 8006230:	3734      	adds	r7, #52	; 0x34
 8006232:	46bd      	mov	sp, r7
 8006234:	bd90      	pop	{r4, r7, pc}

08006236 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006236:	b580      	push	{r7, lr}
 8006238:	b082      	sub	sp, #8
 800623a:	af00      	add	r7, sp, #0
 800623c:	6078      	str	r0, [r7, #4]
 800623e:	460b      	mov	r3, r1
 8006240:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006248:	2b01      	cmp	r3, #1
 800624a:	d101      	bne.n	8006250 <HAL_PCD_SetAddress+0x1a>
 800624c:	2302      	movs	r3, #2
 800624e:	e013      	b.n	8006278 <HAL_PCD_SetAddress+0x42>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2201      	movs	r2, #1
 8006254:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	78fa      	ldrb	r2, [r7, #3]
 800625c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	78fa      	ldrb	r2, [r7, #3]
 8006266:	4611      	mov	r1, r2
 8006268:	4618      	mov	r0, r3
 800626a:	f003 fbfb 	bl	8009a64 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2200      	movs	r2, #0
 8006272:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006276:	2300      	movs	r3, #0
}
 8006278:	4618      	mov	r0, r3
 800627a:	3708      	adds	r7, #8
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}

08006280 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b084      	sub	sp, #16
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	4608      	mov	r0, r1
 800628a:	4611      	mov	r1, r2
 800628c:	461a      	mov	r2, r3
 800628e:	4603      	mov	r3, r0
 8006290:	70fb      	strb	r3, [r7, #3]
 8006292:	460b      	mov	r3, r1
 8006294:	803b      	strh	r3, [r7, #0]
 8006296:	4613      	mov	r3, r2
 8006298:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800629a:	2300      	movs	r3, #0
 800629c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800629e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	da0f      	bge.n	80062c6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80062a6:	78fb      	ldrb	r3, [r7, #3]
 80062a8:	f003 020f 	and.w	r2, r3, #15
 80062ac:	4613      	mov	r3, r2
 80062ae:	00db      	lsls	r3, r3, #3
 80062b0:	4413      	add	r3, r2
 80062b2:	009b      	lsls	r3, r3, #2
 80062b4:	3338      	adds	r3, #56	; 0x38
 80062b6:	687a      	ldr	r2, [r7, #4]
 80062b8:	4413      	add	r3, r2
 80062ba:	3304      	adds	r3, #4
 80062bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2201      	movs	r2, #1
 80062c2:	705a      	strb	r2, [r3, #1]
 80062c4:	e00f      	b.n	80062e6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80062c6:	78fb      	ldrb	r3, [r7, #3]
 80062c8:	f003 020f 	and.w	r2, r3, #15
 80062cc:	4613      	mov	r3, r2
 80062ce:	00db      	lsls	r3, r3, #3
 80062d0:	4413      	add	r3, r2
 80062d2:	009b      	lsls	r3, r3, #2
 80062d4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80062d8:	687a      	ldr	r2, [r7, #4]
 80062da:	4413      	add	r3, r2
 80062dc:	3304      	adds	r3, #4
 80062de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2200      	movs	r2, #0
 80062e4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80062e6:	78fb      	ldrb	r3, [r7, #3]
 80062e8:	f003 030f 	and.w	r3, r3, #15
 80062ec:	b2da      	uxtb	r2, r3
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80062f2:	883a      	ldrh	r2, [r7, #0]
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	78ba      	ldrb	r2, [r7, #2]
 80062fc:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	785b      	ldrb	r3, [r3, #1]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d004      	beq.n	8006310 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	781b      	ldrb	r3, [r3, #0]
 800630a:	b29a      	uxth	r2, r3
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006310:	78bb      	ldrb	r3, [r7, #2]
 8006312:	2b02      	cmp	r3, #2
 8006314:	d102      	bne.n	800631c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2200      	movs	r2, #0
 800631a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006322:	2b01      	cmp	r3, #1
 8006324:	d101      	bne.n	800632a <HAL_PCD_EP_Open+0xaa>
 8006326:	2302      	movs	r3, #2
 8006328:	e00e      	b.n	8006348 <HAL_PCD_EP_Open+0xc8>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2201      	movs	r2, #1
 800632e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	68f9      	ldr	r1, [r7, #12]
 8006338:	4618      	mov	r0, r3
 800633a:	f002 fc7b 	bl	8008c34 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2200      	movs	r2, #0
 8006342:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8006346:	7afb      	ldrb	r3, [r7, #11]
}
 8006348:	4618      	mov	r0, r3
 800634a:	3710      	adds	r7, #16
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}

08006350 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b084      	sub	sp, #16
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	460b      	mov	r3, r1
 800635a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800635c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006360:	2b00      	cmp	r3, #0
 8006362:	da0f      	bge.n	8006384 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006364:	78fb      	ldrb	r3, [r7, #3]
 8006366:	f003 020f 	and.w	r2, r3, #15
 800636a:	4613      	mov	r3, r2
 800636c:	00db      	lsls	r3, r3, #3
 800636e:	4413      	add	r3, r2
 8006370:	009b      	lsls	r3, r3, #2
 8006372:	3338      	adds	r3, #56	; 0x38
 8006374:	687a      	ldr	r2, [r7, #4]
 8006376:	4413      	add	r3, r2
 8006378:	3304      	adds	r3, #4
 800637a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2201      	movs	r2, #1
 8006380:	705a      	strb	r2, [r3, #1]
 8006382:	e00f      	b.n	80063a4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006384:	78fb      	ldrb	r3, [r7, #3]
 8006386:	f003 020f 	and.w	r2, r3, #15
 800638a:	4613      	mov	r3, r2
 800638c:	00db      	lsls	r3, r3, #3
 800638e:	4413      	add	r3, r2
 8006390:	009b      	lsls	r3, r3, #2
 8006392:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006396:	687a      	ldr	r2, [r7, #4]
 8006398:	4413      	add	r3, r2
 800639a:	3304      	adds	r3, #4
 800639c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2200      	movs	r2, #0
 80063a2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80063a4:	78fb      	ldrb	r3, [r7, #3]
 80063a6:	f003 030f 	and.w	r3, r3, #15
 80063aa:	b2da      	uxtb	r2, r3
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d101      	bne.n	80063be <HAL_PCD_EP_Close+0x6e>
 80063ba:	2302      	movs	r3, #2
 80063bc:	e00e      	b.n	80063dc <HAL_PCD_EP_Close+0x8c>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2201      	movs	r2, #1
 80063c2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	68f9      	ldr	r1, [r7, #12]
 80063cc:	4618      	mov	r0, r3
 80063ce:	f002 fcb9 	bl	8008d44 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2200      	movs	r2, #0
 80063d6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80063da:	2300      	movs	r3, #0
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3710      	adds	r7, #16
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}

080063e4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b086      	sub	sp, #24
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	60f8      	str	r0, [r7, #12]
 80063ec:	607a      	str	r2, [r7, #4]
 80063ee:	603b      	str	r3, [r7, #0]
 80063f0:	460b      	mov	r3, r1
 80063f2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80063f4:	7afb      	ldrb	r3, [r7, #11]
 80063f6:	f003 020f 	and.w	r2, r3, #15
 80063fa:	4613      	mov	r3, r2
 80063fc:	00db      	lsls	r3, r3, #3
 80063fe:	4413      	add	r3, r2
 8006400:	009b      	lsls	r3, r3, #2
 8006402:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006406:	68fa      	ldr	r2, [r7, #12]
 8006408:	4413      	add	r3, r2
 800640a:	3304      	adds	r3, #4
 800640c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	687a      	ldr	r2, [r7, #4]
 8006412:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	683a      	ldr	r2, [r7, #0]
 8006418:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	2200      	movs	r2, #0
 800641e:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	2200      	movs	r2, #0
 8006424:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006426:	7afb      	ldrb	r3, [r7, #11]
 8006428:	f003 030f 	and.w	r3, r3, #15
 800642c:	b2da      	uxtb	r2, r3
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	691b      	ldr	r3, [r3, #16]
 8006436:	2b01      	cmp	r3, #1
 8006438:	d102      	bne.n	8006440 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800643a:	687a      	ldr	r2, [r7, #4]
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006440:	7afb      	ldrb	r3, [r7, #11]
 8006442:	f003 030f 	and.w	r3, r3, #15
 8006446:	2b00      	cmp	r3, #0
 8006448:	d109      	bne.n	800645e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	6818      	ldr	r0, [r3, #0]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	691b      	ldr	r3, [r3, #16]
 8006452:	b2db      	uxtb	r3, r3
 8006454:	461a      	mov	r2, r3
 8006456:	6979      	ldr	r1, [r7, #20]
 8006458:	f002 ff98 	bl	800938c <USB_EP0StartXfer>
 800645c:	e008      	b.n	8006470 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	6818      	ldr	r0, [r3, #0]
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	691b      	ldr	r3, [r3, #16]
 8006466:	b2db      	uxtb	r3, r3
 8006468:	461a      	mov	r2, r3
 800646a:	6979      	ldr	r1, [r7, #20]
 800646c:	f002 fd46 	bl	8008efc <USB_EPStartXfer>
  }

  return HAL_OK;
 8006470:	2300      	movs	r3, #0
}
 8006472:	4618      	mov	r0, r3
 8006474:	3718      	adds	r7, #24
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}

0800647a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800647a:	b580      	push	{r7, lr}
 800647c:	b086      	sub	sp, #24
 800647e:	af00      	add	r7, sp, #0
 8006480:	60f8      	str	r0, [r7, #12]
 8006482:	607a      	str	r2, [r7, #4]
 8006484:	603b      	str	r3, [r7, #0]
 8006486:	460b      	mov	r3, r1
 8006488:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800648a:	7afb      	ldrb	r3, [r7, #11]
 800648c:	f003 020f 	and.w	r2, r3, #15
 8006490:	4613      	mov	r3, r2
 8006492:	00db      	lsls	r3, r3, #3
 8006494:	4413      	add	r3, r2
 8006496:	009b      	lsls	r3, r3, #2
 8006498:	3338      	adds	r3, #56	; 0x38
 800649a:	68fa      	ldr	r2, [r7, #12]
 800649c:	4413      	add	r3, r2
 800649e:	3304      	adds	r3, #4
 80064a0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	687a      	ldr	r2, [r7, #4]
 80064a6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	683a      	ldr	r2, [r7, #0]
 80064ac:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	2200      	movs	r2, #0
 80064b2:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	2201      	movs	r2, #1
 80064b8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80064ba:	7afb      	ldrb	r3, [r7, #11]
 80064bc:	f003 030f 	and.w	r3, r3, #15
 80064c0:	b2da      	uxtb	r2, r3
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	691b      	ldr	r3, [r3, #16]
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d102      	bne.n	80064d4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80064ce:	687a      	ldr	r2, [r7, #4]
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80064d4:	7afb      	ldrb	r3, [r7, #11]
 80064d6:	f003 030f 	and.w	r3, r3, #15
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d109      	bne.n	80064f2 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	6818      	ldr	r0, [r3, #0]
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	691b      	ldr	r3, [r3, #16]
 80064e6:	b2db      	uxtb	r3, r3
 80064e8:	461a      	mov	r2, r3
 80064ea:	6979      	ldr	r1, [r7, #20]
 80064ec:	f002 ff4e 	bl	800938c <USB_EP0StartXfer>
 80064f0:	e008      	b.n	8006504 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	6818      	ldr	r0, [r3, #0]
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	691b      	ldr	r3, [r3, #16]
 80064fa:	b2db      	uxtb	r3, r3
 80064fc:	461a      	mov	r2, r3
 80064fe:	6979      	ldr	r1, [r7, #20]
 8006500:	f002 fcfc 	bl	8008efc <USB_EPStartXfer>
  }

  return HAL_OK;
 8006504:	2300      	movs	r3, #0
}
 8006506:	4618      	mov	r0, r3
 8006508:	3718      	adds	r7, #24
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}

0800650e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800650e:	b580      	push	{r7, lr}
 8006510:	b084      	sub	sp, #16
 8006512:	af00      	add	r7, sp, #0
 8006514:	6078      	str	r0, [r7, #4]
 8006516:	460b      	mov	r3, r1
 8006518:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800651a:	78fb      	ldrb	r3, [r7, #3]
 800651c:	f003 020f 	and.w	r2, r3, #15
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	429a      	cmp	r2, r3
 8006526:	d901      	bls.n	800652c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006528:	2301      	movs	r3, #1
 800652a:	e050      	b.n	80065ce <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800652c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006530:	2b00      	cmp	r3, #0
 8006532:	da0f      	bge.n	8006554 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006534:	78fb      	ldrb	r3, [r7, #3]
 8006536:	f003 020f 	and.w	r2, r3, #15
 800653a:	4613      	mov	r3, r2
 800653c:	00db      	lsls	r3, r3, #3
 800653e:	4413      	add	r3, r2
 8006540:	009b      	lsls	r3, r3, #2
 8006542:	3338      	adds	r3, #56	; 0x38
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	4413      	add	r3, r2
 8006548:	3304      	adds	r3, #4
 800654a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2201      	movs	r2, #1
 8006550:	705a      	strb	r2, [r3, #1]
 8006552:	e00d      	b.n	8006570 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006554:	78fa      	ldrb	r2, [r7, #3]
 8006556:	4613      	mov	r3, r2
 8006558:	00db      	lsls	r3, r3, #3
 800655a:	4413      	add	r3, r2
 800655c:	009b      	lsls	r3, r3, #2
 800655e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006562:	687a      	ldr	r2, [r7, #4]
 8006564:	4413      	add	r3, r2
 8006566:	3304      	adds	r3, #4
 8006568:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2200      	movs	r2, #0
 800656e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	2201      	movs	r2, #1
 8006574:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006576:	78fb      	ldrb	r3, [r7, #3]
 8006578:	f003 030f 	and.w	r3, r3, #15
 800657c:	b2da      	uxtb	r2, r3
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006588:	2b01      	cmp	r3, #1
 800658a:	d101      	bne.n	8006590 <HAL_PCD_EP_SetStall+0x82>
 800658c:	2302      	movs	r3, #2
 800658e:	e01e      	b.n	80065ce <HAL_PCD_EP_SetStall+0xc0>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2201      	movs	r2, #1
 8006594:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	68f9      	ldr	r1, [r7, #12]
 800659e:	4618      	mov	r0, r3
 80065a0:	f003 f98c 	bl	80098bc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80065a4:	78fb      	ldrb	r3, [r7, #3]
 80065a6:	f003 030f 	and.w	r3, r3, #15
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d10a      	bne.n	80065c4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6818      	ldr	r0, [r3, #0]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	691b      	ldr	r3, [r3, #16]
 80065b6:	b2d9      	uxtb	r1, r3
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80065be:	461a      	mov	r2, r3
 80065c0:	f003 fb7c 	bl	8009cbc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2200      	movs	r2, #0
 80065c8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80065cc:	2300      	movs	r3, #0
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3710      	adds	r7, #16
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}

080065d6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80065d6:	b580      	push	{r7, lr}
 80065d8:	b084      	sub	sp, #16
 80065da:	af00      	add	r7, sp, #0
 80065dc:	6078      	str	r0, [r7, #4]
 80065de:	460b      	mov	r3, r1
 80065e0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80065e2:	78fb      	ldrb	r3, [r7, #3]
 80065e4:	f003 020f 	and.w	r2, r3, #15
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	429a      	cmp	r2, r3
 80065ee:	d901      	bls.n	80065f4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80065f0:	2301      	movs	r3, #1
 80065f2:	e042      	b.n	800667a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80065f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	da0f      	bge.n	800661c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80065fc:	78fb      	ldrb	r3, [r7, #3]
 80065fe:	f003 020f 	and.w	r2, r3, #15
 8006602:	4613      	mov	r3, r2
 8006604:	00db      	lsls	r3, r3, #3
 8006606:	4413      	add	r3, r2
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	3338      	adds	r3, #56	; 0x38
 800660c:	687a      	ldr	r2, [r7, #4]
 800660e:	4413      	add	r3, r2
 8006610:	3304      	adds	r3, #4
 8006612:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2201      	movs	r2, #1
 8006618:	705a      	strb	r2, [r3, #1]
 800661a:	e00f      	b.n	800663c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800661c:	78fb      	ldrb	r3, [r7, #3]
 800661e:	f003 020f 	and.w	r2, r3, #15
 8006622:	4613      	mov	r3, r2
 8006624:	00db      	lsls	r3, r3, #3
 8006626:	4413      	add	r3, r2
 8006628:	009b      	lsls	r3, r3, #2
 800662a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800662e:	687a      	ldr	r2, [r7, #4]
 8006630:	4413      	add	r3, r2
 8006632:	3304      	adds	r3, #4
 8006634:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2200      	movs	r2, #0
 800663a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2200      	movs	r2, #0
 8006640:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006642:	78fb      	ldrb	r3, [r7, #3]
 8006644:	f003 030f 	and.w	r3, r3, #15
 8006648:	b2da      	uxtb	r2, r3
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006654:	2b01      	cmp	r3, #1
 8006656:	d101      	bne.n	800665c <HAL_PCD_EP_ClrStall+0x86>
 8006658:	2302      	movs	r3, #2
 800665a:	e00e      	b.n	800667a <HAL_PCD_EP_ClrStall+0xa4>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2201      	movs	r2, #1
 8006660:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	68f9      	ldr	r1, [r7, #12]
 800666a:	4618      	mov	r0, r3
 800666c:	f003 f994 	bl	8009998 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2200      	movs	r2, #0
 8006674:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006678:	2300      	movs	r3, #0
}
 800667a:	4618      	mov	r0, r3
 800667c:	3710      	adds	r7, #16
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}

08006682 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006682:	b580      	push	{r7, lr}
 8006684:	b084      	sub	sp, #16
 8006686:	af00      	add	r7, sp, #0
 8006688:	6078      	str	r0, [r7, #4]
 800668a:	460b      	mov	r3, r1
 800668c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800668e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006692:	2b00      	cmp	r3, #0
 8006694:	da0c      	bge.n	80066b0 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006696:	78fb      	ldrb	r3, [r7, #3]
 8006698:	f003 020f 	and.w	r2, r3, #15
 800669c:	4613      	mov	r3, r2
 800669e:	00db      	lsls	r3, r3, #3
 80066a0:	4413      	add	r3, r2
 80066a2:	009b      	lsls	r3, r3, #2
 80066a4:	3338      	adds	r3, #56	; 0x38
 80066a6:	687a      	ldr	r2, [r7, #4]
 80066a8:	4413      	add	r3, r2
 80066aa:	3304      	adds	r3, #4
 80066ac:	60fb      	str	r3, [r7, #12]
 80066ae:	e00c      	b.n	80066ca <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80066b0:	78fb      	ldrb	r3, [r7, #3]
 80066b2:	f003 020f 	and.w	r2, r3, #15
 80066b6:	4613      	mov	r3, r2
 80066b8:	00db      	lsls	r3, r3, #3
 80066ba:	4413      	add	r3, r2
 80066bc:	009b      	lsls	r3, r3, #2
 80066be:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80066c2:	687a      	ldr	r2, [r7, #4]
 80066c4:	4413      	add	r3, r2
 80066c6:	3304      	adds	r3, #4
 80066c8:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	68f9      	ldr	r1, [r7, #12]
 80066d0:	4618      	mov	r0, r3
 80066d2:	f002 ffb3 	bl	800963c <USB_EPStopXfer>
 80066d6:	4603      	mov	r3, r0
 80066d8:	72fb      	strb	r3, [r7, #11]

  return ret;
 80066da:	7afb      	ldrb	r3, [r7, #11]
}
 80066dc:	4618      	mov	r0, r3
 80066de:	3710      	adds	r7, #16
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}

080066e4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b08a      	sub	sp, #40	; 0x28
 80066e8:	af02      	add	r7, sp, #8
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80066f8:	683a      	ldr	r2, [r7, #0]
 80066fa:	4613      	mov	r3, r2
 80066fc:	00db      	lsls	r3, r3, #3
 80066fe:	4413      	add	r3, r2
 8006700:	009b      	lsls	r3, r3, #2
 8006702:	3338      	adds	r3, #56	; 0x38
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	4413      	add	r3, r2
 8006708:	3304      	adds	r3, #4
 800670a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	6a1a      	ldr	r2, [r3, #32]
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	699b      	ldr	r3, [r3, #24]
 8006714:	429a      	cmp	r2, r3
 8006716:	d901      	bls.n	800671c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006718:	2301      	movs	r3, #1
 800671a:	e06c      	b.n	80067f6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	699a      	ldr	r2, [r3, #24]
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	6a1b      	ldr	r3, [r3, #32]
 8006724:	1ad3      	subs	r3, r2, r3
 8006726:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	68db      	ldr	r3, [r3, #12]
 800672c:	69fa      	ldr	r2, [r7, #28]
 800672e:	429a      	cmp	r2, r3
 8006730:	d902      	bls.n	8006738 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	68db      	ldr	r3, [r3, #12]
 8006736:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006738:	69fb      	ldr	r3, [r7, #28]
 800673a:	3303      	adds	r3, #3
 800673c:	089b      	lsrs	r3, r3, #2
 800673e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006740:	e02b      	b.n	800679a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	699a      	ldr	r2, [r3, #24]
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	6a1b      	ldr	r3, [r3, #32]
 800674a:	1ad3      	subs	r3, r2, r3
 800674c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	68db      	ldr	r3, [r3, #12]
 8006752:	69fa      	ldr	r2, [r7, #28]
 8006754:	429a      	cmp	r2, r3
 8006756:	d902      	bls.n	800675e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	68db      	ldr	r3, [r3, #12]
 800675c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800675e:	69fb      	ldr	r3, [r7, #28]
 8006760:	3303      	adds	r3, #3
 8006762:	089b      	lsrs	r3, r3, #2
 8006764:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	6919      	ldr	r1, [r3, #16]
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	b2da      	uxtb	r2, r3
 800676e:	69fb      	ldr	r3, [r7, #28]
 8006770:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006776:	b2db      	uxtb	r3, r3
 8006778:	9300      	str	r3, [sp, #0]
 800677a:	4603      	mov	r3, r0
 800677c:	6978      	ldr	r0, [r7, #20]
 800677e:	f003 f807 	bl	8009790 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	691a      	ldr	r2, [r3, #16]
 8006786:	69fb      	ldr	r3, [r7, #28]
 8006788:	441a      	add	r2, r3
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	6a1a      	ldr	r2, [r3, #32]
 8006792:	69fb      	ldr	r3, [r7, #28]
 8006794:	441a      	add	r2, r3
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	015a      	lsls	r2, r3, #5
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	4413      	add	r3, r2
 80067a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067a6:	699b      	ldr	r3, [r3, #24]
 80067a8:	b29b      	uxth	r3, r3
 80067aa:	69ba      	ldr	r2, [r7, #24]
 80067ac:	429a      	cmp	r2, r3
 80067ae:	d809      	bhi.n	80067c4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	6a1a      	ldr	r2, [r3, #32]
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80067b8:	429a      	cmp	r2, r3
 80067ba:	d203      	bcs.n	80067c4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	699b      	ldr	r3, [r3, #24]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d1be      	bne.n	8006742 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	699a      	ldr	r2, [r3, #24]
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	6a1b      	ldr	r3, [r3, #32]
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d811      	bhi.n	80067f4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	f003 030f 	and.w	r3, r3, #15
 80067d6:	2201      	movs	r2, #1
 80067d8:	fa02 f303 	lsl.w	r3, r2, r3
 80067dc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	43db      	mvns	r3, r3
 80067ea:	6939      	ldr	r1, [r7, #16]
 80067ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80067f0:	4013      	ands	r3, r2
 80067f2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80067f4:	2300      	movs	r3, #0
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3720      	adds	r7, #32
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}
	...

08006800 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b088      	sub	sp, #32
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006810:	69fb      	ldr	r3, [r7, #28]
 8006812:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006814:	69fb      	ldr	r3, [r7, #28]
 8006816:	333c      	adds	r3, #60	; 0x3c
 8006818:	3304      	adds	r3, #4
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	015a      	lsls	r2, r3, #5
 8006822:	69bb      	ldr	r3, [r7, #24]
 8006824:	4413      	add	r3, r2
 8006826:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	691b      	ldr	r3, [r3, #16]
 8006832:	2b01      	cmp	r3, #1
 8006834:	d17b      	bne.n	800692e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	f003 0308 	and.w	r3, r3, #8
 800683c:	2b00      	cmp	r3, #0
 800683e:	d015      	beq.n	800686c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	4a61      	ldr	r2, [pc, #388]	; (80069c8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006844:	4293      	cmp	r3, r2
 8006846:	f240 80b9 	bls.w	80069bc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006850:	2b00      	cmp	r3, #0
 8006852:	f000 80b3 	beq.w	80069bc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	015a      	lsls	r2, r3, #5
 800685a:	69bb      	ldr	r3, [r7, #24]
 800685c:	4413      	add	r3, r2
 800685e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006862:	461a      	mov	r2, r3
 8006864:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006868:	6093      	str	r3, [r2, #8]
 800686a:	e0a7      	b.n	80069bc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	f003 0320 	and.w	r3, r3, #32
 8006872:	2b00      	cmp	r3, #0
 8006874:	d009      	beq.n	800688a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	015a      	lsls	r2, r3, #5
 800687a:	69bb      	ldr	r3, [r7, #24]
 800687c:	4413      	add	r3, r2
 800687e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006882:	461a      	mov	r2, r3
 8006884:	2320      	movs	r3, #32
 8006886:	6093      	str	r3, [r2, #8]
 8006888:	e098      	b.n	80069bc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006890:	2b00      	cmp	r3, #0
 8006892:	f040 8093 	bne.w	80069bc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	4a4b      	ldr	r2, [pc, #300]	; (80069c8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d90f      	bls.n	80068be <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d00a      	beq.n	80068be <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	015a      	lsls	r2, r3, #5
 80068ac:	69bb      	ldr	r3, [r7, #24]
 80068ae:	4413      	add	r3, r2
 80068b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068b4:	461a      	mov	r2, r3
 80068b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068ba:	6093      	str	r3, [r2, #8]
 80068bc:	e07e      	b.n	80069bc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80068be:	683a      	ldr	r2, [r7, #0]
 80068c0:	4613      	mov	r3, r2
 80068c2:	00db      	lsls	r3, r3, #3
 80068c4:	4413      	add	r3, r2
 80068c6:	009b      	lsls	r3, r3, #2
 80068c8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80068cc:	687a      	ldr	r2, [r7, #4]
 80068ce:	4413      	add	r3, r2
 80068d0:	3304      	adds	r3, #4
 80068d2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	69da      	ldr	r2, [r3, #28]
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	0159      	lsls	r1, r3, #5
 80068dc:	69bb      	ldr	r3, [r7, #24]
 80068de:	440b      	add	r3, r1
 80068e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068e4:	691b      	ldr	r3, [r3, #16]
 80068e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80068ea:	1ad2      	subs	r2, r2, r3
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d114      	bne.n	8006920 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	699b      	ldr	r3, [r3, #24]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d109      	bne.n	8006912 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6818      	ldr	r0, [r3, #0]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006908:	461a      	mov	r2, r3
 800690a:	2101      	movs	r1, #1
 800690c:	f003 f9d6 	bl	8009cbc <USB_EP0_OutStart>
 8006910:	e006      	b.n	8006920 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	691a      	ldr	r2, [r3, #16]
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	6a1b      	ldr	r3, [r3, #32]
 800691a:	441a      	add	r2, r3
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	b2db      	uxtb	r3, r3
 8006924:	4619      	mov	r1, r3
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f005 f942 	bl	800bbb0 <HAL_PCD_DataOutStageCallback>
 800692c:	e046      	b.n	80069bc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	4a26      	ldr	r2, [pc, #152]	; (80069cc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d124      	bne.n	8006980 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800693c:	2b00      	cmp	r3, #0
 800693e:	d00a      	beq.n	8006956 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	015a      	lsls	r2, r3, #5
 8006944:	69bb      	ldr	r3, [r7, #24]
 8006946:	4413      	add	r3, r2
 8006948:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800694c:	461a      	mov	r2, r3
 800694e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006952:	6093      	str	r3, [r2, #8]
 8006954:	e032      	b.n	80069bc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	f003 0320 	and.w	r3, r3, #32
 800695c:	2b00      	cmp	r3, #0
 800695e:	d008      	beq.n	8006972 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	015a      	lsls	r2, r3, #5
 8006964:	69bb      	ldr	r3, [r7, #24]
 8006966:	4413      	add	r3, r2
 8006968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800696c:	461a      	mov	r2, r3
 800696e:	2320      	movs	r3, #32
 8006970:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	b2db      	uxtb	r3, r3
 8006976:	4619      	mov	r1, r3
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f005 f919 	bl	800bbb0 <HAL_PCD_DataOutStageCallback>
 800697e:	e01d      	b.n	80069bc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d114      	bne.n	80069b0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8006986:	6879      	ldr	r1, [r7, #4]
 8006988:	683a      	ldr	r2, [r7, #0]
 800698a:	4613      	mov	r3, r2
 800698c:	00db      	lsls	r3, r3, #3
 800698e:	4413      	add	r3, r2
 8006990:	009b      	lsls	r3, r3, #2
 8006992:	440b      	add	r3, r1
 8006994:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d108      	bne.n	80069b0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6818      	ldr	r0, [r3, #0]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80069a8:	461a      	mov	r2, r3
 80069aa:	2100      	movs	r1, #0
 80069ac:	f003 f986 	bl	8009cbc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	b2db      	uxtb	r3, r3
 80069b4:	4619      	mov	r1, r3
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f005 f8fa 	bl	800bbb0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80069bc:	2300      	movs	r3, #0
}
 80069be:	4618      	mov	r0, r3
 80069c0:	3720      	adds	r7, #32
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}
 80069c6:	bf00      	nop
 80069c8:	4f54300a 	.word	0x4f54300a
 80069cc:	4f54310a 	.word	0x4f54310a

080069d0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b086      	sub	sp, #24
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
 80069d8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	333c      	adds	r3, #60	; 0x3c
 80069e8:	3304      	adds	r3, #4
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	015a      	lsls	r2, r3, #5
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	4413      	add	r3, r2
 80069f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069fa:	689b      	ldr	r3, [r3, #8]
 80069fc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	4a15      	ldr	r2, [pc, #84]	; (8006a58 <PCD_EP_OutSetupPacket_int+0x88>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d90e      	bls.n	8006a24 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d009      	beq.n	8006a24 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	015a      	lsls	r2, r3, #5
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	4413      	add	r3, r2
 8006a18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a1c:	461a      	mov	r2, r3
 8006a1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a22:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f005 f8b1 	bl	800bb8c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	4a0a      	ldr	r2, [pc, #40]	; (8006a58 <PCD_EP_OutSetupPacket_int+0x88>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d90c      	bls.n	8006a4c <PCD_EP_OutSetupPacket_int+0x7c>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	691b      	ldr	r3, [r3, #16]
 8006a36:	2b01      	cmp	r3, #1
 8006a38:	d108      	bne.n	8006a4c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6818      	ldr	r0, [r3, #0]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006a44:	461a      	mov	r2, r3
 8006a46:	2101      	movs	r1, #1
 8006a48:	f003 f938 	bl	8009cbc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006a4c:	2300      	movs	r3, #0
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3718      	adds	r7, #24
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}
 8006a56:	bf00      	nop
 8006a58:	4f54300a 	.word	0x4f54300a

08006a5c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b085      	sub	sp, #20
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
 8006a64:	460b      	mov	r3, r1
 8006a66:	70fb      	strb	r3, [r7, #3]
 8006a68:	4613      	mov	r3, r2
 8006a6a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a72:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006a74:	78fb      	ldrb	r3, [r7, #3]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d107      	bne.n	8006a8a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006a7a:	883b      	ldrh	r3, [r7, #0]
 8006a7c:	0419      	lsls	r1, r3, #16
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	68ba      	ldr	r2, [r7, #8]
 8006a84:	430a      	orrs	r2, r1
 8006a86:	629a      	str	r2, [r3, #40]	; 0x28
 8006a88:	e028      	b.n	8006adc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a90:	0c1b      	lsrs	r3, r3, #16
 8006a92:	68ba      	ldr	r2, [r7, #8]
 8006a94:	4413      	add	r3, r2
 8006a96:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006a98:	2300      	movs	r3, #0
 8006a9a:	73fb      	strb	r3, [r7, #15]
 8006a9c:	e00d      	b.n	8006aba <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681a      	ldr	r2, [r3, #0]
 8006aa2:	7bfb      	ldrb	r3, [r7, #15]
 8006aa4:	3340      	adds	r3, #64	; 0x40
 8006aa6:	009b      	lsls	r3, r3, #2
 8006aa8:	4413      	add	r3, r2
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	0c1b      	lsrs	r3, r3, #16
 8006aae:	68ba      	ldr	r2, [r7, #8]
 8006ab0:	4413      	add	r3, r2
 8006ab2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006ab4:	7bfb      	ldrb	r3, [r7, #15]
 8006ab6:	3301      	adds	r3, #1
 8006ab8:	73fb      	strb	r3, [r7, #15]
 8006aba:	7bfa      	ldrb	r2, [r7, #15]
 8006abc:	78fb      	ldrb	r3, [r7, #3]
 8006abe:	3b01      	subs	r3, #1
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d3ec      	bcc.n	8006a9e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006ac4:	883b      	ldrh	r3, [r7, #0]
 8006ac6:	0418      	lsls	r0, r3, #16
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6819      	ldr	r1, [r3, #0]
 8006acc:	78fb      	ldrb	r3, [r7, #3]
 8006ace:	3b01      	subs	r3, #1
 8006ad0:	68ba      	ldr	r2, [r7, #8]
 8006ad2:	4302      	orrs	r2, r0
 8006ad4:	3340      	adds	r3, #64	; 0x40
 8006ad6:	009b      	lsls	r3, r3, #2
 8006ad8:	440b      	add	r3, r1
 8006ada:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006adc:	2300      	movs	r3, #0
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3714      	adds	r7, #20
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr

08006aea <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006aea:	b480      	push	{r7}
 8006aec:	b083      	sub	sp, #12
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	6078      	str	r0, [r7, #4]
 8006af2:	460b      	mov	r3, r1
 8006af4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	887a      	ldrh	r2, [r7, #2]
 8006afc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006afe:	2300      	movs	r3, #0
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	370c      	adds	r7, #12
 8006b04:	46bd      	mov	sp, r7
 8006b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0a:	4770      	bx	lr

08006b0c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b083      	sub	sp, #12
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	460b      	mov	r3, r1
 8006b16:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006b18:	bf00      	nop
 8006b1a:	370c      	adds	r7, #12
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b22:	4770      	bx	lr

08006b24 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b086      	sub	sp, #24
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d101      	bne.n	8006b36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006b32:	2301      	movs	r3, #1
 8006b34:	e267      	b.n	8007006 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f003 0301 	and.w	r3, r3, #1
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d075      	beq.n	8006c2e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006b42:	4b88      	ldr	r3, [pc, #544]	; (8006d64 <HAL_RCC_OscConfig+0x240>)
 8006b44:	689b      	ldr	r3, [r3, #8]
 8006b46:	f003 030c 	and.w	r3, r3, #12
 8006b4a:	2b04      	cmp	r3, #4
 8006b4c:	d00c      	beq.n	8006b68 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b4e:	4b85      	ldr	r3, [pc, #532]	; (8006d64 <HAL_RCC_OscConfig+0x240>)
 8006b50:	689b      	ldr	r3, [r3, #8]
 8006b52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006b56:	2b08      	cmp	r3, #8
 8006b58:	d112      	bne.n	8006b80 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b5a:	4b82      	ldr	r3, [pc, #520]	; (8006d64 <HAL_RCC_OscConfig+0x240>)
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b66:	d10b      	bne.n	8006b80 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b68:	4b7e      	ldr	r3, [pc, #504]	; (8006d64 <HAL_RCC_OscConfig+0x240>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d05b      	beq.n	8006c2c <HAL_RCC_OscConfig+0x108>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d157      	bne.n	8006c2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	e242      	b.n	8007006 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b88:	d106      	bne.n	8006b98 <HAL_RCC_OscConfig+0x74>
 8006b8a:	4b76      	ldr	r3, [pc, #472]	; (8006d64 <HAL_RCC_OscConfig+0x240>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a75      	ldr	r2, [pc, #468]	; (8006d64 <HAL_RCC_OscConfig+0x240>)
 8006b90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b94:	6013      	str	r3, [r2, #0]
 8006b96:	e01d      	b.n	8006bd4 <HAL_RCC_OscConfig+0xb0>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006ba0:	d10c      	bne.n	8006bbc <HAL_RCC_OscConfig+0x98>
 8006ba2:	4b70      	ldr	r3, [pc, #448]	; (8006d64 <HAL_RCC_OscConfig+0x240>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a6f      	ldr	r2, [pc, #444]	; (8006d64 <HAL_RCC_OscConfig+0x240>)
 8006ba8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006bac:	6013      	str	r3, [r2, #0]
 8006bae:	4b6d      	ldr	r3, [pc, #436]	; (8006d64 <HAL_RCC_OscConfig+0x240>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a6c      	ldr	r2, [pc, #432]	; (8006d64 <HAL_RCC_OscConfig+0x240>)
 8006bb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bb8:	6013      	str	r3, [r2, #0]
 8006bba:	e00b      	b.n	8006bd4 <HAL_RCC_OscConfig+0xb0>
 8006bbc:	4b69      	ldr	r3, [pc, #420]	; (8006d64 <HAL_RCC_OscConfig+0x240>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a68      	ldr	r2, [pc, #416]	; (8006d64 <HAL_RCC_OscConfig+0x240>)
 8006bc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bc6:	6013      	str	r3, [r2, #0]
 8006bc8:	4b66      	ldr	r3, [pc, #408]	; (8006d64 <HAL_RCC_OscConfig+0x240>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a65      	ldr	r2, [pc, #404]	; (8006d64 <HAL_RCC_OscConfig+0x240>)
 8006bce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006bd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d013      	beq.n	8006c04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bdc:	f7fb fb32 	bl	8002244 <HAL_GetTick>
 8006be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006be2:	e008      	b.n	8006bf6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006be4:	f7fb fb2e 	bl	8002244 <HAL_GetTick>
 8006be8:	4602      	mov	r2, r0
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	1ad3      	subs	r3, r2, r3
 8006bee:	2b64      	cmp	r3, #100	; 0x64
 8006bf0:	d901      	bls.n	8006bf6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006bf2:	2303      	movs	r3, #3
 8006bf4:	e207      	b.n	8007006 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bf6:	4b5b      	ldr	r3, [pc, #364]	; (8006d64 <HAL_RCC_OscConfig+0x240>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d0f0      	beq.n	8006be4 <HAL_RCC_OscConfig+0xc0>
 8006c02:	e014      	b.n	8006c2e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c04:	f7fb fb1e 	bl	8002244 <HAL_GetTick>
 8006c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c0a:	e008      	b.n	8006c1e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c0c:	f7fb fb1a 	bl	8002244 <HAL_GetTick>
 8006c10:	4602      	mov	r2, r0
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	1ad3      	subs	r3, r2, r3
 8006c16:	2b64      	cmp	r3, #100	; 0x64
 8006c18:	d901      	bls.n	8006c1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006c1a:	2303      	movs	r3, #3
 8006c1c:	e1f3      	b.n	8007006 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c1e:	4b51      	ldr	r3, [pc, #324]	; (8006d64 <HAL_RCC_OscConfig+0x240>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d1f0      	bne.n	8006c0c <HAL_RCC_OscConfig+0xe8>
 8006c2a:	e000      	b.n	8006c2e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f003 0302 	and.w	r3, r3, #2
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d063      	beq.n	8006d02 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006c3a:	4b4a      	ldr	r3, [pc, #296]	; (8006d64 <HAL_RCC_OscConfig+0x240>)
 8006c3c:	689b      	ldr	r3, [r3, #8]
 8006c3e:	f003 030c 	and.w	r3, r3, #12
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d00b      	beq.n	8006c5e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c46:	4b47      	ldr	r3, [pc, #284]	; (8006d64 <HAL_RCC_OscConfig+0x240>)
 8006c48:	689b      	ldr	r3, [r3, #8]
 8006c4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006c4e:	2b08      	cmp	r3, #8
 8006c50:	d11c      	bne.n	8006c8c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c52:	4b44      	ldr	r3, [pc, #272]	; (8006d64 <HAL_RCC_OscConfig+0x240>)
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d116      	bne.n	8006c8c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c5e:	4b41      	ldr	r3, [pc, #260]	; (8006d64 <HAL_RCC_OscConfig+0x240>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f003 0302 	and.w	r3, r3, #2
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d005      	beq.n	8006c76 <HAL_RCC_OscConfig+0x152>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	68db      	ldr	r3, [r3, #12]
 8006c6e:	2b01      	cmp	r3, #1
 8006c70:	d001      	beq.n	8006c76 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006c72:	2301      	movs	r3, #1
 8006c74:	e1c7      	b.n	8007006 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c76:	4b3b      	ldr	r3, [pc, #236]	; (8006d64 <HAL_RCC_OscConfig+0x240>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	691b      	ldr	r3, [r3, #16]
 8006c82:	00db      	lsls	r3, r3, #3
 8006c84:	4937      	ldr	r1, [pc, #220]	; (8006d64 <HAL_RCC_OscConfig+0x240>)
 8006c86:	4313      	orrs	r3, r2
 8006c88:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c8a:	e03a      	b.n	8006d02 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	68db      	ldr	r3, [r3, #12]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d020      	beq.n	8006cd6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006c94:	4b34      	ldr	r3, [pc, #208]	; (8006d68 <HAL_RCC_OscConfig+0x244>)
 8006c96:	2201      	movs	r2, #1
 8006c98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c9a:	f7fb fad3 	bl	8002244 <HAL_GetTick>
 8006c9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ca0:	e008      	b.n	8006cb4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006ca2:	f7fb facf 	bl	8002244 <HAL_GetTick>
 8006ca6:	4602      	mov	r2, r0
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	1ad3      	subs	r3, r2, r3
 8006cac:	2b02      	cmp	r3, #2
 8006cae:	d901      	bls.n	8006cb4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006cb0:	2303      	movs	r3, #3
 8006cb2:	e1a8      	b.n	8007006 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006cb4:	4b2b      	ldr	r3, [pc, #172]	; (8006d64 <HAL_RCC_OscConfig+0x240>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f003 0302 	and.w	r3, r3, #2
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d0f0      	beq.n	8006ca2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cc0:	4b28      	ldr	r3, [pc, #160]	; (8006d64 <HAL_RCC_OscConfig+0x240>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	691b      	ldr	r3, [r3, #16]
 8006ccc:	00db      	lsls	r3, r3, #3
 8006cce:	4925      	ldr	r1, [pc, #148]	; (8006d64 <HAL_RCC_OscConfig+0x240>)
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	600b      	str	r3, [r1, #0]
 8006cd4:	e015      	b.n	8006d02 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006cd6:	4b24      	ldr	r3, [pc, #144]	; (8006d68 <HAL_RCC_OscConfig+0x244>)
 8006cd8:	2200      	movs	r2, #0
 8006cda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cdc:	f7fb fab2 	bl	8002244 <HAL_GetTick>
 8006ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006ce2:	e008      	b.n	8006cf6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006ce4:	f7fb faae 	bl	8002244 <HAL_GetTick>
 8006ce8:	4602      	mov	r2, r0
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	1ad3      	subs	r3, r2, r3
 8006cee:	2b02      	cmp	r3, #2
 8006cf0:	d901      	bls.n	8006cf6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006cf2:	2303      	movs	r3, #3
 8006cf4:	e187      	b.n	8007006 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006cf6:	4b1b      	ldr	r3, [pc, #108]	; (8006d64 <HAL_RCC_OscConfig+0x240>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f003 0302 	and.w	r3, r3, #2
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d1f0      	bne.n	8006ce4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f003 0308 	and.w	r3, r3, #8
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d036      	beq.n	8006d7c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	695b      	ldr	r3, [r3, #20]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d016      	beq.n	8006d44 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d16:	4b15      	ldr	r3, [pc, #84]	; (8006d6c <HAL_RCC_OscConfig+0x248>)
 8006d18:	2201      	movs	r2, #1
 8006d1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d1c:	f7fb fa92 	bl	8002244 <HAL_GetTick>
 8006d20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d22:	e008      	b.n	8006d36 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d24:	f7fb fa8e 	bl	8002244 <HAL_GetTick>
 8006d28:	4602      	mov	r2, r0
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	1ad3      	subs	r3, r2, r3
 8006d2e:	2b02      	cmp	r3, #2
 8006d30:	d901      	bls.n	8006d36 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006d32:	2303      	movs	r3, #3
 8006d34:	e167      	b.n	8007006 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d36:	4b0b      	ldr	r3, [pc, #44]	; (8006d64 <HAL_RCC_OscConfig+0x240>)
 8006d38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d3a:	f003 0302 	and.w	r3, r3, #2
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d0f0      	beq.n	8006d24 <HAL_RCC_OscConfig+0x200>
 8006d42:	e01b      	b.n	8006d7c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d44:	4b09      	ldr	r3, [pc, #36]	; (8006d6c <HAL_RCC_OscConfig+0x248>)
 8006d46:	2200      	movs	r2, #0
 8006d48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d4a:	f7fb fa7b 	bl	8002244 <HAL_GetTick>
 8006d4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d50:	e00e      	b.n	8006d70 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d52:	f7fb fa77 	bl	8002244 <HAL_GetTick>
 8006d56:	4602      	mov	r2, r0
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	1ad3      	subs	r3, r2, r3
 8006d5c:	2b02      	cmp	r3, #2
 8006d5e:	d907      	bls.n	8006d70 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006d60:	2303      	movs	r3, #3
 8006d62:	e150      	b.n	8007006 <HAL_RCC_OscConfig+0x4e2>
 8006d64:	40023800 	.word	0x40023800
 8006d68:	42470000 	.word	0x42470000
 8006d6c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d70:	4b88      	ldr	r3, [pc, #544]	; (8006f94 <HAL_RCC_OscConfig+0x470>)
 8006d72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d74:	f003 0302 	and.w	r3, r3, #2
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d1ea      	bne.n	8006d52 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f003 0304 	and.w	r3, r3, #4
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	f000 8097 	beq.w	8006eb8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d8e:	4b81      	ldr	r3, [pc, #516]	; (8006f94 <HAL_RCC_OscConfig+0x470>)
 8006d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d10f      	bne.n	8006dba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	60bb      	str	r3, [r7, #8]
 8006d9e:	4b7d      	ldr	r3, [pc, #500]	; (8006f94 <HAL_RCC_OscConfig+0x470>)
 8006da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da2:	4a7c      	ldr	r2, [pc, #496]	; (8006f94 <HAL_RCC_OscConfig+0x470>)
 8006da4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006da8:	6413      	str	r3, [r2, #64]	; 0x40
 8006daa:	4b7a      	ldr	r3, [pc, #488]	; (8006f94 <HAL_RCC_OscConfig+0x470>)
 8006dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006db2:	60bb      	str	r3, [r7, #8]
 8006db4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006db6:	2301      	movs	r3, #1
 8006db8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006dba:	4b77      	ldr	r3, [pc, #476]	; (8006f98 <HAL_RCC_OscConfig+0x474>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d118      	bne.n	8006df8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006dc6:	4b74      	ldr	r3, [pc, #464]	; (8006f98 <HAL_RCC_OscConfig+0x474>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a73      	ldr	r2, [pc, #460]	; (8006f98 <HAL_RCC_OscConfig+0x474>)
 8006dcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006dd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006dd2:	f7fb fa37 	bl	8002244 <HAL_GetTick>
 8006dd6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006dd8:	e008      	b.n	8006dec <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006dda:	f7fb fa33 	bl	8002244 <HAL_GetTick>
 8006dde:	4602      	mov	r2, r0
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	1ad3      	subs	r3, r2, r3
 8006de4:	2b02      	cmp	r3, #2
 8006de6:	d901      	bls.n	8006dec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006de8:	2303      	movs	r3, #3
 8006dea:	e10c      	b.n	8007006 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006dec:	4b6a      	ldr	r3, [pc, #424]	; (8006f98 <HAL_RCC_OscConfig+0x474>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d0f0      	beq.n	8006dda <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	689b      	ldr	r3, [r3, #8]
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	d106      	bne.n	8006e0e <HAL_RCC_OscConfig+0x2ea>
 8006e00:	4b64      	ldr	r3, [pc, #400]	; (8006f94 <HAL_RCC_OscConfig+0x470>)
 8006e02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e04:	4a63      	ldr	r2, [pc, #396]	; (8006f94 <HAL_RCC_OscConfig+0x470>)
 8006e06:	f043 0301 	orr.w	r3, r3, #1
 8006e0a:	6713      	str	r3, [r2, #112]	; 0x70
 8006e0c:	e01c      	b.n	8006e48 <HAL_RCC_OscConfig+0x324>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	689b      	ldr	r3, [r3, #8]
 8006e12:	2b05      	cmp	r3, #5
 8006e14:	d10c      	bne.n	8006e30 <HAL_RCC_OscConfig+0x30c>
 8006e16:	4b5f      	ldr	r3, [pc, #380]	; (8006f94 <HAL_RCC_OscConfig+0x470>)
 8006e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e1a:	4a5e      	ldr	r2, [pc, #376]	; (8006f94 <HAL_RCC_OscConfig+0x470>)
 8006e1c:	f043 0304 	orr.w	r3, r3, #4
 8006e20:	6713      	str	r3, [r2, #112]	; 0x70
 8006e22:	4b5c      	ldr	r3, [pc, #368]	; (8006f94 <HAL_RCC_OscConfig+0x470>)
 8006e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e26:	4a5b      	ldr	r2, [pc, #364]	; (8006f94 <HAL_RCC_OscConfig+0x470>)
 8006e28:	f043 0301 	orr.w	r3, r3, #1
 8006e2c:	6713      	str	r3, [r2, #112]	; 0x70
 8006e2e:	e00b      	b.n	8006e48 <HAL_RCC_OscConfig+0x324>
 8006e30:	4b58      	ldr	r3, [pc, #352]	; (8006f94 <HAL_RCC_OscConfig+0x470>)
 8006e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e34:	4a57      	ldr	r2, [pc, #348]	; (8006f94 <HAL_RCC_OscConfig+0x470>)
 8006e36:	f023 0301 	bic.w	r3, r3, #1
 8006e3a:	6713      	str	r3, [r2, #112]	; 0x70
 8006e3c:	4b55      	ldr	r3, [pc, #340]	; (8006f94 <HAL_RCC_OscConfig+0x470>)
 8006e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e40:	4a54      	ldr	r2, [pc, #336]	; (8006f94 <HAL_RCC_OscConfig+0x470>)
 8006e42:	f023 0304 	bic.w	r3, r3, #4
 8006e46:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	689b      	ldr	r3, [r3, #8]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d015      	beq.n	8006e7c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e50:	f7fb f9f8 	bl	8002244 <HAL_GetTick>
 8006e54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e56:	e00a      	b.n	8006e6e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e58:	f7fb f9f4 	bl	8002244 <HAL_GetTick>
 8006e5c:	4602      	mov	r2, r0
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	1ad3      	subs	r3, r2, r3
 8006e62:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d901      	bls.n	8006e6e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006e6a:	2303      	movs	r3, #3
 8006e6c:	e0cb      	b.n	8007006 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e6e:	4b49      	ldr	r3, [pc, #292]	; (8006f94 <HAL_RCC_OscConfig+0x470>)
 8006e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e72:	f003 0302 	and.w	r3, r3, #2
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d0ee      	beq.n	8006e58 <HAL_RCC_OscConfig+0x334>
 8006e7a:	e014      	b.n	8006ea6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e7c:	f7fb f9e2 	bl	8002244 <HAL_GetTick>
 8006e80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e82:	e00a      	b.n	8006e9a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e84:	f7fb f9de 	bl	8002244 <HAL_GetTick>
 8006e88:	4602      	mov	r2, r0
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	1ad3      	subs	r3, r2, r3
 8006e8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d901      	bls.n	8006e9a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006e96:	2303      	movs	r3, #3
 8006e98:	e0b5      	b.n	8007006 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e9a:	4b3e      	ldr	r3, [pc, #248]	; (8006f94 <HAL_RCC_OscConfig+0x470>)
 8006e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e9e:	f003 0302 	and.w	r3, r3, #2
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d1ee      	bne.n	8006e84 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006ea6:	7dfb      	ldrb	r3, [r7, #23]
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	d105      	bne.n	8006eb8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006eac:	4b39      	ldr	r3, [pc, #228]	; (8006f94 <HAL_RCC_OscConfig+0x470>)
 8006eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb0:	4a38      	ldr	r2, [pc, #224]	; (8006f94 <HAL_RCC_OscConfig+0x470>)
 8006eb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006eb6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	699b      	ldr	r3, [r3, #24]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	f000 80a1 	beq.w	8007004 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006ec2:	4b34      	ldr	r3, [pc, #208]	; (8006f94 <HAL_RCC_OscConfig+0x470>)
 8006ec4:	689b      	ldr	r3, [r3, #8]
 8006ec6:	f003 030c 	and.w	r3, r3, #12
 8006eca:	2b08      	cmp	r3, #8
 8006ecc:	d05c      	beq.n	8006f88 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	699b      	ldr	r3, [r3, #24]
 8006ed2:	2b02      	cmp	r3, #2
 8006ed4:	d141      	bne.n	8006f5a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ed6:	4b31      	ldr	r3, [pc, #196]	; (8006f9c <HAL_RCC_OscConfig+0x478>)
 8006ed8:	2200      	movs	r2, #0
 8006eda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006edc:	f7fb f9b2 	bl	8002244 <HAL_GetTick>
 8006ee0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ee2:	e008      	b.n	8006ef6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ee4:	f7fb f9ae 	bl	8002244 <HAL_GetTick>
 8006ee8:	4602      	mov	r2, r0
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	1ad3      	subs	r3, r2, r3
 8006eee:	2b02      	cmp	r3, #2
 8006ef0:	d901      	bls.n	8006ef6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006ef2:	2303      	movs	r3, #3
 8006ef4:	e087      	b.n	8007006 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ef6:	4b27      	ldr	r3, [pc, #156]	; (8006f94 <HAL_RCC_OscConfig+0x470>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d1f0      	bne.n	8006ee4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	69da      	ldr	r2, [r3, #28]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6a1b      	ldr	r3, [r3, #32]
 8006f0a:	431a      	orrs	r2, r3
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f10:	019b      	lsls	r3, r3, #6
 8006f12:	431a      	orrs	r2, r3
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f18:	085b      	lsrs	r3, r3, #1
 8006f1a:	3b01      	subs	r3, #1
 8006f1c:	041b      	lsls	r3, r3, #16
 8006f1e:	431a      	orrs	r2, r3
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f24:	061b      	lsls	r3, r3, #24
 8006f26:	491b      	ldr	r1, [pc, #108]	; (8006f94 <HAL_RCC_OscConfig+0x470>)
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006f2c:	4b1b      	ldr	r3, [pc, #108]	; (8006f9c <HAL_RCC_OscConfig+0x478>)
 8006f2e:	2201      	movs	r2, #1
 8006f30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f32:	f7fb f987 	bl	8002244 <HAL_GetTick>
 8006f36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f38:	e008      	b.n	8006f4c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f3a:	f7fb f983 	bl	8002244 <HAL_GetTick>
 8006f3e:	4602      	mov	r2, r0
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	1ad3      	subs	r3, r2, r3
 8006f44:	2b02      	cmp	r3, #2
 8006f46:	d901      	bls.n	8006f4c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006f48:	2303      	movs	r3, #3
 8006f4a:	e05c      	b.n	8007006 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f4c:	4b11      	ldr	r3, [pc, #68]	; (8006f94 <HAL_RCC_OscConfig+0x470>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d0f0      	beq.n	8006f3a <HAL_RCC_OscConfig+0x416>
 8006f58:	e054      	b.n	8007004 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f5a:	4b10      	ldr	r3, [pc, #64]	; (8006f9c <HAL_RCC_OscConfig+0x478>)
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f60:	f7fb f970 	bl	8002244 <HAL_GetTick>
 8006f64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f66:	e008      	b.n	8006f7a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f68:	f7fb f96c 	bl	8002244 <HAL_GetTick>
 8006f6c:	4602      	mov	r2, r0
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	1ad3      	subs	r3, r2, r3
 8006f72:	2b02      	cmp	r3, #2
 8006f74:	d901      	bls.n	8006f7a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006f76:	2303      	movs	r3, #3
 8006f78:	e045      	b.n	8007006 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f7a:	4b06      	ldr	r3, [pc, #24]	; (8006f94 <HAL_RCC_OscConfig+0x470>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d1f0      	bne.n	8006f68 <HAL_RCC_OscConfig+0x444>
 8006f86:	e03d      	b.n	8007004 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	699b      	ldr	r3, [r3, #24]
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	d107      	bne.n	8006fa0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006f90:	2301      	movs	r3, #1
 8006f92:	e038      	b.n	8007006 <HAL_RCC_OscConfig+0x4e2>
 8006f94:	40023800 	.word	0x40023800
 8006f98:	40007000 	.word	0x40007000
 8006f9c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006fa0:	4b1b      	ldr	r3, [pc, #108]	; (8007010 <HAL_RCC_OscConfig+0x4ec>)
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	699b      	ldr	r3, [r3, #24]
 8006faa:	2b01      	cmp	r3, #1
 8006fac:	d028      	beq.n	8007000 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d121      	bne.n	8007000 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fc6:	429a      	cmp	r2, r3
 8006fc8:	d11a      	bne.n	8007000 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006fca:	68fa      	ldr	r2, [r7, #12]
 8006fcc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006fd0:	4013      	ands	r3, r2
 8006fd2:	687a      	ldr	r2, [r7, #4]
 8006fd4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006fd6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d111      	bne.n	8007000 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fe6:	085b      	lsrs	r3, r3, #1
 8006fe8:	3b01      	subs	r3, #1
 8006fea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006fec:	429a      	cmp	r2, r3
 8006fee:	d107      	bne.n	8007000 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ffa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	d001      	beq.n	8007004 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007000:	2301      	movs	r3, #1
 8007002:	e000      	b.n	8007006 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007004:	2300      	movs	r3, #0
}
 8007006:	4618      	mov	r0, r3
 8007008:	3718      	adds	r7, #24
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}
 800700e:	bf00      	nop
 8007010:	40023800 	.word	0x40023800

08007014 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b084      	sub	sp, #16
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
 800701c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d101      	bne.n	8007028 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007024:	2301      	movs	r3, #1
 8007026:	e0cc      	b.n	80071c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007028:	4b68      	ldr	r3, [pc, #416]	; (80071cc <HAL_RCC_ClockConfig+0x1b8>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f003 0307 	and.w	r3, r3, #7
 8007030:	683a      	ldr	r2, [r7, #0]
 8007032:	429a      	cmp	r2, r3
 8007034:	d90c      	bls.n	8007050 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007036:	4b65      	ldr	r3, [pc, #404]	; (80071cc <HAL_RCC_ClockConfig+0x1b8>)
 8007038:	683a      	ldr	r2, [r7, #0]
 800703a:	b2d2      	uxtb	r2, r2
 800703c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800703e:	4b63      	ldr	r3, [pc, #396]	; (80071cc <HAL_RCC_ClockConfig+0x1b8>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f003 0307 	and.w	r3, r3, #7
 8007046:	683a      	ldr	r2, [r7, #0]
 8007048:	429a      	cmp	r2, r3
 800704a:	d001      	beq.n	8007050 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800704c:	2301      	movs	r3, #1
 800704e:	e0b8      	b.n	80071c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f003 0302 	and.w	r3, r3, #2
 8007058:	2b00      	cmp	r3, #0
 800705a:	d020      	beq.n	800709e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f003 0304 	and.w	r3, r3, #4
 8007064:	2b00      	cmp	r3, #0
 8007066:	d005      	beq.n	8007074 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007068:	4b59      	ldr	r3, [pc, #356]	; (80071d0 <HAL_RCC_ClockConfig+0x1bc>)
 800706a:	689b      	ldr	r3, [r3, #8]
 800706c:	4a58      	ldr	r2, [pc, #352]	; (80071d0 <HAL_RCC_ClockConfig+0x1bc>)
 800706e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007072:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f003 0308 	and.w	r3, r3, #8
 800707c:	2b00      	cmp	r3, #0
 800707e:	d005      	beq.n	800708c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007080:	4b53      	ldr	r3, [pc, #332]	; (80071d0 <HAL_RCC_ClockConfig+0x1bc>)
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	4a52      	ldr	r2, [pc, #328]	; (80071d0 <HAL_RCC_ClockConfig+0x1bc>)
 8007086:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800708a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800708c:	4b50      	ldr	r3, [pc, #320]	; (80071d0 <HAL_RCC_ClockConfig+0x1bc>)
 800708e:	689b      	ldr	r3, [r3, #8]
 8007090:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	689b      	ldr	r3, [r3, #8]
 8007098:	494d      	ldr	r1, [pc, #308]	; (80071d0 <HAL_RCC_ClockConfig+0x1bc>)
 800709a:	4313      	orrs	r3, r2
 800709c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f003 0301 	and.w	r3, r3, #1
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d044      	beq.n	8007134 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	2b01      	cmp	r3, #1
 80070b0:	d107      	bne.n	80070c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070b2:	4b47      	ldr	r3, [pc, #284]	; (80071d0 <HAL_RCC_ClockConfig+0x1bc>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d119      	bne.n	80070f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070be:	2301      	movs	r3, #1
 80070c0:	e07f      	b.n	80071c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	2b02      	cmp	r3, #2
 80070c8:	d003      	beq.n	80070d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80070ce:	2b03      	cmp	r3, #3
 80070d0:	d107      	bne.n	80070e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80070d2:	4b3f      	ldr	r3, [pc, #252]	; (80071d0 <HAL_RCC_ClockConfig+0x1bc>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d109      	bne.n	80070f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070de:	2301      	movs	r3, #1
 80070e0:	e06f      	b.n	80071c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070e2:	4b3b      	ldr	r3, [pc, #236]	; (80071d0 <HAL_RCC_ClockConfig+0x1bc>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f003 0302 	and.w	r3, r3, #2
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d101      	bne.n	80070f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070ee:	2301      	movs	r3, #1
 80070f0:	e067      	b.n	80071c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80070f2:	4b37      	ldr	r3, [pc, #220]	; (80071d0 <HAL_RCC_ClockConfig+0x1bc>)
 80070f4:	689b      	ldr	r3, [r3, #8]
 80070f6:	f023 0203 	bic.w	r2, r3, #3
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	4934      	ldr	r1, [pc, #208]	; (80071d0 <HAL_RCC_ClockConfig+0x1bc>)
 8007100:	4313      	orrs	r3, r2
 8007102:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007104:	f7fb f89e 	bl	8002244 <HAL_GetTick>
 8007108:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800710a:	e00a      	b.n	8007122 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800710c:	f7fb f89a 	bl	8002244 <HAL_GetTick>
 8007110:	4602      	mov	r2, r0
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	1ad3      	subs	r3, r2, r3
 8007116:	f241 3288 	movw	r2, #5000	; 0x1388
 800711a:	4293      	cmp	r3, r2
 800711c:	d901      	bls.n	8007122 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800711e:	2303      	movs	r3, #3
 8007120:	e04f      	b.n	80071c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007122:	4b2b      	ldr	r3, [pc, #172]	; (80071d0 <HAL_RCC_ClockConfig+0x1bc>)
 8007124:	689b      	ldr	r3, [r3, #8]
 8007126:	f003 020c 	and.w	r2, r3, #12
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	009b      	lsls	r3, r3, #2
 8007130:	429a      	cmp	r2, r3
 8007132:	d1eb      	bne.n	800710c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007134:	4b25      	ldr	r3, [pc, #148]	; (80071cc <HAL_RCC_ClockConfig+0x1b8>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f003 0307 	and.w	r3, r3, #7
 800713c:	683a      	ldr	r2, [r7, #0]
 800713e:	429a      	cmp	r2, r3
 8007140:	d20c      	bcs.n	800715c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007142:	4b22      	ldr	r3, [pc, #136]	; (80071cc <HAL_RCC_ClockConfig+0x1b8>)
 8007144:	683a      	ldr	r2, [r7, #0]
 8007146:	b2d2      	uxtb	r2, r2
 8007148:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800714a:	4b20      	ldr	r3, [pc, #128]	; (80071cc <HAL_RCC_ClockConfig+0x1b8>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f003 0307 	and.w	r3, r3, #7
 8007152:	683a      	ldr	r2, [r7, #0]
 8007154:	429a      	cmp	r2, r3
 8007156:	d001      	beq.n	800715c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007158:	2301      	movs	r3, #1
 800715a:	e032      	b.n	80071c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f003 0304 	and.w	r3, r3, #4
 8007164:	2b00      	cmp	r3, #0
 8007166:	d008      	beq.n	800717a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007168:	4b19      	ldr	r3, [pc, #100]	; (80071d0 <HAL_RCC_ClockConfig+0x1bc>)
 800716a:	689b      	ldr	r3, [r3, #8]
 800716c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	68db      	ldr	r3, [r3, #12]
 8007174:	4916      	ldr	r1, [pc, #88]	; (80071d0 <HAL_RCC_ClockConfig+0x1bc>)
 8007176:	4313      	orrs	r3, r2
 8007178:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f003 0308 	and.w	r3, r3, #8
 8007182:	2b00      	cmp	r3, #0
 8007184:	d009      	beq.n	800719a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007186:	4b12      	ldr	r3, [pc, #72]	; (80071d0 <HAL_RCC_ClockConfig+0x1bc>)
 8007188:	689b      	ldr	r3, [r3, #8]
 800718a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	691b      	ldr	r3, [r3, #16]
 8007192:	00db      	lsls	r3, r3, #3
 8007194:	490e      	ldr	r1, [pc, #56]	; (80071d0 <HAL_RCC_ClockConfig+0x1bc>)
 8007196:	4313      	orrs	r3, r2
 8007198:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800719a:	f000 f821 	bl	80071e0 <HAL_RCC_GetSysClockFreq>
 800719e:	4602      	mov	r2, r0
 80071a0:	4b0b      	ldr	r3, [pc, #44]	; (80071d0 <HAL_RCC_ClockConfig+0x1bc>)
 80071a2:	689b      	ldr	r3, [r3, #8]
 80071a4:	091b      	lsrs	r3, r3, #4
 80071a6:	f003 030f 	and.w	r3, r3, #15
 80071aa:	490a      	ldr	r1, [pc, #40]	; (80071d4 <HAL_RCC_ClockConfig+0x1c0>)
 80071ac:	5ccb      	ldrb	r3, [r1, r3]
 80071ae:	fa22 f303 	lsr.w	r3, r2, r3
 80071b2:	4a09      	ldr	r2, [pc, #36]	; (80071d8 <HAL_RCC_ClockConfig+0x1c4>)
 80071b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80071b6:	4b09      	ldr	r3, [pc, #36]	; (80071dc <HAL_RCC_ClockConfig+0x1c8>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4618      	mov	r0, r3
 80071bc:	f7fa fffe 	bl	80021bc <HAL_InitTick>

  return HAL_OK;
 80071c0:	2300      	movs	r3, #0
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3710      	adds	r7, #16
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}
 80071ca:	bf00      	nop
 80071cc:	40023c00 	.word	0x40023c00
 80071d0:	40023800 	.word	0x40023800
 80071d4:	08017af8 	.word	0x08017af8
 80071d8:	2000002c 	.word	0x2000002c
 80071dc:	20000030 	.word	0x20000030

080071e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80071e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80071e4:	b094      	sub	sp, #80	; 0x50
 80071e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80071e8:	2300      	movs	r3, #0
 80071ea:	647b      	str	r3, [r7, #68]	; 0x44
 80071ec:	2300      	movs	r3, #0
 80071ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80071f0:	2300      	movs	r3, #0
 80071f2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80071f4:	2300      	movs	r3, #0
 80071f6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80071f8:	4b79      	ldr	r3, [pc, #484]	; (80073e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80071fa:	689b      	ldr	r3, [r3, #8]
 80071fc:	f003 030c 	and.w	r3, r3, #12
 8007200:	2b08      	cmp	r3, #8
 8007202:	d00d      	beq.n	8007220 <HAL_RCC_GetSysClockFreq+0x40>
 8007204:	2b08      	cmp	r3, #8
 8007206:	f200 80e1 	bhi.w	80073cc <HAL_RCC_GetSysClockFreq+0x1ec>
 800720a:	2b00      	cmp	r3, #0
 800720c:	d002      	beq.n	8007214 <HAL_RCC_GetSysClockFreq+0x34>
 800720e:	2b04      	cmp	r3, #4
 8007210:	d003      	beq.n	800721a <HAL_RCC_GetSysClockFreq+0x3a>
 8007212:	e0db      	b.n	80073cc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007214:	4b73      	ldr	r3, [pc, #460]	; (80073e4 <HAL_RCC_GetSysClockFreq+0x204>)
 8007216:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8007218:	e0db      	b.n	80073d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800721a:	4b73      	ldr	r3, [pc, #460]	; (80073e8 <HAL_RCC_GetSysClockFreq+0x208>)
 800721c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800721e:	e0d8      	b.n	80073d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007220:	4b6f      	ldr	r3, [pc, #444]	; (80073e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007222:	685b      	ldr	r3, [r3, #4]
 8007224:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007228:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800722a:	4b6d      	ldr	r3, [pc, #436]	; (80073e0 <HAL_RCC_GetSysClockFreq+0x200>)
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007232:	2b00      	cmp	r3, #0
 8007234:	d063      	beq.n	80072fe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007236:	4b6a      	ldr	r3, [pc, #424]	; (80073e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	099b      	lsrs	r3, r3, #6
 800723c:	2200      	movs	r2, #0
 800723e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007240:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007244:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007248:	633b      	str	r3, [r7, #48]	; 0x30
 800724a:	2300      	movs	r3, #0
 800724c:	637b      	str	r3, [r7, #52]	; 0x34
 800724e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007252:	4622      	mov	r2, r4
 8007254:	462b      	mov	r3, r5
 8007256:	f04f 0000 	mov.w	r0, #0
 800725a:	f04f 0100 	mov.w	r1, #0
 800725e:	0159      	lsls	r1, r3, #5
 8007260:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007264:	0150      	lsls	r0, r2, #5
 8007266:	4602      	mov	r2, r0
 8007268:	460b      	mov	r3, r1
 800726a:	4621      	mov	r1, r4
 800726c:	1a51      	subs	r1, r2, r1
 800726e:	6139      	str	r1, [r7, #16]
 8007270:	4629      	mov	r1, r5
 8007272:	eb63 0301 	sbc.w	r3, r3, r1
 8007276:	617b      	str	r3, [r7, #20]
 8007278:	f04f 0200 	mov.w	r2, #0
 800727c:	f04f 0300 	mov.w	r3, #0
 8007280:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007284:	4659      	mov	r1, fp
 8007286:	018b      	lsls	r3, r1, #6
 8007288:	4651      	mov	r1, sl
 800728a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800728e:	4651      	mov	r1, sl
 8007290:	018a      	lsls	r2, r1, #6
 8007292:	4651      	mov	r1, sl
 8007294:	ebb2 0801 	subs.w	r8, r2, r1
 8007298:	4659      	mov	r1, fp
 800729a:	eb63 0901 	sbc.w	r9, r3, r1
 800729e:	f04f 0200 	mov.w	r2, #0
 80072a2:	f04f 0300 	mov.w	r3, #0
 80072a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80072aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80072ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80072b2:	4690      	mov	r8, r2
 80072b4:	4699      	mov	r9, r3
 80072b6:	4623      	mov	r3, r4
 80072b8:	eb18 0303 	adds.w	r3, r8, r3
 80072bc:	60bb      	str	r3, [r7, #8]
 80072be:	462b      	mov	r3, r5
 80072c0:	eb49 0303 	adc.w	r3, r9, r3
 80072c4:	60fb      	str	r3, [r7, #12]
 80072c6:	f04f 0200 	mov.w	r2, #0
 80072ca:	f04f 0300 	mov.w	r3, #0
 80072ce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80072d2:	4629      	mov	r1, r5
 80072d4:	024b      	lsls	r3, r1, #9
 80072d6:	4621      	mov	r1, r4
 80072d8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80072dc:	4621      	mov	r1, r4
 80072de:	024a      	lsls	r2, r1, #9
 80072e0:	4610      	mov	r0, r2
 80072e2:	4619      	mov	r1, r3
 80072e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072e6:	2200      	movs	r2, #0
 80072e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80072ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80072ec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80072f0:	f7f8 ffbe 	bl	8000270 <__aeabi_uldivmod>
 80072f4:	4602      	mov	r2, r0
 80072f6:	460b      	mov	r3, r1
 80072f8:	4613      	mov	r3, r2
 80072fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80072fc:	e058      	b.n	80073b0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80072fe:	4b38      	ldr	r3, [pc, #224]	; (80073e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	099b      	lsrs	r3, r3, #6
 8007304:	2200      	movs	r2, #0
 8007306:	4618      	mov	r0, r3
 8007308:	4611      	mov	r1, r2
 800730a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800730e:	623b      	str	r3, [r7, #32]
 8007310:	2300      	movs	r3, #0
 8007312:	627b      	str	r3, [r7, #36]	; 0x24
 8007314:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007318:	4642      	mov	r2, r8
 800731a:	464b      	mov	r3, r9
 800731c:	f04f 0000 	mov.w	r0, #0
 8007320:	f04f 0100 	mov.w	r1, #0
 8007324:	0159      	lsls	r1, r3, #5
 8007326:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800732a:	0150      	lsls	r0, r2, #5
 800732c:	4602      	mov	r2, r0
 800732e:	460b      	mov	r3, r1
 8007330:	4641      	mov	r1, r8
 8007332:	ebb2 0a01 	subs.w	sl, r2, r1
 8007336:	4649      	mov	r1, r9
 8007338:	eb63 0b01 	sbc.w	fp, r3, r1
 800733c:	f04f 0200 	mov.w	r2, #0
 8007340:	f04f 0300 	mov.w	r3, #0
 8007344:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007348:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800734c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007350:	ebb2 040a 	subs.w	r4, r2, sl
 8007354:	eb63 050b 	sbc.w	r5, r3, fp
 8007358:	f04f 0200 	mov.w	r2, #0
 800735c:	f04f 0300 	mov.w	r3, #0
 8007360:	00eb      	lsls	r3, r5, #3
 8007362:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007366:	00e2      	lsls	r2, r4, #3
 8007368:	4614      	mov	r4, r2
 800736a:	461d      	mov	r5, r3
 800736c:	4643      	mov	r3, r8
 800736e:	18e3      	adds	r3, r4, r3
 8007370:	603b      	str	r3, [r7, #0]
 8007372:	464b      	mov	r3, r9
 8007374:	eb45 0303 	adc.w	r3, r5, r3
 8007378:	607b      	str	r3, [r7, #4]
 800737a:	f04f 0200 	mov.w	r2, #0
 800737e:	f04f 0300 	mov.w	r3, #0
 8007382:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007386:	4629      	mov	r1, r5
 8007388:	028b      	lsls	r3, r1, #10
 800738a:	4621      	mov	r1, r4
 800738c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007390:	4621      	mov	r1, r4
 8007392:	028a      	lsls	r2, r1, #10
 8007394:	4610      	mov	r0, r2
 8007396:	4619      	mov	r1, r3
 8007398:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800739a:	2200      	movs	r2, #0
 800739c:	61bb      	str	r3, [r7, #24]
 800739e:	61fa      	str	r2, [r7, #28]
 80073a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80073a4:	f7f8 ff64 	bl	8000270 <__aeabi_uldivmod>
 80073a8:	4602      	mov	r2, r0
 80073aa:	460b      	mov	r3, r1
 80073ac:	4613      	mov	r3, r2
 80073ae:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80073b0:	4b0b      	ldr	r3, [pc, #44]	; (80073e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	0c1b      	lsrs	r3, r3, #16
 80073b6:	f003 0303 	and.w	r3, r3, #3
 80073ba:	3301      	adds	r3, #1
 80073bc:	005b      	lsls	r3, r3, #1
 80073be:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80073c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80073c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80073c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80073ca:	e002      	b.n	80073d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80073cc:	4b05      	ldr	r3, [pc, #20]	; (80073e4 <HAL_RCC_GetSysClockFreq+0x204>)
 80073ce:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80073d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80073d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3750      	adds	r7, #80	; 0x50
 80073d8:	46bd      	mov	sp, r7
 80073da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80073de:	bf00      	nop
 80073e0:	40023800 	.word	0x40023800
 80073e4:	00f42400 	.word	0x00f42400
 80073e8:	007a1200 	.word	0x007a1200

080073ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80073ec:	b480      	push	{r7}
 80073ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80073f0:	4b03      	ldr	r3, [pc, #12]	; (8007400 <HAL_RCC_GetHCLKFreq+0x14>)
 80073f2:	681b      	ldr	r3, [r3, #0]
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr
 80073fe:	bf00      	nop
 8007400:	2000002c 	.word	0x2000002c

08007404 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007408:	f7ff fff0 	bl	80073ec <HAL_RCC_GetHCLKFreq>
 800740c:	4602      	mov	r2, r0
 800740e:	4b05      	ldr	r3, [pc, #20]	; (8007424 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007410:	689b      	ldr	r3, [r3, #8]
 8007412:	0a9b      	lsrs	r3, r3, #10
 8007414:	f003 0307 	and.w	r3, r3, #7
 8007418:	4903      	ldr	r1, [pc, #12]	; (8007428 <HAL_RCC_GetPCLK1Freq+0x24>)
 800741a:	5ccb      	ldrb	r3, [r1, r3]
 800741c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007420:	4618      	mov	r0, r3
 8007422:	bd80      	pop	{r7, pc}
 8007424:	40023800 	.word	0x40023800
 8007428:	08017b08 	.word	0x08017b08

0800742c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b082      	sub	sp, #8
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d101      	bne.n	800743e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800743a:	2301      	movs	r3, #1
 800743c:	e07b      	b.n	8007536 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007442:	2b00      	cmp	r3, #0
 8007444:	d108      	bne.n	8007458 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800744e:	d009      	beq.n	8007464 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2200      	movs	r2, #0
 8007454:	61da      	str	r2, [r3, #28]
 8007456:	e005      	b.n	8007464 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2200      	movs	r2, #0
 800745c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2200      	movs	r2, #0
 8007462:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2200      	movs	r2, #0
 8007468:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007470:	b2db      	uxtb	r3, r3
 8007472:	2b00      	cmp	r3, #0
 8007474:	d106      	bne.n	8007484 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2200      	movs	r2, #0
 800747a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f7fa fc36 	bl	8001cf0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2202      	movs	r2, #2
 8007488:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	681a      	ldr	r2, [r3, #0]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800749a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	689b      	ldr	r3, [r3, #8]
 80074a8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80074ac:	431a      	orrs	r2, r3
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	68db      	ldr	r3, [r3, #12]
 80074b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074b6:	431a      	orrs	r2, r3
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	691b      	ldr	r3, [r3, #16]
 80074bc:	f003 0302 	and.w	r3, r3, #2
 80074c0:	431a      	orrs	r2, r3
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	695b      	ldr	r3, [r3, #20]
 80074c6:	f003 0301 	and.w	r3, r3, #1
 80074ca:	431a      	orrs	r2, r3
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	699b      	ldr	r3, [r3, #24]
 80074d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80074d4:	431a      	orrs	r2, r3
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	69db      	ldr	r3, [r3, #28]
 80074da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80074de:	431a      	orrs	r2, r3
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6a1b      	ldr	r3, [r3, #32]
 80074e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074e8:	ea42 0103 	orr.w	r1, r2, r3
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074f0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	430a      	orrs	r2, r1
 80074fa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	699b      	ldr	r3, [r3, #24]
 8007500:	0c1b      	lsrs	r3, r3, #16
 8007502:	f003 0104 	and.w	r1, r3, #4
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800750a:	f003 0210 	and.w	r2, r3, #16
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	430a      	orrs	r2, r1
 8007514:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	69da      	ldr	r2, [r3, #28]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007524:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2200      	movs	r2, #0
 800752a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2201      	movs	r2, #1
 8007530:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007534:	2300      	movs	r3, #0
}
 8007536:	4618      	mov	r0, r3
 8007538:	3708      	adds	r7, #8
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}

0800753e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800753e:	b580      	push	{r7, lr}
 8007540:	b088      	sub	sp, #32
 8007542:	af00      	add	r7, sp, #0
 8007544:	60f8      	str	r0, [r7, #12]
 8007546:	60b9      	str	r1, [r7, #8]
 8007548:	603b      	str	r3, [r7, #0]
 800754a:	4613      	mov	r3, r2
 800754c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800754e:	2300      	movs	r3, #0
 8007550:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007558:	2b01      	cmp	r3, #1
 800755a:	d101      	bne.n	8007560 <HAL_SPI_Transmit+0x22>
 800755c:	2302      	movs	r3, #2
 800755e:	e126      	b.n	80077ae <HAL_SPI_Transmit+0x270>
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	2201      	movs	r2, #1
 8007564:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007568:	f7fa fe6c 	bl	8002244 <HAL_GetTick>
 800756c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800756e:	88fb      	ldrh	r3, [r7, #6]
 8007570:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007578:	b2db      	uxtb	r3, r3
 800757a:	2b01      	cmp	r3, #1
 800757c:	d002      	beq.n	8007584 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800757e:	2302      	movs	r3, #2
 8007580:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007582:	e10b      	b.n	800779c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d002      	beq.n	8007590 <HAL_SPI_Transmit+0x52>
 800758a:	88fb      	ldrh	r3, [r7, #6]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d102      	bne.n	8007596 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007590:	2301      	movs	r3, #1
 8007592:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007594:	e102      	b.n	800779c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	2203      	movs	r2, #3
 800759a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	2200      	movs	r2, #0
 80075a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	68ba      	ldr	r2, [r7, #8]
 80075a8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	88fa      	ldrh	r2, [r7, #6]
 80075ae:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	88fa      	ldrh	r2, [r7, #6]
 80075b4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	2200      	movs	r2, #0
 80075ba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	2200      	movs	r2, #0
 80075c0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	2200      	movs	r2, #0
 80075c6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	2200      	movs	r2, #0
 80075cc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	2200      	movs	r2, #0
 80075d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	689b      	ldr	r3, [r3, #8]
 80075d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075dc:	d10f      	bne.n	80075fe <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	681a      	ldr	r2, [r3, #0]
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075ec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	681a      	ldr	r2, [r3, #0]
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80075fc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007608:	2b40      	cmp	r3, #64	; 0x40
 800760a:	d007      	beq.n	800761c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	681a      	ldr	r2, [r3, #0]
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800761a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	68db      	ldr	r3, [r3, #12]
 8007620:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007624:	d14b      	bne.n	80076be <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d002      	beq.n	8007634 <HAL_SPI_Transmit+0xf6>
 800762e:	8afb      	ldrh	r3, [r7, #22]
 8007630:	2b01      	cmp	r3, #1
 8007632:	d13e      	bne.n	80076b2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007638:	881a      	ldrh	r2, [r3, #0]
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007644:	1c9a      	adds	r2, r3, #2
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800764e:	b29b      	uxth	r3, r3
 8007650:	3b01      	subs	r3, #1
 8007652:	b29a      	uxth	r2, r3
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007658:	e02b      	b.n	80076b2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	689b      	ldr	r3, [r3, #8]
 8007660:	f003 0302 	and.w	r3, r3, #2
 8007664:	2b02      	cmp	r3, #2
 8007666:	d112      	bne.n	800768e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800766c:	881a      	ldrh	r2, [r3, #0]
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007678:	1c9a      	adds	r2, r3, #2
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007682:	b29b      	uxth	r3, r3
 8007684:	3b01      	subs	r3, #1
 8007686:	b29a      	uxth	r2, r3
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	86da      	strh	r2, [r3, #54]	; 0x36
 800768c:	e011      	b.n	80076b2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800768e:	f7fa fdd9 	bl	8002244 <HAL_GetTick>
 8007692:	4602      	mov	r2, r0
 8007694:	69bb      	ldr	r3, [r7, #24]
 8007696:	1ad3      	subs	r3, r2, r3
 8007698:	683a      	ldr	r2, [r7, #0]
 800769a:	429a      	cmp	r2, r3
 800769c:	d803      	bhi.n	80076a6 <HAL_SPI_Transmit+0x168>
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076a4:	d102      	bne.n	80076ac <HAL_SPI_Transmit+0x16e>
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d102      	bne.n	80076b2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80076ac:	2303      	movs	r3, #3
 80076ae:	77fb      	strb	r3, [r7, #31]
          goto error;
 80076b0:	e074      	b.n	800779c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076b6:	b29b      	uxth	r3, r3
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d1ce      	bne.n	800765a <HAL_SPI_Transmit+0x11c>
 80076bc:	e04c      	b.n	8007758 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	685b      	ldr	r3, [r3, #4]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d002      	beq.n	80076cc <HAL_SPI_Transmit+0x18e>
 80076c6:	8afb      	ldrh	r3, [r7, #22]
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	d140      	bne.n	800774e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	330c      	adds	r3, #12
 80076d6:	7812      	ldrb	r2, [r2, #0]
 80076d8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076de:	1c5a      	adds	r2, r3, #1
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076e8:	b29b      	uxth	r3, r3
 80076ea:	3b01      	subs	r3, #1
 80076ec:	b29a      	uxth	r2, r3
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80076f2:	e02c      	b.n	800774e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	689b      	ldr	r3, [r3, #8]
 80076fa:	f003 0302 	and.w	r3, r3, #2
 80076fe:	2b02      	cmp	r3, #2
 8007700:	d113      	bne.n	800772a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	330c      	adds	r3, #12
 800770c:	7812      	ldrb	r2, [r2, #0]
 800770e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007714:	1c5a      	adds	r2, r3, #1
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800771e:	b29b      	uxth	r3, r3
 8007720:	3b01      	subs	r3, #1
 8007722:	b29a      	uxth	r2, r3
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	86da      	strh	r2, [r3, #54]	; 0x36
 8007728:	e011      	b.n	800774e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800772a:	f7fa fd8b 	bl	8002244 <HAL_GetTick>
 800772e:	4602      	mov	r2, r0
 8007730:	69bb      	ldr	r3, [r7, #24]
 8007732:	1ad3      	subs	r3, r2, r3
 8007734:	683a      	ldr	r2, [r7, #0]
 8007736:	429a      	cmp	r2, r3
 8007738:	d803      	bhi.n	8007742 <HAL_SPI_Transmit+0x204>
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007740:	d102      	bne.n	8007748 <HAL_SPI_Transmit+0x20a>
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d102      	bne.n	800774e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007748:	2303      	movs	r3, #3
 800774a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800774c:	e026      	b.n	800779c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007752:	b29b      	uxth	r3, r3
 8007754:	2b00      	cmp	r3, #0
 8007756:	d1cd      	bne.n	80076f4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007758:	69ba      	ldr	r2, [r7, #24]
 800775a:	6839      	ldr	r1, [r7, #0]
 800775c:	68f8      	ldr	r0, [r7, #12]
 800775e:	f000 f9ff 	bl	8007b60 <SPI_EndRxTxTransaction>
 8007762:	4603      	mov	r3, r0
 8007764:	2b00      	cmp	r3, #0
 8007766:	d002      	beq.n	800776e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	2220      	movs	r2, #32
 800776c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	689b      	ldr	r3, [r3, #8]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d10a      	bne.n	800778c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007776:	2300      	movs	r3, #0
 8007778:	613b      	str	r3, [r7, #16]
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	68db      	ldr	r3, [r3, #12]
 8007780:	613b      	str	r3, [r7, #16]
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	689b      	ldr	r3, [r3, #8]
 8007788:	613b      	str	r3, [r7, #16]
 800778a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007790:	2b00      	cmp	r3, #0
 8007792:	d002      	beq.n	800779a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007794:	2301      	movs	r3, #1
 8007796:	77fb      	strb	r3, [r7, #31]
 8007798:	e000      	b.n	800779c <HAL_SPI_Transmit+0x25e>
  }

error:
 800779a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	2201      	movs	r2, #1
 80077a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2200      	movs	r2, #0
 80077a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80077ac:	7ffb      	ldrb	r3, [r7, #31]
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3720      	adds	r7, #32
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}
	...

080077b8 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b086      	sub	sp, #24
 80077bc:	af00      	add	r7, sp, #0
 80077be:	60f8      	str	r0, [r7, #12]
 80077c0:	60b9      	str	r1, [r7, #8]
 80077c2:	4613      	mov	r3, r2
 80077c4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80077c6:	2300      	movs	r3, #0
 80077c8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80077d0:	2b01      	cmp	r3, #1
 80077d2:	d101      	bne.n	80077d8 <HAL_SPI_Transmit_DMA+0x20>
 80077d4:	2302      	movs	r3, #2
 80077d6:	e09b      	b.n	8007910 <HAL_SPI_Transmit_DMA+0x158>
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2201      	movs	r2, #1
 80077dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80077e6:	b2db      	uxtb	r3, r3
 80077e8:	2b01      	cmp	r3, #1
 80077ea:	d002      	beq.n	80077f2 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80077ec:	2302      	movs	r3, #2
 80077ee:	75fb      	strb	r3, [r7, #23]
    goto error;
 80077f0:	e089      	b.n	8007906 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d002      	beq.n	80077fe <HAL_SPI_Transmit_DMA+0x46>
 80077f8:	88fb      	ldrh	r3, [r7, #6]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d102      	bne.n	8007804 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80077fe:	2301      	movs	r3, #1
 8007800:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007802:	e080      	b.n	8007906 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2203      	movs	r2, #3
 8007808:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2200      	movs	r2, #0
 8007810:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	68ba      	ldr	r2, [r7, #8]
 8007816:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	88fa      	ldrh	r2, [r7, #6]
 800781c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	88fa      	ldrh	r2, [r7, #6]
 8007822:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2200      	movs	r2, #0
 8007828:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	2200      	movs	r2, #0
 800782e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	2200      	movs	r2, #0
 8007834:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	2200      	movs	r2, #0
 800783a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2200      	movs	r2, #0
 8007840:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	689b      	ldr	r3, [r3, #8]
 8007846:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800784a:	d10f      	bne.n	800786c <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	681a      	ldr	r2, [r3, #0]
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800785a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	681a      	ldr	r2, [r3, #0]
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800786a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007870:	4a29      	ldr	r2, [pc, #164]	; (8007918 <HAL_SPI_Transmit_DMA+0x160>)
 8007872:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007878:	4a28      	ldr	r2, [pc, #160]	; (800791c <HAL_SPI_Transmit_DMA+0x164>)
 800787a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007880:	4a27      	ldr	r2, [pc, #156]	; (8007920 <HAL_SPI_Transmit_DMA+0x168>)
 8007882:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007888:	2200      	movs	r2, #0
 800788a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007894:	4619      	mov	r1, r3
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	330c      	adds	r3, #12
 800789c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078a2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80078a4:	f7fa febe 	bl	8002624 <HAL_DMA_Start_IT>
 80078a8:	4603      	mov	r3, r0
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d00c      	beq.n	80078c8 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078b2:	f043 0210 	orr.w	r2, r3, #16
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80078ba:	2301      	movs	r3, #1
 80078bc:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2201      	movs	r2, #1
 80078c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80078c6:	e01e      	b.n	8007906 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078d2:	2b40      	cmp	r3, #64	; 0x40
 80078d4:	d007      	beq.n	80078e6 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	681a      	ldr	r2, [r3, #0]
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80078e4:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	685a      	ldr	r2, [r3, #4]
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f042 0220 	orr.w	r2, r2, #32
 80078f4:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	685a      	ldr	r2, [r3, #4]
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f042 0202 	orr.w	r2, r2, #2
 8007904:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	2200      	movs	r2, #0
 800790a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800790e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007910:	4618      	mov	r0, r3
 8007912:	3718      	adds	r7, #24
 8007914:	46bd      	mov	sp, r7
 8007916:	bd80      	pop	{r7, pc}
 8007918:	080079f5 	.word	0x080079f5
 800791c:	0800794d 	.word	0x0800794d
 8007920:	08007a11 	.word	0x08007a11

08007924 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007924:	b480      	push	{r7}
 8007926:	b083      	sub	sp, #12
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800792c:	bf00      	nop
 800792e:	370c      	adds	r7, #12
 8007930:	46bd      	mov	sp, r7
 8007932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007936:	4770      	bx	lr

08007938 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007938:	b480      	push	{r7}
 800793a:	b083      	sub	sp, #12
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007940:	bf00      	nop
 8007942:	370c      	adds	r7, #12
 8007944:	46bd      	mov	sp, r7
 8007946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794a:	4770      	bx	lr

0800794c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b086      	sub	sp, #24
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007958:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800795a:	f7fa fc73 	bl	8002244 <HAL_GetTick>
 800795e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800796a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800796e:	d03b      	beq.n	80079e8 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	685a      	ldr	r2, [r3, #4]
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f022 0220 	bic.w	r2, r2, #32
 800797e:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	685a      	ldr	r2, [r3, #4]
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f022 0202 	bic.w	r2, r2, #2
 800798e:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007990:	693a      	ldr	r2, [r7, #16]
 8007992:	2164      	movs	r1, #100	; 0x64
 8007994:	6978      	ldr	r0, [r7, #20]
 8007996:	f000 f8e3 	bl	8007b60 <SPI_EndRxTxTransaction>
 800799a:	4603      	mov	r3, r0
 800799c:	2b00      	cmp	r3, #0
 800799e:	d005      	beq.n	80079ac <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80079a0:	697b      	ldr	r3, [r7, #20]
 80079a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079a4:	f043 0220 	orr.w	r2, r3, #32
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	689b      	ldr	r3, [r3, #8]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d10a      	bne.n	80079ca <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80079b4:	2300      	movs	r3, #0
 80079b6:	60fb      	str	r3, [r7, #12]
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	68db      	ldr	r3, [r3, #12]
 80079be:	60fb      	str	r3, [r7, #12]
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	689b      	ldr	r3, [r3, #8]
 80079c6:	60fb      	str	r3, [r7, #12]
 80079c8:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80079ca:	697b      	ldr	r3, [r7, #20]
 80079cc:	2200      	movs	r2, #0
 80079ce:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	2201      	movs	r2, #1
 80079d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d003      	beq.n	80079e8 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80079e0:	6978      	ldr	r0, [r7, #20]
 80079e2:	f7ff ffa9 	bl	8007938 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80079e6:	e002      	b.n	80079ee <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80079e8:	6978      	ldr	r0, [r7, #20]
 80079ea:	f7f8 fe81 	bl	80006f0 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80079ee:	3718      	adds	r7, #24
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}

080079f4 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b084      	sub	sp, #16
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a00:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8007a02:	68f8      	ldr	r0, [r7, #12]
 8007a04:	f7ff ff8e 	bl	8007924 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007a08:	bf00      	nop
 8007a0a:	3710      	adds	r7, #16
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}

08007a10 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b084      	sub	sp, #16
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a1c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	685a      	ldr	r2, [r3, #4]
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f022 0203 	bic.w	r2, r2, #3
 8007a2c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a32:	f043 0210 	orr.w	r2, r3, #16
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	2201      	movs	r2, #1
 8007a3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007a42:	68f8      	ldr	r0, [r7, #12]
 8007a44:	f7ff ff78 	bl	8007938 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007a48:	bf00      	nop
 8007a4a:	3710      	adds	r7, #16
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}

08007a50 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b088      	sub	sp, #32
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	60f8      	str	r0, [r7, #12]
 8007a58:	60b9      	str	r1, [r7, #8]
 8007a5a:	603b      	str	r3, [r7, #0]
 8007a5c:	4613      	mov	r3, r2
 8007a5e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007a60:	f7fa fbf0 	bl	8002244 <HAL_GetTick>
 8007a64:	4602      	mov	r2, r0
 8007a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a68:	1a9b      	subs	r3, r3, r2
 8007a6a:	683a      	ldr	r2, [r7, #0]
 8007a6c:	4413      	add	r3, r2
 8007a6e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007a70:	f7fa fbe8 	bl	8002244 <HAL_GetTick>
 8007a74:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007a76:	4b39      	ldr	r3, [pc, #228]	; (8007b5c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	015b      	lsls	r3, r3, #5
 8007a7c:	0d1b      	lsrs	r3, r3, #20
 8007a7e:	69fa      	ldr	r2, [r7, #28]
 8007a80:	fb02 f303 	mul.w	r3, r2, r3
 8007a84:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007a86:	e054      	b.n	8007b32 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a8e:	d050      	beq.n	8007b32 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007a90:	f7fa fbd8 	bl	8002244 <HAL_GetTick>
 8007a94:	4602      	mov	r2, r0
 8007a96:	69bb      	ldr	r3, [r7, #24]
 8007a98:	1ad3      	subs	r3, r2, r3
 8007a9a:	69fa      	ldr	r2, [r7, #28]
 8007a9c:	429a      	cmp	r2, r3
 8007a9e:	d902      	bls.n	8007aa6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007aa0:	69fb      	ldr	r3, [r7, #28]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d13d      	bne.n	8007b22 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	685a      	ldr	r2, [r3, #4]
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007ab4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	685b      	ldr	r3, [r3, #4]
 8007aba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007abe:	d111      	bne.n	8007ae4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	689b      	ldr	r3, [r3, #8]
 8007ac4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ac8:	d004      	beq.n	8007ad4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	689b      	ldr	r3, [r3, #8]
 8007ace:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ad2:	d107      	bne.n	8007ae4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	681a      	ldr	r2, [r3, #0]
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ae2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ae8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007aec:	d10f      	bne.n	8007b0e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	681a      	ldr	r2, [r3, #0]
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007afc:	601a      	str	r2, [r3, #0]
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	681a      	ldr	r2, [r3, #0]
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007b0c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	2201      	movs	r2, #1
 8007b12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007b1e:	2303      	movs	r3, #3
 8007b20:	e017      	b.n	8007b52 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d101      	bne.n	8007b2c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007b28:	2300      	movs	r3, #0
 8007b2a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007b2c:	697b      	ldr	r3, [r7, #20]
 8007b2e:	3b01      	subs	r3, #1
 8007b30:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	689a      	ldr	r2, [r3, #8]
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	4013      	ands	r3, r2
 8007b3c:	68ba      	ldr	r2, [r7, #8]
 8007b3e:	429a      	cmp	r2, r3
 8007b40:	bf0c      	ite	eq
 8007b42:	2301      	moveq	r3, #1
 8007b44:	2300      	movne	r3, #0
 8007b46:	b2db      	uxtb	r3, r3
 8007b48:	461a      	mov	r2, r3
 8007b4a:	79fb      	ldrb	r3, [r7, #7]
 8007b4c:	429a      	cmp	r2, r3
 8007b4e:	d19b      	bne.n	8007a88 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007b50:	2300      	movs	r3, #0
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	3720      	adds	r7, #32
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}
 8007b5a:	bf00      	nop
 8007b5c:	2000002c 	.word	0x2000002c

08007b60 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b088      	sub	sp, #32
 8007b64:	af02      	add	r7, sp, #8
 8007b66:	60f8      	str	r0, [r7, #12]
 8007b68:	60b9      	str	r1, [r7, #8]
 8007b6a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007b6c:	4b1b      	ldr	r3, [pc, #108]	; (8007bdc <SPI_EndRxTxTransaction+0x7c>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4a1b      	ldr	r2, [pc, #108]	; (8007be0 <SPI_EndRxTxTransaction+0x80>)
 8007b72:	fba2 2303 	umull	r2, r3, r2, r3
 8007b76:	0d5b      	lsrs	r3, r3, #21
 8007b78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007b7c:	fb02 f303 	mul.w	r3, r2, r3
 8007b80:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	685b      	ldr	r3, [r3, #4]
 8007b86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b8a:	d112      	bne.n	8007bb2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	9300      	str	r3, [sp, #0]
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	2200      	movs	r2, #0
 8007b94:	2180      	movs	r1, #128	; 0x80
 8007b96:	68f8      	ldr	r0, [r7, #12]
 8007b98:	f7ff ff5a 	bl	8007a50 <SPI_WaitFlagStateUntilTimeout>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d016      	beq.n	8007bd0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ba6:	f043 0220 	orr.w	r2, r3, #32
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007bae:	2303      	movs	r3, #3
 8007bb0:	e00f      	b.n	8007bd2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d00a      	beq.n	8007bce <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007bb8:	697b      	ldr	r3, [r7, #20]
 8007bba:	3b01      	subs	r3, #1
 8007bbc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	689b      	ldr	r3, [r3, #8]
 8007bc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bc8:	2b80      	cmp	r3, #128	; 0x80
 8007bca:	d0f2      	beq.n	8007bb2 <SPI_EndRxTxTransaction+0x52>
 8007bcc:	e000      	b.n	8007bd0 <SPI_EndRxTxTransaction+0x70>
        break;
 8007bce:	bf00      	nop
  }

  return HAL_OK;
 8007bd0:	2300      	movs	r3, #0
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3718      	adds	r7, #24
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}
 8007bda:	bf00      	nop
 8007bdc:	2000002c 	.word	0x2000002c
 8007be0:	165e9f81 	.word	0x165e9f81

08007be4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b082      	sub	sp, #8
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d101      	bne.n	8007bf6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	e041      	b.n	8007c7a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bfc:	b2db      	uxtb	r3, r3
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d106      	bne.n	8007c10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2200      	movs	r2, #0
 8007c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f7fa f90a 	bl	8001e24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2202      	movs	r2, #2
 8007c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681a      	ldr	r2, [r3, #0]
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	3304      	adds	r3, #4
 8007c20:	4619      	mov	r1, r3
 8007c22:	4610      	mov	r0, r2
 8007c24:	f000 fac4 	bl	80081b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2201      	movs	r2, #1
 8007c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2201      	movs	r2, #1
 8007c3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2201      	movs	r2, #1
 8007c44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2201      	movs	r2, #1
 8007c4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2201      	movs	r2, #1
 8007c54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2201      	movs	r2, #1
 8007c5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2201      	movs	r2, #1
 8007c64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2201      	movs	r2, #1
 8007c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007c78:	2300      	movs	r3, #0
}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	3708      	adds	r7, #8
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}
	...

08007c84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b085      	sub	sp, #20
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c92:	b2db      	uxtb	r3, r3
 8007c94:	2b01      	cmp	r3, #1
 8007c96:	d001      	beq.n	8007c9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007c98:	2301      	movs	r3, #1
 8007c9a:	e04e      	b.n	8007d3a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2202      	movs	r2, #2
 8007ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	68da      	ldr	r2, [r3, #12]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f042 0201 	orr.w	r2, r2, #1
 8007cb2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	4a23      	ldr	r2, [pc, #140]	; (8007d48 <HAL_TIM_Base_Start_IT+0xc4>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d022      	beq.n	8007d04 <HAL_TIM_Base_Start_IT+0x80>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cc6:	d01d      	beq.n	8007d04 <HAL_TIM_Base_Start_IT+0x80>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	4a1f      	ldr	r2, [pc, #124]	; (8007d4c <HAL_TIM_Base_Start_IT+0xc8>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d018      	beq.n	8007d04 <HAL_TIM_Base_Start_IT+0x80>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4a1e      	ldr	r2, [pc, #120]	; (8007d50 <HAL_TIM_Base_Start_IT+0xcc>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d013      	beq.n	8007d04 <HAL_TIM_Base_Start_IT+0x80>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	4a1c      	ldr	r2, [pc, #112]	; (8007d54 <HAL_TIM_Base_Start_IT+0xd0>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d00e      	beq.n	8007d04 <HAL_TIM_Base_Start_IT+0x80>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4a1b      	ldr	r2, [pc, #108]	; (8007d58 <HAL_TIM_Base_Start_IT+0xd4>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d009      	beq.n	8007d04 <HAL_TIM_Base_Start_IT+0x80>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4a19      	ldr	r2, [pc, #100]	; (8007d5c <HAL_TIM_Base_Start_IT+0xd8>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d004      	beq.n	8007d04 <HAL_TIM_Base_Start_IT+0x80>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	4a18      	ldr	r2, [pc, #96]	; (8007d60 <HAL_TIM_Base_Start_IT+0xdc>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d111      	bne.n	8007d28 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	689b      	ldr	r3, [r3, #8]
 8007d0a:	f003 0307 	and.w	r3, r3, #7
 8007d0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	2b06      	cmp	r3, #6
 8007d14:	d010      	beq.n	8007d38 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	681a      	ldr	r2, [r3, #0]
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f042 0201 	orr.w	r2, r2, #1
 8007d24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d26:	e007      	b.n	8007d38 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	681a      	ldr	r2, [r3, #0]
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f042 0201 	orr.w	r2, r2, #1
 8007d36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007d38:	2300      	movs	r3, #0
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	3714      	adds	r7, #20
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d44:	4770      	bx	lr
 8007d46:	bf00      	nop
 8007d48:	40010000 	.word	0x40010000
 8007d4c:	40000400 	.word	0x40000400
 8007d50:	40000800 	.word	0x40000800
 8007d54:	40000c00 	.word	0x40000c00
 8007d58:	40010400 	.word	0x40010400
 8007d5c:	40014000 	.word	0x40014000
 8007d60:	40001800 	.word	0x40001800

08007d64 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b083      	sub	sp, #12
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	68da      	ldr	r2, [r3, #12]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f022 0201 	bic.w	r2, r2, #1
 8007d7a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	6a1a      	ldr	r2, [r3, #32]
 8007d82:	f241 1311 	movw	r3, #4369	; 0x1111
 8007d86:	4013      	ands	r3, r2
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d10f      	bne.n	8007dac <HAL_TIM_Base_Stop_IT+0x48>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	6a1a      	ldr	r2, [r3, #32]
 8007d92:	f240 4344 	movw	r3, #1092	; 0x444
 8007d96:	4013      	ands	r3, r2
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d107      	bne.n	8007dac <HAL_TIM_Base_Stop_IT+0x48>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	681a      	ldr	r2, [r3, #0]
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f022 0201 	bic.w	r2, r2, #1
 8007daa:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2201      	movs	r2, #1
 8007db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007db4:	2300      	movs	r3, #0
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	370c      	adds	r7, #12
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc0:	4770      	bx	lr

08007dc2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007dc2:	b580      	push	{r7, lr}
 8007dc4:	b082      	sub	sp, #8
 8007dc6:	af00      	add	r7, sp, #0
 8007dc8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	691b      	ldr	r3, [r3, #16]
 8007dd0:	f003 0302 	and.w	r3, r3, #2
 8007dd4:	2b02      	cmp	r3, #2
 8007dd6:	d122      	bne.n	8007e1e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	68db      	ldr	r3, [r3, #12]
 8007dde:	f003 0302 	and.w	r3, r3, #2
 8007de2:	2b02      	cmp	r3, #2
 8007de4:	d11b      	bne.n	8007e1e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f06f 0202 	mvn.w	r2, #2
 8007dee:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2201      	movs	r2, #1
 8007df4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	699b      	ldr	r3, [r3, #24]
 8007dfc:	f003 0303 	and.w	r3, r3, #3
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d003      	beq.n	8007e0c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f000 f9b5 	bl	8008174 <HAL_TIM_IC_CaptureCallback>
 8007e0a:	e005      	b.n	8007e18 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f000 f9a7 	bl	8008160 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f000 f9b8 	bl	8008188 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	691b      	ldr	r3, [r3, #16]
 8007e24:	f003 0304 	and.w	r3, r3, #4
 8007e28:	2b04      	cmp	r3, #4
 8007e2a:	d122      	bne.n	8007e72 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	68db      	ldr	r3, [r3, #12]
 8007e32:	f003 0304 	and.w	r3, r3, #4
 8007e36:	2b04      	cmp	r3, #4
 8007e38:	d11b      	bne.n	8007e72 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f06f 0204 	mvn.w	r2, #4
 8007e42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2202      	movs	r2, #2
 8007e48:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	699b      	ldr	r3, [r3, #24]
 8007e50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d003      	beq.n	8007e60 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f000 f98b 	bl	8008174 <HAL_TIM_IC_CaptureCallback>
 8007e5e:	e005      	b.n	8007e6c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f000 f97d 	bl	8008160 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f000 f98e 	bl	8008188 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	691b      	ldr	r3, [r3, #16]
 8007e78:	f003 0308 	and.w	r3, r3, #8
 8007e7c:	2b08      	cmp	r3, #8
 8007e7e:	d122      	bne.n	8007ec6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	68db      	ldr	r3, [r3, #12]
 8007e86:	f003 0308 	and.w	r3, r3, #8
 8007e8a:	2b08      	cmp	r3, #8
 8007e8c:	d11b      	bne.n	8007ec6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f06f 0208 	mvn.w	r2, #8
 8007e96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2204      	movs	r2, #4
 8007e9c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	69db      	ldr	r3, [r3, #28]
 8007ea4:	f003 0303 	and.w	r3, r3, #3
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d003      	beq.n	8007eb4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f000 f961 	bl	8008174 <HAL_TIM_IC_CaptureCallback>
 8007eb2:	e005      	b.n	8007ec0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f000 f953 	bl	8008160 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f000 f964 	bl	8008188 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	691b      	ldr	r3, [r3, #16]
 8007ecc:	f003 0310 	and.w	r3, r3, #16
 8007ed0:	2b10      	cmp	r3, #16
 8007ed2:	d122      	bne.n	8007f1a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	68db      	ldr	r3, [r3, #12]
 8007eda:	f003 0310 	and.w	r3, r3, #16
 8007ede:	2b10      	cmp	r3, #16
 8007ee0:	d11b      	bne.n	8007f1a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f06f 0210 	mvn.w	r2, #16
 8007eea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2208      	movs	r2, #8
 8007ef0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	69db      	ldr	r3, [r3, #28]
 8007ef8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d003      	beq.n	8007f08 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f000 f937 	bl	8008174 <HAL_TIM_IC_CaptureCallback>
 8007f06:	e005      	b.n	8007f14 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f000 f929 	bl	8008160 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f000 f93a 	bl	8008188 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2200      	movs	r2, #0
 8007f18:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	691b      	ldr	r3, [r3, #16]
 8007f20:	f003 0301 	and.w	r3, r3, #1
 8007f24:	2b01      	cmp	r3, #1
 8007f26:	d10e      	bne.n	8007f46 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	68db      	ldr	r3, [r3, #12]
 8007f2e:	f003 0301 	and.w	r3, r3, #1
 8007f32:	2b01      	cmp	r3, #1
 8007f34:	d107      	bne.n	8007f46 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f06f 0201 	mvn.w	r2, #1
 8007f3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f7f9 fddb 	bl	8001afc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	691b      	ldr	r3, [r3, #16]
 8007f4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f50:	2b80      	cmp	r3, #128	; 0x80
 8007f52:	d10e      	bne.n	8007f72 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	68db      	ldr	r3, [r3, #12]
 8007f5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f5e:	2b80      	cmp	r3, #128	; 0x80
 8007f60:	d107      	bne.n	8007f72 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007f6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f000 fadf 	bl	8008530 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	691b      	ldr	r3, [r3, #16]
 8007f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f7c:	2b40      	cmp	r3, #64	; 0x40
 8007f7e:	d10e      	bne.n	8007f9e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	68db      	ldr	r3, [r3, #12]
 8007f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f8a:	2b40      	cmp	r3, #64	; 0x40
 8007f8c:	d107      	bne.n	8007f9e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007f96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f000 f8ff 	bl	800819c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	691b      	ldr	r3, [r3, #16]
 8007fa4:	f003 0320 	and.w	r3, r3, #32
 8007fa8:	2b20      	cmp	r3, #32
 8007faa:	d10e      	bne.n	8007fca <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	68db      	ldr	r3, [r3, #12]
 8007fb2:	f003 0320 	and.w	r3, r3, #32
 8007fb6:	2b20      	cmp	r3, #32
 8007fb8:	d107      	bne.n	8007fca <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f06f 0220 	mvn.w	r2, #32
 8007fc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f000 faa9 	bl	800851c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007fca:	bf00      	nop
 8007fcc:	3708      	adds	r7, #8
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bd80      	pop	{r7, pc}

08007fd2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007fd2:	b580      	push	{r7, lr}
 8007fd4:	b084      	sub	sp, #16
 8007fd6:	af00      	add	r7, sp, #0
 8007fd8:	6078      	str	r0, [r7, #4]
 8007fda:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007fdc:	2300      	movs	r3, #0
 8007fde:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007fe6:	2b01      	cmp	r3, #1
 8007fe8:	d101      	bne.n	8007fee <HAL_TIM_ConfigClockSource+0x1c>
 8007fea:	2302      	movs	r3, #2
 8007fec:	e0b4      	b.n	8008158 <HAL_TIM_ConfigClockSource+0x186>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2201      	movs	r2, #1
 8007ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2202      	movs	r2, #2
 8007ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	689b      	ldr	r3, [r3, #8]
 8008004:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800800c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008014:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	68ba      	ldr	r2, [r7, #8]
 800801c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008026:	d03e      	beq.n	80080a6 <HAL_TIM_ConfigClockSource+0xd4>
 8008028:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800802c:	f200 8087 	bhi.w	800813e <HAL_TIM_ConfigClockSource+0x16c>
 8008030:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008034:	f000 8086 	beq.w	8008144 <HAL_TIM_ConfigClockSource+0x172>
 8008038:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800803c:	d87f      	bhi.n	800813e <HAL_TIM_ConfigClockSource+0x16c>
 800803e:	2b70      	cmp	r3, #112	; 0x70
 8008040:	d01a      	beq.n	8008078 <HAL_TIM_ConfigClockSource+0xa6>
 8008042:	2b70      	cmp	r3, #112	; 0x70
 8008044:	d87b      	bhi.n	800813e <HAL_TIM_ConfigClockSource+0x16c>
 8008046:	2b60      	cmp	r3, #96	; 0x60
 8008048:	d050      	beq.n	80080ec <HAL_TIM_ConfigClockSource+0x11a>
 800804a:	2b60      	cmp	r3, #96	; 0x60
 800804c:	d877      	bhi.n	800813e <HAL_TIM_ConfigClockSource+0x16c>
 800804e:	2b50      	cmp	r3, #80	; 0x50
 8008050:	d03c      	beq.n	80080cc <HAL_TIM_ConfigClockSource+0xfa>
 8008052:	2b50      	cmp	r3, #80	; 0x50
 8008054:	d873      	bhi.n	800813e <HAL_TIM_ConfigClockSource+0x16c>
 8008056:	2b40      	cmp	r3, #64	; 0x40
 8008058:	d058      	beq.n	800810c <HAL_TIM_ConfigClockSource+0x13a>
 800805a:	2b40      	cmp	r3, #64	; 0x40
 800805c:	d86f      	bhi.n	800813e <HAL_TIM_ConfigClockSource+0x16c>
 800805e:	2b30      	cmp	r3, #48	; 0x30
 8008060:	d064      	beq.n	800812c <HAL_TIM_ConfigClockSource+0x15a>
 8008062:	2b30      	cmp	r3, #48	; 0x30
 8008064:	d86b      	bhi.n	800813e <HAL_TIM_ConfigClockSource+0x16c>
 8008066:	2b20      	cmp	r3, #32
 8008068:	d060      	beq.n	800812c <HAL_TIM_ConfigClockSource+0x15a>
 800806a:	2b20      	cmp	r3, #32
 800806c:	d867      	bhi.n	800813e <HAL_TIM_ConfigClockSource+0x16c>
 800806e:	2b00      	cmp	r3, #0
 8008070:	d05c      	beq.n	800812c <HAL_TIM_ConfigClockSource+0x15a>
 8008072:	2b10      	cmp	r3, #16
 8008074:	d05a      	beq.n	800812c <HAL_TIM_ConfigClockSource+0x15a>
 8008076:	e062      	b.n	800813e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6818      	ldr	r0, [r3, #0]
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	6899      	ldr	r1, [r3, #8]
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	685a      	ldr	r2, [r3, #4]
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	68db      	ldr	r3, [r3, #12]
 8008088:	f000 f9ac 	bl	80083e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	689b      	ldr	r3, [r3, #8]
 8008092:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800809a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	68ba      	ldr	r2, [r7, #8]
 80080a2:	609a      	str	r2, [r3, #8]
      break;
 80080a4:	e04f      	b.n	8008146 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6818      	ldr	r0, [r3, #0]
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	6899      	ldr	r1, [r3, #8]
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	685a      	ldr	r2, [r3, #4]
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	68db      	ldr	r3, [r3, #12]
 80080b6:	f000 f995 	bl	80083e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	689a      	ldr	r2, [r3, #8]
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80080c8:	609a      	str	r2, [r3, #8]
      break;
 80080ca:	e03c      	b.n	8008146 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6818      	ldr	r0, [r3, #0]
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	6859      	ldr	r1, [r3, #4]
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	68db      	ldr	r3, [r3, #12]
 80080d8:	461a      	mov	r2, r3
 80080da:	f000 f909 	bl	80082f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	2150      	movs	r1, #80	; 0x50
 80080e4:	4618      	mov	r0, r3
 80080e6:	f000 f962 	bl	80083ae <TIM_ITRx_SetConfig>
      break;
 80080ea:	e02c      	b.n	8008146 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6818      	ldr	r0, [r3, #0]
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	6859      	ldr	r1, [r3, #4]
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	68db      	ldr	r3, [r3, #12]
 80080f8:	461a      	mov	r2, r3
 80080fa:	f000 f928 	bl	800834e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	2160      	movs	r1, #96	; 0x60
 8008104:	4618      	mov	r0, r3
 8008106:	f000 f952 	bl	80083ae <TIM_ITRx_SetConfig>
      break;
 800810a:	e01c      	b.n	8008146 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6818      	ldr	r0, [r3, #0]
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	6859      	ldr	r1, [r3, #4]
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	68db      	ldr	r3, [r3, #12]
 8008118:	461a      	mov	r2, r3
 800811a:	f000 f8e9 	bl	80082f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	2140      	movs	r1, #64	; 0x40
 8008124:	4618      	mov	r0, r3
 8008126:	f000 f942 	bl	80083ae <TIM_ITRx_SetConfig>
      break;
 800812a:	e00c      	b.n	8008146 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681a      	ldr	r2, [r3, #0]
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4619      	mov	r1, r3
 8008136:	4610      	mov	r0, r2
 8008138:	f000 f939 	bl	80083ae <TIM_ITRx_SetConfig>
      break;
 800813c:	e003      	b.n	8008146 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800813e:	2301      	movs	r3, #1
 8008140:	73fb      	strb	r3, [r7, #15]
      break;
 8008142:	e000      	b.n	8008146 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008144:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2201      	movs	r2, #1
 800814a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2200      	movs	r2, #0
 8008152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008156:	7bfb      	ldrb	r3, [r7, #15]
}
 8008158:	4618      	mov	r0, r3
 800815a:	3710      	adds	r7, #16
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}

08008160 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008160:	b480      	push	{r7}
 8008162:	b083      	sub	sp, #12
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008168:	bf00      	nop
 800816a:	370c      	adds	r7, #12
 800816c:	46bd      	mov	sp, r7
 800816e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008172:	4770      	bx	lr

08008174 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008174:	b480      	push	{r7}
 8008176:	b083      	sub	sp, #12
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800817c:	bf00      	nop
 800817e:	370c      	adds	r7, #12
 8008180:	46bd      	mov	sp, r7
 8008182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008186:	4770      	bx	lr

08008188 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008188:	b480      	push	{r7}
 800818a:	b083      	sub	sp, #12
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008190:	bf00      	nop
 8008192:	370c      	adds	r7, #12
 8008194:	46bd      	mov	sp, r7
 8008196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819a:	4770      	bx	lr

0800819c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800819c:	b480      	push	{r7}
 800819e:	b083      	sub	sp, #12
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80081a4:	bf00      	nop
 80081a6:	370c      	adds	r7, #12
 80081a8:	46bd      	mov	sp, r7
 80081aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ae:	4770      	bx	lr

080081b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80081b0:	b480      	push	{r7}
 80081b2:	b085      	sub	sp, #20
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
 80081b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	4a40      	ldr	r2, [pc, #256]	; (80082c4 <TIM_Base_SetConfig+0x114>)
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d013      	beq.n	80081f0 <TIM_Base_SetConfig+0x40>
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081ce:	d00f      	beq.n	80081f0 <TIM_Base_SetConfig+0x40>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	4a3d      	ldr	r2, [pc, #244]	; (80082c8 <TIM_Base_SetConfig+0x118>)
 80081d4:	4293      	cmp	r3, r2
 80081d6:	d00b      	beq.n	80081f0 <TIM_Base_SetConfig+0x40>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	4a3c      	ldr	r2, [pc, #240]	; (80082cc <TIM_Base_SetConfig+0x11c>)
 80081dc:	4293      	cmp	r3, r2
 80081de:	d007      	beq.n	80081f0 <TIM_Base_SetConfig+0x40>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	4a3b      	ldr	r2, [pc, #236]	; (80082d0 <TIM_Base_SetConfig+0x120>)
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d003      	beq.n	80081f0 <TIM_Base_SetConfig+0x40>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	4a3a      	ldr	r2, [pc, #232]	; (80082d4 <TIM_Base_SetConfig+0x124>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d108      	bne.n	8008202 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	685b      	ldr	r3, [r3, #4]
 80081fc:	68fa      	ldr	r2, [r7, #12]
 80081fe:	4313      	orrs	r3, r2
 8008200:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	4a2f      	ldr	r2, [pc, #188]	; (80082c4 <TIM_Base_SetConfig+0x114>)
 8008206:	4293      	cmp	r3, r2
 8008208:	d02b      	beq.n	8008262 <TIM_Base_SetConfig+0xb2>
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008210:	d027      	beq.n	8008262 <TIM_Base_SetConfig+0xb2>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	4a2c      	ldr	r2, [pc, #176]	; (80082c8 <TIM_Base_SetConfig+0x118>)
 8008216:	4293      	cmp	r3, r2
 8008218:	d023      	beq.n	8008262 <TIM_Base_SetConfig+0xb2>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	4a2b      	ldr	r2, [pc, #172]	; (80082cc <TIM_Base_SetConfig+0x11c>)
 800821e:	4293      	cmp	r3, r2
 8008220:	d01f      	beq.n	8008262 <TIM_Base_SetConfig+0xb2>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	4a2a      	ldr	r2, [pc, #168]	; (80082d0 <TIM_Base_SetConfig+0x120>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d01b      	beq.n	8008262 <TIM_Base_SetConfig+0xb2>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	4a29      	ldr	r2, [pc, #164]	; (80082d4 <TIM_Base_SetConfig+0x124>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d017      	beq.n	8008262 <TIM_Base_SetConfig+0xb2>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	4a28      	ldr	r2, [pc, #160]	; (80082d8 <TIM_Base_SetConfig+0x128>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d013      	beq.n	8008262 <TIM_Base_SetConfig+0xb2>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	4a27      	ldr	r2, [pc, #156]	; (80082dc <TIM_Base_SetConfig+0x12c>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d00f      	beq.n	8008262 <TIM_Base_SetConfig+0xb2>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	4a26      	ldr	r2, [pc, #152]	; (80082e0 <TIM_Base_SetConfig+0x130>)
 8008246:	4293      	cmp	r3, r2
 8008248:	d00b      	beq.n	8008262 <TIM_Base_SetConfig+0xb2>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	4a25      	ldr	r2, [pc, #148]	; (80082e4 <TIM_Base_SetConfig+0x134>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d007      	beq.n	8008262 <TIM_Base_SetConfig+0xb2>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	4a24      	ldr	r2, [pc, #144]	; (80082e8 <TIM_Base_SetConfig+0x138>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d003      	beq.n	8008262 <TIM_Base_SetConfig+0xb2>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	4a23      	ldr	r2, [pc, #140]	; (80082ec <TIM_Base_SetConfig+0x13c>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d108      	bne.n	8008274 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008268:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	68db      	ldr	r3, [r3, #12]
 800826e:	68fa      	ldr	r2, [r7, #12]
 8008270:	4313      	orrs	r3, r2
 8008272:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	695b      	ldr	r3, [r3, #20]
 800827e:	4313      	orrs	r3, r2
 8008280:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	68fa      	ldr	r2, [r7, #12]
 8008286:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	689a      	ldr	r2, [r3, #8]
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	681a      	ldr	r2, [r3, #0]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	4a0a      	ldr	r2, [pc, #40]	; (80082c4 <TIM_Base_SetConfig+0x114>)
 800829c:	4293      	cmp	r3, r2
 800829e:	d003      	beq.n	80082a8 <TIM_Base_SetConfig+0xf8>
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	4a0c      	ldr	r2, [pc, #48]	; (80082d4 <TIM_Base_SetConfig+0x124>)
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d103      	bne.n	80082b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	691a      	ldr	r2, [r3, #16]
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2201      	movs	r2, #1
 80082b4:	615a      	str	r2, [r3, #20]
}
 80082b6:	bf00      	nop
 80082b8:	3714      	adds	r7, #20
 80082ba:	46bd      	mov	sp, r7
 80082bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c0:	4770      	bx	lr
 80082c2:	bf00      	nop
 80082c4:	40010000 	.word	0x40010000
 80082c8:	40000400 	.word	0x40000400
 80082cc:	40000800 	.word	0x40000800
 80082d0:	40000c00 	.word	0x40000c00
 80082d4:	40010400 	.word	0x40010400
 80082d8:	40014000 	.word	0x40014000
 80082dc:	40014400 	.word	0x40014400
 80082e0:	40014800 	.word	0x40014800
 80082e4:	40001800 	.word	0x40001800
 80082e8:	40001c00 	.word	0x40001c00
 80082ec:	40002000 	.word	0x40002000

080082f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80082f0:	b480      	push	{r7}
 80082f2:	b087      	sub	sp, #28
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	60f8      	str	r0, [r7, #12]
 80082f8:	60b9      	str	r1, [r7, #8]
 80082fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	6a1b      	ldr	r3, [r3, #32]
 8008300:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	6a1b      	ldr	r3, [r3, #32]
 8008306:	f023 0201 	bic.w	r2, r3, #1
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	699b      	ldr	r3, [r3, #24]
 8008312:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008314:	693b      	ldr	r3, [r7, #16]
 8008316:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800831a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	011b      	lsls	r3, r3, #4
 8008320:	693a      	ldr	r2, [r7, #16]
 8008322:	4313      	orrs	r3, r2
 8008324:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008326:	697b      	ldr	r3, [r7, #20]
 8008328:	f023 030a 	bic.w	r3, r3, #10
 800832c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800832e:	697a      	ldr	r2, [r7, #20]
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	4313      	orrs	r3, r2
 8008334:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	693a      	ldr	r2, [r7, #16]
 800833a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	697a      	ldr	r2, [r7, #20]
 8008340:	621a      	str	r2, [r3, #32]
}
 8008342:	bf00      	nop
 8008344:	371c      	adds	r7, #28
 8008346:	46bd      	mov	sp, r7
 8008348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834c:	4770      	bx	lr

0800834e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800834e:	b480      	push	{r7}
 8008350:	b087      	sub	sp, #28
 8008352:	af00      	add	r7, sp, #0
 8008354:	60f8      	str	r0, [r7, #12]
 8008356:	60b9      	str	r1, [r7, #8]
 8008358:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	6a1b      	ldr	r3, [r3, #32]
 800835e:	f023 0210 	bic.w	r2, r3, #16
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	699b      	ldr	r3, [r3, #24]
 800836a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	6a1b      	ldr	r3, [r3, #32]
 8008370:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008372:	697b      	ldr	r3, [r7, #20]
 8008374:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008378:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	031b      	lsls	r3, r3, #12
 800837e:	697a      	ldr	r2, [r7, #20]
 8008380:	4313      	orrs	r3, r2
 8008382:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008384:	693b      	ldr	r3, [r7, #16]
 8008386:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800838a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	011b      	lsls	r3, r3, #4
 8008390:	693a      	ldr	r2, [r7, #16]
 8008392:	4313      	orrs	r3, r2
 8008394:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	697a      	ldr	r2, [r7, #20]
 800839a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	693a      	ldr	r2, [r7, #16]
 80083a0:	621a      	str	r2, [r3, #32]
}
 80083a2:	bf00      	nop
 80083a4:	371c      	adds	r7, #28
 80083a6:	46bd      	mov	sp, r7
 80083a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ac:	4770      	bx	lr

080083ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80083ae:	b480      	push	{r7}
 80083b0:	b085      	sub	sp, #20
 80083b2:	af00      	add	r7, sp, #0
 80083b4:	6078      	str	r0, [r7, #4]
 80083b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	689b      	ldr	r3, [r3, #8]
 80083bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80083c6:	683a      	ldr	r2, [r7, #0]
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	4313      	orrs	r3, r2
 80083cc:	f043 0307 	orr.w	r3, r3, #7
 80083d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	68fa      	ldr	r2, [r7, #12]
 80083d6:	609a      	str	r2, [r3, #8]
}
 80083d8:	bf00      	nop
 80083da:	3714      	adds	r7, #20
 80083dc:	46bd      	mov	sp, r7
 80083de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e2:	4770      	bx	lr

080083e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80083e4:	b480      	push	{r7}
 80083e6:	b087      	sub	sp, #28
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	60f8      	str	r0, [r7, #12]
 80083ec:	60b9      	str	r1, [r7, #8]
 80083ee:	607a      	str	r2, [r7, #4]
 80083f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	689b      	ldr	r3, [r3, #8]
 80083f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80083fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	021a      	lsls	r2, r3, #8
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	431a      	orrs	r2, r3
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	4313      	orrs	r3, r2
 800840c:	697a      	ldr	r2, [r7, #20]
 800840e:	4313      	orrs	r3, r2
 8008410:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	697a      	ldr	r2, [r7, #20]
 8008416:	609a      	str	r2, [r3, #8]
}
 8008418:	bf00      	nop
 800841a:	371c      	adds	r7, #28
 800841c:	46bd      	mov	sp, r7
 800841e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008422:	4770      	bx	lr

08008424 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008424:	b480      	push	{r7}
 8008426:	b085      	sub	sp, #20
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
 800842c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008434:	2b01      	cmp	r3, #1
 8008436:	d101      	bne.n	800843c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008438:	2302      	movs	r3, #2
 800843a:	e05a      	b.n	80084f2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2201      	movs	r2, #1
 8008440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2202      	movs	r2, #2
 8008448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	685b      	ldr	r3, [r3, #4]
 8008452:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	689b      	ldr	r3, [r3, #8]
 800845a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008462:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	68fa      	ldr	r2, [r7, #12]
 800846a:	4313      	orrs	r3, r2
 800846c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	68fa      	ldr	r2, [r7, #12]
 8008474:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	4a21      	ldr	r2, [pc, #132]	; (8008500 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800847c:	4293      	cmp	r3, r2
 800847e:	d022      	beq.n	80084c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008488:	d01d      	beq.n	80084c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	4a1d      	ldr	r2, [pc, #116]	; (8008504 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008490:	4293      	cmp	r3, r2
 8008492:	d018      	beq.n	80084c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	4a1b      	ldr	r2, [pc, #108]	; (8008508 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d013      	beq.n	80084c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	4a1a      	ldr	r2, [pc, #104]	; (800850c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d00e      	beq.n	80084c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	4a18      	ldr	r2, [pc, #96]	; (8008510 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d009      	beq.n	80084c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	4a17      	ldr	r2, [pc, #92]	; (8008514 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80084b8:	4293      	cmp	r3, r2
 80084ba:	d004      	beq.n	80084c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4a15      	ldr	r2, [pc, #84]	; (8008518 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d10c      	bne.n	80084e0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80084cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	685b      	ldr	r3, [r3, #4]
 80084d2:	68ba      	ldr	r2, [r7, #8]
 80084d4:	4313      	orrs	r3, r2
 80084d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	68ba      	ldr	r2, [r7, #8]
 80084de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2201      	movs	r2, #1
 80084e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2200      	movs	r2, #0
 80084ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80084f0:	2300      	movs	r3, #0
}
 80084f2:	4618      	mov	r0, r3
 80084f4:	3714      	adds	r7, #20
 80084f6:	46bd      	mov	sp, r7
 80084f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fc:	4770      	bx	lr
 80084fe:	bf00      	nop
 8008500:	40010000 	.word	0x40010000
 8008504:	40000400 	.word	0x40000400
 8008508:	40000800 	.word	0x40000800
 800850c:	40000c00 	.word	0x40000c00
 8008510:	40010400 	.word	0x40010400
 8008514:	40014000 	.word	0x40014000
 8008518:	40001800 	.word	0x40001800

0800851c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800851c:	b480      	push	{r7}
 800851e:	b083      	sub	sp, #12
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008524:	bf00      	nop
 8008526:	370c      	adds	r7, #12
 8008528:	46bd      	mov	sp, r7
 800852a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852e:	4770      	bx	lr

08008530 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008530:	b480      	push	{r7}
 8008532:	b083      	sub	sp, #12
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008538:	bf00      	nop
 800853a:	370c      	adds	r7, #12
 800853c:	46bd      	mov	sp, r7
 800853e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008542:	4770      	bx	lr

08008544 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008544:	b084      	sub	sp, #16
 8008546:	b580      	push	{r7, lr}
 8008548:	b084      	sub	sp, #16
 800854a:	af00      	add	r7, sp, #0
 800854c:	6078      	str	r0, [r7, #4]
 800854e:	f107 001c 	add.w	r0, r7, #28
 8008552:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008558:	2b01      	cmp	r3, #1
 800855a:	d122      	bne.n	80085a2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008560:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	68db      	ldr	r3, [r3, #12]
 800856c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008570:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008574:	687a      	ldr	r2, [r7, #4]
 8008576:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	68db      	ldr	r3, [r3, #12]
 800857c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008584:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008586:	2b01      	cmp	r3, #1
 8008588:	d105      	bne.n	8008596 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	68db      	ldr	r3, [r3, #12]
 800858e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f001 fbee 	bl	8009d78 <USB_CoreReset>
 800859c:	4603      	mov	r3, r0
 800859e:	73fb      	strb	r3, [r7, #15]
 80085a0:	e01a      	b.n	80085d8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	68db      	ldr	r3, [r3, #12]
 80085a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f001 fbe2 	bl	8009d78 <USB_CoreReset>
 80085b4:	4603      	mov	r3, r0
 80085b6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80085b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d106      	bne.n	80085cc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085c2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	639a      	str	r2, [r3, #56]	; 0x38
 80085ca:	e005      	b.n	80085d8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085d0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80085d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085da:	2b01      	cmp	r3, #1
 80085dc:	d10b      	bne.n	80085f6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	689b      	ldr	r3, [r3, #8]
 80085e2:	f043 0206 	orr.w	r2, r3, #6
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	689b      	ldr	r3, [r3, #8]
 80085ee:	f043 0220 	orr.w	r2, r3, #32
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80085f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	3710      	adds	r7, #16
 80085fc:	46bd      	mov	sp, r7
 80085fe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008602:	b004      	add	sp, #16
 8008604:	4770      	bx	lr
	...

08008608 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008608:	b480      	push	{r7}
 800860a:	b087      	sub	sp, #28
 800860c:	af00      	add	r7, sp, #0
 800860e:	60f8      	str	r0, [r7, #12]
 8008610:	60b9      	str	r1, [r7, #8]
 8008612:	4613      	mov	r3, r2
 8008614:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008616:	79fb      	ldrb	r3, [r7, #7]
 8008618:	2b02      	cmp	r3, #2
 800861a:	d165      	bne.n	80086e8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	4a41      	ldr	r2, [pc, #260]	; (8008724 <USB_SetTurnaroundTime+0x11c>)
 8008620:	4293      	cmp	r3, r2
 8008622:	d906      	bls.n	8008632 <USB_SetTurnaroundTime+0x2a>
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	4a40      	ldr	r2, [pc, #256]	; (8008728 <USB_SetTurnaroundTime+0x120>)
 8008628:	4293      	cmp	r3, r2
 800862a:	d202      	bcs.n	8008632 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800862c:	230f      	movs	r3, #15
 800862e:	617b      	str	r3, [r7, #20]
 8008630:	e062      	b.n	80086f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008632:	68bb      	ldr	r3, [r7, #8]
 8008634:	4a3c      	ldr	r2, [pc, #240]	; (8008728 <USB_SetTurnaroundTime+0x120>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d306      	bcc.n	8008648 <USB_SetTurnaroundTime+0x40>
 800863a:	68bb      	ldr	r3, [r7, #8]
 800863c:	4a3b      	ldr	r2, [pc, #236]	; (800872c <USB_SetTurnaroundTime+0x124>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d202      	bcs.n	8008648 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008642:	230e      	movs	r3, #14
 8008644:	617b      	str	r3, [r7, #20]
 8008646:	e057      	b.n	80086f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	4a38      	ldr	r2, [pc, #224]	; (800872c <USB_SetTurnaroundTime+0x124>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d306      	bcc.n	800865e <USB_SetTurnaroundTime+0x56>
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	4a37      	ldr	r2, [pc, #220]	; (8008730 <USB_SetTurnaroundTime+0x128>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d202      	bcs.n	800865e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008658:	230d      	movs	r3, #13
 800865a:	617b      	str	r3, [r7, #20]
 800865c:	e04c      	b.n	80086f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	4a33      	ldr	r2, [pc, #204]	; (8008730 <USB_SetTurnaroundTime+0x128>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d306      	bcc.n	8008674 <USB_SetTurnaroundTime+0x6c>
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	4a32      	ldr	r2, [pc, #200]	; (8008734 <USB_SetTurnaroundTime+0x12c>)
 800866a:	4293      	cmp	r3, r2
 800866c:	d802      	bhi.n	8008674 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800866e:	230c      	movs	r3, #12
 8008670:	617b      	str	r3, [r7, #20]
 8008672:	e041      	b.n	80086f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	4a2f      	ldr	r2, [pc, #188]	; (8008734 <USB_SetTurnaroundTime+0x12c>)
 8008678:	4293      	cmp	r3, r2
 800867a:	d906      	bls.n	800868a <USB_SetTurnaroundTime+0x82>
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	4a2e      	ldr	r2, [pc, #184]	; (8008738 <USB_SetTurnaroundTime+0x130>)
 8008680:	4293      	cmp	r3, r2
 8008682:	d802      	bhi.n	800868a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008684:	230b      	movs	r3, #11
 8008686:	617b      	str	r3, [r7, #20]
 8008688:	e036      	b.n	80086f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	4a2a      	ldr	r2, [pc, #168]	; (8008738 <USB_SetTurnaroundTime+0x130>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d906      	bls.n	80086a0 <USB_SetTurnaroundTime+0x98>
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	4a29      	ldr	r2, [pc, #164]	; (800873c <USB_SetTurnaroundTime+0x134>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d802      	bhi.n	80086a0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800869a:	230a      	movs	r3, #10
 800869c:	617b      	str	r3, [r7, #20]
 800869e:	e02b      	b.n	80086f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	4a26      	ldr	r2, [pc, #152]	; (800873c <USB_SetTurnaroundTime+0x134>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d906      	bls.n	80086b6 <USB_SetTurnaroundTime+0xae>
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	4a25      	ldr	r2, [pc, #148]	; (8008740 <USB_SetTurnaroundTime+0x138>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d202      	bcs.n	80086b6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80086b0:	2309      	movs	r3, #9
 80086b2:	617b      	str	r3, [r7, #20]
 80086b4:	e020      	b.n	80086f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	4a21      	ldr	r2, [pc, #132]	; (8008740 <USB_SetTurnaroundTime+0x138>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d306      	bcc.n	80086cc <USB_SetTurnaroundTime+0xc4>
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	4a20      	ldr	r2, [pc, #128]	; (8008744 <USB_SetTurnaroundTime+0x13c>)
 80086c2:	4293      	cmp	r3, r2
 80086c4:	d802      	bhi.n	80086cc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80086c6:	2308      	movs	r3, #8
 80086c8:	617b      	str	r3, [r7, #20]
 80086ca:	e015      	b.n	80086f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	4a1d      	ldr	r2, [pc, #116]	; (8008744 <USB_SetTurnaroundTime+0x13c>)
 80086d0:	4293      	cmp	r3, r2
 80086d2:	d906      	bls.n	80086e2 <USB_SetTurnaroundTime+0xda>
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	4a1c      	ldr	r2, [pc, #112]	; (8008748 <USB_SetTurnaroundTime+0x140>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d202      	bcs.n	80086e2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80086dc:	2307      	movs	r3, #7
 80086de:	617b      	str	r3, [r7, #20]
 80086e0:	e00a      	b.n	80086f8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80086e2:	2306      	movs	r3, #6
 80086e4:	617b      	str	r3, [r7, #20]
 80086e6:	e007      	b.n	80086f8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80086e8:	79fb      	ldrb	r3, [r7, #7]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d102      	bne.n	80086f4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80086ee:	2309      	movs	r3, #9
 80086f0:	617b      	str	r3, [r7, #20]
 80086f2:	e001      	b.n	80086f8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80086f4:	2309      	movs	r3, #9
 80086f6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	68db      	ldr	r3, [r3, #12]
 80086fc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	68da      	ldr	r2, [r3, #12]
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	029b      	lsls	r3, r3, #10
 800870c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008710:	431a      	orrs	r2, r3
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008716:	2300      	movs	r3, #0
}
 8008718:	4618      	mov	r0, r3
 800871a:	371c      	adds	r7, #28
 800871c:	46bd      	mov	sp, r7
 800871e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008722:	4770      	bx	lr
 8008724:	00d8acbf 	.word	0x00d8acbf
 8008728:	00e4e1c0 	.word	0x00e4e1c0
 800872c:	00f42400 	.word	0x00f42400
 8008730:	01067380 	.word	0x01067380
 8008734:	011a499f 	.word	0x011a499f
 8008738:	01312cff 	.word	0x01312cff
 800873c:	014ca43f 	.word	0x014ca43f
 8008740:	016e3600 	.word	0x016e3600
 8008744:	01a6ab1f 	.word	0x01a6ab1f
 8008748:	01e84800 	.word	0x01e84800

0800874c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800874c:	b480      	push	{r7}
 800874e:	b083      	sub	sp, #12
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	689b      	ldr	r3, [r3, #8]
 8008758:	f043 0201 	orr.w	r2, r3, #1
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008760:	2300      	movs	r3, #0
}
 8008762:	4618      	mov	r0, r3
 8008764:	370c      	adds	r7, #12
 8008766:	46bd      	mov	sp, r7
 8008768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876c:	4770      	bx	lr

0800876e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800876e:	b480      	push	{r7}
 8008770:	b083      	sub	sp, #12
 8008772:	af00      	add	r7, sp, #0
 8008774:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	689b      	ldr	r3, [r3, #8]
 800877a:	f023 0201 	bic.w	r2, r3, #1
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008782:	2300      	movs	r3, #0
}
 8008784:	4618      	mov	r0, r3
 8008786:	370c      	adds	r7, #12
 8008788:	46bd      	mov	sp, r7
 800878a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878e:	4770      	bx	lr

08008790 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b084      	sub	sp, #16
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
 8008798:	460b      	mov	r3, r1
 800879a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800879c:	2300      	movs	r3, #0
 800879e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	68db      	ldr	r3, [r3, #12]
 80087a4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80087ac:	78fb      	ldrb	r3, [r7, #3]
 80087ae:	2b01      	cmp	r3, #1
 80087b0:	d115      	bne.n	80087de <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	68db      	ldr	r3, [r3, #12]
 80087b6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80087be:	2001      	movs	r0, #1
 80087c0:	f7f9 fd4c 	bl	800225c <HAL_Delay>
      ms++;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	3301      	adds	r3, #1
 80087c8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f001 fa45 	bl	8009c5a <USB_GetMode>
 80087d0:	4603      	mov	r3, r0
 80087d2:	2b01      	cmp	r3, #1
 80087d4:	d01e      	beq.n	8008814 <USB_SetCurrentMode+0x84>
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	2b31      	cmp	r3, #49	; 0x31
 80087da:	d9f0      	bls.n	80087be <USB_SetCurrentMode+0x2e>
 80087dc:	e01a      	b.n	8008814 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80087de:	78fb      	ldrb	r3, [r7, #3]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d115      	bne.n	8008810 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	68db      	ldr	r3, [r3, #12]
 80087e8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80087f0:	2001      	movs	r0, #1
 80087f2:	f7f9 fd33 	bl	800225c <HAL_Delay>
      ms++;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	3301      	adds	r3, #1
 80087fa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	f001 fa2c 	bl	8009c5a <USB_GetMode>
 8008802:	4603      	mov	r3, r0
 8008804:	2b00      	cmp	r3, #0
 8008806:	d005      	beq.n	8008814 <USB_SetCurrentMode+0x84>
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	2b31      	cmp	r3, #49	; 0x31
 800880c:	d9f0      	bls.n	80087f0 <USB_SetCurrentMode+0x60>
 800880e:	e001      	b.n	8008814 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008810:	2301      	movs	r3, #1
 8008812:	e005      	b.n	8008820 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	2b32      	cmp	r3, #50	; 0x32
 8008818:	d101      	bne.n	800881e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800881a:	2301      	movs	r3, #1
 800881c:	e000      	b.n	8008820 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800881e:	2300      	movs	r3, #0
}
 8008820:	4618      	mov	r0, r3
 8008822:	3710      	adds	r7, #16
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}

08008828 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008828:	b084      	sub	sp, #16
 800882a:	b580      	push	{r7, lr}
 800882c:	b086      	sub	sp, #24
 800882e:	af00      	add	r7, sp, #0
 8008830:	6078      	str	r0, [r7, #4]
 8008832:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008836:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800883a:	2300      	movs	r3, #0
 800883c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008842:	2300      	movs	r3, #0
 8008844:	613b      	str	r3, [r7, #16]
 8008846:	e009      	b.n	800885c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008848:	687a      	ldr	r2, [r7, #4]
 800884a:	693b      	ldr	r3, [r7, #16]
 800884c:	3340      	adds	r3, #64	; 0x40
 800884e:	009b      	lsls	r3, r3, #2
 8008850:	4413      	add	r3, r2
 8008852:	2200      	movs	r2, #0
 8008854:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008856:	693b      	ldr	r3, [r7, #16]
 8008858:	3301      	adds	r3, #1
 800885a:	613b      	str	r3, [r7, #16]
 800885c:	693b      	ldr	r3, [r7, #16]
 800885e:	2b0e      	cmp	r3, #14
 8008860:	d9f2      	bls.n	8008848 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008862:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008864:	2b00      	cmp	r3, #0
 8008866:	d11c      	bne.n	80088a2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800886e:	685b      	ldr	r3, [r3, #4]
 8008870:	68fa      	ldr	r2, [r7, #12]
 8008872:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008876:	f043 0302 	orr.w	r3, r3, #2
 800887a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008880:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800888c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008898:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	639a      	str	r2, [r3, #56]	; 0x38
 80088a0:	e00b      	b.n	80088ba <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088a6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088b2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80088c0:	461a      	mov	r2, r3
 80088c2:	2300      	movs	r3, #0
 80088c4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088cc:	4619      	mov	r1, r3
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088d4:	461a      	mov	r2, r3
 80088d6:	680b      	ldr	r3, [r1, #0]
 80088d8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80088da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088dc:	2b01      	cmp	r3, #1
 80088de:	d10c      	bne.n	80088fa <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80088e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d104      	bne.n	80088f0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80088e6:	2100      	movs	r1, #0
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f000 f965 	bl	8008bb8 <USB_SetDevSpeed>
 80088ee:	e008      	b.n	8008902 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80088f0:	2101      	movs	r1, #1
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	f000 f960 	bl	8008bb8 <USB_SetDevSpeed>
 80088f8:	e003      	b.n	8008902 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80088fa:	2103      	movs	r1, #3
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f000 f95b 	bl	8008bb8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008902:	2110      	movs	r1, #16
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	f000 f8f3 	bl	8008af0 <USB_FlushTxFifo>
 800890a:	4603      	mov	r3, r0
 800890c:	2b00      	cmp	r3, #0
 800890e:	d001      	beq.n	8008914 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008910:	2301      	movs	r3, #1
 8008912:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f000 f91f 	bl	8008b58 <USB_FlushRxFifo>
 800891a:	4603      	mov	r3, r0
 800891c:	2b00      	cmp	r3, #0
 800891e:	d001      	beq.n	8008924 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008920:	2301      	movs	r3, #1
 8008922:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800892a:	461a      	mov	r2, r3
 800892c:	2300      	movs	r3, #0
 800892e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008936:	461a      	mov	r2, r3
 8008938:	2300      	movs	r3, #0
 800893a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008942:	461a      	mov	r2, r3
 8008944:	2300      	movs	r3, #0
 8008946:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008948:	2300      	movs	r3, #0
 800894a:	613b      	str	r3, [r7, #16]
 800894c:	e043      	b.n	80089d6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800894e:	693b      	ldr	r3, [r7, #16]
 8008950:	015a      	lsls	r2, r3, #5
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	4413      	add	r3, r2
 8008956:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008960:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008964:	d118      	bne.n	8008998 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8008966:	693b      	ldr	r3, [r7, #16]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d10a      	bne.n	8008982 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800896c:	693b      	ldr	r3, [r7, #16]
 800896e:	015a      	lsls	r2, r3, #5
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	4413      	add	r3, r2
 8008974:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008978:	461a      	mov	r2, r3
 800897a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800897e:	6013      	str	r3, [r2, #0]
 8008980:	e013      	b.n	80089aa <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008982:	693b      	ldr	r3, [r7, #16]
 8008984:	015a      	lsls	r2, r3, #5
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	4413      	add	r3, r2
 800898a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800898e:	461a      	mov	r2, r3
 8008990:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008994:	6013      	str	r3, [r2, #0]
 8008996:	e008      	b.n	80089aa <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008998:	693b      	ldr	r3, [r7, #16]
 800899a:	015a      	lsls	r2, r3, #5
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	4413      	add	r3, r2
 80089a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089a4:	461a      	mov	r2, r3
 80089a6:	2300      	movs	r3, #0
 80089a8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80089aa:	693b      	ldr	r3, [r7, #16]
 80089ac:	015a      	lsls	r2, r3, #5
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	4413      	add	r3, r2
 80089b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089b6:	461a      	mov	r2, r3
 80089b8:	2300      	movs	r3, #0
 80089ba:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80089bc:	693b      	ldr	r3, [r7, #16]
 80089be:	015a      	lsls	r2, r3, #5
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	4413      	add	r3, r2
 80089c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089c8:	461a      	mov	r2, r3
 80089ca:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80089ce:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80089d0:	693b      	ldr	r3, [r7, #16]
 80089d2:	3301      	adds	r3, #1
 80089d4:	613b      	str	r3, [r7, #16]
 80089d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d8:	693a      	ldr	r2, [r7, #16]
 80089da:	429a      	cmp	r2, r3
 80089dc:	d3b7      	bcc.n	800894e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80089de:	2300      	movs	r3, #0
 80089e0:	613b      	str	r3, [r7, #16]
 80089e2:	e043      	b.n	8008a6c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80089e4:	693b      	ldr	r3, [r7, #16]
 80089e6:	015a      	lsls	r2, r3, #5
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	4413      	add	r3, r2
 80089ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80089f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80089fa:	d118      	bne.n	8008a2e <USB_DevInit+0x206>
    {
      if (i == 0U)
 80089fc:	693b      	ldr	r3, [r7, #16]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d10a      	bne.n	8008a18 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008a02:	693b      	ldr	r3, [r7, #16]
 8008a04:	015a      	lsls	r2, r3, #5
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	4413      	add	r3, r2
 8008a0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a0e:	461a      	mov	r2, r3
 8008a10:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008a14:	6013      	str	r3, [r2, #0]
 8008a16:	e013      	b.n	8008a40 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008a18:	693b      	ldr	r3, [r7, #16]
 8008a1a:	015a      	lsls	r2, r3, #5
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	4413      	add	r3, r2
 8008a20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a24:	461a      	mov	r2, r3
 8008a26:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008a2a:	6013      	str	r3, [r2, #0]
 8008a2c:	e008      	b.n	8008a40 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008a2e:	693b      	ldr	r3, [r7, #16]
 8008a30:	015a      	lsls	r2, r3, #5
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	4413      	add	r3, r2
 8008a36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a3a:	461a      	mov	r2, r3
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008a40:	693b      	ldr	r3, [r7, #16]
 8008a42:	015a      	lsls	r2, r3, #5
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	4413      	add	r3, r2
 8008a48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a4c:	461a      	mov	r2, r3
 8008a4e:	2300      	movs	r3, #0
 8008a50:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008a52:	693b      	ldr	r3, [r7, #16]
 8008a54:	015a      	lsls	r2, r3, #5
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	4413      	add	r3, r2
 8008a5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a5e:	461a      	mov	r2, r3
 8008a60:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008a64:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008a66:	693b      	ldr	r3, [r7, #16]
 8008a68:	3301      	adds	r3, #1
 8008a6a:	613b      	str	r3, [r7, #16]
 8008a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a6e:	693a      	ldr	r2, [r7, #16]
 8008a70:	429a      	cmp	r2, r3
 8008a72:	d3b7      	bcc.n	80089e4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a7a:	691b      	ldr	r3, [r3, #16]
 8008a7c:	68fa      	ldr	r2, [r7, #12]
 8008a7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a82:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008a86:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008a94:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d105      	bne.n	8008aa8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	699b      	ldr	r3, [r3, #24]
 8008aa0:	f043 0210 	orr.w	r2, r3, #16
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	699a      	ldr	r2, [r3, #24]
 8008aac:	4b0f      	ldr	r3, [pc, #60]	; (8008aec <USB_DevInit+0x2c4>)
 8008aae:	4313      	orrs	r3, r2
 8008ab0:	687a      	ldr	r2, [r7, #4]
 8008ab2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008ab4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d005      	beq.n	8008ac6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	699b      	ldr	r3, [r3, #24]
 8008abe:	f043 0208 	orr.w	r2, r3, #8
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008ac6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ac8:	2b01      	cmp	r3, #1
 8008aca:	d107      	bne.n	8008adc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	699b      	ldr	r3, [r3, #24]
 8008ad0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008ad4:	f043 0304 	orr.w	r3, r3, #4
 8008ad8:	687a      	ldr	r2, [r7, #4]
 8008ada:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008adc:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	3718      	adds	r7, #24
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008ae8:	b004      	add	sp, #16
 8008aea:	4770      	bx	lr
 8008aec:	803c3800 	.word	0x803c3800

08008af0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008af0:	b480      	push	{r7}
 8008af2:	b085      	sub	sp, #20
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
 8008af8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008afa:	2300      	movs	r3, #0
 8008afc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	3301      	adds	r3, #1
 8008b02:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	4a13      	ldr	r2, [pc, #76]	; (8008b54 <USB_FlushTxFifo+0x64>)
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	d901      	bls.n	8008b10 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008b0c:	2303      	movs	r3, #3
 8008b0e:	e01b      	b.n	8008b48 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	691b      	ldr	r3, [r3, #16]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	daf2      	bge.n	8008afe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008b18:	2300      	movs	r3, #0
 8008b1a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	019b      	lsls	r3, r3, #6
 8008b20:	f043 0220 	orr.w	r2, r3, #32
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	3301      	adds	r3, #1
 8008b2c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	4a08      	ldr	r2, [pc, #32]	; (8008b54 <USB_FlushTxFifo+0x64>)
 8008b32:	4293      	cmp	r3, r2
 8008b34:	d901      	bls.n	8008b3a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008b36:	2303      	movs	r3, #3
 8008b38:	e006      	b.n	8008b48 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	691b      	ldr	r3, [r3, #16]
 8008b3e:	f003 0320 	and.w	r3, r3, #32
 8008b42:	2b20      	cmp	r3, #32
 8008b44:	d0f0      	beq.n	8008b28 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008b46:	2300      	movs	r3, #0
}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	3714      	adds	r7, #20
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b52:	4770      	bx	lr
 8008b54:	00030d40 	.word	0x00030d40

08008b58 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008b58:	b480      	push	{r7}
 8008b5a:	b085      	sub	sp, #20
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008b60:	2300      	movs	r3, #0
 8008b62:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	3301      	adds	r3, #1
 8008b68:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	4a11      	ldr	r2, [pc, #68]	; (8008bb4 <USB_FlushRxFifo+0x5c>)
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d901      	bls.n	8008b76 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008b72:	2303      	movs	r3, #3
 8008b74:	e018      	b.n	8008ba8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	691b      	ldr	r3, [r3, #16]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	daf2      	bge.n	8008b64 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2210      	movs	r2, #16
 8008b86:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	3301      	adds	r3, #1
 8008b8c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	4a08      	ldr	r2, [pc, #32]	; (8008bb4 <USB_FlushRxFifo+0x5c>)
 8008b92:	4293      	cmp	r3, r2
 8008b94:	d901      	bls.n	8008b9a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008b96:	2303      	movs	r3, #3
 8008b98:	e006      	b.n	8008ba8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	691b      	ldr	r3, [r3, #16]
 8008b9e:	f003 0310 	and.w	r3, r3, #16
 8008ba2:	2b10      	cmp	r3, #16
 8008ba4:	d0f0      	beq.n	8008b88 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008ba6:	2300      	movs	r3, #0
}
 8008ba8:	4618      	mov	r0, r3
 8008baa:	3714      	adds	r7, #20
 8008bac:	46bd      	mov	sp, r7
 8008bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb2:	4770      	bx	lr
 8008bb4:	00030d40 	.word	0x00030d40

08008bb8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008bb8:	b480      	push	{r7}
 8008bba:	b085      	sub	sp, #20
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
 8008bc0:	460b      	mov	r3, r1
 8008bc2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bce:	681a      	ldr	r2, [r3, #0]
 8008bd0:	78fb      	ldrb	r3, [r7, #3]
 8008bd2:	68f9      	ldr	r1, [r7, #12]
 8008bd4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008bd8:	4313      	orrs	r3, r2
 8008bda:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008bdc:	2300      	movs	r3, #0
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	3714      	adds	r7, #20
 8008be2:	46bd      	mov	sp, r7
 8008be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be8:	4770      	bx	lr

08008bea <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008bea:	b480      	push	{r7}
 8008bec:	b087      	sub	sp, #28
 8008bee:	af00      	add	r7, sp, #0
 8008bf0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008bf6:	693b      	ldr	r3, [r7, #16]
 8008bf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bfc:	689b      	ldr	r3, [r3, #8]
 8008bfe:	f003 0306 	and.w	r3, r3, #6
 8008c02:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d102      	bne.n	8008c10 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	75fb      	strb	r3, [r7, #23]
 8008c0e:	e00a      	b.n	8008c26 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	2b02      	cmp	r3, #2
 8008c14:	d002      	beq.n	8008c1c <USB_GetDevSpeed+0x32>
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	2b06      	cmp	r3, #6
 8008c1a:	d102      	bne.n	8008c22 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008c1c:	2302      	movs	r3, #2
 8008c1e:	75fb      	strb	r3, [r7, #23]
 8008c20:	e001      	b.n	8008c26 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008c22:	230f      	movs	r3, #15
 8008c24:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008c26:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c28:	4618      	mov	r0, r3
 8008c2a:	371c      	adds	r7, #28
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c32:	4770      	bx	lr

08008c34 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008c34:	b480      	push	{r7}
 8008c36:	b085      	sub	sp, #20
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
 8008c3c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	781b      	ldrb	r3, [r3, #0]
 8008c46:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	785b      	ldrb	r3, [r3, #1]
 8008c4c:	2b01      	cmp	r3, #1
 8008c4e:	d13a      	bne.n	8008cc6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c56:	69da      	ldr	r2, [r3, #28]
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	781b      	ldrb	r3, [r3, #0]
 8008c5c:	f003 030f 	and.w	r3, r3, #15
 8008c60:	2101      	movs	r1, #1
 8008c62:	fa01 f303 	lsl.w	r3, r1, r3
 8008c66:	b29b      	uxth	r3, r3
 8008c68:	68f9      	ldr	r1, [r7, #12]
 8008c6a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008c6e:	4313      	orrs	r3, r2
 8008c70:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008c72:	68bb      	ldr	r3, [r7, #8]
 8008c74:	015a      	lsls	r2, r3, #5
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	4413      	add	r3, r2
 8008c7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d155      	bne.n	8008d34 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008c88:	68bb      	ldr	r3, [r7, #8]
 8008c8a:	015a      	lsls	r2, r3, #5
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	4413      	add	r3, r2
 8008c90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c94:	681a      	ldr	r2, [r3, #0]
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	68db      	ldr	r3, [r3, #12]
 8008c9a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	791b      	ldrb	r3, [r3, #4]
 8008ca2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008ca4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008ca6:	68bb      	ldr	r3, [r7, #8]
 8008ca8:	059b      	lsls	r3, r3, #22
 8008caa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008cac:	4313      	orrs	r3, r2
 8008cae:	68ba      	ldr	r2, [r7, #8]
 8008cb0:	0151      	lsls	r1, r2, #5
 8008cb2:	68fa      	ldr	r2, [r7, #12]
 8008cb4:	440a      	add	r2, r1
 8008cb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008cba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008cbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008cc2:	6013      	str	r3, [r2, #0]
 8008cc4:	e036      	b.n	8008d34 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ccc:	69da      	ldr	r2, [r3, #28]
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	781b      	ldrb	r3, [r3, #0]
 8008cd2:	f003 030f 	and.w	r3, r3, #15
 8008cd6:	2101      	movs	r1, #1
 8008cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8008cdc:	041b      	lsls	r3, r3, #16
 8008cde:	68f9      	ldr	r1, [r7, #12]
 8008ce0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008ce4:	4313      	orrs	r3, r2
 8008ce6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	015a      	lsls	r2, r3, #5
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	4413      	add	r3, r2
 8008cf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d11a      	bne.n	8008d34 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	015a      	lsls	r2, r3, #5
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	4413      	add	r3, r2
 8008d06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d0a:	681a      	ldr	r2, [r3, #0]
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	68db      	ldr	r3, [r3, #12]
 8008d10:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	791b      	ldrb	r3, [r3, #4]
 8008d18:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008d1a:	430b      	orrs	r3, r1
 8008d1c:	4313      	orrs	r3, r2
 8008d1e:	68ba      	ldr	r2, [r7, #8]
 8008d20:	0151      	lsls	r1, r2, #5
 8008d22:	68fa      	ldr	r2, [r7, #12]
 8008d24:	440a      	add	r2, r1
 8008d26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d32:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008d34:	2300      	movs	r3, #0
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	3714      	adds	r7, #20
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d40:	4770      	bx	lr
	...

08008d44 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008d44:	b480      	push	{r7}
 8008d46:	b085      	sub	sp, #20
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
 8008d4c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	781b      	ldrb	r3, [r3, #0]
 8008d56:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	785b      	ldrb	r3, [r3, #1]
 8008d5c:	2b01      	cmp	r3, #1
 8008d5e:	d161      	bne.n	8008e24 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	015a      	lsls	r2, r3, #5
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	4413      	add	r3, r2
 8008d68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008d72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d76:	d11f      	bne.n	8008db8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	015a      	lsls	r2, r3, #5
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	4413      	add	r3, r2
 8008d80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	68ba      	ldr	r2, [r7, #8]
 8008d88:	0151      	lsls	r1, r2, #5
 8008d8a:	68fa      	ldr	r2, [r7, #12]
 8008d8c:	440a      	add	r2, r1
 8008d8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d92:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008d96:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	015a      	lsls	r2, r3, #5
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	4413      	add	r3, r2
 8008da0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	68ba      	ldr	r2, [r7, #8]
 8008da8:	0151      	lsls	r1, r2, #5
 8008daa:	68fa      	ldr	r2, [r7, #12]
 8008dac:	440a      	add	r2, r1
 8008dae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008db2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008db6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dbe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	781b      	ldrb	r3, [r3, #0]
 8008dc4:	f003 030f 	and.w	r3, r3, #15
 8008dc8:	2101      	movs	r1, #1
 8008dca:	fa01 f303 	lsl.w	r3, r1, r3
 8008dce:	b29b      	uxth	r3, r3
 8008dd0:	43db      	mvns	r3, r3
 8008dd2:	68f9      	ldr	r1, [r7, #12]
 8008dd4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008dd8:	4013      	ands	r3, r2
 8008dda:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008de2:	69da      	ldr	r2, [r3, #28]
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	781b      	ldrb	r3, [r3, #0]
 8008de8:	f003 030f 	and.w	r3, r3, #15
 8008dec:	2101      	movs	r1, #1
 8008dee:	fa01 f303 	lsl.w	r3, r1, r3
 8008df2:	b29b      	uxth	r3, r3
 8008df4:	43db      	mvns	r3, r3
 8008df6:	68f9      	ldr	r1, [r7, #12]
 8008df8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008dfc:	4013      	ands	r3, r2
 8008dfe:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008e00:	68bb      	ldr	r3, [r7, #8]
 8008e02:	015a      	lsls	r2, r3, #5
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	4413      	add	r3, r2
 8008e08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e0c:	681a      	ldr	r2, [r3, #0]
 8008e0e:	68bb      	ldr	r3, [r7, #8]
 8008e10:	0159      	lsls	r1, r3, #5
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	440b      	add	r3, r1
 8008e16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e1a:	4619      	mov	r1, r3
 8008e1c:	4b35      	ldr	r3, [pc, #212]	; (8008ef4 <USB_DeactivateEndpoint+0x1b0>)
 8008e1e:	4013      	ands	r3, r2
 8008e20:	600b      	str	r3, [r1, #0]
 8008e22:	e060      	b.n	8008ee6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008e24:	68bb      	ldr	r3, [r7, #8]
 8008e26:	015a      	lsls	r2, r3, #5
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	4413      	add	r3, r2
 8008e2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008e36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008e3a:	d11f      	bne.n	8008e7c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	015a      	lsls	r2, r3, #5
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	4413      	add	r3, r2
 8008e44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	68ba      	ldr	r2, [r7, #8]
 8008e4c:	0151      	lsls	r1, r2, #5
 8008e4e:	68fa      	ldr	r2, [r7, #12]
 8008e50:	440a      	add	r2, r1
 8008e52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e56:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008e5a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	015a      	lsls	r2, r3, #5
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	4413      	add	r3, r2
 8008e64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	68ba      	ldr	r2, [r7, #8]
 8008e6c:	0151      	lsls	r1, r2, #5
 8008e6e:	68fa      	ldr	r2, [r7, #12]
 8008e70:	440a      	add	r2, r1
 8008e72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e76:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008e7a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	781b      	ldrb	r3, [r3, #0]
 8008e88:	f003 030f 	and.w	r3, r3, #15
 8008e8c:	2101      	movs	r1, #1
 8008e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8008e92:	041b      	lsls	r3, r3, #16
 8008e94:	43db      	mvns	r3, r3
 8008e96:	68f9      	ldr	r1, [r7, #12]
 8008e98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008e9c:	4013      	ands	r3, r2
 8008e9e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ea6:	69da      	ldr	r2, [r3, #28]
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	781b      	ldrb	r3, [r3, #0]
 8008eac:	f003 030f 	and.w	r3, r3, #15
 8008eb0:	2101      	movs	r1, #1
 8008eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8008eb6:	041b      	lsls	r3, r3, #16
 8008eb8:	43db      	mvns	r3, r3
 8008eba:	68f9      	ldr	r1, [r7, #12]
 8008ebc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008ec0:	4013      	ands	r3, r2
 8008ec2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	015a      	lsls	r2, r3, #5
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	4413      	add	r3, r2
 8008ecc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ed0:	681a      	ldr	r2, [r3, #0]
 8008ed2:	68bb      	ldr	r3, [r7, #8]
 8008ed4:	0159      	lsls	r1, r3, #5
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	440b      	add	r3, r1
 8008eda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ede:	4619      	mov	r1, r3
 8008ee0:	4b05      	ldr	r3, [pc, #20]	; (8008ef8 <USB_DeactivateEndpoint+0x1b4>)
 8008ee2:	4013      	ands	r3, r2
 8008ee4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008ee6:	2300      	movs	r3, #0
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	3714      	adds	r7, #20
 8008eec:	46bd      	mov	sp, r7
 8008eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef2:	4770      	bx	lr
 8008ef4:	ec337800 	.word	0xec337800
 8008ef8:	eff37800 	.word	0xeff37800

08008efc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b08a      	sub	sp, #40	; 0x28
 8008f00:	af02      	add	r7, sp, #8
 8008f02:	60f8      	str	r0, [r7, #12]
 8008f04:	60b9      	str	r1, [r7, #8]
 8008f06:	4613      	mov	r3, r2
 8008f08:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	781b      	ldrb	r3, [r3, #0]
 8008f12:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	785b      	ldrb	r3, [r3, #1]
 8008f18:	2b01      	cmp	r3, #1
 8008f1a:	f040 815c 	bne.w	80091d6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	699b      	ldr	r3, [r3, #24]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d132      	bne.n	8008f8c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008f26:	69bb      	ldr	r3, [r7, #24]
 8008f28:	015a      	lsls	r2, r3, #5
 8008f2a:	69fb      	ldr	r3, [r7, #28]
 8008f2c:	4413      	add	r3, r2
 8008f2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f32:	691b      	ldr	r3, [r3, #16]
 8008f34:	69ba      	ldr	r2, [r7, #24]
 8008f36:	0151      	lsls	r1, r2, #5
 8008f38:	69fa      	ldr	r2, [r7, #28]
 8008f3a:	440a      	add	r2, r1
 8008f3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f40:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008f44:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008f48:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008f4a:	69bb      	ldr	r3, [r7, #24]
 8008f4c:	015a      	lsls	r2, r3, #5
 8008f4e:	69fb      	ldr	r3, [r7, #28]
 8008f50:	4413      	add	r3, r2
 8008f52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f56:	691b      	ldr	r3, [r3, #16]
 8008f58:	69ba      	ldr	r2, [r7, #24]
 8008f5a:	0151      	lsls	r1, r2, #5
 8008f5c:	69fa      	ldr	r2, [r7, #28]
 8008f5e:	440a      	add	r2, r1
 8008f60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f64:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008f68:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008f6a:	69bb      	ldr	r3, [r7, #24]
 8008f6c:	015a      	lsls	r2, r3, #5
 8008f6e:	69fb      	ldr	r3, [r7, #28]
 8008f70:	4413      	add	r3, r2
 8008f72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f76:	691b      	ldr	r3, [r3, #16]
 8008f78:	69ba      	ldr	r2, [r7, #24]
 8008f7a:	0151      	lsls	r1, r2, #5
 8008f7c:	69fa      	ldr	r2, [r7, #28]
 8008f7e:	440a      	add	r2, r1
 8008f80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f84:	0cdb      	lsrs	r3, r3, #19
 8008f86:	04db      	lsls	r3, r3, #19
 8008f88:	6113      	str	r3, [r2, #16]
 8008f8a:	e074      	b.n	8009076 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008f8c:	69bb      	ldr	r3, [r7, #24]
 8008f8e:	015a      	lsls	r2, r3, #5
 8008f90:	69fb      	ldr	r3, [r7, #28]
 8008f92:	4413      	add	r3, r2
 8008f94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f98:	691b      	ldr	r3, [r3, #16]
 8008f9a:	69ba      	ldr	r2, [r7, #24]
 8008f9c:	0151      	lsls	r1, r2, #5
 8008f9e:	69fa      	ldr	r2, [r7, #28]
 8008fa0:	440a      	add	r2, r1
 8008fa2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008fa6:	0cdb      	lsrs	r3, r3, #19
 8008fa8:	04db      	lsls	r3, r3, #19
 8008faa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008fac:	69bb      	ldr	r3, [r7, #24]
 8008fae:	015a      	lsls	r2, r3, #5
 8008fb0:	69fb      	ldr	r3, [r7, #28]
 8008fb2:	4413      	add	r3, r2
 8008fb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fb8:	691b      	ldr	r3, [r3, #16]
 8008fba:	69ba      	ldr	r2, [r7, #24]
 8008fbc:	0151      	lsls	r1, r2, #5
 8008fbe:	69fa      	ldr	r2, [r7, #28]
 8008fc0:	440a      	add	r2, r1
 8008fc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008fc6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008fca:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008fce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008fd0:	69bb      	ldr	r3, [r7, #24]
 8008fd2:	015a      	lsls	r2, r3, #5
 8008fd4:	69fb      	ldr	r3, [r7, #28]
 8008fd6:	4413      	add	r3, r2
 8008fd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fdc:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	6999      	ldr	r1, [r3, #24]
 8008fe2:	68bb      	ldr	r3, [r7, #8]
 8008fe4:	68db      	ldr	r3, [r3, #12]
 8008fe6:	440b      	add	r3, r1
 8008fe8:	1e59      	subs	r1, r3, #1
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	68db      	ldr	r3, [r3, #12]
 8008fee:	fbb1 f3f3 	udiv	r3, r1, r3
 8008ff2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008ff4:	4b9d      	ldr	r3, [pc, #628]	; (800926c <USB_EPStartXfer+0x370>)
 8008ff6:	400b      	ands	r3, r1
 8008ff8:	69b9      	ldr	r1, [r7, #24]
 8008ffa:	0148      	lsls	r0, r1, #5
 8008ffc:	69f9      	ldr	r1, [r7, #28]
 8008ffe:	4401      	add	r1, r0
 8009000:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009004:	4313      	orrs	r3, r2
 8009006:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009008:	69bb      	ldr	r3, [r7, #24]
 800900a:	015a      	lsls	r2, r3, #5
 800900c:	69fb      	ldr	r3, [r7, #28]
 800900e:	4413      	add	r3, r2
 8009010:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009014:	691a      	ldr	r2, [r3, #16]
 8009016:	68bb      	ldr	r3, [r7, #8]
 8009018:	699b      	ldr	r3, [r3, #24]
 800901a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800901e:	69b9      	ldr	r1, [r7, #24]
 8009020:	0148      	lsls	r0, r1, #5
 8009022:	69f9      	ldr	r1, [r7, #28]
 8009024:	4401      	add	r1, r0
 8009026:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800902a:	4313      	orrs	r3, r2
 800902c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800902e:	68bb      	ldr	r3, [r7, #8]
 8009030:	791b      	ldrb	r3, [r3, #4]
 8009032:	2b01      	cmp	r3, #1
 8009034:	d11f      	bne.n	8009076 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009036:	69bb      	ldr	r3, [r7, #24]
 8009038:	015a      	lsls	r2, r3, #5
 800903a:	69fb      	ldr	r3, [r7, #28]
 800903c:	4413      	add	r3, r2
 800903e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009042:	691b      	ldr	r3, [r3, #16]
 8009044:	69ba      	ldr	r2, [r7, #24]
 8009046:	0151      	lsls	r1, r2, #5
 8009048:	69fa      	ldr	r2, [r7, #28]
 800904a:	440a      	add	r2, r1
 800904c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009050:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009054:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8009056:	69bb      	ldr	r3, [r7, #24]
 8009058:	015a      	lsls	r2, r3, #5
 800905a:	69fb      	ldr	r3, [r7, #28]
 800905c:	4413      	add	r3, r2
 800905e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009062:	691b      	ldr	r3, [r3, #16]
 8009064:	69ba      	ldr	r2, [r7, #24]
 8009066:	0151      	lsls	r1, r2, #5
 8009068:	69fa      	ldr	r2, [r7, #28]
 800906a:	440a      	add	r2, r1
 800906c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009070:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009074:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8009076:	79fb      	ldrb	r3, [r7, #7]
 8009078:	2b01      	cmp	r3, #1
 800907a:	d14b      	bne.n	8009114 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	695b      	ldr	r3, [r3, #20]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d009      	beq.n	8009098 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009084:	69bb      	ldr	r3, [r7, #24]
 8009086:	015a      	lsls	r2, r3, #5
 8009088:	69fb      	ldr	r3, [r7, #28]
 800908a:	4413      	add	r3, r2
 800908c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009090:	461a      	mov	r2, r3
 8009092:	68bb      	ldr	r3, [r7, #8]
 8009094:	695b      	ldr	r3, [r3, #20]
 8009096:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	791b      	ldrb	r3, [r3, #4]
 800909c:	2b01      	cmp	r3, #1
 800909e:	d128      	bne.n	80090f2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80090a0:	69fb      	ldr	r3, [r7, #28]
 80090a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090a6:	689b      	ldr	r3, [r3, #8]
 80090a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d110      	bne.n	80090d2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80090b0:	69bb      	ldr	r3, [r7, #24]
 80090b2:	015a      	lsls	r2, r3, #5
 80090b4:	69fb      	ldr	r3, [r7, #28]
 80090b6:	4413      	add	r3, r2
 80090b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	69ba      	ldr	r2, [r7, #24]
 80090c0:	0151      	lsls	r1, r2, #5
 80090c2:	69fa      	ldr	r2, [r7, #28]
 80090c4:	440a      	add	r2, r1
 80090c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090ca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80090ce:	6013      	str	r3, [r2, #0]
 80090d0:	e00f      	b.n	80090f2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80090d2:	69bb      	ldr	r3, [r7, #24]
 80090d4:	015a      	lsls	r2, r3, #5
 80090d6:	69fb      	ldr	r3, [r7, #28]
 80090d8:	4413      	add	r3, r2
 80090da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	69ba      	ldr	r2, [r7, #24]
 80090e2:	0151      	lsls	r1, r2, #5
 80090e4:	69fa      	ldr	r2, [r7, #28]
 80090e6:	440a      	add	r2, r1
 80090e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80090f0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80090f2:	69bb      	ldr	r3, [r7, #24]
 80090f4:	015a      	lsls	r2, r3, #5
 80090f6:	69fb      	ldr	r3, [r7, #28]
 80090f8:	4413      	add	r3, r2
 80090fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	69ba      	ldr	r2, [r7, #24]
 8009102:	0151      	lsls	r1, r2, #5
 8009104:	69fa      	ldr	r2, [r7, #28]
 8009106:	440a      	add	r2, r1
 8009108:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800910c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009110:	6013      	str	r3, [r2, #0]
 8009112:	e133      	b.n	800937c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009114:	69bb      	ldr	r3, [r7, #24]
 8009116:	015a      	lsls	r2, r3, #5
 8009118:	69fb      	ldr	r3, [r7, #28]
 800911a:	4413      	add	r3, r2
 800911c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	69ba      	ldr	r2, [r7, #24]
 8009124:	0151      	lsls	r1, r2, #5
 8009126:	69fa      	ldr	r2, [r7, #28]
 8009128:	440a      	add	r2, r1
 800912a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800912e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009132:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	791b      	ldrb	r3, [r3, #4]
 8009138:	2b01      	cmp	r3, #1
 800913a:	d015      	beq.n	8009168 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	699b      	ldr	r3, [r3, #24]
 8009140:	2b00      	cmp	r3, #0
 8009142:	f000 811b 	beq.w	800937c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009146:	69fb      	ldr	r3, [r7, #28]
 8009148:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800914c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	781b      	ldrb	r3, [r3, #0]
 8009152:	f003 030f 	and.w	r3, r3, #15
 8009156:	2101      	movs	r1, #1
 8009158:	fa01 f303 	lsl.w	r3, r1, r3
 800915c:	69f9      	ldr	r1, [r7, #28]
 800915e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009162:	4313      	orrs	r3, r2
 8009164:	634b      	str	r3, [r1, #52]	; 0x34
 8009166:	e109      	b.n	800937c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009168:	69fb      	ldr	r3, [r7, #28]
 800916a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800916e:	689b      	ldr	r3, [r3, #8]
 8009170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009174:	2b00      	cmp	r3, #0
 8009176:	d110      	bne.n	800919a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009178:	69bb      	ldr	r3, [r7, #24]
 800917a:	015a      	lsls	r2, r3, #5
 800917c:	69fb      	ldr	r3, [r7, #28]
 800917e:	4413      	add	r3, r2
 8009180:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	69ba      	ldr	r2, [r7, #24]
 8009188:	0151      	lsls	r1, r2, #5
 800918a:	69fa      	ldr	r2, [r7, #28]
 800918c:	440a      	add	r2, r1
 800918e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009192:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009196:	6013      	str	r3, [r2, #0]
 8009198:	e00f      	b.n	80091ba <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800919a:	69bb      	ldr	r3, [r7, #24]
 800919c:	015a      	lsls	r2, r3, #5
 800919e:	69fb      	ldr	r3, [r7, #28]
 80091a0:	4413      	add	r3, r2
 80091a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	69ba      	ldr	r2, [r7, #24]
 80091aa:	0151      	lsls	r1, r2, #5
 80091ac:	69fa      	ldr	r2, [r7, #28]
 80091ae:	440a      	add	r2, r1
 80091b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80091b8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	6919      	ldr	r1, [r3, #16]
 80091be:	68bb      	ldr	r3, [r7, #8]
 80091c0:	781a      	ldrb	r2, [r3, #0]
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	699b      	ldr	r3, [r3, #24]
 80091c6:	b298      	uxth	r0, r3
 80091c8:	79fb      	ldrb	r3, [r7, #7]
 80091ca:	9300      	str	r3, [sp, #0]
 80091cc:	4603      	mov	r3, r0
 80091ce:	68f8      	ldr	r0, [r7, #12]
 80091d0:	f000 fade 	bl	8009790 <USB_WritePacket>
 80091d4:	e0d2      	b.n	800937c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80091d6:	69bb      	ldr	r3, [r7, #24]
 80091d8:	015a      	lsls	r2, r3, #5
 80091da:	69fb      	ldr	r3, [r7, #28]
 80091dc:	4413      	add	r3, r2
 80091de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091e2:	691b      	ldr	r3, [r3, #16]
 80091e4:	69ba      	ldr	r2, [r7, #24]
 80091e6:	0151      	lsls	r1, r2, #5
 80091e8:	69fa      	ldr	r2, [r7, #28]
 80091ea:	440a      	add	r2, r1
 80091ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80091f0:	0cdb      	lsrs	r3, r3, #19
 80091f2:	04db      	lsls	r3, r3, #19
 80091f4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80091f6:	69bb      	ldr	r3, [r7, #24]
 80091f8:	015a      	lsls	r2, r3, #5
 80091fa:	69fb      	ldr	r3, [r7, #28]
 80091fc:	4413      	add	r3, r2
 80091fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009202:	691b      	ldr	r3, [r3, #16]
 8009204:	69ba      	ldr	r2, [r7, #24]
 8009206:	0151      	lsls	r1, r2, #5
 8009208:	69fa      	ldr	r2, [r7, #28]
 800920a:	440a      	add	r2, r1
 800920c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009210:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009214:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009218:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800921a:	68bb      	ldr	r3, [r7, #8]
 800921c:	699b      	ldr	r3, [r3, #24]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d126      	bne.n	8009270 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009222:	69bb      	ldr	r3, [r7, #24]
 8009224:	015a      	lsls	r2, r3, #5
 8009226:	69fb      	ldr	r3, [r7, #28]
 8009228:	4413      	add	r3, r2
 800922a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800922e:	691a      	ldr	r2, [r3, #16]
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	68db      	ldr	r3, [r3, #12]
 8009234:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009238:	69b9      	ldr	r1, [r7, #24]
 800923a:	0148      	lsls	r0, r1, #5
 800923c:	69f9      	ldr	r1, [r7, #28]
 800923e:	4401      	add	r1, r0
 8009240:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009244:	4313      	orrs	r3, r2
 8009246:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009248:	69bb      	ldr	r3, [r7, #24]
 800924a:	015a      	lsls	r2, r3, #5
 800924c:	69fb      	ldr	r3, [r7, #28]
 800924e:	4413      	add	r3, r2
 8009250:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009254:	691b      	ldr	r3, [r3, #16]
 8009256:	69ba      	ldr	r2, [r7, #24]
 8009258:	0151      	lsls	r1, r2, #5
 800925a:	69fa      	ldr	r2, [r7, #28]
 800925c:	440a      	add	r2, r1
 800925e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009262:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009266:	6113      	str	r3, [r2, #16]
 8009268:	e03a      	b.n	80092e0 <USB_EPStartXfer+0x3e4>
 800926a:	bf00      	nop
 800926c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009270:	68bb      	ldr	r3, [r7, #8]
 8009272:	699a      	ldr	r2, [r3, #24]
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	68db      	ldr	r3, [r3, #12]
 8009278:	4413      	add	r3, r2
 800927a:	1e5a      	subs	r2, r3, #1
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	68db      	ldr	r3, [r3, #12]
 8009280:	fbb2 f3f3 	udiv	r3, r2, r3
 8009284:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8009286:	68bb      	ldr	r3, [r7, #8]
 8009288:	68db      	ldr	r3, [r3, #12]
 800928a:	8afa      	ldrh	r2, [r7, #22]
 800928c:	fb03 f202 	mul.w	r2, r3, r2
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009294:	69bb      	ldr	r3, [r7, #24]
 8009296:	015a      	lsls	r2, r3, #5
 8009298:	69fb      	ldr	r3, [r7, #28]
 800929a:	4413      	add	r3, r2
 800929c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092a0:	691a      	ldr	r2, [r3, #16]
 80092a2:	8afb      	ldrh	r3, [r7, #22]
 80092a4:	04d9      	lsls	r1, r3, #19
 80092a6:	4b38      	ldr	r3, [pc, #224]	; (8009388 <USB_EPStartXfer+0x48c>)
 80092a8:	400b      	ands	r3, r1
 80092aa:	69b9      	ldr	r1, [r7, #24]
 80092ac:	0148      	lsls	r0, r1, #5
 80092ae:	69f9      	ldr	r1, [r7, #28]
 80092b0:	4401      	add	r1, r0
 80092b2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80092b6:	4313      	orrs	r3, r2
 80092b8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80092ba:	69bb      	ldr	r3, [r7, #24]
 80092bc:	015a      	lsls	r2, r3, #5
 80092be:	69fb      	ldr	r3, [r7, #28]
 80092c0:	4413      	add	r3, r2
 80092c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092c6:	691a      	ldr	r2, [r3, #16]
 80092c8:	68bb      	ldr	r3, [r7, #8]
 80092ca:	69db      	ldr	r3, [r3, #28]
 80092cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80092d0:	69b9      	ldr	r1, [r7, #24]
 80092d2:	0148      	lsls	r0, r1, #5
 80092d4:	69f9      	ldr	r1, [r7, #28]
 80092d6:	4401      	add	r1, r0
 80092d8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80092dc:	4313      	orrs	r3, r2
 80092de:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80092e0:	79fb      	ldrb	r3, [r7, #7]
 80092e2:	2b01      	cmp	r3, #1
 80092e4:	d10d      	bne.n	8009302 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80092e6:	68bb      	ldr	r3, [r7, #8]
 80092e8:	691b      	ldr	r3, [r3, #16]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d009      	beq.n	8009302 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80092ee:	68bb      	ldr	r3, [r7, #8]
 80092f0:	6919      	ldr	r1, [r3, #16]
 80092f2:	69bb      	ldr	r3, [r7, #24]
 80092f4:	015a      	lsls	r2, r3, #5
 80092f6:	69fb      	ldr	r3, [r7, #28]
 80092f8:	4413      	add	r3, r2
 80092fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092fe:	460a      	mov	r2, r1
 8009300:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009302:	68bb      	ldr	r3, [r7, #8]
 8009304:	791b      	ldrb	r3, [r3, #4]
 8009306:	2b01      	cmp	r3, #1
 8009308:	d128      	bne.n	800935c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800930a:	69fb      	ldr	r3, [r7, #28]
 800930c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009310:	689b      	ldr	r3, [r3, #8]
 8009312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009316:	2b00      	cmp	r3, #0
 8009318:	d110      	bne.n	800933c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800931a:	69bb      	ldr	r3, [r7, #24]
 800931c:	015a      	lsls	r2, r3, #5
 800931e:	69fb      	ldr	r3, [r7, #28]
 8009320:	4413      	add	r3, r2
 8009322:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	69ba      	ldr	r2, [r7, #24]
 800932a:	0151      	lsls	r1, r2, #5
 800932c:	69fa      	ldr	r2, [r7, #28]
 800932e:	440a      	add	r2, r1
 8009330:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009334:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009338:	6013      	str	r3, [r2, #0]
 800933a:	e00f      	b.n	800935c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800933c:	69bb      	ldr	r3, [r7, #24]
 800933e:	015a      	lsls	r2, r3, #5
 8009340:	69fb      	ldr	r3, [r7, #28]
 8009342:	4413      	add	r3, r2
 8009344:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	69ba      	ldr	r2, [r7, #24]
 800934c:	0151      	lsls	r1, r2, #5
 800934e:	69fa      	ldr	r2, [r7, #28]
 8009350:	440a      	add	r2, r1
 8009352:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009356:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800935a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800935c:	69bb      	ldr	r3, [r7, #24]
 800935e:	015a      	lsls	r2, r3, #5
 8009360:	69fb      	ldr	r3, [r7, #28]
 8009362:	4413      	add	r3, r2
 8009364:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	69ba      	ldr	r2, [r7, #24]
 800936c:	0151      	lsls	r1, r2, #5
 800936e:	69fa      	ldr	r2, [r7, #28]
 8009370:	440a      	add	r2, r1
 8009372:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009376:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800937a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800937c:	2300      	movs	r3, #0
}
 800937e:	4618      	mov	r0, r3
 8009380:	3720      	adds	r7, #32
 8009382:	46bd      	mov	sp, r7
 8009384:	bd80      	pop	{r7, pc}
 8009386:	bf00      	nop
 8009388:	1ff80000 	.word	0x1ff80000

0800938c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800938c:	b480      	push	{r7}
 800938e:	b087      	sub	sp, #28
 8009390:	af00      	add	r7, sp, #0
 8009392:	60f8      	str	r0, [r7, #12]
 8009394:	60b9      	str	r1, [r7, #8]
 8009396:	4613      	mov	r3, r2
 8009398:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	781b      	ldrb	r3, [r3, #0]
 80093a2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80093a4:	68bb      	ldr	r3, [r7, #8]
 80093a6:	785b      	ldrb	r3, [r3, #1]
 80093a8:	2b01      	cmp	r3, #1
 80093aa:	f040 80ce 	bne.w	800954a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	699b      	ldr	r3, [r3, #24]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d132      	bne.n	800941c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80093b6:	693b      	ldr	r3, [r7, #16]
 80093b8:	015a      	lsls	r2, r3, #5
 80093ba:	697b      	ldr	r3, [r7, #20]
 80093bc:	4413      	add	r3, r2
 80093be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093c2:	691b      	ldr	r3, [r3, #16]
 80093c4:	693a      	ldr	r2, [r7, #16]
 80093c6:	0151      	lsls	r1, r2, #5
 80093c8:	697a      	ldr	r2, [r7, #20]
 80093ca:	440a      	add	r2, r1
 80093cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093d0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80093d4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80093d8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80093da:	693b      	ldr	r3, [r7, #16]
 80093dc:	015a      	lsls	r2, r3, #5
 80093de:	697b      	ldr	r3, [r7, #20]
 80093e0:	4413      	add	r3, r2
 80093e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093e6:	691b      	ldr	r3, [r3, #16]
 80093e8:	693a      	ldr	r2, [r7, #16]
 80093ea:	0151      	lsls	r1, r2, #5
 80093ec:	697a      	ldr	r2, [r7, #20]
 80093ee:	440a      	add	r2, r1
 80093f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80093f8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80093fa:	693b      	ldr	r3, [r7, #16]
 80093fc:	015a      	lsls	r2, r3, #5
 80093fe:	697b      	ldr	r3, [r7, #20]
 8009400:	4413      	add	r3, r2
 8009402:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009406:	691b      	ldr	r3, [r3, #16]
 8009408:	693a      	ldr	r2, [r7, #16]
 800940a:	0151      	lsls	r1, r2, #5
 800940c:	697a      	ldr	r2, [r7, #20]
 800940e:	440a      	add	r2, r1
 8009410:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009414:	0cdb      	lsrs	r3, r3, #19
 8009416:	04db      	lsls	r3, r3, #19
 8009418:	6113      	str	r3, [r2, #16]
 800941a:	e04e      	b.n	80094ba <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800941c:	693b      	ldr	r3, [r7, #16]
 800941e:	015a      	lsls	r2, r3, #5
 8009420:	697b      	ldr	r3, [r7, #20]
 8009422:	4413      	add	r3, r2
 8009424:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009428:	691b      	ldr	r3, [r3, #16]
 800942a:	693a      	ldr	r2, [r7, #16]
 800942c:	0151      	lsls	r1, r2, #5
 800942e:	697a      	ldr	r2, [r7, #20]
 8009430:	440a      	add	r2, r1
 8009432:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009436:	0cdb      	lsrs	r3, r3, #19
 8009438:	04db      	lsls	r3, r3, #19
 800943a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800943c:	693b      	ldr	r3, [r7, #16]
 800943e:	015a      	lsls	r2, r3, #5
 8009440:	697b      	ldr	r3, [r7, #20]
 8009442:	4413      	add	r3, r2
 8009444:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009448:	691b      	ldr	r3, [r3, #16]
 800944a:	693a      	ldr	r2, [r7, #16]
 800944c:	0151      	lsls	r1, r2, #5
 800944e:	697a      	ldr	r2, [r7, #20]
 8009450:	440a      	add	r2, r1
 8009452:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009456:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800945a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800945e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009460:	68bb      	ldr	r3, [r7, #8]
 8009462:	699a      	ldr	r2, [r3, #24]
 8009464:	68bb      	ldr	r3, [r7, #8]
 8009466:	68db      	ldr	r3, [r3, #12]
 8009468:	429a      	cmp	r2, r3
 800946a:	d903      	bls.n	8009474 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800946c:	68bb      	ldr	r3, [r7, #8]
 800946e:	68da      	ldr	r2, [r3, #12]
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009474:	693b      	ldr	r3, [r7, #16]
 8009476:	015a      	lsls	r2, r3, #5
 8009478:	697b      	ldr	r3, [r7, #20]
 800947a:	4413      	add	r3, r2
 800947c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009480:	691b      	ldr	r3, [r3, #16]
 8009482:	693a      	ldr	r2, [r7, #16]
 8009484:	0151      	lsls	r1, r2, #5
 8009486:	697a      	ldr	r2, [r7, #20]
 8009488:	440a      	add	r2, r1
 800948a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800948e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009492:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009494:	693b      	ldr	r3, [r7, #16]
 8009496:	015a      	lsls	r2, r3, #5
 8009498:	697b      	ldr	r3, [r7, #20]
 800949a:	4413      	add	r3, r2
 800949c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094a0:	691a      	ldr	r2, [r3, #16]
 80094a2:	68bb      	ldr	r3, [r7, #8]
 80094a4:	699b      	ldr	r3, [r3, #24]
 80094a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80094aa:	6939      	ldr	r1, [r7, #16]
 80094ac:	0148      	lsls	r0, r1, #5
 80094ae:	6979      	ldr	r1, [r7, #20]
 80094b0:	4401      	add	r1, r0
 80094b2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80094b6:	4313      	orrs	r3, r2
 80094b8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80094ba:	79fb      	ldrb	r3, [r7, #7]
 80094bc:	2b01      	cmp	r3, #1
 80094be:	d11e      	bne.n	80094fe <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80094c0:	68bb      	ldr	r3, [r7, #8]
 80094c2:	695b      	ldr	r3, [r3, #20]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d009      	beq.n	80094dc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80094c8:	693b      	ldr	r3, [r7, #16]
 80094ca:	015a      	lsls	r2, r3, #5
 80094cc:	697b      	ldr	r3, [r7, #20]
 80094ce:	4413      	add	r3, r2
 80094d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094d4:	461a      	mov	r2, r3
 80094d6:	68bb      	ldr	r3, [r7, #8]
 80094d8:	695b      	ldr	r3, [r3, #20]
 80094da:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80094dc:	693b      	ldr	r3, [r7, #16]
 80094de:	015a      	lsls	r2, r3, #5
 80094e0:	697b      	ldr	r3, [r7, #20]
 80094e2:	4413      	add	r3, r2
 80094e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	693a      	ldr	r2, [r7, #16]
 80094ec:	0151      	lsls	r1, r2, #5
 80094ee:	697a      	ldr	r2, [r7, #20]
 80094f0:	440a      	add	r2, r1
 80094f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094f6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80094fa:	6013      	str	r3, [r2, #0]
 80094fc:	e097      	b.n	800962e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80094fe:	693b      	ldr	r3, [r7, #16]
 8009500:	015a      	lsls	r2, r3, #5
 8009502:	697b      	ldr	r3, [r7, #20]
 8009504:	4413      	add	r3, r2
 8009506:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	693a      	ldr	r2, [r7, #16]
 800950e:	0151      	lsls	r1, r2, #5
 8009510:	697a      	ldr	r2, [r7, #20]
 8009512:	440a      	add	r2, r1
 8009514:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009518:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800951c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800951e:	68bb      	ldr	r3, [r7, #8]
 8009520:	699b      	ldr	r3, [r3, #24]
 8009522:	2b00      	cmp	r3, #0
 8009524:	f000 8083 	beq.w	800962e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009528:	697b      	ldr	r3, [r7, #20]
 800952a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800952e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009530:	68bb      	ldr	r3, [r7, #8]
 8009532:	781b      	ldrb	r3, [r3, #0]
 8009534:	f003 030f 	and.w	r3, r3, #15
 8009538:	2101      	movs	r1, #1
 800953a:	fa01 f303 	lsl.w	r3, r1, r3
 800953e:	6979      	ldr	r1, [r7, #20]
 8009540:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009544:	4313      	orrs	r3, r2
 8009546:	634b      	str	r3, [r1, #52]	; 0x34
 8009548:	e071      	b.n	800962e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800954a:	693b      	ldr	r3, [r7, #16]
 800954c:	015a      	lsls	r2, r3, #5
 800954e:	697b      	ldr	r3, [r7, #20]
 8009550:	4413      	add	r3, r2
 8009552:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009556:	691b      	ldr	r3, [r3, #16]
 8009558:	693a      	ldr	r2, [r7, #16]
 800955a:	0151      	lsls	r1, r2, #5
 800955c:	697a      	ldr	r2, [r7, #20]
 800955e:	440a      	add	r2, r1
 8009560:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009564:	0cdb      	lsrs	r3, r3, #19
 8009566:	04db      	lsls	r3, r3, #19
 8009568:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800956a:	693b      	ldr	r3, [r7, #16]
 800956c:	015a      	lsls	r2, r3, #5
 800956e:	697b      	ldr	r3, [r7, #20]
 8009570:	4413      	add	r3, r2
 8009572:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009576:	691b      	ldr	r3, [r3, #16]
 8009578:	693a      	ldr	r2, [r7, #16]
 800957a:	0151      	lsls	r1, r2, #5
 800957c:	697a      	ldr	r2, [r7, #20]
 800957e:	440a      	add	r2, r1
 8009580:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009584:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009588:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800958c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800958e:	68bb      	ldr	r3, [r7, #8]
 8009590:	699b      	ldr	r3, [r3, #24]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d003      	beq.n	800959e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8009596:	68bb      	ldr	r3, [r7, #8]
 8009598:	68da      	ldr	r2, [r3, #12]
 800959a:	68bb      	ldr	r3, [r7, #8]
 800959c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800959e:	68bb      	ldr	r3, [r7, #8]
 80095a0:	68da      	ldr	r2, [r3, #12]
 80095a2:	68bb      	ldr	r3, [r7, #8]
 80095a4:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80095a6:	693b      	ldr	r3, [r7, #16]
 80095a8:	015a      	lsls	r2, r3, #5
 80095aa:	697b      	ldr	r3, [r7, #20]
 80095ac:	4413      	add	r3, r2
 80095ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095b2:	691b      	ldr	r3, [r3, #16]
 80095b4:	693a      	ldr	r2, [r7, #16]
 80095b6:	0151      	lsls	r1, r2, #5
 80095b8:	697a      	ldr	r2, [r7, #20]
 80095ba:	440a      	add	r2, r1
 80095bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80095c4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80095c6:	693b      	ldr	r3, [r7, #16]
 80095c8:	015a      	lsls	r2, r3, #5
 80095ca:	697b      	ldr	r3, [r7, #20]
 80095cc:	4413      	add	r3, r2
 80095ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095d2:	691a      	ldr	r2, [r3, #16]
 80095d4:	68bb      	ldr	r3, [r7, #8]
 80095d6:	69db      	ldr	r3, [r3, #28]
 80095d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80095dc:	6939      	ldr	r1, [r7, #16]
 80095de:	0148      	lsls	r0, r1, #5
 80095e0:	6979      	ldr	r1, [r7, #20]
 80095e2:	4401      	add	r1, r0
 80095e4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80095e8:	4313      	orrs	r3, r2
 80095ea:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80095ec:	79fb      	ldrb	r3, [r7, #7]
 80095ee:	2b01      	cmp	r3, #1
 80095f0:	d10d      	bne.n	800960e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80095f2:	68bb      	ldr	r3, [r7, #8]
 80095f4:	691b      	ldr	r3, [r3, #16]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d009      	beq.n	800960e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80095fa:	68bb      	ldr	r3, [r7, #8]
 80095fc:	6919      	ldr	r1, [r3, #16]
 80095fe:	693b      	ldr	r3, [r7, #16]
 8009600:	015a      	lsls	r2, r3, #5
 8009602:	697b      	ldr	r3, [r7, #20]
 8009604:	4413      	add	r3, r2
 8009606:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800960a:	460a      	mov	r2, r1
 800960c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800960e:	693b      	ldr	r3, [r7, #16]
 8009610:	015a      	lsls	r2, r3, #5
 8009612:	697b      	ldr	r3, [r7, #20]
 8009614:	4413      	add	r3, r2
 8009616:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	693a      	ldr	r2, [r7, #16]
 800961e:	0151      	lsls	r1, r2, #5
 8009620:	697a      	ldr	r2, [r7, #20]
 8009622:	440a      	add	r2, r1
 8009624:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009628:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800962c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800962e:	2300      	movs	r3, #0
}
 8009630:	4618      	mov	r0, r3
 8009632:	371c      	adds	r7, #28
 8009634:	46bd      	mov	sp, r7
 8009636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963a:	4770      	bx	lr

0800963c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800963c:	b480      	push	{r7}
 800963e:	b087      	sub	sp, #28
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
 8009644:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009646:	2300      	movs	r3, #0
 8009648:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800964a:	2300      	movs	r3, #0
 800964c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	785b      	ldrb	r3, [r3, #1]
 8009656:	2b01      	cmp	r3, #1
 8009658:	d14a      	bne.n	80096f0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	781b      	ldrb	r3, [r3, #0]
 800965e:	015a      	lsls	r2, r3, #5
 8009660:	693b      	ldr	r3, [r7, #16]
 8009662:	4413      	add	r3, r2
 8009664:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800966e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009672:	f040 8086 	bne.w	8009782 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	781b      	ldrb	r3, [r3, #0]
 800967a:	015a      	lsls	r2, r3, #5
 800967c:	693b      	ldr	r3, [r7, #16]
 800967e:	4413      	add	r3, r2
 8009680:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	683a      	ldr	r2, [r7, #0]
 8009688:	7812      	ldrb	r2, [r2, #0]
 800968a:	0151      	lsls	r1, r2, #5
 800968c:	693a      	ldr	r2, [r7, #16]
 800968e:	440a      	add	r2, r1
 8009690:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009694:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009698:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	781b      	ldrb	r3, [r3, #0]
 800969e:	015a      	lsls	r2, r3, #5
 80096a0:	693b      	ldr	r3, [r7, #16]
 80096a2:	4413      	add	r3, r2
 80096a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	683a      	ldr	r2, [r7, #0]
 80096ac:	7812      	ldrb	r2, [r2, #0]
 80096ae:	0151      	lsls	r1, r2, #5
 80096b0:	693a      	ldr	r2, [r7, #16]
 80096b2:	440a      	add	r2, r1
 80096b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80096bc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	3301      	adds	r3, #1
 80096c2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	f242 7210 	movw	r2, #10000	; 0x2710
 80096ca:	4293      	cmp	r3, r2
 80096cc:	d902      	bls.n	80096d4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80096ce:	2301      	movs	r3, #1
 80096d0:	75fb      	strb	r3, [r7, #23]
          break;
 80096d2:	e056      	b.n	8009782 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80096d4:	683b      	ldr	r3, [r7, #0]
 80096d6:	781b      	ldrb	r3, [r3, #0]
 80096d8:	015a      	lsls	r2, r3, #5
 80096da:	693b      	ldr	r3, [r7, #16]
 80096dc:	4413      	add	r3, r2
 80096de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80096e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80096ec:	d0e7      	beq.n	80096be <USB_EPStopXfer+0x82>
 80096ee:	e048      	b.n	8009782 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	781b      	ldrb	r3, [r3, #0]
 80096f4:	015a      	lsls	r2, r3, #5
 80096f6:	693b      	ldr	r3, [r7, #16]
 80096f8:	4413      	add	r3, r2
 80096fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009704:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009708:	d13b      	bne.n	8009782 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	781b      	ldrb	r3, [r3, #0]
 800970e:	015a      	lsls	r2, r3, #5
 8009710:	693b      	ldr	r3, [r7, #16]
 8009712:	4413      	add	r3, r2
 8009714:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	683a      	ldr	r2, [r7, #0]
 800971c:	7812      	ldrb	r2, [r2, #0]
 800971e:	0151      	lsls	r1, r2, #5
 8009720:	693a      	ldr	r2, [r7, #16]
 8009722:	440a      	add	r2, r1
 8009724:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009728:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800972c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	781b      	ldrb	r3, [r3, #0]
 8009732:	015a      	lsls	r2, r3, #5
 8009734:	693b      	ldr	r3, [r7, #16]
 8009736:	4413      	add	r3, r2
 8009738:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	683a      	ldr	r2, [r7, #0]
 8009740:	7812      	ldrb	r2, [r2, #0]
 8009742:	0151      	lsls	r1, r2, #5
 8009744:	693a      	ldr	r2, [r7, #16]
 8009746:	440a      	add	r2, r1
 8009748:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800974c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009750:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	3301      	adds	r3, #1
 8009756:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	f242 7210 	movw	r2, #10000	; 0x2710
 800975e:	4293      	cmp	r3, r2
 8009760:	d902      	bls.n	8009768 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009762:	2301      	movs	r3, #1
 8009764:	75fb      	strb	r3, [r7, #23]
          break;
 8009766:	e00c      	b.n	8009782 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	781b      	ldrb	r3, [r3, #0]
 800976c:	015a      	lsls	r2, r3, #5
 800976e:	693b      	ldr	r3, [r7, #16]
 8009770:	4413      	add	r3, r2
 8009772:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800977c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009780:	d0e7      	beq.n	8009752 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009782:	7dfb      	ldrb	r3, [r7, #23]
}
 8009784:	4618      	mov	r0, r3
 8009786:	371c      	adds	r7, #28
 8009788:	46bd      	mov	sp, r7
 800978a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978e:	4770      	bx	lr

08009790 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009790:	b480      	push	{r7}
 8009792:	b089      	sub	sp, #36	; 0x24
 8009794:	af00      	add	r7, sp, #0
 8009796:	60f8      	str	r0, [r7, #12]
 8009798:	60b9      	str	r1, [r7, #8]
 800979a:	4611      	mov	r1, r2
 800979c:	461a      	mov	r2, r3
 800979e:	460b      	mov	r3, r1
 80097a0:	71fb      	strb	r3, [r7, #7]
 80097a2:	4613      	mov	r3, r2
 80097a4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80097ae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d123      	bne.n	80097fe <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80097b6:	88bb      	ldrh	r3, [r7, #4]
 80097b8:	3303      	adds	r3, #3
 80097ba:	089b      	lsrs	r3, r3, #2
 80097bc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80097be:	2300      	movs	r3, #0
 80097c0:	61bb      	str	r3, [r7, #24]
 80097c2:	e018      	b.n	80097f6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80097c4:	79fb      	ldrb	r3, [r7, #7]
 80097c6:	031a      	lsls	r2, r3, #12
 80097c8:	697b      	ldr	r3, [r7, #20]
 80097ca:	4413      	add	r3, r2
 80097cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097d0:	461a      	mov	r2, r3
 80097d2:	69fb      	ldr	r3, [r7, #28]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80097d8:	69fb      	ldr	r3, [r7, #28]
 80097da:	3301      	adds	r3, #1
 80097dc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80097de:	69fb      	ldr	r3, [r7, #28]
 80097e0:	3301      	adds	r3, #1
 80097e2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80097e4:	69fb      	ldr	r3, [r7, #28]
 80097e6:	3301      	adds	r3, #1
 80097e8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80097ea:	69fb      	ldr	r3, [r7, #28]
 80097ec:	3301      	adds	r3, #1
 80097ee:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80097f0:	69bb      	ldr	r3, [r7, #24]
 80097f2:	3301      	adds	r3, #1
 80097f4:	61bb      	str	r3, [r7, #24]
 80097f6:	69ba      	ldr	r2, [r7, #24]
 80097f8:	693b      	ldr	r3, [r7, #16]
 80097fa:	429a      	cmp	r2, r3
 80097fc:	d3e2      	bcc.n	80097c4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80097fe:	2300      	movs	r3, #0
}
 8009800:	4618      	mov	r0, r3
 8009802:	3724      	adds	r7, #36	; 0x24
 8009804:	46bd      	mov	sp, r7
 8009806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980a:	4770      	bx	lr

0800980c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800980c:	b480      	push	{r7}
 800980e:	b08b      	sub	sp, #44	; 0x2c
 8009810:	af00      	add	r7, sp, #0
 8009812:	60f8      	str	r0, [r7, #12]
 8009814:	60b9      	str	r1, [r7, #8]
 8009816:	4613      	mov	r3, r2
 8009818:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009822:	88fb      	ldrh	r3, [r7, #6]
 8009824:	089b      	lsrs	r3, r3, #2
 8009826:	b29b      	uxth	r3, r3
 8009828:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800982a:	88fb      	ldrh	r3, [r7, #6]
 800982c:	f003 0303 	and.w	r3, r3, #3
 8009830:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009832:	2300      	movs	r3, #0
 8009834:	623b      	str	r3, [r7, #32]
 8009836:	e014      	b.n	8009862 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009838:	69bb      	ldr	r3, [r7, #24]
 800983a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800983e:	681a      	ldr	r2, [r3, #0]
 8009840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009842:	601a      	str	r2, [r3, #0]
    pDest++;
 8009844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009846:	3301      	adds	r3, #1
 8009848:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800984a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800984c:	3301      	adds	r3, #1
 800984e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009852:	3301      	adds	r3, #1
 8009854:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009858:	3301      	adds	r3, #1
 800985a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800985c:	6a3b      	ldr	r3, [r7, #32]
 800985e:	3301      	adds	r3, #1
 8009860:	623b      	str	r3, [r7, #32]
 8009862:	6a3a      	ldr	r2, [r7, #32]
 8009864:	697b      	ldr	r3, [r7, #20]
 8009866:	429a      	cmp	r2, r3
 8009868:	d3e6      	bcc.n	8009838 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800986a:	8bfb      	ldrh	r3, [r7, #30]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d01e      	beq.n	80098ae <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009870:	2300      	movs	r3, #0
 8009872:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009874:	69bb      	ldr	r3, [r7, #24]
 8009876:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800987a:	461a      	mov	r2, r3
 800987c:	f107 0310 	add.w	r3, r7, #16
 8009880:	6812      	ldr	r2, [r2, #0]
 8009882:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009884:	693a      	ldr	r2, [r7, #16]
 8009886:	6a3b      	ldr	r3, [r7, #32]
 8009888:	b2db      	uxtb	r3, r3
 800988a:	00db      	lsls	r3, r3, #3
 800988c:	fa22 f303 	lsr.w	r3, r2, r3
 8009890:	b2da      	uxtb	r2, r3
 8009892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009894:	701a      	strb	r2, [r3, #0]
      i++;
 8009896:	6a3b      	ldr	r3, [r7, #32]
 8009898:	3301      	adds	r3, #1
 800989a:	623b      	str	r3, [r7, #32]
      pDest++;
 800989c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800989e:	3301      	adds	r3, #1
 80098a0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80098a2:	8bfb      	ldrh	r3, [r7, #30]
 80098a4:	3b01      	subs	r3, #1
 80098a6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80098a8:	8bfb      	ldrh	r3, [r7, #30]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d1ea      	bne.n	8009884 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80098ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80098b0:	4618      	mov	r0, r3
 80098b2:	372c      	adds	r7, #44	; 0x2c
 80098b4:	46bd      	mov	sp, r7
 80098b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ba:	4770      	bx	lr

080098bc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80098bc:	b480      	push	{r7}
 80098be:	b085      	sub	sp, #20
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
 80098c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	781b      	ldrb	r3, [r3, #0]
 80098ce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	785b      	ldrb	r3, [r3, #1]
 80098d4:	2b01      	cmp	r3, #1
 80098d6:	d12c      	bne.n	8009932 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80098d8:	68bb      	ldr	r3, [r7, #8]
 80098da:	015a      	lsls	r2, r3, #5
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	4413      	add	r3, r2
 80098e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	db12      	blt.n	8009910 <USB_EPSetStall+0x54>
 80098ea:	68bb      	ldr	r3, [r7, #8]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d00f      	beq.n	8009910 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80098f0:	68bb      	ldr	r3, [r7, #8]
 80098f2:	015a      	lsls	r2, r3, #5
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	4413      	add	r3, r2
 80098f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	68ba      	ldr	r2, [r7, #8]
 8009900:	0151      	lsls	r1, r2, #5
 8009902:	68fa      	ldr	r2, [r7, #12]
 8009904:	440a      	add	r2, r1
 8009906:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800990a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800990e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009910:	68bb      	ldr	r3, [r7, #8]
 8009912:	015a      	lsls	r2, r3, #5
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	4413      	add	r3, r2
 8009918:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	68ba      	ldr	r2, [r7, #8]
 8009920:	0151      	lsls	r1, r2, #5
 8009922:	68fa      	ldr	r2, [r7, #12]
 8009924:	440a      	add	r2, r1
 8009926:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800992a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800992e:	6013      	str	r3, [r2, #0]
 8009930:	e02b      	b.n	800998a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009932:	68bb      	ldr	r3, [r7, #8]
 8009934:	015a      	lsls	r2, r3, #5
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	4413      	add	r3, r2
 800993a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	2b00      	cmp	r3, #0
 8009942:	db12      	blt.n	800996a <USB_EPSetStall+0xae>
 8009944:	68bb      	ldr	r3, [r7, #8]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d00f      	beq.n	800996a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800994a:	68bb      	ldr	r3, [r7, #8]
 800994c:	015a      	lsls	r2, r3, #5
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	4413      	add	r3, r2
 8009952:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	68ba      	ldr	r2, [r7, #8]
 800995a:	0151      	lsls	r1, r2, #5
 800995c:	68fa      	ldr	r2, [r7, #12]
 800995e:	440a      	add	r2, r1
 8009960:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009964:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009968:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800996a:	68bb      	ldr	r3, [r7, #8]
 800996c:	015a      	lsls	r2, r3, #5
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	4413      	add	r3, r2
 8009972:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	68ba      	ldr	r2, [r7, #8]
 800997a:	0151      	lsls	r1, r2, #5
 800997c:	68fa      	ldr	r2, [r7, #12]
 800997e:	440a      	add	r2, r1
 8009980:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009984:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009988:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800998a:	2300      	movs	r3, #0
}
 800998c:	4618      	mov	r0, r3
 800998e:	3714      	adds	r7, #20
 8009990:	46bd      	mov	sp, r7
 8009992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009996:	4770      	bx	lr

08009998 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009998:	b480      	push	{r7}
 800999a:	b085      	sub	sp, #20
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
 80099a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	781b      	ldrb	r3, [r3, #0]
 80099aa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	785b      	ldrb	r3, [r3, #1]
 80099b0:	2b01      	cmp	r3, #1
 80099b2:	d128      	bne.n	8009a06 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80099b4:	68bb      	ldr	r3, [r7, #8]
 80099b6:	015a      	lsls	r2, r3, #5
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	4413      	add	r3, r2
 80099bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	68ba      	ldr	r2, [r7, #8]
 80099c4:	0151      	lsls	r1, r2, #5
 80099c6:	68fa      	ldr	r2, [r7, #12]
 80099c8:	440a      	add	r2, r1
 80099ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099ce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80099d2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	791b      	ldrb	r3, [r3, #4]
 80099d8:	2b03      	cmp	r3, #3
 80099da:	d003      	beq.n	80099e4 <USB_EPClearStall+0x4c>
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	791b      	ldrb	r3, [r3, #4]
 80099e0:	2b02      	cmp	r3, #2
 80099e2:	d138      	bne.n	8009a56 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80099e4:	68bb      	ldr	r3, [r7, #8]
 80099e6:	015a      	lsls	r2, r3, #5
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	4413      	add	r3, r2
 80099ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	68ba      	ldr	r2, [r7, #8]
 80099f4:	0151      	lsls	r1, r2, #5
 80099f6:	68fa      	ldr	r2, [r7, #12]
 80099f8:	440a      	add	r2, r1
 80099fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009a02:	6013      	str	r3, [r2, #0]
 8009a04:	e027      	b.n	8009a56 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009a06:	68bb      	ldr	r3, [r7, #8]
 8009a08:	015a      	lsls	r2, r3, #5
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	4413      	add	r3, r2
 8009a0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	68ba      	ldr	r2, [r7, #8]
 8009a16:	0151      	lsls	r1, r2, #5
 8009a18:	68fa      	ldr	r2, [r7, #12]
 8009a1a:	440a      	add	r2, r1
 8009a1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a20:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009a24:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	791b      	ldrb	r3, [r3, #4]
 8009a2a:	2b03      	cmp	r3, #3
 8009a2c:	d003      	beq.n	8009a36 <USB_EPClearStall+0x9e>
 8009a2e:	683b      	ldr	r3, [r7, #0]
 8009a30:	791b      	ldrb	r3, [r3, #4]
 8009a32:	2b02      	cmp	r3, #2
 8009a34:	d10f      	bne.n	8009a56 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009a36:	68bb      	ldr	r3, [r7, #8]
 8009a38:	015a      	lsls	r2, r3, #5
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	4413      	add	r3, r2
 8009a3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	68ba      	ldr	r2, [r7, #8]
 8009a46:	0151      	lsls	r1, r2, #5
 8009a48:	68fa      	ldr	r2, [r7, #12]
 8009a4a:	440a      	add	r2, r1
 8009a4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009a54:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009a56:	2300      	movs	r3, #0
}
 8009a58:	4618      	mov	r0, r3
 8009a5a:	3714      	adds	r7, #20
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a62:	4770      	bx	lr

08009a64 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009a64:	b480      	push	{r7}
 8009a66:	b085      	sub	sp, #20
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
 8009a6c:	460b      	mov	r3, r1
 8009a6e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	68fa      	ldr	r2, [r7, #12]
 8009a7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009a82:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009a86:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a8e:	681a      	ldr	r2, [r3, #0]
 8009a90:	78fb      	ldrb	r3, [r7, #3]
 8009a92:	011b      	lsls	r3, r3, #4
 8009a94:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009a98:	68f9      	ldr	r1, [r7, #12]
 8009a9a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009a9e:	4313      	orrs	r3, r2
 8009aa0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009aa2:	2300      	movs	r3, #0
}
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	3714      	adds	r7, #20
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aae:	4770      	bx	lr

08009ab0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009ab0:	b480      	push	{r7}
 8009ab2:	b085      	sub	sp, #20
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	68fa      	ldr	r2, [r7, #12]
 8009ac6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009aca:	f023 0303 	bic.w	r3, r3, #3
 8009ace:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ad6:	685b      	ldr	r3, [r3, #4]
 8009ad8:	68fa      	ldr	r2, [r7, #12]
 8009ada:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009ade:	f023 0302 	bic.w	r3, r3, #2
 8009ae2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009ae4:	2300      	movs	r3, #0
}
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	3714      	adds	r7, #20
 8009aea:	46bd      	mov	sp, r7
 8009aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af0:	4770      	bx	lr

08009af2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009af2:	b480      	push	{r7}
 8009af4:	b085      	sub	sp, #20
 8009af6:	af00      	add	r7, sp, #0
 8009af8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	68fa      	ldr	r2, [r7, #12]
 8009b08:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009b0c:	f023 0303 	bic.w	r3, r3, #3
 8009b10:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b18:	685b      	ldr	r3, [r3, #4]
 8009b1a:	68fa      	ldr	r2, [r7, #12]
 8009b1c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009b20:	f043 0302 	orr.w	r3, r3, #2
 8009b24:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009b26:	2300      	movs	r3, #0
}
 8009b28:	4618      	mov	r0, r3
 8009b2a:	3714      	adds	r7, #20
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b32:	4770      	bx	lr

08009b34 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009b34:	b480      	push	{r7}
 8009b36:	b085      	sub	sp, #20
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	695b      	ldr	r3, [r3, #20]
 8009b40:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	699b      	ldr	r3, [r3, #24]
 8009b46:	68fa      	ldr	r2, [r7, #12]
 8009b48:	4013      	ands	r3, r2
 8009b4a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
}
 8009b4e:	4618      	mov	r0, r3
 8009b50:	3714      	adds	r7, #20
 8009b52:	46bd      	mov	sp, r7
 8009b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b58:	4770      	bx	lr

08009b5a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009b5a:	b480      	push	{r7}
 8009b5c:	b085      	sub	sp, #20
 8009b5e:	af00      	add	r7, sp, #0
 8009b60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b6c:	699b      	ldr	r3, [r3, #24]
 8009b6e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b76:	69db      	ldr	r3, [r3, #28]
 8009b78:	68ba      	ldr	r2, [r7, #8]
 8009b7a:	4013      	ands	r3, r2
 8009b7c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009b7e:	68bb      	ldr	r3, [r7, #8]
 8009b80:	0c1b      	lsrs	r3, r3, #16
}
 8009b82:	4618      	mov	r0, r3
 8009b84:	3714      	adds	r7, #20
 8009b86:	46bd      	mov	sp, r7
 8009b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8c:	4770      	bx	lr

08009b8e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009b8e:	b480      	push	{r7}
 8009b90:	b085      	sub	sp, #20
 8009b92:	af00      	add	r7, sp, #0
 8009b94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ba0:	699b      	ldr	r3, [r3, #24]
 8009ba2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009baa:	69db      	ldr	r3, [r3, #28]
 8009bac:	68ba      	ldr	r2, [r7, #8]
 8009bae:	4013      	ands	r3, r2
 8009bb0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009bb2:	68bb      	ldr	r3, [r7, #8]
 8009bb4:	b29b      	uxth	r3, r3
}
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	3714      	adds	r7, #20
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc0:	4770      	bx	lr

08009bc2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009bc2:	b480      	push	{r7}
 8009bc4:	b085      	sub	sp, #20
 8009bc6:	af00      	add	r7, sp, #0
 8009bc8:	6078      	str	r0, [r7, #4]
 8009bca:	460b      	mov	r3, r1
 8009bcc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009bd2:	78fb      	ldrb	r3, [r7, #3]
 8009bd4:	015a      	lsls	r2, r3, #5
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	4413      	add	r3, r2
 8009bda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bde:	689b      	ldr	r3, [r3, #8]
 8009be0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009be8:	695b      	ldr	r3, [r3, #20]
 8009bea:	68ba      	ldr	r2, [r7, #8]
 8009bec:	4013      	ands	r3, r2
 8009bee:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009bf0:	68bb      	ldr	r3, [r7, #8]
}
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	3714      	adds	r7, #20
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfc:	4770      	bx	lr

08009bfe <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009bfe:	b480      	push	{r7}
 8009c00:	b087      	sub	sp, #28
 8009c02:	af00      	add	r7, sp, #0
 8009c04:	6078      	str	r0, [r7, #4]
 8009c06:	460b      	mov	r3, r1
 8009c08:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009c0e:	697b      	ldr	r3, [r7, #20]
 8009c10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c14:	691b      	ldr	r3, [r3, #16]
 8009c16:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009c18:	697b      	ldr	r3, [r7, #20]
 8009c1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c20:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009c22:	78fb      	ldrb	r3, [r7, #3]
 8009c24:	f003 030f 	and.w	r3, r3, #15
 8009c28:	68fa      	ldr	r2, [r7, #12]
 8009c2a:	fa22 f303 	lsr.w	r3, r2, r3
 8009c2e:	01db      	lsls	r3, r3, #7
 8009c30:	b2db      	uxtb	r3, r3
 8009c32:	693a      	ldr	r2, [r7, #16]
 8009c34:	4313      	orrs	r3, r2
 8009c36:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009c38:	78fb      	ldrb	r3, [r7, #3]
 8009c3a:	015a      	lsls	r2, r3, #5
 8009c3c:	697b      	ldr	r3, [r7, #20]
 8009c3e:	4413      	add	r3, r2
 8009c40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c44:	689b      	ldr	r3, [r3, #8]
 8009c46:	693a      	ldr	r2, [r7, #16]
 8009c48:	4013      	ands	r3, r2
 8009c4a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009c4c:	68bb      	ldr	r3, [r7, #8]
}
 8009c4e:	4618      	mov	r0, r3
 8009c50:	371c      	adds	r7, #28
 8009c52:	46bd      	mov	sp, r7
 8009c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c58:	4770      	bx	lr

08009c5a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009c5a:	b480      	push	{r7}
 8009c5c:	b083      	sub	sp, #12
 8009c5e:	af00      	add	r7, sp, #0
 8009c60:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	695b      	ldr	r3, [r3, #20]
 8009c66:	f003 0301 	and.w	r3, r3, #1
}
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	370c      	adds	r7, #12
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c74:	4770      	bx	lr

08009c76 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009c76:	b480      	push	{r7}
 8009c78:	b085      	sub	sp, #20
 8009c7a:	af00      	add	r7, sp, #0
 8009c7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	68fa      	ldr	r2, [r7, #12]
 8009c8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c90:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009c94:	f023 0307 	bic.w	r3, r3, #7
 8009c98:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ca0:	685b      	ldr	r3, [r3, #4]
 8009ca2:	68fa      	ldr	r2, [r7, #12]
 8009ca4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009ca8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009cac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009cae:	2300      	movs	r3, #0
}
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	3714      	adds	r7, #20
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cba:	4770      	bx	lr

08009cbc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009cbc:	b480      	push	{r7}
 8009cbe:	b087      	sub	sp, #28
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	60f8      	str	r0, [r7, #12]
 8009cc4:	460b      	mov	r3, r1
 8009cc6:	607a      	str	r2, [r7, #4]
 8009cc8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	333c      	adds	r3, #60	; 0x3c
 8009cd2:	3304      	adds	r3, #4
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009cd8:	693b      	ldr	r3, [r7, #16]
 8009cda:	4a26      	ldr	r2, [pc, #152]	; (8009d74 <USB_EP0_OutStart+0xb8>)
 8009cdc:	4293      	cmp	r3, r2
 8009cde:	d90a      	bls.n	8009cf6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009ce0:	697b      	ldr	r3, [r7, #20]
 8009ce2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009cec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009cf0:	d101      	bne.n	8009cf6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	e037      	b.n	8009d66 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009cf6:	697b      	ldr	r3, [r7, #20]
 8009cf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cfc:	461a      	mov	r2, r3
 8009cfe:	2300      	movs	r3, #0
 8009d00:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009d02:	697b      	ldr	r3, [r7, #20]
 8009d04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d08:	691b      	ldr	r3, [r3, #16]
 8009d0a:	697a      	ldr	r2, [r7, #20]
 8009d0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d10:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009d14:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009d16:	697b      	ldr	r3, [r7, #20]
 8009d18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d1c:	691b      	ldr	r3, [r3, #16]
 8009d1e:	697a      	ldr	r2, [r7, #20]
 8009d20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d24:	f043 0318 	orr.w	r3, r3, #24
 8009d28:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009d2a:	697b      	ldr	r3, [r7, #20]
 8009d2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d30:	691b      	ldr	r3, [r3, #16]
 8009d32:	697a      	ldr	r2, [r7, #20]
 8009d34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d38:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009d3c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009d3e:	7afb      	ldrb	r3, [r7, #11]
 8009d40:	2b01      	cmp	r3, #1
 8009d42:	d10f      	bne.n	8009d64 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009d44:	697b      	ldr	r3, [r7, #20]
 8009d46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d4a:	461a      	mov	r2, r3
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009d50:	697b      	ldr	r3, [r7, #20]
 8009d52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	697a      	ldr	r2, [r7, #20]
 8009d5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d5e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009d62:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009d64:	2300      	movs	r3, #0
}
 8009d66:	4618      	mov	r0, r3
 8009d68:	371c      	adds	r7, #28
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d70:	4770      	bx	lr
 8009d72:	bf00      	nop
 8009d74:	4f54300a 	.word	0x4f54300a

08009d78 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009d78:	b480      	push	{r7}
 8009d7a:	b085      	sub	sp, #20
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009d80:	2300      	movs	r3, #0
 8009d82:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	3301      	adds	r3, #1
 8009d88:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	4a13      	ldr	r2, [pc, #76]	; (8009ddc <USB_CoreReset+0x64>)
 8009d8e:	4293      	cmp	r3, r2
 8009d90:	d901      	bls.n	8009d96 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009d92:	2303      	movs	r3, #3
 8009d94:	e01b      	b.n	8009dce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	691b      	ldr	r3, [r3, #16]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	daf2      	bge.n	8009d84 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009d9e:	2300      	movs	r3, #0
 8009da0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	691b      	ldr	r3, [r3, #16]
 8009da6:	f043 0201 	orr.w	r2, r3, #1
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	3301      	adds	r3, #1
 8009db2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	4a09      	ldr	r2, [pc, #36]	; (8009ddc <USB_CoreReset+0x64>)
 8009db8:	4293      	cmp	r3, r2
 8009dba:	d901      	bls.n	8009dc0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009dbc:	2303      	movs	r3, #3
 8009dbe:	e006      	b.n	8009dce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	691b      	ldr	r3, [r3, #16]
 8009dc4:	f003 0301 	and.w	r3, r3, #1
 8009dc8:	2b01      	cmp	r3, #1
 8009dca:	d0f0      	beq.n	8009dae <USB_CoreReset+0x36>

  return HAL_OK;
 8009dcc:	2300      	movs	r3, #0
}
 8009dce:	4618      	mov	r0, r3
 8009dd0:	3714      	adds	r7, #20
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd8:	4770      	bx	lr
 8009dda:	bf00      	nop
 8009ddc:	00030d40 	.word	0x00030d40

08009de0 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b084      	sub	sp, #16
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
 8009de8:	460b      	mov	r3, r1
 8009dea:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8009dec:	2010      	movs	r0, #16
 8009dee:	f002 f937 	bl	800c060 <USBD_static_malloc>
 8009df2:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d109      	bne.n	8009e0e <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	32b0      	adds	r2, #176	; 0xb0
 8009e04:	2100      	movs	r1, #0
 8009e06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009e0a:	2302      	movs	r3, #2
 8009e0c:	e048      	b.n	8009ea0 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	32b0      	adds	r2, #176	; 0xb0
 8009e18:	68f9      	ldr	r1, [r7, #12]
 8009e1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	32b0      	adds	r2, #176	; 0xb0
 8009e28:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	7c1b      	ldrb	r3, [r3, #16]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d10d      	bne.n	8009e56 <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 8009e3a:	4b1b      	ldr	r3, [pc, #108]	; (8009ea8 <USBD_HID_Init+0xc8>)
 8009e3c:	781b      	ldrb	r3, [r3, #0]
 8009e3e:	f003 020f 	and.w	r2, r3, #15
 8009e42:	6879      	ldr	r1, [r7, #4]
 8009e44:	4613      	mov	r3, r2
 8009e46:	009b      	lsls	r3, r3, #2
 8009e48:	4413      	add	r3, r2
 8009e4a:	009b      	lsls	r3, r3, #2
 8009e4c:	440b      	add	r3, r1
 8009e4e:	3326      	adds	r3, #38	; 0x26
 8009e50:	2207      	movs	r2, #7
 8009e52:	801a      	strh	r2, [r3, #0]
 8009e54:	e00c      	b.n	8009e70 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 8009e56:	4b14      	ldr	r3, [pc, #80]	; (8009ea8 <USBD_HID_Init+0xc8>)
 8009e58:	781b      	ldrb	r3, [r3, #0]
 8009e5a:	f003 020f 	and.w	r2, r3, #15
 8009e5e:	6879      	ldr	r1, [r7, #4]
 8009e60:	4613      	mov	r3, r2
 8009e62:	009b      	lsls	r3, r3, #2
 8009e64:	4413      	add	r3, r2
 8009e66:	009b      	lsls	r3, r3, #2
 8009e68:	440b      	add	r3, r1
 8009e6a:	3326      	adds	r3, #38	; 0x26
 8009e6c:	220a      	movs	r2, #10
 8009e6e:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8009e70:	4b0d      	ldr	r3, [pc, #52]	; (8009ea8 <USBD_HID_Init+0xc8>)
 8009e72:	7819      	ldrb	r1, [r3, #0]
 8009e74:	2304      	movs	r3, #4
 8009e76:	2203      	movs	r2, #3
 8009e78:	6878      	ldr	r0, [r7, #4]
 8009e7a:	f001 ffe0 	bl	800be3e <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 8009e7e:	4b0a      	ldr	r3, [pc, #40]	; (8009ea8 <USBD_HID_Init+0xc8>)
 8009e80:	781b      	ldrb	r3, [r3, #0]
 8009e82:	f003 020f 	and.w	r2, r3, #15
 8009e86:	6879      	ldr	r1, [r7, #4]
 8009e88:	4613      	mov	r3, r2
 8009e8a:	009b      	lsls	r3, r3, #2
 8009e8c:	4413      	add	r3, r2
 8009e8e:	009b      	lsls	r3, r3, #2
 8009e90:	440b      	add	r3, r1
 8009e92:	3324      	adds	r3, #36	; 0x24
 8009e94:	2201      	movs	r2, #1
 8009e96:	801a      	strh	r2, [r3, #0]

  hhid->state = HID_IDLE;
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8009e9e:	2300      	movs	r3, #0
}
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	3710      	adds	r7, #16
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bd80      	pop	{r7, pc}
 8009ea8:	200000f6 	.word	0x200000f6

08009eac <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b082      	sub	sp, #8
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
 8009eb4:	460b      	mov	r3, r1
 8009eb6:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 8009eb8:	4b1f      	ldr	r3, [pc, #124]	; (8009f38 <USBD_HID_DeInit+0x8c>)
 8009eba:	781b      	ldrb	r3, [r3, #0]
 8009ebc:	4619      	mov	r1, r3
 8009ebe:	6878      	ldr	r0, [r7, #4]
 8009ec0:	f001 ffe3 	bl	800be8a <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 8009ec4:	4b1c      	ldr	r3, [pc, #112]	; (8009f38 <USBD_HID_DeInit+0x8c>)
 8009ec6:	781b      	ldrb	r3, [r3, #0]
 8009ec8:	f003 020f 	and.w	r2, r3, #15
 8009ecc:	6879      	ldr	r1, [r7, #4]
 8009ece:	4613      	mov	r3, r2
 8009ed0:	009b      	lsls	r3, r3, #2
 8009ed2:	4413      	add	r3, r2
 8009ed4:	009b      	lsls	r3, r3, #2
 8009ed6:	440b      	add	r3, r1
 8009ed8:	3324      	adds	r3, #36	; 0x24
 8009eda:	2200      	movs	r2, #0
 8009edc:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 8009ede:	4b16      	ldr	r3, [pc, #88]	; (8009f38 <USBD_HID_DeInit+0x8c>)
 8009ee0:	781b      	ldrb	r3, [r3, #0]
 8009ee2:	f003 020f 	and.w	r2, r3, #15
 8009ee6:	6879      	ldr	r1, [r7, #4]
 8009ee8:	4613      	mov	r3, r2
 8009eea:	009b      	lsls	r3, r3, #2
 8009eec:	4413      	add	r3, r2
 8009eee:	009b      	lsls	r3, r3, #2
 8009ef0:	440b      	add	r3, r1
 8009ef2:	3326      	adds	r3, #38	; 0x26
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	32b0      	adds	r2, #176	; 0xb0
 8009f02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d011      	beq.n	8009f2e <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	32b0      	adds	r2, #176	; 0xb0
 8009f14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f18:	4618      	mov	r0, r3
 8009f1a:	f002 f8af 	bl	800c07c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	32b0      	adds	r2, #176	; 0xb0
 8009f28:	2100      	movs	r1, #0
 8009f2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 8009f2e:	2300      	movs	r3, #0
}
 8009f30:	4618      	mov	r0, r3
 8009f32:	3708      	adds	r7, #8
 8009f34:	46bd      	mov	sp, r7
 8009f36:	bd80      	pop	{r7, pc}
 8009f38:	200000f6 	.word	0x200000f6

08009f3c <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b086      	sub	sp, #24
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
 8009f44:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	32b0      	adds	r2, #176	; 0xb0
 8009f50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f54:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8009f56:	2300      	movs	r3, #0
 8009f58:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d101      	bne.n	8009f68 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8009f64:	2303      	movs	r3, #3
 8009f66:	e0e8      	b.n	800a13a <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	781b      	ldrb	r3, [r3, #0]
 8009f6c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d046      	beq.n	800a002 <USBD_HID_Setup+0xc6>
 8009f74:	2b20      	cmp	r3, #32
 8009f76:	f040 80d8 	bne.w	800a12a <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	785b      	ldrb	r3, [r3, #1]
 8009f7e:	3b02      	subs	r3, #2
 8009f80:	2b09      	cmp	r3, #9
 8009f82:	d836      	bhi.n	8009ff2 <USBD_HID_Setup+0xb6>
 8009f84:	a201      	add	r2, pc, #4	; (adr r2, 8009f8c <USBD_HID_Setup+0x50>)
 8009f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f8a:	bf00      	nop
 8009f8c:	08009fe3 	.word	0x08009fe3
 8009f90:	08009fc3 	.word	0x08009fc3
 8009f94:	08009ff3 	.word	0x08009ff3
 8009f98:	08009ff3 	.word	0x08009ff3
 8009f9c:	08009ff3 	.word	0x08009ff3
 8009fa0:	08009ff3 	.word	0x08009ff3
 8009fa4:	08009ff3 	.word	0x08009ff3
 8009fa8:	08009ff3 	.word	0x08009ff3
 8009fac:	08009fd1 	.word	0x08009fd1
 8009fb0:	08009fb5 	.word	0x08009fb5
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8009fb4:	683b      	ldr	r3, [r7, #0]
 8009fb6:	885b      	ldrh	r3, [r3, #2]
 8009fb8:	b2db      	uxtb	r3, r3
 8009fba:	461a      	mov	r2, r3
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	601a      	str	r2, [r3, #0]
          break;
 8009fc0:	e01e      	b.n	800a000 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	2201      	movs	r2, #1
 8009fc6:	4619      	mov	r1, r3
 8009fc8:	6878      	ldr	r0, [r7, #4]
 8009fca:	f001 fbf1 	bl	800b7b0 <USBD_CtlSendData>
          break;
 8009fce:	e017      	b.n	800a000 <USBD_HID_Setup+0xc4>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	885b      	ldrh	r3, [r3, #2]
 8009fd4:	0a1b      	lsrs	r3, r3, #8
 8009fd6:	b29b      	uxth	r3, r3
 8009fd8:	b2db      	uxtb	r3, r3
 8009fda:	461a      	mov	r2, r3
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	605a      	str	r2, [r3, #4]
          break;
 8009fe0:	e00e      	b.n	800a000 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	3304      	adds	r3, #4
 8009fe6:	2201      	movs	r2, #1
 8009fe8:	4619      	mov	r1, r3
 8009fea:	6878      	ldr	r0, [r7, #4]
 8009fec:	f001 fbe0 	bl	800b7b0 <USBD_CtlSendData>
          break;
 8009ff0:	e006      	b.n	800a000 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8009ff2:	6839      	ldr	r1, [r7, #0]
 8009ff4:	6878      	ldr	r0, [r7, #4]
 8009ff6:	f001 fb6a 	bl	800b6ce <USBD_CtlError>
          ret = USBD_FAIL;
 8009ffa:	2303      	movs	r3, #3
 8009ffc:	75fb      	strb	r3, [r7, #23]
          break;
 8009ffe:	bf00      	nop
      }
      break;
 800a000:	e09a      	b.n	800a138 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	785b      	ldrb	r3, [r3, #1]
 800a006:	2b0b      	cmp	r3, #11
 800a008:	f200 8086 	bhi.w	800a118 <USBD_HID_Setup+0x1dc>
 800a00c:	a201      	add	r2, pc, #4	; (adr r2, 800a014 <USBD_HID_Setup+0xd8>)
 800a00e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a012:	bf00      	nop
 800a014:	0800a045 	.word	0x0800a045
 800a018:	0800a127 	.word	0x0800a127
 800a01c:	0800a119 	.word	0x0800a119
 800a020:	0800a119 	.word	0x0800a119
 800a024:	0800a119 	.word	0x0800a119
 800a028:	0800a119 	.word	0x0800a119
 800a02c:	0800a06f 	.word	0x0800a06f
 800a030:	0800a119 	.word	0x0800a119
 800a034:	0800a119 	.word	0x0800a119
 800a038:	0800a119 	.word	0x0800a119
 800a03c:	0800a0c7 	.word	0x0800a0c7
 800a040:	0800a0f1 	.word	0x0800a0f1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a04a:	b2db      	uxtb	r3, r3
 800a04c:	2b03      	cmp	r3, #3
 800a04e:	d107      	bne.n	800a060 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a050:	f107 030a 	add.w	r3, r7, #10
 800a054:	2202      	movs	r2, #2
 800a056:	4619      	mov	r1, r3
 800a058:	6878      	ldr	r0, [r7, #4]
 800a05a:	f001 fba9 	bl	800b7b0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a05e:	e063      	b.n	800a128 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800a060:	6839      	ldr	r1, [r7, #0]
 800a062:	6878      	ldr	r0, [r7, #4]
 800a064:	f001 fb33 	bl	800b6ce <USBD_CtlError>
            ret = USBD_FAIL;
 800a068:	2303      	movs	r3, #3
 800a06a:	75fb      	strb	r3, [r7, #23]
          break;
 800a06c:	e05c      	b.n	800a128 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	885b      	ldrh	r3, [r3, #2]
 800a072:	0a1b      	lsrs	r3, r3, #8
 800a074:	b29b      	uxth	r3, r3
 800a076:	2b22      	cmp	r3, #34	; 0x22
 800a078:	d108      	bne.n	800a08c <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	88db      	ldrh	r3, [r3, #6]
 800a07e:	2b4a      	cmp	r3, #74	; 0x4a
 800a080:	bf28      	it	cs
 800a082:	234a      	movcs	r3, #74	; 0x4a
 800a084:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 800a086:	4b2f      	ldr	r3, [pc, #188]	; (800a144 <USBD_HID_Setup+0x208>)
 800a088:	613b      	str	r3, [r7, #16]
 800a08a:	e015      	b.n	800a0b8 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	885b      	ldrh	r3, [r3, #2]
 800a090:	0a1b      	lsrs	r3, r3, #8
 800a092:	b29b      	uxth	r3, r3
 800a094:	2b21      	cmp	r3, #33	; 0x21
 800a096:	d108      	bne.n	800a0aa <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 800a098:	4b2b      	ldr	r3, [pc, #172]	; (800a148 <USBD_HID_Setup+0x20c>)
 800a09a:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	88db      	ldrh	r3, [r3, #6]
 800a0a0:	2b09      	cmp	r3, #9
 800a0a2:	bf28      	it	cs
 800a0a4:	2309      	movcs	r3, #9
 800a0a6:	82bb      	strh	r3, [r7, #20]
 800a0a8:	e006      	b.n	800a0b8 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 800a0aa:	6839      	ldr	r1, [r7, #0]
 800a0ac:	6878      	ldr	r0, [r7, #4]
 800a0ae:	f001 fb0e 	bl	800b6ce <USBD_CtlError>
            ret = USBD_FAIL;
 800a0b2:	2303      	movs	r3, #3
 800a0b4:	75fb      	strb	r3, [r7, #23]
            break;
 800a0b6:	e037      	b.n	800a128 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 800a0b8:	8abb      	ldrh	r3, [r7, #20]
 800a0ba:	461a      	mov	r2, r3
 800a0bc:	6939      	ldr	r1, [r7, #16]
 800a0be:	6878      	ldr	r0, [r7, #4]
 800a0c0:	f001 fb76 	bl	800b7b0 <USBD_CtlSendData>
          break;
 800a0c4:	e030      	b.n	800a128 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0cc:	b2db      	uxtb	r3, r3
 800a0ce:	2b03      	cmp	r3, #3
 800a0d0:	d107      	bne.n	800a0e2 <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	3308      	adds	r3, #8
 800a0d6:	2201      	movs	r2, #1
 800a0d8:	4619      	mov	r1, r3
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	f001 fb68 	bl	800b7b0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a0e0:	e022      	b.n	800a128 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800a0e2:	6839      	ldr	r1, [r7, #0]
 800a0e4:	6878      	ldr	r0, [r7, #4]
 800a0e6:	f001 faf2 	bl	800b6ce <USBD_CtlError>
            ret = USBD_FAIL;
 800a0ea:	2303      	movs	r3, #3
 800a0ec:	75fb      	strb	r3, [r7, #23]
          break;
 800a0ee:	e01b      	b.n	800a128 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0f6:	b2db      	uxtb	r3, r3
 800a0f8:	2b03      	cmp	r3, #3
 800a0fa:	d106      	bne.n	800a10a <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	885b      	ldrh	r3, [r3, #2]
 800a100:	b2db      	uxtb	r3, r3
 800a102:	461a      	mov	r2, r3
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a108:	e00e      	b.n	800a128 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800a10a:	6839      	ldr	r1, [r7, #0]
 800a10c:	6878      	ldr	r0, [r7, #4]
 800a10e:	f001 fade 	bl	800b6ce <USBD_CtlError>
            ret = USBD_FAIL;
 800a112:	2303      	movs	r3, #3
 800a114:	75fb      	strb	r3, [r7, #23]
          break;
 800a116:	e007      	b.n	800a128 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a118:	6839      	ldr	r1, [r7, #0]
 800a11a:	6878      	ldr	r0, [r7, #4]
 800a11c:	f001 fad7 	bl	800b6ce <USBD_CtlError>
          ret = USBD_FAIL;
 800a120:	2303      	movs	r3, #3
 800a122:	75fb      	strb	r3, [r7, #23]
          break;
 800a124:	e000      	b.n	800a128 <USBD_HID_Setup+0x1ec>
          break;
 800a126:	bf00      	nop
      }
      break;
 800a128:	e006      	b.n	800a138 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 800a12a:	6839      	ldr	r1, [r7, #0]
 800a12c:	6878      	ldr	r0, [r7, #4]
 800a12e:	f001 face 	bl	800b6ce <USBD_CtlError>
      ret = USBD_FAIL;
 800a132:	2303      	movs	r3, #3
 800a134:	75fb      	strb	r3, [r7, #23]
      break;
 800a136:	bf00      	nop
  }

  return (uint8_t)ret;
 800a138:	7dfb      	ldrb	r3, [r7, #23]
}
 800a13a:	4618      	mov	r0, r3
 800a13c:	3718      	adds	r7, #24
 800a13e:	46bd      	mov	sp, r7
 800a140:	bd80      	pop	{r7, pc}
 800a142:	bf00      	nop
 800a144:	200000ac 	.word	0x200000ac
 800a148:	20000094 	.word	0x20000094

0800a14c <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b086      	sub	sp, #24
 800a150:	af00      	add	r7, sp, #0
 800a152:	60f8      	str	r0, [r7, #12]
 800a154:	60b9      	str	r1, [r7, #8]
 800a156:	4613      	mov	r3, r2
 800a158:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	32b0      	adds	r2, #176	; 0xb0
 800a164:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a168:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 800a16a:	697b      	ldr	r3, [r7, #20]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d101      	bne.n	800a174 <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800a170:	2303      	movs	r3, #3
 800a172:	e014      	b.n	800a19e <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a17a:	b2db      	uxtb	r3, r3
 800a17c:	2b03      	cmp	r3, #3
 800a17e:	d10d      	bne.n	800a19c <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == HID_IDLE)
 800a180:	697b      	ldr	r3, [r7, #20]
 800a182:	7b1b      	ldrb	r3, [r3, #12]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d109      	bne.n	800a19c <USBD_HID_SendReport+0x50>
    {
      hhid->state = HID_BUSY;
 800a188:	697b      	ldr	r3, [r7, #20]
 800a18a:	2201      	movs	r2, #1
 800a18c:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 800a18e:	4b06      	ldr	r3, [pc, #24]	; (800a1a8 <USBD_HID_SendReport+0x5c>)
 800a190:	7819      	ldrb	r1, [r3, #0]
 800a192:	88fb      	ldrh	r3, [r7, #6]
 800a194:	68ba      	ldr	r2, [r7, #8]
 800a196:	68f8      	ldr	r0, [r7, #12]
 800a198:	f001 ff1f 	bl	800bfda <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 800a19c:	2300      	movs	r3, #0
}
 800a19e:	4618      	mov	r0, r3
 800a1a0:	3718      	adds	r7, #24
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bd80      	pop	{r7, pc}
 800a1a6:	bf00      	nop
 800a1a8:	200000f6 	.word	0x200000f6

0800a1ac <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b084      	sub	sp, #16
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 800a1b4:	2181      	movs	r1, #129	; 0x81
 800a1b6:	4809      	ldr	r0, [pc, #36]	; (800a1dc <USBD_HID_GetFSCfgDesc+0x30>)
 800a1b8:	f000 fc51 	bl	800aa5e <USBD_GetEpDesc>
 800a1bc:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d002      	beq.n	800a1ca <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	220a      	movs	r2, #10
 800a1c8:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	2222      	movs	r2, #34	; 0x22
 800a1ce:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 800a1d0:	4b02      	ldr	r3, [pc, #8]	; (800a1dc <USBD_HID_GetFSCfgDesc+0x30>)
}
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	3710      	adds	r7, #16
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bd80      	pop	{r7, pc}
 800a1da:	bf00      	nop
 800a1dc:	20000070 	.word	0x20000070

0800a1e0 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b084      	sub	sp, #16
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 800a1e8:	2181      	movs	r1, #129	; 0x81
 800a1ea:	4809      	ldr	r0, [pc, #36]	; (800a210 <USBD_HID_GetHSCfgDesc+0x30>)
 800a1ec:	f000 fc37 	bl	800aa5e <USBD_GetEpDesc>
 800a1f0:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d002      	beq.n	800a1fe <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	2207      	movs	r2, #7
 800a1fc:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	2222      	movs	r2, #34	; 0x22
 800a202:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 800a204:	4b02      	ldr	r3, [pc, #8]	; (800a210 <USBD_HID_GetHSCfgDesc+0x30>)
}
 800a206:	4618      	mov	r0, r3
 800a208:	3710      	adds	r7, #16
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd80      	pop	{r7, pc}
 800a20e:	bf00      	nop
 800a210:	20000070 	.word	0x20000070

0800a214 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b084      	sub	sp, #16
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 800a21c:	2181      	movs	r1, #129	; 0x81
 800a21e:	4809      	ldr	r0, [pc, #36]	; (800a244 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 800a220:	f000 fc1d 	bl	800aa5e <USBD_GetEpDesc>
 800a224:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d002      	beq.n	800a232 <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	220a      	movs	r2, #10
 800a230:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	2222      	movs	r2, #34	; 0x22
 800a236:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 800a238:	4b02      	ldr	r3, [pc, #8]	; (800a244 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 800a23a:	4618      	mov	r0, r3
 800a23c:	3710      	adds	r7, #16
 800a23e:	46bd      	mov	sp, r7
 800a240:	bd80      	pop	{r7, pc}
 800a242:	bf00      	nop
 800a244:	20000070 	.word	0x20000070

0800a248 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a248:	b480      	push	{r7}
 800a24a:	b083      	sub	sp, #12
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
 800a250:	460b      	mov	r3, r1
 800a252:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = HID_IDLE;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	32b0      	adds	r2, #176	; 0xb0
 800a25e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a262:	2200      	movs	r2, #0
 800a264:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800a266:	2300      	movs	r3, #0
}
 800a268:	4618      	mov	r0, r3
 800a26a:	370c      	adds	r7, #12
 800a26c:	46bd      	mov	sp, r7
 800a26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a272:	4770      	bx	lr

0800a274 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800a274:	b480      	push	{r7}
 800a276:	b083      	sub	sp, #12
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	220a      	movs	r2, #10
 800a280:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 800a282:	4b03      	ldr	r3, [pc, #12]	; (800a290 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 800a284:	4618      	mov	r0, r3
 800a286:	370c      	adds	r7, #12
 800a288:	46bd      	mov	sp, r7
 800a28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28e:	4770      	bx	lr
 800a290:	200000a0 	.word	0x200000a0

0800a294 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b086      	sub	sp, #24
 800a298:	af00      	add	r7, sp, #0
 800a29a:	60f8      	str	r0, [r7, #12]
 800a29c:	60b9      	str	r1, [r7, #8]
 800a29e:	4613      	mov	r3, r2
 800a2a0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d10a      	bne.n	800a2be <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 800a2a8:	4817      	ldr	r0, [pc, #92]	; (800a308 <USBD_Init+0x74>)
 800a2aa:	f001 ff4f 	bl	800c14c <iprintf>
 800a2ae:	4817      	ldr	r0, [pc, #92]	; (800a30c <USBD_Init+0x78>)
 800a2b0:	f001 ff4c 	bl	800c14c <iprintf>
 800a2b4:	200a      	movs	r0, #10
 800a2b6:	f001 ff61 	bl	800c17c <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a2ba:	2303      	movs	r3, #3
 800a2bc:	e01f      	b.n	800a2fe <USBD_Init+0x6a>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a2d6:	68bb      	ldr	r3, [r7, #8]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d003      	beq.n	800a2e4 <USBD_Init+0x50>
  {
    pdev->pDesc = pdesc;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	68ba      	ldr	r2, [r7, #8]
 800a2e0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	2201      	movs	r2, #1
 800a2e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	79fa      	ldrb	r2, [r7, #7]
 800a2f0:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a2f2:	68f8      	ldr	r0, [r7, #12]
 800a2f4:	f001 fd3c 	bl	800bd70 <USBD_LL_Init>
 800a2f8:	4603      	mov	r3, r0
 800a2fa:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a2fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2fe:	4618      	mov	r0, r3
 800a300:	3718      	adds	r7, #24
 800a302:	46bd      	mov	sp, r7
 800a304:	bd80      	pop	{r7, pc}
 800a306:	bf00      	nop
 800a308:	0800d52c 	.word	0x0800d52c
 800a30c:	0800d534 	.word	0x0800d534

0800a310 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b084      	sub	sp, #16
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
 800a318:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a31a:	2300      	movs	r3, #0
 800a31c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d10a      	bne.n	800a33a <USBD_RegisterClass+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 800a324:	481a      	ldr	r0, [pc, #104]	; (800a390 <USBD_RegisterClass+0x80>)
 800a326:	f001 ff11 	bl	800c14c <iprintf>
 800a32a:	481a      	ldr	r0, [pc, #104]	; (800a394 <USBD_RegisterClass+0x84>)
 800a32c:	f001 ff0e 	bl	800c14c <iprintf>
 800a330:	200a      	movs	r0, #10
 800a332:	f001 ff23 	bl	800c17c <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a336:	2303      	movs	r3, #3
 800a338:	e025      	b.n	800a386 <USBD_RegisterClass+0x76>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	683a      	ldr	r2, [r7, #0]
 800a33e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	32ae      	adds	r2, #174	; 0xae
 800a34c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a352:	2b00      	cmp	r3, #0
 800a354:	d00f      	beq.n	800a376 <USBD_RegisterClass+0x66>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	32ae      	adds	r2, #174	; 0xae
 800a360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a366:	f107 020e 	add.w	r2, r7, #14
 800a36a:	4610      	mov	r0, r2
 800a36c:	4798      	blx	r3
 800a36e:	4602      	mov	r2, r0
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800a37c:	1c5a      	adds	r2, r3, #1
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800a384:	2300      	movs	r3, #0
}
 800a386:	4618      	mov	r0, r3
 800a388:	3710      	adds	r7, #16
 800a38a:	46bd      	mov	sp, r7
 800a38c:	bd80      	pop	{r7, pc}
 800a38e:	bf00      	nop
 800a390:	0800d52c 	.word	0x0800d52c
 800a394:	0800d54c 	.word	0x0800d54c

0800a398 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b082      	sub	sp, #8
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a3a0:	6878      	ldr	r0, [r7, #4]
 800a3a2:	f001 fd31 	bl	800be08 <USBD_LL_Start>
 800a3a6:	4603      	mov	r3, r0
}
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	3708      	adds	r7, #8
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	bd80      	pop	{r7, pc}

0800a3b0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a3b0:	b480      	push	{r7}
 800a3b2:	b083      	sub	sp, #12
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a3b8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	370c      	adds	r7, #12
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c4:	4770      	bx	lr

0800a3c6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a3c6:	b580      	push	{r7, lr}
 800a3c8:	b084      	sub	sp, #16
 800a3ca:	af00      	add	r7, sp, #0
 800a3cc:	6078      	str	r0, [r7, #4]
 800a3ce:	460b      	mov	r3, r1
 800a3d0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d009      	beq.n	800a3f4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	78fa      	ldrb	r2, [r7, #3]
 800a3ea:	4611      	mov	r1, r2
 800a3ec:	6878      	ldr	r0, [r7, #4]
 800a3ee:	4798      	blx	r3
 800a3f0:	4603      	mov	r3, r0
 800a3f2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a3f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	3710      	adds	r7, #16
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	bd80      	pop	{r7, pc}

0800a3fe <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a3fe:	b580      	push	{r7, lr}
 800a400:	b084      	sub	sp, #16
 800a402:	af00      	add	r7, sp, #0
 800a404:	6078      	str	r0, [r7, #4]
 800a406:	460b      	mov	r3, r1
 800a408:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a40a:	2300      	movs	r3, #0
 800a40c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a414:	685b      	ldr	r3, [r3, #4]
 800a416:	78fa      	ldrb	r2, [r7, #3]
 800a418:	4611      	mov	r1, r2
 800a41a:	6878      	ldr	r0, [r7, #4]
 800a41c:	4798      	blx	r3
 800a41e:	4603      	mov	r3, r0
 800a420:	2b00      	cmp	r3, #0
 800a422:	d001      	beq.n	800a428 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a424:	2303      	movs	r3, #3
 800a426:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a428:	7bfb      	ldrb	r3, [r7, #15]
}
 800a42a:	4618      	mov	r0, r3
 800a42c:	3710      	adds	r7, #16
 800a42e:	46bd      	mov	sp, r7
 800a430:	bd80      	pop	{r7, pc}

0800a432 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a432:	b580      	push	{r7, lr}
 800a434:	b084      	sub	sp, #16
 800a436:	af00      	add	r7, sp, #0
 800a438:	6078      	str	r0, [r7, #4]
 800a43a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a442:	6839      	ldr	r1, [r7, #0]
 800a444:	4618      	mov	r0, r3
 800a446:	f001 f908 	bl	800b65a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	2201      	movs	r2, #1
 800a44e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a458:	461a      	mov	r2, r3
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a466:	f003 031f 	and.w	r3, r3, #31
 800a46a:	2b02      	cmp	r3, #2
 800a46c:	d01a      	beq.n	800a4a4 <USBD_LL_SetupStage+0x72>
 800a46e:	2b02      	cmp	r3, #2
 800a470:	d822      	bhi.n	800a4b8 <USBD_LL_SetupStage+0x86>
 800a472:	2b00      	cmp	r3, #0
 800a474:	d002      	beq.n	800a47c <USBD_LL_SetupStage+0x4a>
 800a476:	2b01      	cmp	r3, #1
 800a478:	d00a      	beq.n	800a490 <USBD_LL_SetupStage+0x5e>
 800a47a:	e01d      	b.n	800a4b8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a482:	4619      	mov	r1, r3
 800a484:	6878      	ldr	r0, [r7, #4]
 800a486:	f000 fb5f 	bl	800ab48 <USBD_StdDevReq>
 800a48a:	4603      	mov	r3, r0
 800a48c:	73fb      	strb	r3, [r7, #15]
      break;
 800a48e:	e020      	b.n	800a4d2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a496:	4619      	mov	r1, r3
 800a498:	6878      	ldr	r0, [r7, #4]
 800a49a:	f000 fbc7 	bl	800ac2c <USBD_StdItfReq>
 800a49e:	4603      	mov	r3, r0
 800a4a0:	73fb      	strb	r3, [r7, #15]
      break;
 800a4a2:	e016      	b.n	800a4d2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a4aa:	4619      	mov	r1, r3
 800a4ac:	6878      	ldr	r0, [r7, #4]
 800a4ae:	f000 fc29 	bl	800ad04 <USBD_StdEPReq>
 800a4b2:	4603      	mov	r3, r0
 800a4b4:	73fb      	strb	r3, [r7, #15]
      break;
 800a4b6:	e00c      	b.n	800a4d2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a4be:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a4c2:	b2db      	uxtb	r3, r3
 800a4c4:	4619      	mov	r1, r3
 800a4c6:	6878      	ldr	r0, [r7, #4]
 800a4c8:	f001 fcfe 	bl	800bec8 <USBD_LL_StallEP>
 800a4cc:	4603      	mov	r3, r0
 800a4ce:	73fb      	strb	r3, [r7, #15]
      break;
 800a4d0:	bf00      	nop
  }

  return ret;
 800a4d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	3710      	adds	r7, #16
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	bd80      	pop	{r7, pc}

0800a4dc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b086      	sub	sp, #24
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	60f8      	str	r0, [r7, #12]
 800a4e4:	460b      	mov	r3, r1
 800a4e6:	607a      	str	r2, [r7, #4]
 800a4e8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a4ee:	7afb      	ldrb	r3, [r7, #11]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d16e      	bne.n	800a5d2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a4fa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a502:	2b03      	cmp	r3, #3
 800a504:	f040 8098 	bne.w	800a638 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a508:	693b      	ldr	r3, [r7, #16]
 800a50a:	689a      	ldr	r2, [r3, #8]
 800a50c:	693b      	ldr	r3, [r7, #16]
 800a50e:	68db      	ldr	r3, [r3, #12]
 800a510:	429a      	cmp	r2, r3
 800a512:	d913      	bls.n	800a53c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a514:	693b      	ldr	r3, [r7, #16]
 800a516:	689a      	ldr	r2, [r3, #8]
 800a518:	693b      	ldr	r3, [r7, #16]
 800a51a:	68db      	ldr	r3, [r3, #12]
 800a51c:	1ad2      	subs	r2, r2, r3
 800a51e:	693b      	ldr	r3, [r7, #16]
 800a520:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a522:	693b      	ldr	r3, [r7, #16]
 800a524:	68da      	ldr	r2, [r3, #12]
 800a526:	693b      	ldr	r3, [r7, #16]
 800a528:	689b      	ldr	r3, [r3, #8]
 800a52a:	4293      	cmp	r3, r2
 800a52c:	bf28      	it	cs
 800a52e:	4613      	movcs	r3, r2
 800a530:	461a      	mov	r2, r3
 800a532:	6879      	ldr	r1, [r7, #4]
 800a534:	68f8      	ldr	r0, [r7, #12]
 800a536:	f001 f967 	bl	800b808 <USBD_CtlContinueRx>
 800a53a:	e07d      	b.n	800a638 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a542:	f003 031f 	and.w	r3, r3, #31
 800a546:	2b02      	cmp	r3, #2
 800a548:	d014      	beq.n	800a574 <USBD_LL_DataOutStage+0x98>
 800a54a:	2b02      	cmp	r3, #2
 800a54c:	d81d      	bhi.n	800a58a <USBD_LL_DataOutStage+0xae>
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d002      	beq.n	800a558 <USBD_LL_DataOutStage+0x7c>
 800a552:	2b01      	cmp	r3, #1
 800a554:	d003      	beq.n	800a55e <USBD_LL_DataOutStage+0x82>
 800a556:	e018      	b.n	800a58a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a558:	2300      	movs	r3, #0
 800a55a:	75bb      	strb	r3, [r7, #22]
            break;
 800a55c:	e018      	b.n	800a590 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a564:	b2db      	uxtb	r3, r3
 800a566:	4619      	mov	r1, r3
 800a568:	68f8      	ldr	r0, [r7, #12]
 800a56a:	f000 fa5e 	bl	800aa2a <USBD_CoreFindIF>
 800a56e:	4603      	mov	r3, r0
 800a570:	75bb      	strb	r3, [r7, #22]
            break;
 800a572:	e00d      	b.n	800a590 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a57a:	b2db      	uxtb	r3, r3
 800a57c:	4619      	mov	r1, r3
 800a57e:	68f8      	ldr	r0, [r7, #12]
 800a580:	f000 fa60 	bl	800aa44 <USBD_CoreFindEP>
 800a584:	4603      	mov	r3, r0
 800a586:	75bb      	strb	r3, [r7, #22]
            break;
 800a588:	e002      	b.n	800a590 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a58a:	2300      	movs	r3, #0
 800a58c:	75bb      	strb	r3, [r7, #22]
            break;
 800a58e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a590:	7dbb      	ldrb	r3, [r7, #22]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d119      	bne.n	800a5ca <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a59c:	b2db      	uxtb	r3, r3
 800a59e:	2b03      	cmp	r3, #3
 800a5a0:	d113      	bne.n	800a5ca <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a5a2:	7dba      	ldrb	r2, [r7, #22]
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	32ae      	adds	r2, #174	; 0xae
 800a5a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5ac:	691b      	ldr	r3, [r3, #16]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d00b      	beq.n	800a5ca <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a5b2:	7dba      	ldrb	r2, [r7, #22]
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a5ba:	7dba      	ldrb	r2, [r7, #22]
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	32ae      	adds	r2, #174	; 0xae
 800a5c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5c4:	691b      	ldr	r3, [r3, #16]
 800a5c6:	68f8      	ldr	r0, [r7, #12]
 800a5c8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a5ca:	68f8      	ldr	r0, [r7, #12]
 800a5cc:	f001 f92d 	bl	800b82a <USBD_CtlSendStatus>
 800a5d0:	e032      	b.n	800a638 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a5d2:	7afb      	ldrb	r3, [r7, #11]
 800a5d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a5d8:	b2db      	uxtb	r3, r3
 800a5da:	4619      	mov	r1, r3
 800a5dc:	68f8      	ldr	r0, [r7, #12]
 800a5de:	f000 fa31 	bl	800aa44 <USBD_CoreFindEP>
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a5e6:	7dbb      	ldrb	r3, [r7, #22]
 800a5e8:	2bff      	cmp	r3, #255	; 0xff
 800a5ea:	d025      	beq.n	800a638 <USBD_LL_DataOutStage+0x15c>
 800a5ec:	7dbb      	ldrb	r3, [r7, #22]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d122      	bne.n	800a638 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5f8:	b2db      	uxtb	r3, r3
 800a5fa:	2b03      	cmp	r3, #3
 800a5fc:	d117      	bne.n	800a62e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a5fe:	7dba      	ldrb	r2, [r7, #22]
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	32ae      	adds	r2, #174	; 0xae
 800a604:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a608:	699b      	ldr	r3, [r3, #24]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d00f      	beq.n	800a62e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a60e:	7dba      	ldrb	r2, [r7, #22]
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a616:	7dba      	ldrb	r2, [r7, #22]
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	32ae      	adds	r2, #174	; 0xae
 800a61c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a620:	699b      	ldr	r3, [r3, #24]
 800a622:	7afa      	ldrb	r2, [r7, #11]
 800a624:	4611      	mov	r1, r2
 800a626:	68f8      	ldr	r0, [r7, #12]
 800a628:	4798      	blx	r3
 800a62a:	4603      	mov	r3, r0
 800a62c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a62e:	7dfb      	ldrb	r3, [r7, #23]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d001      	beq.n	800a638 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a634:	7dfb      	ldrb	r3, [r7, #23]
 800a636:	e000      	b.n	800a63a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a638:	2300      	movs	r3, #0
}
 800a63a:	4618      	mov	r0, r3
 800a63c:	3718      	adds	r7, #24
 800a63e:	46bd      	mov	sp, r7
 800a640:	bd80      	pop	{r7, pc}

0800a642 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a642:	b580      	push	{r7, lr}
 800a644:	b086      	sub	sp, #24
 800a646:	af00      	add	r7, sp, #0
 800a648:	60f8      	str	r0, [r7, #12]
 800a64a:	460b      	mov	r3, r1
 800a64c:	607a      	str	r2, [r7, #4]
 800a64e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a650:	7afb      	ldrb	r3, [r7, #11]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d16f      	bne.n	800a736 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	3314      	adds	r3, #20
 800a65a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a662:	2b02      	cmp	r3, #2
 800a664:	d15a      	bne.n	800a71c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a666:	693b      	ldr	r3, [r7, #16]
 800a668:	689a      	ldr	r2, [r3, #8]
 800a66a:	693b      	ldr	r3, [r7, #16]
 800a66c:	68db      	ldr	r3, [r3, #12]
 800a66e:	429a      	cmp	r2, r3
 800a670:	d914      	bls.n	800a69c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a672:	693b      	ldr	r3, [r7, #16]
 800a674:	689a      	ldr	r2, [r3, #8]
 800a676:	693b      	ldr	r3, [r7, #16]
 800a678:	68db      	ldr	r3, [r3, #12]
 800a67a:	1ad2      	subs	r2, r2, r3
 800a67c:	693b      	ldr	r3, [r7, #16]
 800a67e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a680:	693b      	ldr	r3, [r7, #16]
 800a682:	689b      	ldr	r3, [r3, #8]
 800a684:	461a      	mov	r2, r3
 800a686:	6879      	ldr	r1, [r7, #4]
 800a688:	68f8      	ldr	r0, [r7, #12]
 800a68a:	f001 f8ac 	bl	800b7e6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a68e:	2300      	movs	r3, #0
 800a690:	2200      	movs	r2, #0
 800a692:	2100      	movs	r1, #0
 800a694:	68f8      	ldr	r0, [r7, #12]
 800a696:	f001 fcc1 	bl	800c01c <USBD_LL_PrepareReceive>
 800a69a:	e03f      	b.n	800a71c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a69c:	693b      	ldr	r3, [r7, #16]
 800a69e:	68da      	ldr	r2, [r3, #12]
 800a6a0:	693b      	ldr	r3, [r7, #16]
 800a6a2:	689b      	ldr	r3, [r3, #8]
 800a6a4:	429a      	cmp	r2, r3
 800a6a6:	d11c      	bne.n	800a6e2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a6a8:	693b      	ldr	r3, [r7, #16]
 800a6aa:	685a      	ldr	r2, [r3, #4]
 800a6ac:	693b      	ldr	r3, [r7, #16]
 800a6ae:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a6b0:	429a      	cmp	r2, r3
 800a6b2:	d316      	bcc.n	800a6e2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a6b4:	693b      	ldr	r3, [r7, #16]
 800a6b6:	685a      	ldr	r2, [r3, #4]
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a6be:	429a      	cmp	r2, r3
 800a6c0:	d20f      	bcs.n	800a6e2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	2100      	movs	r1, #0
 800a6c6:	68f8      	ldr	r0, [r7, #12]
 800a6c8:	f001 f88d 	bl	800b7e6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	2100      	movs	r1, #0
 800a6da:	68f8      	ldr	r0, [r7, #12]
 800a6dc:	f001 fc9e 	bl	800c01c <USBD_LL_PrepareReceive>
 800a6e0:	e01c      	b.n	800a71c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6e8:	b2db      	uxtb	r3, r3
 800a6ea:	2b03      	cmp	r3, #3
 800a6ec:	d10f      	bne.n	800a70e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6f4:	68db      	ldr	r3, [r3, #12]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d009      	beq.n	800a70e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a708:	68db      	ldr	r3, [r3, #12]
 800a70a:	68f8      	ldr	r0, [r7, #12]
 800a70c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a70e:	2180      	movs	r1, #128	; 0x80
 800a710:	68f8      	ldr	r0, [r7, #12]
 800a712:	f001 fbd9 	bl	800bec8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a716:	68f8      	ldr	r0, [r7, #12]
 800a718:	f001 f89a 	bl	800b850 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a722:	2b00      	cmp	r3, #0
 800a724:	d03a      	beq.n	800a79c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a726:	68f8      	ldr	r0, [r7, #12]
 800a728:	f7ff fe42 	bl	800a3b0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	2200      	movs	r2, #0
 800a730:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a734:	e032      	b.n	800a79c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a736:	7afb      	ldrb	r3, [r7, #11]
 800a738:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a73c:	b2db      	uxtb	r3, r3
 800a73e:	4619      	mov	r1, r3
 800a740:	68f8      	ldr	r0, [r7, #12]
 800a742:	f000 f97f 	bl	800aa44 <USBD_CoreFindEP>
 800a746:	4603      	mov	r3, r0
 800a748:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a74a:	7dfb      	ldrb	r3, [r7, #23]
 800a74c:	2bff      	cmp	r3, #255	; 0xff
 800a74e:	d025      	beq.n	800a79c <USBD_LL_DataInStage+0x15a>
 800a750:	7dfb      	ldrb	r3, [r7, #23]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d122      	bne.n	800a79c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a75c:	b2db      	uxtb	r3, r3
 800a75e:	2b03      	cmp	r3, #3
 800a760:	d11c      	bne.n	800a79c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a762:	7dfa      	ldrb	r2, [r7, #23]
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	32ae      	adds	r2, #174	; 0xae
 800a768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a76c:	695b      	ldr	r3, [r3, #20]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d014      	beq.n	800a79c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a772:	7dfa      	ldrb	r2, [r7, #23]
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a77a:	7dfa      	ldrb	r2, [r7, #23]
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	32ae      	adds	r2, #174	; 0xae
 800a780:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a784:	695b      	ldr	r3, [r3, #20]
 800a786:	7afa      	ldrb	r2, [r7, #11]
 800a788:	4611      	mov	r1, r2
 800a78a:	68f8      	ldr	r0, [r7, #12]
 800a78c:	4798      	blx	r3
 800a78e:	4603      	mov	r3, r0
 800a790:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a792:	7dbb      	ldrb	r3, [r7, #22]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d001      	beq.n	800a79c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a798:	7dbb      	ldrb	r3, [r7, #22]
 800a79a:	e000      	b.n	800a79e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a79c:	2300      	movs	r3, #0
}
 800a79e:	4618      	mov	r0, r3
 800a7a0:	3718      	adds	r7, #24
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	bd80      	pop	{r7, pc}

0800a7a6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a7a6:	b580      	push	{r7, lr}
 800a7a8:	b084      	sub	sp, #16
 800a7aa:	af00      	add	r7, sp, #0
 800a7ac:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	2201      	movs	r2, #1
 800a7b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	2200      	movs	r2, #0
 800a7be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d014      	beq.n	800a80c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7e8:	685b      	ldr	r3, [r3, #4]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d00e      	beq.n	800a80c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7f4:	685b      	ldr	r3, [r3, #4]
 800a7f6:	687a      	ldr	r2, [r7, #4]
 800a7f8:	6852      	ldr	r2, [r2, #4]
 800a7fa:	b2d2      	uxtb	r2, r2
 800a7fc:	4611      	mov	r1, r2
 800a7fe:	6878      	ldr	r0, [r7, #4]
 800a800:	4798      	blx	r3
 800a802:	4603      	mov	r3, r0
 800a804:	2b00      	cmp	r3, #0
 800a806:	d001      	beq.n	800a80c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a808:	2303      	movs	r3, #3
 800a80a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a80c:	2340      	movs	r3, #64	; 0x40
 800a80e:	2200      	movs	r2, #0
 800a810:	2100      	movs	r1, #0
 800a812:	6878      	ldr	r0, [r7, #4]
 800a814:	f001 fb13 	bl	800be3e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2201      	movs	r2, #1
 800a81c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2240      	movs	r2, #64	; 0x40
 800a824:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a828:	2340      	movs	r3, #64	; 0x40
 800a82a:	2200      	movs	r2, #0
 800a82c:	2180      	movs	r1, #128	; 0x80
 800a82e:	6878      	ldr	r0, [r7, #4]
 800a830:	f001 fb05 	bl	800be3e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2201      	movs	r2, #1
 800a838:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	2240      	movs	r2, #64	; 0x40
 800a83e:	621a      	str	r2, [r3, #32]

  return ret;
 800a840:	7bfb      	ldrb	r3, [r7, #15]
}
 800a842:	4618      	mov	r0, r3
 800a844:	3710      	adds	r7, #16
 800a846:	46bd      	mov	sp, r7
 800a848:	bd80      	pop	{r7, pc}

0800a84a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a84a:	b480      	push	{r7}
 800a84c:	b083      	sub	sp, #12
 800a84e:	af00      	add	r7, sp, #0
 800a850:	6078      	str	r0, [r7, #4]
 800a852:	460b      	mov	r3, r1
 800a854:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	78fa      	ldrb	r2, [r7, #3]
 800a85a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a85c:	2300      	movs	r3, #0
}
 800a85e:	4618      	mov	r0, r3
 800a860:	370c      	adds	r7, #12
 800a862:	46bd      	mov	sp, r7
 800a864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a868:	4770      	bx	lr

0800a86a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a86a:	b480      	push	{r7}
 800a86c:	b083      	sub	sp, #12
 800a86e:	af00      	add	r7, sp, #0
 800a870:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a878:	b2da      	uxtb	r2, r3
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2204      	movs	r2, #4
 800a884:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a888:	2300      	movs	r3, #0
}
 800a88a:	4618      	mov	r0, r3
 800a88c:	370c      	adds	r7, #12
 800a88e:	46bd      	mov	sp, r7
 800a890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a894:	4770      	bx	lr

0800a896 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a896:	b480      	push	{r7}
 800a898:	b083      	sub	sp, #12
 800a89a:	af00      	add	r7, sp, #0
 800a89c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8a4:	b2db      	uxtb	r3, r3
 800a8a6:	2b04      	cmp	r3, #4
 800a8a8:	d106      	bne.n	800a8b8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a8b0:	b2da      	uxtb	r2, r3
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a8b8:	2300      	movs	r3, #0
}
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	370c      	adds	r7, #12
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c4:	4770      	bx	lr

0800a8c6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a8c6:	b580      	push	{r7, lr}
 800a8c8:	b082      	sub	sp, #8
 800a8ca:	af00      	add	r7, sp, #0
 800a8cc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8d4:	b2db      	uxtb	r3, r3
 800a8d6:	2b03      	cmp	r3, #3
 800a8d8:	d110      	bne.n	800a8fc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d00b      	beq.n	800a8fc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8ea:	69db      	ldr	r3, [r3, #28]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d005      	beq.n	800a8fc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8f6:	69db      	ldr	r3, [r3, #28]
 800a8f8:	6878      	ldr	r0, [r7, #4]
 800a8fa:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a8fc:	2300      	movs	r3, #0
}
 800a8fe:	4618      	mov	r0, r3
 800a900:	3708      	adds	r7, #8
 800a902:	46bd      	mov	sp, r7
 800a904:	bd80      	pop	{r7, pc}

0800a906 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a906:	b580      	push	{r7, lr}
 800a908:	b082      	sub	sp, #8
 800a90a:	af00      	add	r7, sp, #0
 800a90c:	6078      	str	r0, [r7, #4]
 800a90e:	460b      	mov	r3, r1
 800a910:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	32ae      	adds	r2, #174	; 0xae
 800a91c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d101      	bne.n	800a928 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a924:	2303      	movs	r3, #3
 800a926:	e01c      	b.n	800a962 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a92e:	b2db      	uxtb	r3, r3
 800a930:	2b03      	cmp	r3, #3
 800a932:	d115      	bne.n	800a960 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	32ae      	adds	r2, #174	; 0xae
 800a93e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a942:	6a1b      	ldr	r3, [r3, #32]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d00b      	beq.n	800a960 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	32ae      	adds	r2, #174	; 0xae
 800a952:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a956:	6a1b      	ldr	r3, [r3, #32]
 800a958:	78fa      	ldrb	r2, [r7, #3]
 800a95a:	4611      	mov	r1, r2
 800a95c:	6878      	ldr	r0, [r7, #4]
 800a95e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a960:	2300      	movs	r3, #0
}
 800a962:	4618      	mov	r0, r3
 800a964:	3708      	adds	r7, #8
 800a966:	46bd      	mov	sp, r7
 800a968:	bd80      	pop	{r7, pc}

0800a96a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a96a:	b580      	push	{r7, lr}
 800a96c:	b082      	sub	sp, #8
 800a96e:	af00      	add	r7, sp, #0
 800a970:	6078      	str	r0, [r7, #4]
 800a972:	460b      	mov	r3, r1
 800a974:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	32ae      	adds	r2, #174	; 0xae
 800a980:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d101      	bne.n	800a98c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a988:	2303      	movs	r3, #3
 800a98a:	e01c      	b.n	800a9c6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a992:	b2db      	uxtb	r3, r3
 800a994:	2b03      	cmp	r3, #3
 800a996:	d115      	bne.n	800a9c4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	32ae      	adds	r2, #174	; 0xae
 800a9a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d00b      	beq.n	800a9c4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	32ae      	adds	r2, #174	; 0xae
 800a9b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9bc:	78fa      	ldrb	r2, [r7, #3]
 800a9be:	4611      	mov	r1, r2
 800a9c0:	6878      	ldr	r0, [r7, #4]
 800a9c2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a9c4:	2300      	movs	r3, #0
}
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	3708      	adds	r7, #8
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	bd80      	pop	{r7, pc}

0800a9ce <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a9ce:	b480      	push	{r7}
 800a9d0:	b083      	sub	sp, #12
 800a9d2:	af00      	add	r7, sp, #0
 800a9d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a9d6:	2300      	movs	r3, #0
}
 800a9d8:	4618      	mov	r0, r3
 800a9da:	370c      	adds	r7, #12
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e2:	4770      	bx	lr

0800a9e4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b084      	sub	sp, #16
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2201      	movs	r2, #1
 800a9f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d00e      	beq.n	800aa20 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa08:	685b      	ldr	r3, [r3, #4]
 800aa0a:	687a      	ldr	r2, [r7, #4]
 800aa0c:	6852      	ldr	r2, [r2, #4]
 800aa0e:	b2d2      	uxtb	r2, r2
 800aa10:	4611      	mov	r1, r2
 800aa12:	6878      	ldr	r0, [r7, #4]
 800aa14:	4798      	blx	r3
 800aa16:	4603      	mov	r3, r0
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d001      	beq.n	800aa20 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800aa1c:	2303      	movs	r3, #3
 800aa1e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800aa20:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa22:	4618      	mov	r0, r3
 800aa24:	3710      	adds	r7, #16
 800aa26:	46bd      	mov	sp, r7
 800aa28:	bd80      	pop	{r7, pc}

0800aa2a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800aa2a:	b480      	push	{r7}
 800aa2c:	b083      	sub	sp, #12
 800aa2e:	af00      	add	r7, sp, #0
 800aa30:	6078      	str	r0, [r7, #4]
 800aa32:	460b      	mov	r3, r1
 800aa34:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800aa36:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800aa38:	4618      	mov	r0, r3
 800aa3a:	370c      	adds	r7, #12
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa42:	4770      	bx	lr

0800aa44 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800aa44:	b480      	push	{r7}
 800aa46:	b083      	sub	sp, #12
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
 800aa4c:	460b      	mov	r3, r1
 800aa4e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800aa50:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800aa52:	4618      	mov	r0, r3
 800aa54:	370c      	adds	r7, #12
 800aa56:	46bd      	mov	sp, r7
 800aa58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5c:	4770      	bx	lr

0800aa5e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800aa5e:	b580      	push	{r7, lr}
 800aa60:	b086      	sub	sp, #24
 800aa62:	af00      	add	r7, sp, #0
 800aa64:	6078      	str	r0, [r7, #4]
 800aa66:	460b      	mov	r3, r1
 800aa68:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800aa72:	2300      	movs	r3, #0
 800aa74:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	885b      	ldrh	r3, [r3, #2]
 800aa7a:	b29a      	uxth	r2, r3
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	781b      	ldrb	r3, [r3, #0]
 800aa80:	b29b      	uxth	r3, r3
 800aa82:	429a      	cmp	r2, r3
 800aa84:	d920      	bls.n	800aac8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	781b      	ldrb	r3, [r3, #0]
 800aa8a:	b29b      	uxth	r3, r3
 800aa8c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800aa8e:	e013      	b.n	800aab8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800aa90:	f107 030a 	add.w	r3, r7, #10
 800aa94:	4619      	mov	r1, r3
 800aa96:	6978      	ldr	r0, [r7, #20]
 800aa98:	f000 f81b 	bl	800aad2 <USBD_GetNextDesc>
 800aa9c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800aa9e:	697b      	ldr	r3, [r7, #20]
 800aaa0:	785b      	ldrb	r3, [r3, #1]
 800aaa2:	2b05      	cmp	r3, #5
 800aaa4:	d108      	bne.n	800aab8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800aaa6:	697b      	ldr	r3, [r7, #20]
 800aaa8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800aaaa:	693b      	ldr	r3, [r7, #16]
 800aaac:	789b      	ldrb	r3, [r3, #2]
 800aaae:	78fa      	ldrb	r2, [r7, #3]
 800aab0:	429a      	cmp	r2, r3
 800aab2:	d008      	beq.n	800aac6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800aab4:	2300      	movs	r3, #0
 800aab6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	885b      	ldrh	r3, [r3, #2]
 800aabc:	b29a      	uxth	r2, r3
 800aabe:	897b      	ldrh	r3, [r7, #10]
 800aac0:	429a      	cmp	r2, r3
 800aac2:	d8e5      	bhi.n	800aa90 <USBD_GetEpDesc+0x32>
 800aac4:	e000      	b.n	800aac8 <USBD_GetEpDesc+0x6a>
          break;
 800aac6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800aac8:	693b      	ldr	r3, [r7, #16]
}
 800aaca:	4618      	mov	r0, r3
 800aacc:	3718      	adds	r7, #24
 800aace:	46bd      	mov	sp, r7
 800aad0:	bd80      	pop	{r7, pc}

0800aad2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800aad2:	b480      	push	{r7}
 800aad4:	b085      	sub	sp, #20
 800aad6:	af00      	add	r7, sp, #0
 800aad8:	6078      	str	r0, [r7, #4]
 800aada:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800aae0:	683b      	ldr	r3, [r7, #0]
 800aae2:	881a      	ldrh	r2, [r3, #0]
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	781b      	ldrb	r3, [r3, #0]
 800aae8:	b29b      	uxth	r3, r3
 800aaea:	4413      	add	r3, r2
 800aaec:	b29a      	uxth	r2, r3
 800aaee:	683b      	ldr	r3, [r7, #0]
 800aaf0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	781b      	ldrb	r3, [r3, #0]
 800aaf6:	461a      	mov	r2, r3
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	4413      	add	r3, r2
 800aafc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800aafe:	68fb      	ldr	r3, [r7, #12]
}
 800ab00:	4618      	mov	r0, r3
 800ab02:	3714      	adds	r7, #20
 800ab04:	46bd      	mov	sp, r7
 800ab06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0a:	4770      	bx	lr

0800ab0c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ab0c:	b480      	push	{r7}
 800ab0e:	b087      	sub	sp, #28
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ab18:	697b      	ldr	r3, [r7, #20]
 800ab1a:	781b      	ldrb	r3, [r3, #0]
 800ab1c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ab1e:	697b      	ldr	r3, [r7, #20]
 800ab20:	3301      	adds	r3, #1
 800ab22:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ab24:	697b      	ldr	r3, [r7, #20]
 800ab26:	781b      	ldrb	r3, [r3, #0]
 800ab28:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ab2a:	8a3b      	ldrh	r3, [r7, #16]
 800ab2c:	021b      	lsls	r3, r3, #8
 800ab2e:	b21a      	sxth	r2, r3
 800ab30:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ab34:	4313      	orrs	r3, r2
 800ab36:	b21b      	sxth	r3, r3
 800ab38:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ab3a:	89fb      	ldrh	r3, [r7, #14]
}
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	371c      	adds	r7, #28
 800ab40:	46bd      	mov	sp, r7
 800ab42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab46:	4770      	bx	lr

0800ab48 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b084      	sub	sp, #16
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
 800ab50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ab52:	2300      	movs	r3, #0
 800ab54:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ab56:	683b      	ldr	r3, [r7, #0]
 800ab58:	781b      	ldrb	r3, [r3, #0]
 800ab5a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ab5e:	2b40      	cmp	r3, #64	; 0x40
 800ab60:	d005      	beq.n	800ab6e <USBD_StdDevReq+0x26>
 800ab62:	2b40      	cmp	r3, #64	; 0x40
 800ab64:	d857      	bhi.n	800ac16 <USBD_StdDevReq+0xce>
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d00f      	beq.n	800ab8a <USBD_StdDevReq+0x42>
 800ab6a:	2b20      	cmp	r3, #32
 800ab6c:	d153      	bne.n	800ac16 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	32ae      	adds	r2, #174	; 0xae
 800ab78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab7c:	689b      	ldr	r3, [r3, #8]
 800ab7e:	6839      	ldr	r1, [r7, #0]
 800ab80:	6878      	ldr	r0, [r7, #4]
 800ab82:	4798      	blx	r3
 800ab84:	4603      	mov	r3, r0
 800ab86:	73fb      	strb	r3, [r7, #15]
      break;
 800ab88:	e04a      	b.n	800ac20 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ab8a:	683b      	ldr	r3, [r7, #0]
 800ab8c:	785b      	ldrb	r3, [r3, #1]
 800ab8e:	2b09      	cmp	r3, #9
 800ab90:	d83b      	bhi.n	800ac0a <USBD_StdDevReq+0xc2>
 800ab92:	a201      	add	r2, pc, #4	; (adr r2, 800ab98 <USBD_StdDevReq+0x50>)
 800ab94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab98:	0800abed 	.word	0x0800abed
 800ab9c:	0800ac01 	.word	0x0800ac01
 800aba0:	0800ac0b 	.word	0x0800ac0b
 800aba4:	0800abf7 	.word	0x0800abf7
 800aba8:	0800ac0b 	.word	0x0800ac0b
 800abac:	0800abcb 	.word	0x0800abcb
 800abb0:	0800abc1 	.word	0x0800abc1
 800abb4:	0800ac0b 	.word	0x0800ac0b
 800abb8:	0800abe3 	.word	0x0800abe3
 800abbc:	0800abd5 	.word	0x0800abd5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800abc0:	6839      	ldr	r1, [r7, #0]
 800abc2:	6878      	ldr	r0, [r7, #4]
 800abc4:	f000 fa3c 	bl	800b040 <USBD_GetDescriptor>
          break;
 800abc8:	e024      	b.n	800ac14 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800abca:	6839      	ldr	r1, [r7, #0]
 800abcc:	6878      	ldr	r0, [r7, #4]
 800abce:	f000 fba1 	bl	800b314 <USBD_SetAddress>
          break;
 800abd2:	e01f      	b.n	800ac14 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800abd4:	6839      	ldr	r1, [r7, #0]
 800abd6:	6878      	ldr	r0, [r7, #4]
 800abd8:	f000 fbe0 	bl	800b39c <USBD_SetConfig>
 800abdc:	4603      	mov	r3, r0
 800abde:	73fb      	strb	r3, [r7, #15]
          break;
 800abe0:	e018      	b.n	800ac14 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800abe2:	6839      	ldr	r1, [r7, #0]
 800abe4:	6878      	ldr	r0, [r7, #4]
 800abe6:	f000 fc83 	bl	800b4f0 <USBD_GetConfig>
          break;
 800abea:	e013      	b.n	800ac14 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800abec:	6839      	ldr	r1, [r7, #0]
 800abee:	6878      	ldr	r0, [r7, #4]
 800abf0:	f000 fcb4 	bl	800b55c <USBD_GetStatus>
          break;
 800abf4:	e00e      	b.n	800ac14 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800abf6:	6839      	ldr	r1, [r7, #0]
 800abf8:	6878      	ldr	r0, [r7, #4]
 800abfa:	f000 fce3 	bl	800b5c4 <USBD_SetFeature>
          break;
 800abfe:	e009      	b.n	800ac14 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ac00:	6839      	ldr	r1, [r7, #0]
 800ac02:	6878      	ldr	r0, [r7, #4]
 800ac04:	f000 fd07 	bl	800b616 <USBD_ClrFeature>
          break;
 800ac08:	e004      	b.n	800ac14 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800ac0a:	6839      	ldr	r1, [r7, #0]
 800ac0c:	6878      	ldr	r0, [r7, #4]
 800ac0e:	f000 fd5e 	bl	800b6ce <USBD_CtlError>
          break;
 800ac12:	bf00      	nop
      }
      break;
 800ac14:	e004      	b.n	800ac20 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800ac16:	6839      	ldr	r1, [r7, #0]
 800ac18:	6878      	ldr	r0, [r7, #4]
 800ac1a:	f000 fd58 	bl	800b6ce <USBD_CtlError>
      break;
 800ac1e:	bf00      	nop
  }

  return ret;
 800ac20:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac22:	4618      	mov	r0, r3
 800ac24:	3710      	adds	r7, #16
 800ac26:	46bd      	mov	sp, r7
 800ac28:	bd80      	pop	{r7, pc}
 800ac2a:	bf00      	nop

0800ac2c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b084      	sub	sp, #16
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
 800ac34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ac36:	2300      	movs	r3, #0
 800ac38:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ac3a:	683b      	ldr	r3, [r7, #0]
 800ac3c:	781b      	ldrb	r3, [r3, #0]
 800ac3e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ac42:	2b40      	cmp	r3, #64	; 0x40
 800ac44:	d005      	beq.n	800ac52 <USBD_StdItfReq+0x26>
 800ac46:	2b40      	cmp	r3, #64	; 0x40
 800ac48:	d852      	bhi.n	800acf0 <USBD_StdItfReq+0xc4>
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d001      	beq.n	800ac52 <USBD_StdItfReq+0x26>
 800ac4e:	2b20      	cmp	r3, #32
 800ac50:	d14e      	bne.n	800acf0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac58:	b2db      	uxtb	r3, r3
 800ac5a:	3b01      	subs	r3, #1
 800ac5c:	2b02      	cmp	r3, #2
 800ac5e:	d840      	bhi.n	800ace2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ac60:	683b      	ldr	r3, [r7, #0]
 800ac62:	889b      	ldrh	r3, [r3, #4]
 800ac64:	b2db      	uxtb	r3, r3
 800ac66:	2b01      	cmp	r3, #1
 800ac68:	d836      	bhi.n	800acd8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800ac6a:	683b      	ldr	r3, [r7, #0]
 800ac6c:	889b      	ldrh	r3, [r3, #4]
 800ac6e:	b2db      	uxtb	r3, r3
 800ac70:	4619      	mov	r1, r3
 800ac72:	6878      	ldr	r0, [r7, #4]
 800ac74:	f7ff fed9 	bl	800aa2a <USBD_CoreFindIF>
 800ac78:	4603      	mov	r3, r0
 800ac7a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ac7c:	7bbb      	ldrb	r3, [r7, #14]
 800ac7e:	2bff      	cmp	r3, #255	; 0xff
 800ac80:	d01d      	beq.n	800acbe <USBD_StdItfReq+0x92>
 800ac82:	7bbb      	ldrb	r3, [r7, #14]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d11a      	bne.n	800acbe <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800ac88:	7bba      	ldrb	r2, [r7, #14]
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	32ae      	adds	r2, #174	; 0xae
 800ac8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac92:	689b      	ldr	r3, [r3, #8]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d00f      	beq.n	800acb8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800ac98:	7bba      	ldrb	r2, [r7, #14]
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800aca0:	7bba      	ldrb	r2, [r7, #14]
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	32ae      	adds	r2, #174	; 0xae
 800aca6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acaa:	689b      	ldr	r3, [r3, #8]
 800acac:	6839      	ldr	r1, [r7, #0]
 800acae:	6878      	ldr	r0, [r7, #4]
 800acb0:	4798      	blx	r3
 800acb2:	4603      	mov	r3, r0
 800acb4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800acb6:	e004      	b.n	800acc2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800acb8:	2303      	movs	r3, #3
 800acba:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800acbc:	e001      	b.n	800acc2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800acbe:	2303      	movs	r3, #3
 800acc0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	88db      	ldrh	r3, [r3, #6]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d110      	bne.n	800acec <USBD_StdItfReq+0xc0>
 800acca:	7bfb      	ldrb	r3, [r7, #15]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d10d      	bne.n	800acec <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800acd0:	6878      	ldr	r0, [r7, #4]
 800acd2:	f000 fdaa 	bl	800b82a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800acd6:	e009      	b.n	800acec <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800acd8:	6839      	ldr	r1, [r7, #0]
 800acda:	6878      	ldr	r0, [r7, #4]
 800acdc:	f000 fcf7 	bl	800b6ce <USBD_CtlError>
          break;
 800ace0:	e004      	b.n	800acec <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800ace2:	6839      	ldr	r1, [r7, #0]
 800ace4:	6878      	ldr	r0, [r7, #4]
 800ace6:	f000 fcf2 	bl	800b6ce <USBD_CtlError>
          break;
 800acea:	e000      	b.n	800acee <USBD_StdItfReq+0xc2>
          break;
 800acec:	bf00      	nop
      }
      break;
 800acee:	e004      	b.n	800acfa <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800acf0:	6839      	ldr	r1, [r7, #0]
 800acf2:	6878      	ldr	r0, [r7, #4]
 800acf4:	f000 fceb 	bl	800b6ce <USBD_CtlError>
      break;
 800acf8:	bf00      	nop
  }

  return ret;
 800acfa:	7bfb      	ldrb	r3, [r7, #15]
}
 800acfc:	4618      	mov	r0, r3
 800acfe:	3710      	adds	r7, #16
 800ad00:	46bd      	mov	sp, r7
 800ad02:	bd80      	pop	{r7, pc}

0800ad04 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b084      	sub	sp, #16
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
 800ad0c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800ad0e:	2300      	movs	r3, #0
 800ad10:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800ad12:	683b      	ldr	r3, [r7, #0]
 800ad14:	889b      	ldrh	r3, [r3, #4]
 800ad16:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ad18:	683b      	ldr	r3, [r7, #0]
 800ad1a:	781b      	ldrb	r3, [r3, #0]
 800ad1c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ad20:	2b40      	cmp	r3, #64	; 0x40
 800ad22:	d007      	beq.n	800ad34 <USBD_StdEPReq+0x30>
 800ad24:	2b40      	cmp	r3, #64	; 0x40
 800ad26:	f200 817f 	bhi.w	800b028 <USBD_StdEPReq+0x324>
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d02a      	beq.n	800ad84 <USBD_StdEPReq+0x80>
 800ad2e:	2b20      	cmp	r3, #32
 800ad30:	f040 817a 	bne.w	800b028 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800ad34:	7bbb      	ldrb	r3, [r7, #14]
 800ad36:	4619      	mov	r1, r3
 800ad38:	6878      	ldr	r0, [r7, #4]
 800ad3a:	f7ff fe83 	bl	800aa44 <USBD_CoreFindEP>
 800ad3e:	4603      	mov	r3, r0
 800ad40:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ad42:	7b7b      	ldrb	r3, [r7, #13]
 800ad44:	2bff      	cmp	r3, #255	; 0xff
 800ad46:	f000 8174 	beq.w	800b032 <USBD_StdEPReq+0x32e>
 800ad4a:	7b7b      	ldrb	r3, [r7, #13]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	f040 8170 	bne.w	800b032 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800ad52:	7b7a      	ldrb	r2, [r7, #13]
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800ad5a:	7b7a      	ldrb	r2, [r7, #13]
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	32ae      	adds	r2, #174	; 0xae
 800ad60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad64:	689b      	ldr	r3, [r3, #8]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	f000 8163 	beq.w	800b032 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800ad6c:	7b7a      	ldrb	r2, [r7, #13]
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	32ae      	adds	r2, #174	; 0xae
 800ad72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad76:	689b      	ldr	r3, [r3, #8]
 800ad78:	6839      	ldr	r1, [r7, #0]
 800ad7a:	6878      	ldr	r0, [r7, #4]
 800ad7c:	4798      	blx	r3
 800ad7e:	4603      	mov	r3, r0
 800ad80:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ad82:	e156      	b.n	800b032 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ad84:	683b      	ldr	r3, [r7, #0]
 800ad86:	785b      	ldrb	r3, [r3, #1]
 800ad88:	2b03      	cmp	r3, #3
 800ad8a:	d008      	beq.n	800ad9e <USBD_StdEPReq+0x9a>
 800ad8c:	2b03      	cmp	r3, #3
 800ad8e:	f300 8145 	bgt.w	800b01c <USBD_StdEPReq+0x318>
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	f000 809b 	beq.w	800aece <USBD_StdEPReq+0x1ca>
 800ad98:	2b01      	cmp	r3, #1
 800ad9a:	d03c      	beq.n	800ae16 <USBD_StdEPReq+0x112>
 800ad9c:	e13e      	b.n	800b01c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ada4:	b2db      	uxtb	r3, r3
 800ada6:	2b02      	cmp	r3, #2
 800ada8:	d002      	beq.n	800adb0 <USBD_StdEPReq+0xac>
 800adaa:	2b03      	cmp	r3, #3
 800adac:	d016      	beq.n	800addc <USBD_StdEPReq+0xd8>
 800adae:	e02c      	b.n	800ae0a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800adb0:	7bbb      	ldrb	r3, [r7, #14]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d00d      	beq.n	800add2 <USBD_StdEPReq+0xce>
 800adb6:	7bbb      	ldrb	r3, [r7, #14]
 800adb8:	2b80      	cmp	r3, #128	; 0x80
 800adba:	d00a      	beq.n	800add2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800adbc:	7bbb      	ldrb	r3, [r7, #14]
 800adbe:	4619      	mov	r1, r3
 800adc0:	6878      	ldr	r0, [r7, #4]
 800adc2:	f001 f881 	bl	800bec8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800adc6:	2180      	movs	r1, #128	; 0x80
 800adc8:	6878      	ldr	r0, [r7, #4]
 800adca:	f001 f87d 	bl	800bec8 <USBD_LL_StallEP>
 800adce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800add0:	e020      	b.n	800ae14 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800add2:	6839      	ldr	r1, [r7, #0]
 800add4:	6878      	ldr	r0, [r7, #4]
 800add6:	f000 fc7a 	bl	800b6ce <USBD_CtlError>
              break;
 800adda:	e01b      	b.n	800ae14 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800addc:	683b      	ldr	r3, [r7, #0]
 800adde:	885b      	ldrh	r3, [r3, #2]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d10e      	bne.n	800ae02 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ade4:	7bbb      	ldrb	r3, [r7, #14]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d00b      	beq.n	800ae02 <USBD_StdEPReq+0xfe>
 800adea:	7bbb      	ldrb	r3, [r7, #14]
 800adec:	2b80      	cmp	r3, #128	; 0x80
 800adee:	d008      	beq.n	800ae02 <USBD_StdEPReq+0xfe>
 800adf0:	683b      	ldr	r3, [r7, #0]
 800adf2:	88db      	ldrh	r3, [r3, #6]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d104      	bne.n	800ae02 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800adf8:	7bbb      	ldrb	r3, [r7, #14]
 800adfa:	4619      	mov	r1, r3
 800adfc:	6878      	ldr	r0, [r7, #4]
 800adfe:	f001 f863 	bl	800bec8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ae02:	6878      	ldr	r0, [r7, #4]
 800ae04:	f000 fd11 	bl	800b82a <USBD_CtlSendStatus>

              break;
 800ae08:	e004      	b.n	800ae14 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800ae0a:	6839      	ldr	r1, [r7, #0]
 800ae0c:	6878      	ldr	r0, [r7, #4]
 800ae0e:	f000 fc5e 	bl	800b6ce <USBD_CtlError>
              break;
 800ae12:	bf00      	nop
          }
          break;
 800ae14:	e107      	b.n	800b026 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae1c:	b2db      	uxtb	r3, r3
 800ae1e:	2b02      	cmp	r3, #2
 800ae20:	d002      	beq.n	800ae28 <USBD_StdEPReq+0x124>
 800ae22:	2b03      	cmp	r3, #3
 800ae24:	d016      	beq.n	800ae54 <USBD_StdEPReq+0x150>
 800ae26:	e04b      	b.n	800aec0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ae28:	7bbb      	ldrb	r3, [r7, #14]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d00d      	beq.n	800ae4a <USBD_StdEPReq+0x146>
 800ae2e:	7bbb      	ldrb	r3, [r7, #14]
 800ae30:	2b80      	cmp	r3, #128	; 0x80
 800ae32:	d00a      	beq.n	800ae4a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ae34:	7bbb      	ldrb	r3, [r7, #14]
 800ae36:	4619      	mov	r1, r3
 800ae38:	6878      	ldr	r0, [r7, #4]
 800ae3a:	f001 f845 	bl	800bec8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ae3e:	2180      	movs	r1, #128	; 0x80
 800ae40:	6878      	ldr	r0, [r7, #4]
 800ae42:	f001 f841 	bl	800bec8 <USBD_LL_StallEP>
 800ae46:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ae48:	e040      	b.n	800aecc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800ae4a:	6839      	ldr	r1, [r7, #0]
 800ae4c:	6878      	ldr	r0, [r7, #4]
 800ae4e:	f000 fc3e 	bl	800b6ce <USBD_CtlError>
              break;
 800ae52:	e03b      	b.n	800aecc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ae54:	683b      	ldr	r3, [r7, #0]
 800ae56:	885b      	ldrh	r3, [r3, #2]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d136      	bne.n	800aeca <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ae5c:	7bbb      	ldrb	r3, [r7, #14]
 800ae5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d004      	beq.n	800ae70 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ae66:	7bbb      	ldrb	r3, [r7, #14]
 800ae68:	4619      	mov	r1, r3
 800ae6a:	6878      	ldr	r0, [r7, #4]
 800ae6c:	f001 f84b 	bl	800bf06 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ae70:	6878      	ldr	r0, [r7, #4]
 800ae72:	f000 fcda 	bl	800b82a <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800ae76:	7bbb      	ldrb	r3, [r7, #14]
 800ae78:	4619      	mov	r1, r3
 800ae7a:	6878      	ldr	r0, [r7, #4]
 800ae7c:	f7ff fde2 	bl	800aa44 <USBD_CoreFindEP>
 800ae80:	4603      	mov	r3, r0
 800ae82:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ae84:	7b7b      	ldrb	r3, [r7, #13]
 800ae86:	2bff      	cmp	r3, #255	; 0xff
 800ae88:	d01f      	beq.n	800aeca <USBD_StdEPReq+0x1c6>
 800ae8a:	7b7b      	ldrb	r3, [r7, #13]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d11c      	bne.n	800aeca <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800ae90:	7b7a      	ldrb	r2, [r7, #13]
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800ae98:	7b7a      	ldrb	r2, [r7, #13]
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	32ae      	adds	r2, #174	; 0xae
 800ae9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aea2:	689b      	ldr	r3, [r3, #8]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d010      	beq.n	800aeca <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800aea8:	7b7a      	ldrb	r2, [r7, #13]
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	32ae      	adds	r2, #174	; 0xae
 800aeae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aeb2:	689b      	ldr	r3, [r3, #8]
 800aeb4:	6839      	ldr	r1, [r7, #0]
 800aeb6:	6878      	ldr	r0, [r7, #4]
 800aeb8:	4798      	blx	r3
 800aeba:	4603      	mov	r3, r0
 800aebc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800aebe:	e004      	b.n	800aeca <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800aec0:	6839      	ldr	r1, [r7, #0]
 800aec2:	6878      	ldr	r0, [r7, #4]
 800aec4:	f000 fc03 	bl	800b6ce <USBD_CtlError>
              break;
 800aec8:	e000      	b.n	800aecc <USBD_StdEPReq+0x1c8>
              break;
 800aeca:	bf00      	nop
          }
          break;
 800aecc:	e0ab      	b.n	800b026 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aed4:	b2db      	uxtb	r3, r3
 800aed6:	2b02      	cmp	r3, #2
 800aed8:	d002      	beq.n	800aee0 <USBD_StdEPReq+0x1dc>
 800aeda:	2b03      	cmp	r3, #3
 800aedc:	d032      	beq.n	800af44 <USBD_StdEPReq+0x240>
 800aede:	e097      	b.n	800b010 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aee0:	7bbb      	ldrb	r3, [r7, #14]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d007      	beq.n	800aef6 <USBD_StdEPReq+0x1f2>
 800aee6:	7bbb      	ldrb	r3, [r7, #14]
 800aee8:	2b80      	cmp	r3, #128	; 0x80
 800aeea:	d004      	beq.n	800aef6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800aeec:	6839      	ldr	r1, [r7, #0]
 800aeee:	6878      	ldr	r0, [r7, #4]
 800aef0:	f000 fbed 	bl	800b6ce <USBD_CtlError>
                break;
 800aef4:	e091      	b.n	800b01a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aef6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	da0b      	bge.n	800af16 <USBD_StdEPReq+0x212>
 800aefe:	7bbb      	ldrb	r3, [r7, #14]
 800af00:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800af04:	4613      	mov	r3, r2
 800af06:	009b      	lsls	r3, r3, #2
 800af08:	4413      	add	r3, r2
 800af0a:	009b      	lsls	r3, r3, #2
 800af0c:	3310      	adds	r3, #16
 800af0e:	687a      	ldr	r2, [r7, #4]
 800af10:	4413      	add	r3, r2
 800af12:	3304      	adds	r3, #4
 800af14:	e00b      	b.n	800af2e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800af16:	7bbb      	ldrb	r3, [r7, #14]
 800af18:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800af1c:	4613      	mov	r3, r2
 800af1e:	009b      	lsls	r3, r3, #2
 800af20:	4413      	add	r3, r2
 800af22:	009b      	lsls	r3, r3, #2
 800af24:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800af28:	687a      	ldr	r2, [r7, #4]
 800af2a:	4413      	add	r3, r2
 800af2c:	3304      	adds	r3, #4
 800af2e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800af30:	68bb      	ldr	r3, [r7, #8]
 800af32:	2200      	movs	r2, #0
 800af34:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800af36:	68bb      	ldr	r3, [r7, #8]
 800af38:	2202      	movs	r2, #2
 800af3a:	4619      	mov	r1, r3
 800af3c:	6878      	ldr	r0, [r7, #4]
 800af3e:	f000 fc37 	bl	800b7b0 <USBD_CtlSendData>
              break;
 800af42:	e06a      	b.n	800b01a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800af44:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	da11      	bge.n	800af70 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800af4c:	7bbb      	ldrb	r3, [r7, #14]
 800af4e:	f003 020f 	and.w	r2, r3, #15
 800af52:	6879      	ldr	r1, [r7, #4]
 800af54:	4613      	mov	r3, r2
 800af56:	009b      	lsls	r3, r3, #2
 800af58:	4413      	add	r3, r2
 800af5a:	009b      	lsls	r3, r3, #2
 800af5c:	440b      	add	r3, r1
 800af5e:	3324      	adds	r3, #36	; 0x24
 800af60:	881b      	ldrh	r3, [r3, #0]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d117      	bne.n	800af96 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800af66:	6839      	ldr	r1, [r7, #0]
 800af68:	6878      	ldr	r0, [r7, #4]
 800af6a:	f000 fbb0 	bl	800b6ce <USBD_CtlError>
                  break;
 800af6e:	e054      	b.n	800b01a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800af70:	7bbb      	ldrb	r3, [r7, #14]
 800af72:	f003 020f 	and.w	r2, r3, #15
 800af76:	6879      	ldr	r1, [r7, #4]
 800af78:	4613      	mov	r3, r2
 800af7a:	009b      	lsls	r3, r3, #2
 800af7c:	4413      	add	r3, r2
 800af7e:	009b      	lsls	r3, r3, #2
 800af80:	440b      	add	r3, r1
 800af82:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800af86:	881b      	ldrh	r3, [r3, #0]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d104      	bne.n	800af96 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800af8c:	6839      	ldr	r1, [r7, #0]
 800af8e:	6878      	ldr	r0, [r7, #4]
 800af90:	f000 fb9d 	bl	800b6ce <USBD_CtlError>
                  break;
 800af94:	e041      	b.n	800b01a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800af96:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	da0b      	bge.n	800afb6 <USBD_StdEPReq+0x2b2>
 800af9e:	7bbb      	ldrb	r3, [r7, #14]
 800afa0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800afa4:	4613      	mov	r3, r2
 800afa6:	009b      	lsls	r3, r3, #2
 800afa8:	4413      	add	r3, r2
 800afaa:	009b      	lsls	r3, r3, #2
 800afac:	3310      	adds	r3, #16
 800afae:	687a      	ldr	r2, [r7, #4]
 800afb0:	4413      	add	r3, r2
 800afb2:	3304      	adds	r3, #4
 800afb4:	e00b      	b.n	800afce <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800afb6:	7bbb      	ldrb	r3, [r7, #14]
 800afb8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800afbc:	4613      	mov	r3, r2
 800afbe:	009b      	lsls	r3, r3, #2
 800afc0:	4413      	add	r3, r2
 800afc2:	009b      	lsls	r3, r3, #2
 800afc4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800afc8:	687a      	ldr	r2, [r7, #4]
 800afca:	4413      	add	r3, r2
 800afcc:	3304      	adds	r3, #4
 800afce:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800afd0:	7bbb      	ldrb	r3, [r7, #14]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d002      	beq.n	800afdc <USBD_StdEPReq+0x2d8>
 800afd6:	7bbb      	ldrb	r3, [r7, #14]
 800afd8:	2b80      	cmp	r3, #128	; 0x80
 800afda:	d103      	bne.n	800afe4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800afdc:	68bb      	ldr	r3, [r7, #8]
 800afde:	2200      	movs	r2, #0
 800afe0:	601a      	str	r2, [r3, #0]
 800afe2:	e00e      	b.n	800b002 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800afe4:	7bbb      	ldrb	r3, [r7, #14]
 800afe6:	4619      	mov	r1, r3
 800afe8:	6878      	ldr	r0, [r7, #4]
 800afea:	f000 ffab 	bl	800bf44 <USBD_LL_IsStallEP>
 800afee:	4603      	mov	r3, r0
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d003      	beq.n	800affc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800aff4:	68bb      	ldr	r3, [r7, #8]
 800aff6:	2201      	movs	r2, #1
 800aff8:	601a      	str	r2, [r3, #0]
 800affa:	e002      	b.n	800b002 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800affc:	68bb      	ldr	r3, [r7, #8]
 800affe:	2200      	movs	r2, #0
 800b000:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b002:	68bb      	ldr	r3, [r7, #8]
 800b004:	2202      	movs	r2, #2
 800b006:	4619      	mov	r1, r3
 800b008:	6878      	ldr	r0, [r7, #4]
 800b00a:	f000 fbd1 	bl	800b7b0 <USBD_CtlSendData>
              break;
 800b00e:	e004      	b.n	800b01a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b010:	6839      	ldr	r1, [r7, #0]
 800b012:	6878      	ldr	r0, [r7, #4]
 800b014:	f000 fb5b 	bl	800b6ce <USBD_CtlError>
              break;
 800b018:	bf00      	nop
          }
          break;
 800b01a:	e004      	b.n	800b026 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b01c:	6839      	ldr	r1, [r7, #0]
 800b01e:	6878      	ldr	r0, [r7, #4]
 800b020:	f000 fb55 	bl	800b6ce <USBD_CtlError>
          break;
 800b024:	bf00      	nop
      }
      break;
 800b026:	e005      	b.n	800b034 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b028:	6839      	ldr	r1, [r7, #0]
 800b02a:	6878      	ldr	r0, [r7, #4]
 800b02c:	f000 fb4f 	bl	800b6ce <USBD_CtlError>
      break;
 800b030:	e000      	b.n	800b034 <USBD_StdEPReq+0x330>
      break;
 800b032:	bf00      	nop
  }

  return ret;
 800b034:	7bfb      	ldrb	r3, [r7, #15]
}
 800b036:	4618      	mov	r0, r3
 800b038:	3710      	adds	r7, #16
 800b03a:	46bd      	mov	sp, r7
 800b03c:	bd80      	pop	{r7, pc}
	...

0800b040 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b040:	b580      	push	{r7, lr}
 800b042:	b084      	sub	sp, #16
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]
 800b048:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b04a:	2300      	movs	r3, #0
 800b04c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b04e:	2300      	movs	r3, #0
 800b050:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b052:	2300      	movs	r3, #0
 800b054:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b056:	683b      	ldr	r3, [r7, #0]
 800b058:	885b      	ldrh	r3, [r3, #2]
 800b05a:	0a1b      	lsrs	r3, r3, #8
 800b05c:	b29b      	uxth	r3, r3
 800b05e:	3b01      	subs	r3, #1
 800b060:	2b06      	cmp	r3, #6
 800b062:	f200 8128 	bhi.w	800b2b6 <USBD_GetDescriptor+0x276>
 800b066:	a201      	add	r2, pc, #4	; (adr r2, 800b06c <USBD_GetDescriptor+0x2c>)
 800b068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b06c:	0800b089 	.word	0x0800b089
 800b070:	0800b0a1 	.word	0x0800b0a1
 800b074:	0800b0e1 	.word	0x0800b0e1
 800b078:	0800b2b7 	.word	0x0800b2b7
 800b07c:	0800b2b7 	.word	0x0800b2b7
 800b080:	0800b257 	.word	0x0800b257
 800b084:	0800b283 	.word	0x0800b283
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	687a      	ldr	r2, [r7, #4]
 800b092:	7c12      	ldrb	r2, [r2, #16]
 800b094:	f107 0108 	add.w	r1, r7, #8
 800b098:	4610      	mov	r0, r2
 800b09a:	4798      	blx	r3
 800b09c:	60f8      	str	r0, [r7, #12]
      break;
 800b09e:	e112      	b.n	800b2c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	7c1b      	ldrb	r3, [r3, #16]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d10d      	bne.n	800b0c4 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b0ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0b0:	f107 0208 	add.w	r2, r7, #8
 800b0b4:	4610      	mov	r0, r2
 800b0b6:	4798      	blx	r3
 800b0b8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	3301      	adds	r3, #1
 800b0be:	2202      	movs	r2, #2
 800b0c0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b0c2:	e100      	b.n	800b2c6 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b0ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0cc:	f107 0208 	add.w	r2, r7, #8
 800b0d0:	4610      	mov	r0, r2
 800b0d2:	4798      	blx	r3
 800b0d4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	3301      	adds	r3, #1
 800b0da:	2202      	movs	r2, #2
 800b0dc:	701a      	strb	r2, [r3, #0]
      break;
 800b0de:	e0f2      	b.n	800b2c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b0e0:	683b      	ldr	r3, [r7, #0]
 800b0e2:	885b      	ldrh	r3, [r3, #2]
 800b0e4:	b2db      	uxtb	r3, r3
 800b0e6:	2b05      	cmp	r3, #5
 800b0e8:	f200 80ac 	bhi.w	800b244 <USBD_GetDescriptor+0x204>
 800b0ec:	a201      	add	r2, pc, #4	; (adr r2, 800b0f4 <USBD_GetDescriptor+0xb4>)
 800b0ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0f2:	bf00      	nop
 800b0f4:	0800b10d 	.word	0x0800b10d
 800b0f8:	0800b141 	.word	0x0800b141
 800b0fc:	0800b175 	.word	0x0800b175
 800b100:	0800b1a9 	.word	0x0800b1a9
 800b104:	0800b1dd 	.word	0x0800b1dd
 800b108:	0800b211 	.word	0x0800b211
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b112:	685b      	ldr	r3, [r3, #4]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d00b      	beq.n	800b130 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b11e:	685b      	ldr	r3, [r3, #4]
 800b120:	687a      	ldr	r2, [r7, #4]
 800b122:	7c12      	ldrb	r2, [r2, #16]
 800b124:	f107 0108 	add.w	r1, r7, #8
 800b128:	4610      	mov	r0, r2
 800b12a:	4798      	blx	r3
 800b12c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b12e:	e091      	b.n	800b254 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b130:	6839      	ldr	r1, [r7, #0]
 800b132:	6878      	ldr	r0, [r7, #4]
 800b134:	f000 facb 	bl	800b6ce <USBD_CtlError>
            err++;
 800b138:	7afb      	ldrb	r3, [r7, #11]
 800b13a:	3301      	adds	r3, #1
 800b13c:	72fb      	strb	r3, [r7, #11]
          break;
 800b13e:	e089      	b.n	800b254 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b146:	689b      	ldr	r3, [r3, #8]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d00b      	beq.n	800b164 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b152:	689b      	ldr	r3, [r3, #8]
 800b154:	687a      	ldr	r2, [r7, #4]
 800b156:	7c12      	ldrb	r2, [r2, #16]
 800b158:	f107 0108 	add.w	r1, r7, #8
 800b15c:	4610      	mov	r0, r2
 800b15e:	4798      	blx	r3
 800b160:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b162:	e077      	b.n	800b254 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b164:	6839      	ldr	r1, [r7, #0]
 800b166:	6878      	ldr	r0, [r7, #4]
 800b168:	f000 fab1 	bl	800b6ce <USBD_CtlError>
            err++;
 800b16c:	7afb      	ldrb	r3, [r7, #11]
 800b16e:	3301      	adds	r3, #1
 800b170:	72fb      	strb	r3, [r7, #11]
          break;
 800b172:	e06f      	b.n	800b254 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b17a:	68db      	ldr	r3, [r3, #12]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d00b      	beq.n	800b198 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b186:	68db      	ldr	r3, [r3, #12]
 800b188:	687a      	ldr	r2, [r7, #4]
 800b18a:	7c12      	ldrb	r2, [r2, #16]
 800b18c:	f107 0108 	add.w	r1, r7, #8
 800b190:	4610      	mov	r0, r2
 800b192:	4798      	blx	r3
 800b194:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b196:	e05d      	b.n	800b254 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b198:	6839      	ldr	r1, [r7, #0]
 800b19a:	6878      	ldr	r0, [r7, #4]
 800b19c:	f000 fa97 	bl	800b6ce <USBD_CtlError>
            err++;
 800b1a0:	7afb      	ldrb	r3, [r7, #11]
 800b1a2:	3301      	adds	r3, #1
 800b1a4:	72fb      	strb	r3, [r7, #11]
          break;
 800b1a6:	e055      	b.n	800b254 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1ae:	691b      	ldr	r3, [r3, #16]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d00b      	beq.n	800b1cc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1ba:	691b      	ldr	r3, [r3, #16]
 800b1bc:	687a      	ldr	r2, [r7, #4]
 800b1be:	7c12      	ldrb	r2, [r2, #16]
 800b1c0:	f107 0108 	add.w	r1, r7, #8
 800b1c4:	4610      	mov	r0, r2
 800b1c6:	4798      	blx	r3
 800b1c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b1ca:	e043      	b.n	800b254 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b1cc:	6839      	ldr	r1, [r7, #0]
 800b1ce:	6878      	ldr	r0, [r7, #4]
 800b1d0:	f000 fa7d 	bl	800b6ce <USBD_CtlError>
            err++;
 800b1d4:	7afb      	ldrb	r3, [r7, #11]
 800b1d6:	3301      	adds	r3, #1
 800b1d8:	72fb      	strb	r3, [r7, #11]
          break;
 800b1da:	e03b      	b.n	800b254 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1e2:	695b      	ldr	r3, [r3, #20]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d00b      	beq.n	800b200 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1ee:	695b      	ldr	r3, [r3, #20]
 800b1f0:	687a      	ldr	r2, [r7, #4]
 800b1f2:	7c12      	ldrb	r2, [r2, #16]
 800b1f4:	f107 0108 	add.w	r1, r7, #8
 800b1f8:	4610      	mov	r0, r2
 800b1fa:	4798      	blx	r3
 800b1fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b1fe:	e029      	b.n	800b254 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b200:	6839      	ldr	r1, [r7, #0]
 800b202:	6878      	ldr	r0, [r7, #4]
 800b204:	f000 fa63 	bl	800b6ce <USBD_CtlError>
            err++;
 800b208:	7afb      	ldrb	r3, [r7, #11]
 800b20a:	3301      	adds	r3, #1
 800b20c:	72fb      	strb	r3, [r7, #11]
          break;
 800b20e:	e021      	b.n	800b254 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b216:	699b      	ldr	r3, [r3, #24]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d00b      	beq.n	800b234 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b222:	699b      	ldr	r3, [r3, #24]
 800b224:	687a      	ldr	r2, [r7, #4]
 800b226:	7c12      	ldrb	r2, [r2, #16]
 800b228:	f107 0108 	add.w	r1, r7, #8
 800b22c:	4610      	mov	r0, r2
 800b22e:	4798      	blx	r3
 800b230:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b232:	e00f      	b.n	800b254 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b234:	6839      	ldr	r1, [r7, #0]
 800b236:	6878      	ldr	r0, [r7, #4]
 800b238:	f000 fa49 	bl	800b6ce <USBD_CtlError>
            err++;
 800b23c:	7afb      	ldrb	r3, [r7, #11]
 800b23e:	3301      	adds	r3, #1
 800b240:	72fb      	strb	r3, [r7, #11]
          break;
 800b242:	e007      	b.n	800b254 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b244:	6839      	ldr	r1, [r7, #0]
 800b246:	6878      	ldr	r0, [r7, #4]
 800b248:	f000 fa41 	bl	800b6ce <USBD_CtlError>
          err++;
 800b24c:	7afb      	ldrb	r3, [r7, #11]
 800b24e:	3301      	adds	r3, #1
 800b250:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b252:	bf00      	nop
      }
      break;
 800b254:	e037      	b.n	800b2c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	7c1b      	ldrb	r3, [r3, #16]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d109      	bne.n	800b272 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b266:	f107 0208 	add.w	r2, r7, #8
 800b26a:	4610      	mov	r0, r2
 800b26c:	4798      	blx	r3
 800b26e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b270:	e029      	b.n	800b2c6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b272:	6839      	ldr	r1, [r7, #0]
 800b274:	6878      	ldr	r0, [r7, #4]
 800b276:	f000 fa2a 	bl	800b6ce <USBD_CtlError>
        err++;
 800b27a:	7afb      	ldrb	r3, [r7, #11]
 800b27c:	3301      	adds	r3, #1
 800b27e:	72fb      	strb	r3, [r7, #11]
      break;
 800b280:	e021      	b.n	800b2c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	7c1b      	ldrb	r3, [r3, #16]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d10d      	bne.n	800b2a6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b292:	f107 0208 	add.w	r2, r7, #8
 800b296:	4610      	mov	r0, r2
 800b298:	4798      	blx	r3
 800b29a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	3301      	adds	r3, #1
 800b2a0:	2207      	movs	r2, #7
 800b2a2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b2a4:	e00f      	b.n	800b2c6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b2a6:	6839      	ldr	r1, [r7, #0]
 800b2a8:	6878      	ldr	r0, [r7, #4]
 800b2aa:	f000 fa10 	bl	800b6ce <USBD_CtlError>
        err++;
 800b2ae:	7afb      	ldrb	r3, [r7, #11]
 800b2b0:	3301      	adds	r3, #1
 800b2b2:	72fb      	strb	r3, [r7, #11]
      break;
 800b2b4:	e007      	b.n	800b2c6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b2b6:	6839      	ldr	r1, [r7, #0]
 800b2b8:	6878      	ldr	r0, [r7, #4]
 800b2ba:	f000 fa08 	bl	800b6ce <USBD_CtlError>
      err++;
 800b2be:	7afb      	ldrb	r3, [r7, #11]
 800b2c0:	3301      	adds	r3, #1
 800b2c2:	72fb      	strb	r3, [r7, #11]
      break;
 800b2c4:	bf00      	nop
  }

  if (err != 0U)
 800b2c6:	7afb      	ldrb	r3, [r7, #11]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d11e      	bne.n	800b30a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b2cc:	683b      	ldr	r3, [r7, #0]
 800b2ce:	88db      	ldrh	r3, [r3, #6]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d016      	beq.n	800b302 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b2d4:	893b      	ldrh	r3, [r7, #8]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d00e      	beq.n	800b2f8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b2da:	683b      	ldr	r3, [r7, #0]
 800b2dc:	88da      	ldrh	r2, [r3, #6]
 800b2de:	893b      	ldrh	r3, [r7, #8]
 800b2e0:	4293      	cmp	r3, r2
 800b2e2:	bf28      	it	cs
 800b2e4:	4613      	movcs	r3, r2
 800b2e6:	b29b      	uxth	r3, r3
 800b2e8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b2ea:	893b      	ldrh	r3, [r7, #8]
 800b2ec:	461a      	mov	r2, r3
 800b2ee:	68f9      	ldr	r1, [r7, #12]
 800b2f0:	6878      	ldr	r0, [r7, #4]
 800b2f2:	f000 fa5d 	bl	800b7b0 <USBD_CtlSendData>
 800b2f6:	e009      	b.n	800b30c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b2f8:	6839      	ldr	r1, [r7, #0]
 800b2fa:	6878      	ldr	r0, [r7, #4]
 800b2fc:	f000 f9e7 	bl	800b6ce <USBD_CtlError>
 800b300:	e004      	b.n	800b30c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b302:	6878      	ldr	r0, [r7, #4]
 800b304:	f000 fa91 	bl	800b82a <USBD_CtlSendStatus>
 800b308:	e000      	b.n	800b30c <USBD_GetDescriptor+0x2cc>
    return;
 800b30a:	bf00      	nop
  }
}
 800b30c:	3710      	adds	r7, #16
 800b30e:	46bd      	mov	sp, r7
 800b310:	bd80      	pop	{r7, pc}
 800b312:	bf00      	nop

0800b314 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b314:	b580      	push	{r7, lr}
 800b316:	b084      	sub	sp, #16
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]
 800b31c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b31e:	683b      	ldr	r3, [r7, #0]
 800b320:	889b      	ldrh	r3, [r3, #4]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d131      	bne.n	800b38a <USBD_SetAddress+0x76>
 800b326:	683b      	ldr	r3, [r7, #0]
 800b328:	88db      	ldrh	r3, [r3, #6]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d12d      	bne.n	800b38a <USBD_SetAddress+0x76>
 800b32e:	683b      	ldr	r3, [r7, #0]
 800b330:	885b      	ldrh	r3, [r3, #2]
 800b332:	2b7f      	cmp	r3, #127	; 0x7f
 800b334:	d829      	bhi.n	800b38a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b336:	683b      	ldr	r3, [r7, #0]
 800b338:	885b      	ldrh	r3, [r3, #2]
 800b33a:	b2db      	uxtb	r3, r3
 800b33c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b340:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b348:	b2db      	uxtb	r3, r3
 800b34a:	2b03      	cmp	r3, #3
 800b34c:	d104      	bne.n	800b358 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b34e:	6839      	ldr	r1, [r7, #0]
 800b350:	6878      	ldr	r0, [r7, #4]
 800b352:	f000 f9bc 	bl	800b6ce <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b356:	e01d      	b.n	800b394 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	7bfa      	ldrb	r2, [r7, #15]
 800b35c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b360:	7bfb      	ldrb	r3, [r7, #15]
 800b362:	4619      	mov	r1, r3
 800b364:	6878      	ldr	r0, [r7, #4]
 800b366:	f000 fe19 	bl	800bf9c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b36a:	6878      	ldr	r0, [r7, #4]
 800b36c:	f000 fa5d 	bl	800b82a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b370:	7bfb      	ldrb	r3, [r7, #15]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d004      	beq.n	800b380 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	2202      	movs	r2, #2
 800b37a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b37e:	e009      	b.n	800b394 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	2201      	movs	r2, #1
 800b384:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b388:	e004      	b.n	800b394 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b38a:	6839      	ldr	r1, [r7, #0]
 800b38c:	6878      	ldr	r0, [r7, #4]
 800b38e:	f000 f99e 	bl	800b6ce <USBD_CtlError>
  }
}
 800b392:	bf00      	nop
 800b394:	bf00      	nop
 800b396:	3710      	adds	r7, #16
 800b398:	46bd      	mov	sp, r7
 800b39a:	bd80      	pop	{r7, pc}

0800b39c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b39c:	b580      	push	{r7, lr}
 800b39e:	b084      	sub	sp, #16
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	6078      	str	r0, [r7, #4]
 800b3a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b3aa:	683b      	ldr	r3, [r7, #0]
 800b3ac:	885b      	ldrh	r3, [r3, #2]
 800b3ae:	b2da      	uxtb	r2, r3
 800b3b0:	4b4e      	ldr	r3, [pc, #312]	; (800b4ec <USBD_SetConfig+0x150>)
 800b3b2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b3b4:	4b4d      	ldr	r3, [pc, #308]	; (800b4ec <USBD_SetConfig+0x150>)
 800b3b6:	781b      	ldrb	r3, [r3, #0]
 800b3b8:	2b01      	cmp	r3, #1
 800b3ba:	d905      	bls.n	800b3c8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b3bc:	6839      	ldr	r1, [r7, #0]
 800b3be:	6878      	ldr	r0, [r7, #4]
 800b3c0:	f000 f985 	bl	800b6ce <USBD_CtlError>
    return USBD_FAIL;
 800b3c4:	2303      	movs	r3, #3
 800b3c6:	e08c      	b.n	800b4e2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b3ce:	b2db      	uxtb	r3, r3
 800b3d0:	2b02      	cmp	r3, #2
 800b3d2:	d002      	beq.n	800b3da <USBD_SetConfig+0x3e>
 800b3d4:	2b03      	cmp	r3, #3
 800b3d6:	d029      	beq.n	800b42c <USBD_SetConfig+0x90>
 800b3d8:	e075      	b.n	800b4c6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b3da:	4b44      	ldr	r3, [pc, #272]	; (800b4ec <USBD_SetConfig+0x150>)
 800b3dc:	781b      	ldrb	r3, [r3, #0]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d020      	beq.n	800b424 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b3e2:	4b42      	ldr	r3, [pc, #264]	; (800b4ec <USBD_SetConfig+0x150>)
 800b3e4:	781b      	ldrb	r3, [r3, #0]
 800b3e6:	461a      	mov	r2, r3
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b3ec:	4b3f      	ldr	r3, [pc, #252]	; (800b4ec <USBD_SetConfig+0x150>)
 800b3ee:	781b      	ldrb	r3, [r3, #0]
 800b3f0:	4619      	mov	r1, r3
 800b3f2:	6878      	ldr	r0, [r7, #4]
 800b3f4:	f7fe ffe7 	bl	800a3c6 <USBD_SetClassConfig>
 800b3f8:	4603      	mov	r3, r0
 800b3fa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b3fc:	7bfb      	ldrb	r3, [r7, #15]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d008      	beq.n	800b414 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b402:	6839      	ldr	r1, [r7, #0]
 800b404:	6878      	ldr	r0, [r7, #4]
 800b406:	f000 f962 	bl	800b6ce <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	2202      	movs	r2, #2
 800b40e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b412:	e065      	b.n	800b4e0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b414:	6878      	ldr	r0, [r7, #4]
 800b416:	f000 fa08 	bl	800b82a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	2203      	movs	r2, #3
 800b41e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b422:	e05d      	b.n	800b4e0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b424:	6878      	ldr	r0, [r7, #4]
 800b426:	f000 fa00 	bl	800b82a <USBD_CtlSendStatus>
      break;
 800b42a:	e059      	b.n	800b4e0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b42c:	4b2f      	ldr	r3, [pc, #188]	; (800b4ec <USBD_SetConfig+0x150>)
 800b42e:	781b      	ldrb	r3, [r3, #0]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d112      	bne.n	800b45a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	2202      	movs	r2, #2
 800b438:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b43c:	4b2b      	ldr	r3, [pc, #172]	; (800b4ec <USBD_SetConfig+0x150>)
 800b43e:	781b      	ldrb	r3, [r3, #0]
 800b440:	461a      	mov	r2, r3
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b446:	4b29      	ldr	r3, [pc, #164]	; (800b4ec <USBD_SetConfig+0x150>)
 800b448:	781b      	ldrb	r3, [r3, #0]
 800b44a:	4619      	mov	r1, r3
 800b44c:	6878      	ldr	r0, [r7, #4]
 800b44e:	f7fe ffd6 	bl	800a3fe <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b452:	6878      	ldr	r0, [r7, #4]
 800b454:	f000 f9e9 	bl	800b82a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b458:	e042      	b.n	800b4e0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b45a:	4b24      	ldr	r3, [pc, #144]	; (800b4ec <USBD_SetConfig+0x150>)
 800b45c:	781b      	ldrb	r3, [r3, #0]
 800b45e:	461a      	mov	r2, r3
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	685b      	ldr	r3, [r3, #4]
 800b464:	429a      	cmp	r2, r3
 800b466:	d02a      	beq.n	800b4be <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	685b      	ldr	r3, [r3, #4]
 800b46c:	b2db      	uxtb	r3, r3
 800b46e:	4619      	mov	r1, r3
 800b470:	6878      	ldr	r0, [r7, #4]
 800b472:	f7fe ffc4 	bl	800a3fe <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b476:	4b1d      	ldr	r3, [pc, #116]	; (800b4ec <USBD_SetConfig+0x150>)
 800b478:	781b      	ldrb	r3, [r3, #0]
 800b47a:	461a      	mov	r2, r3
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b480:	4b1a      	ldr	r3, [pc, #104]	; (800b4ec <USBD_SetConfig+0x150>)
 800b482:	781b      	ldrb	r3, [r3, #0]
 800b484:	4619      	mov	r1, r3
 800b486:	6878      	ldr	r0, [r7, #4]
 800b488:	f7fe ff9d 	bl	800a3c6 <USBD_SetClassConfig>
 800b48c:	4603      	mov	r3, r0
 800b48e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b490:	7bfb      	ldrb	r3, [r7, #15]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d00f      	beq.n	800b4b6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b496:	6839      	ldr	r1, [r7, #0]
 800b498:	6878      	ldr	r0, [r7, #4]
 800b49a:	f000 f918 	bl	800b6ce <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	685b      	ldr	r3, [r3, #4]
 800b4a2:	b2db      	uxtb	r3, r3
 800b4a4:	4619      	mov	r1, r3
 800b4a6:	6878      	ldr	r0, [r7, #4]
 800b4a8:	f7fe ffa9 	bl	800a3fe <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	2202      	movs	r2, #2
 800b4b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b4b4:	e014      	b.n	800b4e0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b4b6:	6878      	ldr	r0, [r7, #4]
 800b4b8:	f000 f9b7 	bl	800b82a <USBD_CtlSendStatus>
      break;
 800b4bc:	e010      	b.n	800b4e0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b4be:	6878      	ldr	r0, [r7, #4]
 800b4c0:	f000 f9b3 	bl	800b82a <USBD_CtlSendStatus>
      break;
 800b4c4:	e00c      	b.n	800b4e0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b4c6:	6839      	ldr	r1, [r7, #0]
 800b4c8:	6878      	ldr	r0, [r7, #4]
 800b4ca:	f000 f900 	bl	800b6ce <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b4ce:	4b07      	ldr	r3, [pc, #28]	; (800b4ec <USBD_SetConfig+0x150>)
 800b4d0:	781b      	ldrb	r3, [r3, #0]
 800b4d2:	4619      	mov	r1, r3
 800b4d4:	6878      	ldr	r0, [r7, #4]
 800b4d6:	f7fe ff92 	bl	800a3fe <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b4da:	2303      	movs	r3, #3
 800b4dc:	73fb      	strb	r3, [r7, #15]
      break;
 800b4de:	bf00      	nop
  }

  return ret;
 800b4e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	3710      	adds	r7, #16
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	bd80      	pop	{r7, pc}
 800b4ea:	bf00      	nop
 800b4ec:	20000414 	.word	0x20000414

0800b4f0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b082      	sub	sp, #8
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
 800b4f8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	88db      	ldrh	r3, [r3, #6]
 800b4fe:	2b01      	cmp	r3, #1
 800b500:	d004      	beq.n	800b50c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b502:	6839      	ldr	r1, [r7, #0]
 800b504:	6878      	ldr	r0, [r7, #4]
 800b506:	f000 f8e2 	bl	800b6ce <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b50a:	e023      	b.n	800b554 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b512:	b2db      	uxtb	r3, r3
 800b514:	2b02      	cmp	r3, #2
 800b516:	dc02      	bgt.n	800b51e <USBD_GetConfig+0x2e>
 800b518:	2b00      	cmp	r3, #0
 800b51a:	dc03      	bgt.n	800b524 <USBD_GetConfig+0x34>
 800b51c:	e015      	b.n	800b54a <USBD_GetConfig+0x5a>
 800b51e:	2b03      	cmp	r3, #3
 800b520:	d00b      	beq.n	800b53a <USBD_GetConfig+0x4a>
 800b522:	e012      	b.n	800b54a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	2200      	movs	r2, #0
 800b528:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	3308      	adds	r3, #8
 800b52e:	2201      	movs	r2, #1
 800b530:	4619      	mov	r1, r3
 800b532:	6878      	ldr	r0, [r7, #4]
 800b534:	f000 f93c 	bl	800b7b0 <USBD_CtlSendData>
        break;
 800b538:	e00c      	b.n	800b554 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	3304      	adds	r3, #4
 800b53e:	2201      	movs	r2, #1
 800b540:	4619      	mov	r1, r3
 800b542:	6878      	ldr	r0, [r7, #4]
 800b544:	f000 f934 	bl	800b7b0 <USBD_CtlSendData>
        break;
 800b548:	e004      	b.n	800b554 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b54a:	6839      	ldr	r1, [r7, #0]
 800b54c:	6878      	ldr	r0, [r7, #4]
 800b54e:	f000 f8be 	bl	800b6ce <USBD_CtlError>
        break;
 800b552:	bf00      	nop
}
 800b554:	bf00      	nop
 800b556:	3708      	adds	r7, #8
 800b558:	46bd      	mov	sp, r7
 800b55a:	bd80      	pop	{r7, pc}

0800b55c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b082      	sub	sp, #8
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
 800b564:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b56c:	b2db      	uxtb	r3, r3
 800b56e:	3b01      	subs	r3, #1
 800b570:	2b02      	cmp	r3, #2
 800b572:	d81e      	bhi.n	800b5b2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b574:	683b      	ldr	r3, [r7, #0]
 800b576:	88db      	ldrh	r3, [r3, #6]
 800b578:	2b02      	cmp	r3, #2
 800b57a:	d004      	beq.n	800b586 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b57c:	6839      	ldr	r1, [r7, #0]
 800b57e:	6878      	ldr	r0, [r7, #4]
 800b580:	f000 f8a5 	bl	800b6ce <USBD_CtlError>
        break;
 800b584:	e01a      	b.n	800b5bc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
#else
      pdev->dev_config_status = 0U;
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	2200      	movs	r2, #0
 800b58a:	60da      	str	r2, [r3, #12]
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b592:	2b00      	cmp	r3, #0
 800b594:	d005      	beq.n	800b5a2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	68db      	ldr	r3, [r3, #12]
 800b59a:	f043 0202 	orr.w	r2, r3, #2
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	330c      	adds	r3, #12
 800b5a6:	2202      	movs	r2, #2
 800b5a8:	4619      	mov	r1, r3
 800b5aa:	6878      	ldr	r0, [r7, #4]
 800b5ac:	f000 f900 	bl	800b7b0 <USBD_CtlSendData>
      break;
 800b5b0:	e004      	b.n	800b5bc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b5b2:	6839      	ldr	r1, [r7, #0]
 800b5b4:	6878      	ldr	r0, [r7, #4]
 800b5b6:	f000 f88a 	bl	800b6ce <USBD_CtlError>
      break;
 800b5ba:	bf00      	nop
  }
}
 800b5bc:	bf00      	nop
 800b5be:	3708      	adds	r7, #8
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	bd80      	pop	{r7, pc}

0800b5c4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	b082      	sub	sp, #8
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	6078      	str	r0, [r7, #4]
 800b5cc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b5ce:	683b      	ldr	r3, [r7, #0]
 800b5d0:	885b      	ldrh	r3, [r3, #2]
 800b5d2:	2b01      	cmp	r3, #1
 800b5d4:	d107      	bne.n	800b5e6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	2201      	movs	r2, #1
 800b5da:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b5de:	6878      	ldr	r0, [r7, #4]
 800b5e0:	f000 f923 	bl	800b82a <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b5e4:	e013      	b.n	800b60e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b5e6:	683b      	ldr	r3, [r7, #0]
 800b5e8:	885b      	ldrh	r3, [r3, #2]
 800b5ea:	2b02      	cmp	r3, #2
 800b5ec:	d10b      	bne.n	800b606 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800b5ee:	683b      	ldr	r3, [r7, #0]
 800b5f0:	889b      	ldrh	r3, [r3, #4]
 800b5f2:	0a1b      	lsrs	r3, r3, #8
 800b5f4:	b29b      	uxth	r3, r3
 800b5f6:	b2da      	uxtb	r2, r3
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b5fe:	6878      	ldr	r0, [r7, #4]
 800b600:	f000 f913 	bl	800b82a <USBD_CtlSendStatus>
}
 800b604:	e003      	b.n	800b60e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b606:	6839      	ldr	r1, [r7, #0]
 800b608:	6878      	ldr	r0, [r7, #4]
 800b60a:	f000 f860 	bl	800b6ce <USBD_CtlError>
}
 800b60e:	bf00      	nop
 800b610:	3708      	adds	r7, #8
 800b612:	46bd      	mov	sp, r7
 800b614:	bd80      	pop	{r7, pc}

0800b616 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b616:	b580      	push	{r7, lr}
 800b618:	b082      	sub	sp, #8
 800b61a:	af00      	add	r7, sp, #0
 800b61c:	6078      	str	r0, [r7, #4]
 800b61e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b626:	b2db      	uxtb	r3, r3
 800b628:	3b01      	subs	r3, #1
 800b62a:	2b02      	cmp	r3, #2
 800b62c:	d80b      	bhi.n	800b646 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b62e:	683b      	ldr	r3, [r7, #0]
 800b630:	885b      	ldrh	r3, [r3, #2]
 800b632:	2b01      	cmp	r3, #1
 800b634:	d10c      	bne.n	800b650 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	2200      	movs	r2, #0
 800b63a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b63e:	6878      	ldr	r0, [r7, #4]
 800b640:	f000 f8f3 	bl	800b82a <USBD_CtlSendStatus>
      }
      break;
 800b644:	e004      	b.n	800b650 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b646:	6839      	ldr	r1, [r7, #0]
 800b648:	6878      	ldr	r0, [r7, #4]
 800b64a:	f000 f840 	bl	800b6ce <USBD_CtlError>
      break;
 800b64e:	e000      	b.n	800b652 <USBD_ClrFeature+0x3c>
      break;
 800b650:	bf00      	nop
  }
}
 800b652:	bf00      	nop
 800b654:	3708      	adds	r7, #8
 800b656:	46bd      	mov	sp, r7
 800b658:	bd80      	pop	{r7, pc}

0800b65a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b65a:	b580      	push	{r7, lr}
 800b65c:	b084      	sub	sp, #16
 800b65e:	af00      	add	r7, sp, #0
 800b660:	6078      	str	r0, [r7, #4]
 800b662:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b664:	683b      	ldr	r3, [r7, #0]
 800b666:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	781a      	ldrb	r2, [r3, #0]
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	3301      	adds	r3, #1
 800b674:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	781a      	ldrb	r2, [r3, #0]
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	3301      	adds	r3, #1
 800b682:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b684:	68f8      	ldr	r0, [r7, #12]
 800b686:	f7ff fa41 	bl	800ab0c <SWAPBYTE>
 800b68a:	4603      	mov	r3, r0
 800b68c:	461a      	mov	r2, r3
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	3301      	adds	r3, #1
 800b696:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	3301      	adds	r3, #1
 800b69c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b69e:	68f8      	ldr	r0, [r7, #12]
 800b6a0:	f7ff fa34 	bl	800ab0c <SWAPBYTE>
 800b6a4:	4603      	mov	r3, r0
 800b6a6:	461a      	mov	r2, r3
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	3301      	adds	r3, #1
 800b6b0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	3301      	adds	r3, #1
 800b6b6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b6b8:	68f8      	ldr	r0, [r7, #12]
 800b6ba:	f7ff fa27 	bl	800ab0c <SWAPBYTE>
 800b6be:	4603      	mov	r3, r0
 800b6c0:	461a      	mov	r2, r3
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	80da      	strh	r2, [r3, #6]
}
 800b6c6:	bf00      	nop
 800b6c8:	3710      	adds	r7, #16
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	bd80      	pop	{r7, pc}

0800b6ce <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6ce:	b580      	push	{r7, lr}
 800b6d0:	b082      	sub	sp, #8
 800b6d2:	af00      	add	r7, sp, #0
 800b6d4:	6078      	str	r0, [r7, #4]
 800b6d6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b6d8:	2180      	movs	r1, #128	; 0x80
 800b6da:	6878      	ldr	r0, [r7, #4]
 800b6dc:	f000 fbf4 	bl	800bec8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b6e0:	2100      	movs	r1, #0
 800b6e2:	6878      	ldr	r0, [r7, #4]
 800b6e4:	f000 fbf0 	bl	800bec8 <USBD_LL_StallEP>
}
 800b6e8:	bf00      	nop
 800b6ea:	3708      	adds	r7, #8
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	bd80      	pop	{r7, pc}

0800b6f0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b086      	sub	sp, #24
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	60f8      	str	r0, [r7, #12]
 800b6f8:	60b9      	str	r1, [r7, #8]
 800b6fa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d036      	beq.n	800b774 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b70a:	6938      	ldr	r0, [r7, #16]
 800b70c:	f000 f836 	bl	800b77c <USBD_GetLen>
 800b710:	4603      	mov	r3, r0
 800b712:	3301      	adds	r3, #1
 800b714:	b29b      	uxth	r3, r3
 800b716:	005b      	lsls	r3, r3, #1
 800b718:	b29a      	uxth	r2, r3
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b71e:	7dfb      	ldrb	r3, [r7, #23]
 800b720:	68ba      	ldr	r2, [r7, #8]
 800b722:	4413      	add	r3, r2
 800b724:	687a      	ldr	r2, [r7, #4]
 800b726:	7812      	ldrb	r2, [r2, #0]
 800b728:	701a      	strb	r2, [r3, #0]
  idx++;
 800b72a:	7dfb      	ldrb	r3, [r7, #23]
 800b72c:	3301      	adds	r3, #1
 800b72e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b730:	7dfb      	ldrb	r3, [r7, #23]
 800b732:	68ba      	ldr	r2, [r7, #8]
 800b734:	4413      	add	r3, r2
 800b736:	2203      	movs	r2, #3
 800b738:	701a      	strb	r2, [r3, #0]
  idx++;
 800b73a:	7dfb      	ldrb	r3, [r7, #23]
 800b73c:	3301      	adds	r3, #1
 800b73e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b740:	e013      	b.n	800b76a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b742:	7dfb      	ldrb	r3, [r7, #23]
 800b744:	68ba      	ldr	r2, [r7, #8]
 800b746:	4413      	add	r3, r2
 800b748:	693a      	ldr	r2, [r7, #16]
 800b74a:	7812      	ldrb	r2, [r2, #0]
 800b74c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b74e:	693b      	ldr	r3, [r7, #16]
 800b750:	3301      	adds	r3, #1
 800b752:	613b      	str	r3, [r7, #16]
    idx++;
 800b754:	7dfb      	ldrb	r3, [r7, #23]
 800b756:	3301      	adds	r3, #1
 800b758:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b75a:	7dfb      	ldrb	r3, [r7, #23]
 800b75c:	68ba      	ldr	r2, [r7, #8]
 800b75e:	4413      	add	r3, r2
 800b760:	2200      	movs	r2, #0
 800b762:	701a      	strb	r2, [r3, #0]
    idx++;
 800b764:	7dfb      	ldrb	r3, [r7, #23]
 800b766:	3301      	adds	r3, #1
 800b768:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b76a:	693b      	ldr	r3, [r7, #16]
 800b76c:	781b      	ldrb	r3, [r3, #0]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d1e7      	bne.n	800b742 <USBD_GetString+0x52>
 800b772:	e000      	b.n	800b776 <USBD_GetString+0x86>
    return;
 800b774:	bf00      	nop
  }
}
 800b776:	3718      	adds	r7, #24
 800b778:	46bd      	mov	sp, r7
 800b77a:	bd80      	pop	{r7, pc}

0800b77c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b77c:	b480      	push	{r7}
 800b77e:	b085      	sub	sp, #20
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b784:	2300      	movs	r3, #0
 800b786:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b78c:	e005      	b.n	800b79a <USBD_GetLen+0x1e>
  {
    len++;
 800b78e:	7bfb      	ldrb	r3, [r7, #15]
 800b790:	3301      	adds	r3, #1
 800b792:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b794:	68bb      	ldr	r3, [r7, #8]
 800b796:	3301      	adds	r3, #1
 800b798:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b79a:	68bb      	ldr	r3, [r7, #8]
 800b79c:	781b      	ldrb	r3, [r3, #0]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d1f5      	bne.n	800b78e <USBD_GetLen+0x12>
  }

  return len;
 800b7a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	3714      	adds	r7, #20
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ae:	4770      	bx	lr

0800b7b0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b084      	sub	sp, #16
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	60f8      	str	r0, [r7, #12]
 800b7b8:	60b9      	str	r1, [r7, #8]
 800b7ba:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	2202      	movs	r2, #2
 800b7c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	687a      	ldr	r2, [r7, #4]
 800b7c8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	687a      	ldr	r2, [r7, #4]
 800b7ce:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	68ba      	ldr	r2, [r7, #8]
 800b7d4:	2100      	movs	r1, #0
 800b7d6:	68f8      	ldr	r0, [r7, #12]
 800b7d8:	f000 fbff 	bl	800bfda <USBD_LL_Transmit>

  return USBD_OK;
 800b7dc:	2300      	movs	r3, #0
}
 800b7de:	4618      	mov	r0, r3
 800b7e0:	3710      	adds	r7, #16
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	bd80      	pop	{r7, pc}

0800b7e6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b7e6:	b580      	push	{r7, lr}
 800b7e8:	b084      	sub	sp, #16
 800b7ea:	af00      	add	r7, sp, #0
 800b7ec:	60f8      	str	r0, [r7, #12]
 800b7ee:	60b9      	str	r1, [r7, #8]
 800b7f0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	68ba      	ldr	r2, [r7, #8]
 800b7f6:	2100      	movs	r1, #0
 800b7f8:	68f8      	ldr	r0, [r7, #12]
 800b7fa:	f000 fbee 	bl	800bfda <USBD_LL_Transmit>

  return USBD_OK;
 800b7fe:	2300      	movs	r3, #0
}
 800b800:	4618      	mov	r0, r3
 800b802:	3710      	adds	r7, #16
 800b804:	46bd      	mov	sp, r7
 800b806:	bd80      	pop	{r7, pc}

0800b808 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b084      	sub	sp, #16
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	60f8      	str	r0, [r7, #12]
 800b810:	60b9      	str	r1, [r7, #8]
 800b812:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	68ba      	ldr	r2, [r7, #8]
 800b818:	2100      	movs	r1, #0
 800b81a:	68f8      	ldr	r0, [r7, #12]
 800b81c:	f000 fbfe 	bl	800c01c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b820:	2300      	movs	r3, #0
}
 800b822:	4618      	mov	r0, r3
 800b824:	3710      	adds	r7, #16
 800b826:	46bd      	mov	sp, r7
 800b828:	bd80      	pop	{r7, pc}

0800b82a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b82a:	b580      	push	{r7, lr}
 800b82c:	b082      	sub	sp, #8
 800b82e:	af00      	add	r7, sp, #0
 800b830:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	2204      	movs	r2, #4
 800b836:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b83a:	2300      	movs	r3, #0
 800b83c:	2200      	movs	r2, #0
 800b83e:	2100      	movs	r1, #0
 800b840:	6878      	ldr	r0, [r7, #4]
 800b842:	f000 fbca 	bl	800bfda <USBD_LL_Transmit>

  return USBD_OK;
 800b846:	2300      	movs	r3, #0
}
 800b848:	4618      	mov	r0, r3
 800b84a:	3708      	adds	r7, #8
 800b84c:	46bd      	mov	sp, r7
 800b84e:	bd80      	pop	{r7, pc}

0800b850 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b850:	b580      	push	{r7, lr}
 800b852:	b082      	sub	sp, #8
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	2205      	movs	r2, #5
 800b85c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b860:	2300      	movs	r3, #0
 800b862:	2200      	movs	r2, #0
 800b864:	2100      	movs	r1, #0
 800b866:	6878      	ldr	r0, [r7, #4]
 800b868:	f000 fbd8 	bl	800c01c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b86c:	2300      	movs	r3, #0
}
 800b86e:	4618      	mov	r0, r3
 800b870:	3708      	adds	r7, #8
 800b872:	46bd      	mov	sp, r7
 800b874:	bd80      	pop	{r7, pc}
	...

0800b878 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b878:	b580      	push	{r7, lr}
 800b87a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b87c:	2200      	movs	r2, #0
 800b87e:	490e      	ldr	r1, [pc, #56]	; (800b8b8 <MX_USB_DEVICE_Init+0x40>)
 800b880:	480e      	ldr	r0, [pc, #56]	; (800b8bc <MX_USB_DEVICE_Init+0x44>)
 800b882:	f7fe fd07 	bl	800a294 <USBD_Init>
 800b886:	4603      	mov	r3, r0
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d001      	beq.n	800b890 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b88c:	f7f6 f9b2 	bl	8001bf4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800b890:	490b      	ldr	r1, [pc, #44]	; (800b8c0 <MX_USB_DEVICE_Init+0x48>)
 800b892:	480a      	ldr	r0, [pc, #40]	; (800b8bc <MX_USB_DEVICE_Init+0x44>)
 800b894:	f7fe fd3c 	bl	800a310 <USBD_RegisterClass>
 800b898:	4603      	mov	r3, r0
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d001      	beq.n	800b8a2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b89e:	f7f6 f9a9 	bl	8001bf4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b8a2:	4806      	ldr	r0, [pc, #24]	; (800b8bc <MX_USB_DEVICE_Init+0x44>)
 800b8a4:	f7fe fd78 	bl	800a398 <USBD_Start>
 800b8a8:	4603      	mov	r3, r0
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d001      	beq.n	800b8b2 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800b8ae:	f7f6 f9a1 	bl	8001bf4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b8b2:	bf00      	nop
 800b8b4:	bd80      	pop	{r7, pc}
 800b8b6:	bf00      	nop
 800b8b8:	200000f8 	.word	0x200000f8
 800b8bc:	20000418 	.word	0x20000418
 800b8c0:	20000038 	.word	0x20000038

0800b8c4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b8c4:	b480      	push	{r7}
 800b8c6:	b083      	sub	sp, #12
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	6039      	str	r1, [r7, #0]
 800b8ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b8d0:	683b      	ldr	r3, [r7, #0]
 800b8d2:	2212      	movs	r2, #18
 800b8d4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b8d6:	4b03      	ldr	r3, [pc, #12]	; (800b8e4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b8d8:	4618      	mov	r0, r3
 800b8da:	370c      	adds	r7, #12
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e2:	4770      	bx	lr
 800b8e4:	20000114 	.word	0x20000114

0800b8e8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b8e8:	b480      	push	{r7}
 800b8ea:	b083      	sub	sp, #12
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	4603      	mov	r3, r0
 800b8f0:	6039      	str	r1, [r7, #0]
 800b8f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b8f4:	683b      	ldr	r3, [r7, #0]
 800b8f6:	2204      	movs	r2, #4
 800b8f8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b8fa:	4b03      	ldr	r3, [pc, #12]	; (800b908 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	370c      	adds	r7, #12
 800b900:	46bd      	mov	sp, r7
 800b902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b906:	4770      	bx	lr
 800b908:	20000128 	.word	0x20000128

0800b90c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b082      	sub	sp, #8
 800b910:	af00      	add	r7, sp, #0
 800b912:	4603      	mov	r3, r0
 800b914:	6039      	str	r1, [r7, #0]
 800b916:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b918:	79fb      	ldrb	r3, [r7, #7]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d105      	bne.n	800b92a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b91e:	683a      	ldr	r2, [r7, #0]
 800b920:	4907      	ldr	r1, [pc, #28]	; (800b940 <USBD_FS_ProductStrDescriptor+0x34>)
 800b922:	4808      	ldr	r0, [pc, #32]	; (800b944 <USBD_FS_ProductStrDescriptor+0x38>)
 800b924:	f7ff fee4 	bl	800b6f0 <USBD_GetString>
 800b928:	e004      	b.n	800b934 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b92a:	683a      	ldr	r2, [r7, #0]
 800b92c:	4904      	ldr	r1, [pc, #16]	; (800b940 <USBD_FS_ProductStrDescriptor+0x34>)
 800b92e:	4805      	ldr	r0, [pc, #20]	; (800b944 <USBD_FS_ProductStrDescriptor+0x38>)
 800b930:	f7ff fede 	bl	800b6f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b934:	4b02      	ldr	r3, [pc, #8]	; (800b940 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b936:	4618      	mov	r0, r3
 800b938:	3708      	adds	r7, #8
 800b93a:	46bd      	mov	sp, r7
 800b93c:	bd80      	pop	{r7, pc}
 800b93e:	bf00      	nop
 800b940:	200006f4 	.word	0x200006f4
 800b944:	0800d564 	.word	0x0800d564

0800b948 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b948:	b580      	push	{r7, lr}
 800b94a:	b082      	sub	sp, #8
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	4603      	mov	r3, r0
 800b950:	6039      	str	r1, [r7, #0]
 800b952:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b954:	683a      	ldr	r2, [r7, #0]
 800b956:	4904      	ldr	r1, [pc, #16]	; (800b968 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b958:	4804      	ldr	r0, [pc, #16]	; (800b96c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b95a:	f7ff fec9 	bl	800b6f0 <USBD_GetString>
  return USBD_StrDesc;
 800b95e:	4b02      	ldr	r3, [pc, #8]	; (800b968 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b960:	4618      	mov	r0, r3
 800b962:	3708      	adds	r7, #8
 800b964:	46bd      	mov	sp, r7
 800b966:	bd80      	pop	{r7, pc}
 800b968:	200006f4 	.word	0x200006f4
 800b96c:	0800d570 	.word	0x0800d570

0800b970 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b970:	b580      	push	{r7, lr}
 800b972:	b082      	sub	sp, #8
 800b974:	af00      	add	r7, sp, #0
 800b976:	4603      	mov	r3, r0
 800b978:	6039      	str	r1, [r7, #0]
 800b97a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b97c:	683b      	ldr	r3, [r7, #0]
 800b97e:	221a      	movs	r2, #26
 800b980:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b982:	f000 f843 	bl	800ba0c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b986:	4b02      	ldr	r3, [pc, #8]	; (800b990 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b988:	4618      	mov	r0, r3
 800b98a:	3708      	adds	r7, #8
 800b98c:	46bd      	mov	sp, r7
 800b98e:	bd80      	pop	{r7, pc}
 800b990:	2000012c 	.word	0x2000012c

0800b994 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b994:	b580      	push	{r7, lr}
 800b996:	b082      	sub	sp, #8
 800b998:	af00      	add	r7, sp, #0
 800b99a:	4603      	mov	r3, r0
 800b99c:	6039      	str	r1, [r7, #0]
 800b99e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b9a0:	79fb      	ldrb	r3, [r7, #7]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d105      	bne.n	800b9b2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b9a6:	683a      	ldr	r2, [r7, #0]
 800b9a8:	4907      	ldr	r1, [pc, #28]	; (800b9c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b9aa:	4808      	ldr	r0, [pc, #32]	; (800b9cc <USBD_FS_ConfigStrDescriptor+0x38>)
 800b9ac:	f7ff fea0 	bl	800b6f0 <USBD_GetString>
 800b9b0:	e004      	b.n	800b9bc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b9b2:	683a      	ldr	r2, [r7, #0]
 800b9b4:	4904      	ldr	r1, [pc, #16]	; (800b9c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b9b6:	4805      	ldr	r0, [pc, #20]	; (800b9cc <USBD_FS_ConfigStrDescriptor+0x38>)
 800b9b8:	f7ff fe9a 	bl	800b6f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b9bc:	4b02      	ldr	r3, [pc, #8]	; (800b9c8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b9be:	4618      	mov	r0, r3
 800b9c0:	3708      	adds	r7, #8
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	bd80      	pop	{r7, pc}
 800b9c6:	bf00      	nop
 800b9c8:	200006f4 	.word	0x200006f4
 800b9cc:	0800d578 	.word	0x0800d578

0800b9d0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b082      	sub	sp, #8
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	4603      	mov	r3, r0
 800b9d8:	6039      	str	r1, [r7, #0]
 800b9da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b9dc:	79fb      	ldrb	r3, [r7, #7]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d105      	bne.n	800b9ee <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b9e2:	683a      	ldr	r2, [r7, #0]
 800b9e4:	4907      	ldr	r1, [pc, #28]	; (800ba04 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b9e6:	4808      	ldr	r0, [pc, #32]	; (800ba08 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b9e8:	f7ff fe82 	bl	800b6f0 <USBD_GetString>
 800b9ec:	e004      	b.n	800b9f8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b9ee:	683a      	ldr	r2, [r7, #0]
 800b9f0:	4904      	ldr	r1, [pc, #16]	; (800ba04 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b9f2:	4805      	ldr	r0, [pc, #20]	; (800ba08 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b9f4:	f7ff fe7c 	bl	800b6f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b9f8:	4b02      	ldr	r3, [pc, #8]	; (800ba04 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	3708      	adds	r7, #8
 800b9fe:	46bd      	mov	sp, r7
 800ba00:	bd80      	pop	{r7, pc}
 800ba02:	bf00      	nop
 800ba04:	200006f4 	.word	0x200006f4
 800ba08:	0800d584 	.word	0x0800d584

0800ba0c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	b084      	sub	sp, #16
 800ba10:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ba12:	4b0f      	ldr	r3, [pc, #60]	; (800ba50 <Get_SerialNum+0x44>)
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ba18:	4b0e      	ldr	r3, [pc, #56]	; (800ba54 <Get_SerialNum+0x48>)
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ba1e:	4b0e      	ldr	r3, [pc, #56]	; (800ba58 <Get_SerialNum+0x4c>)
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ba24:	68fa      	ldr	r2, [r7, #12]
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	4413      	add	r3, r2
 800ba2a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d009      	beq.n	800ba46 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ba32:	2208      	movs	r2, #8
 800ba34:	4909      	ldr	r1, [pc, #36]	; (800ba5c <Get_SerialNum+0x50>)
 800ba36:	68f8      	ldr	r0, [r7, #12]
 800ba38:	f000 f814 	bl	800ba64 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ba3c:	2204      	movs	r2, #4
 800ba3e:	4908      	ldr	r1, [pc, #32]	; (800ba60 <Get_SerialNum+0x54>)
 800ba40:	68b8      	ldr	r0, [r7, #8]
 800ba42:	f000 f80f 	bl	800ba64 <IntToUnicode>
  }
}
 800ba46:	bf00      	nop
 800ba48:	3710      	adds	r7, #16
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	bd80      	pop	{r7, pc}
 800ba4e:	bf00      	nop
 800ba50:	1fff7a10 	.word	0x1fff7a10
 800ba54:	1fff7a14 	.word	0x1fff7a14
 800ba58:	1fff7a18 	.word	0x1fff7a18
 800ba5c:	2000012e 	.word	0x2000012e
 800ba60:	2000013e 	.word	0x2000013e

0800ba64 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ba64:	b480      	push	{r7}
 800ba66:	b087      	sub	sp, #28
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	60f8      	str	r0, [r7, #12]
 800ba6c:	60b9      	str	r1, [r7, #8]
 800ba6e:	4613      	mov	r3, r2
 800ba70:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ba72:	2300      	movs	r3, #0
 800ba74:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ba76:	2300      	movs	r3, #0
 800ba78:	75fb      	strb	r3, [r7, #23]
 800ba7a:	e027      	b.n	800bacc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	0f1b      	lsrs	r3, r3, #28
 800ba80:	2b09      	cmp	r3, #9
 800ba82:	d80b      	bhi.n	800ba9c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	0f1b      	lsrs	r3, r3, #28
 800ba88:	b2da      	uxtb	r2, r3
 800ba8a:	7dfb      	ldrb	r3, [r7, #23]
 800ba8c:	005b      	lsls	r3, r3, #1
 800ba8e:	4619      	mov	r1, r3
 800ba90:	68bb      	ldr	r3, [r7, #8]
 800ba92:	440b      	add	r3, r1
 800ba94:	3230      	adds	r2, #48	; 0x30
 800ba96:	b2d2      	uxtb	r2, r2
 800ba98:	701a      	strb	r2, [r3, #0]
 800ba9a:	e00a      	b.n	800bab2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	0f1b      	lsrs	r3, r3, #28
 800baa0:	b2da      	uxtb	r2, r3
 800baa2:	7dfb      	ldrb	r3, [r7, #23]
 800baa4:	005b      	lsls	r3, r3, #1
 800baa6:	4619      	mov	r1, r3
 800baa8:	68bb      	ldr	r3, [r7, #8]
 800baaa:	440b      	add	r3, r1
 800baac:	3237      	adds	r2, #55	; 0x37
 800baae:	b2d2      	uxtb	r2, r2
 800bab0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	011b      	lsls	r3, r3, #4
 800bab6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bab8:	7dfb      	ldrb	r3, [r7, #23]
 800baba:	005b      	lsls	r3, r3, #1
 800babc:	3301      	adds	r3, #1
 800babe:	68ba      	ldr	r2, [r7, #8]
 800bac0:	4413      	add	r3, r2
 800bac2:	2200      	movs	r2, #0
 800bac4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bac6:	7dfb      	ldrb	r3, [r7, #23]
 800bac8:	3301      	adds	r3, #1
 800baca:	75fb      	strb	r3, [r7, #23]
 800bacc:	7dfa      	ldrb	r2, [r7, #23]
 800bace:	79fb      	ldrb	r3, [r7, #7]
 800bad0:	429a      	cmp	r2, r3
 800bad2:	d3d3      	bcc.n	800ba7c <IntToUnicode+0x18>
  }
}
 800bad4:	bf00      	nop
 800bad6:	bf00      	nop
 800bad8:	371c      	adds	r7, #28
 800bada:	46bd      	mov	sp, r7
 800badc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae0:	4770      	bx	lr
	...

0800bae4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bae4:	b580      	push	{r7, lr}
 800bae6:	b08a      	sub	sp, #40	; 0x28
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800baec:	f107 0314 	add.w	r3, r7, #20
 800baf0:	2200      	movs	r2, #0
 800baf2:	601a      	str	r2, [r3, #0]
 800baf4:	605a      	str	r2, [r3, #4]
 800baf6:	609a      	str	r2, [r3, #8]
 800baf8:	60da      	str	r2, [r3, #12]
 800bafa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bb04:	d13a      	bne.n	800bb7c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bb06:	2300      	movs	r3, #0
 800bb08:	613b      	str	r3, [r7, #16]
 800bb0a:	4b1e      	ldr	r3, [pc, #120]	; (800bb84 <HAL_PCD_MspInit+0xa0>)
 800bb0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb0e:	4a1d      	ldr	r2, [pc, #116]	; (800bb84 <HAL_PCD_MspInit+0xa0>)
 800bb10:	f043 0301 	orr.w	r3, r3, #1
 800bb14:	6313      	str	r3, [r2, #48]	; 0x30
 800bb16:	4b1b      	ldr	r3, [pc, #108]	; (800bb84 <HAL_PCD_MspInit+0xa0>)
 800bb18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb1a:	f003 0301 	and.w	r3, r3, #1
 800bb1e:	613b      	str	r3, [r7, #16]
 800bb20:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800bb22:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800bb26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bb28:	2302      	movs	r3, #2
 800bb2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bb30:	2303      	movs	r3, #3
 800bb32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800bb34:	230a      	movs	r3, #10
 800bb36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bb38:	f107 0314 	add.w	r3, r7, #20
 800bb3c:	4619      	mov	r1, r3
 800bb3e:	4812      	ldr	r0, [pc, #72]	; (800bb88 <HAL_PCD_MspInit+0xa4>)
 800bb40:	f7f7 f862 	bl	8002c08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800bb44:	4b0f      	ldr	r3, [pc, #60]	; (800bb84 <HAL_PCD_MspInit+0xa0>)
 800bb46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb48:	4a0e      	ldr	r2, [pc, #56]	; (800bb84 <HAL_PCD_MspInit+0xa0>)
 800bb4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb4e:	6353      	str	r3, [r2, #52]	; 0x34
 800bb50:	2300      	movs	r3, #0
 800bb52:	60fb      	str	r3, [r7, #12]
 800bb54:	4b0b      	ldr	r3, [pc, #44]	; (800bb84 <HAL_PCD_MspInit+0xa0>)
 800bb56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb58:	4a0a      	ldr	r2, [pc, #40]	; (800bb84 <HAL_PCD_MspInit+0xa0>)
 800bb5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bb5e:	6453      	str	r3, [r2, #68]	; 0x44
 800bb60:	4b08      	ldr	r3, [pc, #32]	; (800bb84 <HAL_PCD_MspInit+0xa0>)
 800bb62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bb68:	60fb      	str	r3, [r7, #12]
 800bb6a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800bb6c:	2200      	movs	r2, #0
 800bb6e:	2100      	movs	r1, #0
 800bb70:	2043      	movs	r0, #67	; 0x43
 800bb72:	f7f6 fc72 	bl	800245a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800bb76:	2043      	movs	r0, #67	; 0x43
 800bb78:	f7f6 fc8b 	bl	8002492 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800bb7c:	bf00      	nop
 800bb7e:	3728      	adds	r7, #40	; 0x28
 800bb80:	46bd      	mov	sp, r7
 800bb82:	bd80      	pop	{r7, pc}
 800bb84:	40023800 	.word	0x40023800
 800bb88:	40020000 	.word	0x40020000

0800bb8c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b082      	sub	sp, #8
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800bba0:	4619      	mov	r1, r3
 800bba2:	4610      	mov	r0, r2
 800bba4:	f7fe fc45 	bl	800a432 <USBD_LL_SetupStage>
}
 800bba8:	bf00      	nop
 800bbaa:	3708      	adds	r7, #8
 800bbac:	46bd      	mov	sp, r7
 800bbae:	bd80      	pop	{r7, pc}

0800bbb0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b082      	sub	sp, #8
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	6078      	str	r0, [r7, #4]
 800bbb8:	460b      	mov	r3, r1
 800bbba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800bbc2:	78fa      	ldrb	r2, [r7, #3]
 800bbc4:	6879      	ldr	r1, [r7, #4]
 800bbc6:	4613      	mov	r3, r2
 800bbc8:	00db      	lsls	r3, r3, #3
 800bbca:	4413      	add	r3, r2
 800bbcc:	009b      	lsls	r3, r3, #2
 800bbce:	440b      	add	r3, r1
 800bbd0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800bbd4:	681a      	ldr	r2, [r3, #0]
 800bbd6:	78fb      	ldrb	r3, [r7, #3]
 800bbd8:	4619      	mov	r1, r3
 800bbda:	f7fe fc7f 	bl	800a4dc <USBD_LL_DataOutStage>
}
 800bbde:	bf00      	nop
 800bbe0:	3708      	adds	r7, #8
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	bd80      	pop	{r7, pc}

0800bbe6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bbe6:	b580      	push	{r7, lr}
 800bbe8:	b082      	sub	sp, #8
 800bbea:	af00      	add	r7, sp, #0
 800bbec:	6078      	str	r0, [r7, #4]
 800bbee:	460b      	mov	r3, r1
 800bbf0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800bbf8:	78fa      	ldrb	r2, [r7, #3]
 800bbfa:	6879      	ldr	r1, [r7, #4]
 800bbfc:	4613      	mov	r3, r2
 800bbfe:	00db      	lsls	r3, r3, #3
 800bc00:	4413      	add	r3, r2
 800bc02:	009b      	lsls	r3, r3, #2
 800bc04:	440b      	add	r3, r1
 800bc06:	334c      	adds	r3, #76	; 0x4c
 800bc08:	681a      	ldr	r2, [r3, #0]
 800bc0a:	78fb      	ldrb	r3, [r7, #3]
 800bc0c:	4619      	mov	r1, r3
 800bc0e:	f7fe fd18 	bl	800a642 <USBD_LL_DataInStage>
}
 800bc12:	bf00      	nop
 800bc14:	3708      	adds	r7, #8
 800bc16:	46bd      	mov	sp, r7
 800bc18:	bd80      	pop	{r7, pc}

0800bc1a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc1a:	b580      	push	{r7, lr}
 800bc1c:	b082      	sub	sp, #8
 800bc1e:	af00      	add	r7, sp, #0
 800bc20:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bc28:	4618      	mov	r0, r3
 800bc2a:	f7fe fe4c 	bl	800a8c6 <USBD_LL_SOF>
}
 800bc2e:	bf00      	nop
 800bc30:	3708      	adds	r7, #8
 800bc32:	46bd      	mov	sp, r7
 800bc34:	bd80      	pop	{r7, pc}

0800bc36 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc36:	b580      	push	{r7, lr}
 800bc38:	b084      	sub	sp, #16
 800bc3a:	af00      	add	r7, sp, #0
 800bc3c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bc3e:	2301      	movs	r3, #1
 800bc40:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	68db      	ldr	r3, [r3, #12]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d102      	bne.n	800bc50 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	73fb      	strb	r3, [r7, #15]
 800bc4e:	e008      	b.n	800bc62 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	68db      	ldr	r3, [r3, #12]
 800bc54:	2b02      	cmp	r3, #2
 800bc56:	d102      	bne.n	800bc5e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800bc58:	2301      	movs	r3, #1
 800bc5a:	73fb      	strb	r3, [r7, #15]
 800bc5c:	e001      	b.n	800bc62 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800bc5e:	f7f5 ffc9 	bl	8001bf4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bc68:	7bfa      	ldrb	r2, [r7, #15]
 800bc6a:	4611      	mov	r1, r2
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	f7fe fdec 	bl	800a84a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bc78:	4618      	mov	r0, r3
 800bc7a:	f7fe fd94 	bl	800a7a6 <USBD_LL_Reset>
}
 800bc7e:	bf00      	nop
 800bc80:	3710      	adds	r7, #16
 800bc82:	46bd      	mov	sp, r7
 800bc84:	bd80      	pop	{r7, pc}
	...

0800bc88 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b082      	sub	sp, #8
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bc96:	4618      	mov	r0, r3
 800bc98:	f7fe fde7 	bl	800a86a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	687a      	ldr	r2, [r7, #4]
 800bca8:	6812      	ldr	r2, [r2, #0]
 800bcaa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bcae:	f043 0301 	orr.w	r3, r3, #1
 800bcb2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	6a1b      	ldr	r3, [r3, #32]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d005      	beq.n	800bcc8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bcbc:	4b04      	ldr	r3, [pc, #16]	; (800bcd0 <HAL_PCD_SuspendCallback+0x48>)
 800bcbe:	691b      	ldr	r3, [r3, #16]
 800bcc0:	4a03      	ldr	r2, [pc, #12]	; (800bcd0 <HAL_PCD_SuspendCallback+0x48>)
 800bcc2:	f043 0306 	orr.w	r3, r3, #6
 800bcc6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800bcc8:	bf00      	nop
 800bcca:	3708      	adds	r7, #8
 800bccc:	46bd      	mov	sp, r7
 800bcce:	bd80      	pop	{r7, pc}
 800bcd0:	e000ed00 	.word	0xe000ed00

0800bcd4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	b082      	sub	sp, #8
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bce2:	4618      	mov	r0, r3
 800bce4:	f7fe fdd7 	bl	800a896 <USBD_LL_Resume>
}
 800bce8:	bf00      	nop
 800bcea:	3708      	adds	r7, #8
 800bcec:	46bd      	mov	sp, r7
 800bcee:	bd80      	pop	{r7, pc}

0800bcf0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	b082      	sub	sp, #8
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6078      	str	r0, [r7, #4]
 800bcf8:	460b      	mov	r3, r1
 800bcfa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bd02:	78fa      	ldrb	r2, [r7, #3]
 800bd04:	4611      	mov	r1, r2
 800bd06:	4618      	mov	r0, r3
 800bd08:	f7fe fe2f 	bl	800a96a <USBD_LL_IsoOUTIncomplete>
}
 800bd0c:	bf00      	nop
 800bd0e:	3708      	adds	r7, #8
 800bd10:	46bd      	mov	sp, r7
 800bd12:	bd80      	pop	{r7, pc}

0800bd14 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd14:	b580      	push	{r7, lr}
 800bd16:	b082      	sub	sp, #8
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	6078      	str	r0, [r7, #4]
 800bd1c:	460b      	mov	r3, r1
 800bd1e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bd26:	78fa      	ldrb	r2, [r7, #3]
 800bd28:	4611      	mov	r1, r2
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	f7fe fdeb 	bl	800a906 <USBD_LL_IsoINIncomplete>
}
 800bd30:	bf00      	nop
 800bd32:	3708      	adds	r7, #8
 800bd34:	46bd      	mov	sp, r7
 800bd36:	bd80      	pop	{r7, pc}

0800bd38 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	b082      	sub	sp, #8
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bd46:	4618      	mov	r0, r3
 800bd48:	f7fe fe41 	bl	800a9ce <USBD_LL_DevConnected>
}
 800bd4c:	bf00      	nop
 800bd4e:	3708      	adds	r7, #8
 800bd50:	46bd      	mov	sp, r7
 800bd52:	bd80      	pop	{r7, pc}

0800bd54 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd54:	b580      	push	{r7, lr}
 800bd56:	b082      	sub	sp, #8
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bd62:	4618      	mov	r0, r3
 800bd64:	f7fe fe3e 	bl	800a9e4 <USBD_LL_DevDisconnected>
}
 800bd68:	bf00      	nop
 800bd6a:	3708      	adds	r7, #8
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	bd80      	pop	{r7, pc}

0800bd70 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b082      	sub	sp, #8
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	781b      	ldrb	r3, [r3, #0]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d13c      	bne.n	800bdfa <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800bd80:	4a20      	ldr	r2, [pc, #128]	; (800be04 <USBD_LL_Init+0x94>)
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	4a1e      	ldr	r2, [pc, #120]	; (800be04 <USBD_LL_Init+0x94>)
 800bd8c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800bd90:	4b1c      	ldr	r3, [pc, #112]	; (800be04 <USBD_LL_Init+0x94>)
 800bd92:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800bd96:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800bd98:	4b1a      	ldr	r3, [pc, #104]	; (800be04 <USBD_LL_Init+0x94>)
 800bd9a:	2204      	movs	r2, #4
 800bd9c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800bd9e:	4b19      	ldr	r3, [pc, #100]	; (800be04 <USBD_LL_Init+0x94>)
 800bda0:	2202      	movs	r2, #2
 800bda2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800bda4:	4b17      	ldr	r3, [pc, #92]	; (800be04 <USBD_LL_Init+0x94>)
 800bda6:	2200      	movs	r2, #0
 800bda8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800bdaa:	4b16      	ldr	r3, [pc, #88]	; (800be04 <USBD_LL_Init+0x94>)
 800bdac:	2202      	movs	r2, #2
 800bdae:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800bdb0:	4b14      	ldr	r3, [pc, #80]	; (800be04 <USBD_LL_Init+0x94>)
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800bdb6:	4b13      	ldr	r3, [pc, #76]	; (800be04 <USBD_LL_Init+0x94>)
 800bdb8:	2200      	movs	r2, #0
 800bdba:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800bdbc:	4b11      	ldr	r3, [pc, #68]	; (800be04 <USBD_LL_Init+0x94>)
 800bdbe:	2200      	movs	r2, #0
 800bdc0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800bdc2:	4b10      	ldr	r3, [pc, #64]	; (800be04 <USBD_LL_Init+0x94>)
 800bdc4:	2200      	movs	r2, #0
 800bdc6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800bdc8:	4b0e      	ldr	r3, [pc, #56]	; (800be04 <USBD_LL_Init+0x94>)
 800bdca:	2200      	movs	r2, #0
 800bdcc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800bdce:	480d      	ldr	r0, [pc, #52]	; (800be04 <USBD_LL_Init+0x94>)
 800bdd0:	f7f9 fc42 	bl	8005658 <HAL_PCD_Init>
 800bdd4:	4603      	mov	r3, r0
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d001      	beq.n	800bdde <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800bdda:	f7f5 ff0b 	bl	8001bf4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800bdde:	2180      	movs	r1, #128	; 0x80
 800bde0:	4808      	ldr	r0, [pc, #32]	; (800be04 <USBD_LL_Init+0x94>)
 800bde2:	f7fa fe82 	bl	8006aea <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800bde6:	2240      	movs	r2, #64	; 0x40
 800bde8:	2100      	movs	r1, #0
 800bdea:	4806      	ldr	r0, [pc, #24]	; (800be04 <USBD_LL_Init+0x94>)
 800bdec:	f7fa fe36 	bl	8006a5c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800bdf0:	2280      	movs	r2, #128	; 0x80
 800bdf2:	2101      	movs	r1, #1
 800bdf4:	4803      	ldr	r0, [pc, #12]	; (800be04 <USBD_LL_Init+0x94>)
 800bdf6:	f7fa fe31 	bl	8006a5c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800bdfa:	2300      	movs	r3, #0
}
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	3708      	adds	r7, #8
 800be00:	46bd      	mov	sp, r7
 800be02:	bd80      	pop	{r7, pc}
 800be04:	200008f4 	.word	0x200008f4

0800be08 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800be08:	b580      	push	{r7, lr}
 800be0a:	b084      	sub	sp, #16
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be10:	2300      	movs	r3, #0
 800be12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be14:	2300      	movs	r3, #0
 800be16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800be1e:	4618      	mov	r0, r3
 800be20:	f7f9 fd37 	bl	8005892 <HAL_PCD_Start>
 800be24:	4603      	mov	r3, r0
 800be26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be28:	7bfb      	ldrb	r3, [r7, #15]
 800be2a:	4618      	mov	r0, r3
 800be2c:	f000 f930 	bl	800c090 <USBD_Get_USB_Status>
 800be30:	4603      	mov	r3, r0
 800be32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be34:	7bbb      	ldrb	r3, [r7, #14]
}
 800be36:	4618      	mov	r0, r3
 800be38:	3710      	adds	r7, #16
 800be3a:	46bd      	mov	sp, r7
 800be3c:	bd80      	pop	{r7, pc}

0800be3e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800be3e:	b580      	push	{r7, lr}
 800be40:	b084      	sub	sp, #16
 800be42:	af00      	add	r7, sp, #0
 800be44:	6078      	str	r0, [r7, #4]
 800be46:	4608      	mov	r0, r1
 800be48:	4611      	mov	r1, r2
 800be4a:	461a      	mov	r2, r3
 800be4c:	4603      	mov	r3, r0
 800be4e:	70fb      	strb	r3, [r7, #3]
 800be50:	460b      	mov	r3, r1
 800be52:	70bb      	strb	r3, [r7, #2]
 800be54:	4613      	mov	r3, r2
 800be56:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be58:	2300      	movs	r3, #0
 800be5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be5c:	2300      	movs	r3, #0
 800be5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800be66:	78bb      	ldrb	r3, [r7, #2]
 800be68:	883a      	ldrh	r2, [r7, #0]
 800be6a:	78f9      	ldrb	r1, [r7, #3]
 800be6c:	f7fa fa08 	bl	8006280 <HAL_PCD_EP_Open>
 800be70:	4603      	mov	r3, r0
 800be72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be74:	7bfb      	ldrb	r3, [r7, #15]
 800be76:	4618      	mov	r0, r3
 800be78:	f000 f90a 	bl	800c090 <USBD_Get_USB_Status>
 800be7c:	4603      	mov	r3, r0
 800be7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be80:	7bbb      	ldrb	r3, [r7, #14]
}
 800be82:	4618      	mov	r0, r3
 800be84:	3710      	adds	r7, #16
 800be86:	46bd      	mov	sp, r7
 800be88:	bd80      	pop	{r7, pc}

0800be8a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800be8a:	b580      	push	{r7, lr}
 800be8c:	b084      	sub	sp, #16
 800be8e:	af00      	add	r7, sp, #0
 800be90:	6078      	str	r0, [r7, #4]
 800be92:	460b      	mov	r3, r1
 800be94:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be96:	2300      	movs	r3, #0
 800be98:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be9a:	2300      	movs	r3, #0
 800be9c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bea4:	78fa      	ldrb	r2, [r7, #3]
 800bea6:	4611      	mov	r1, r2
 800bea8:	4618      	mov	r0, r3
 800beaa:	f7fa fa51 	bl	8006350 <HAL_PCD_EP_Close>
 800beae:	4603      	mov	r3, r0
 800beb0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800beb2:	7bfb      	ldrb	r3, [r7, #15]
 800beb4:	4618      	mov	r0, r3
 800beb6:	f000 f8eb 	bl	800c090 <USBD_Get_USB_Status>
 800beba:	4603      	mov	r3, r0
 800bebc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bebe:	7bbb      	ldrb	r3, [r7, #14]
}
 800bec0:	4618      	mov	r0, r3
 800bec2:	3710      	adds	r7, #16
 800bec4:	46bd      	mov	sp, r7
 800bec6:	bd80      	pop	{r7, pc}

0800bec8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bec8:	b580      	push	{r7, lr}
 800beca:	b084      	sub	sp, #16
 800becc:	af00      	add	r7, sp, #0
 800bece:	6078      	str	r0, [r7, #4]
 800bed0:	460b      	mov	r3, r1
 800bed2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bed4:	2300      	movs	r3, #0
 800bed6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bed8:	2300      	movs	r3, #0
 800beda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bee2:	78fa      	ldrb	r2, [r7, #3]
 800bee4:	4611      	mov	r1, r2
 800bee6:	4618      	mov	r0, r3
 800bee8:	f7fa fb11 	bl	800650e <HAL_PCD_EP_SetStall>
 800beec:	4603      	mov	r3, r0
 800beee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bef0:	7bfb      	ldrb	r3, [r7, #15]
 800bef2:	4618      	mov	r0, r3
 800bef4:	f000 f8cc 	bl	800c090 <USBD_Get_USB_Status>
 800bef8:	4603      	mov	r3, r0
 800befa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800befc:	7bbb      	ldrb	r3, [r7, #14]
}
 800befe:	4618      	mov	r0, r3
 800bf00:	3710      	adds	r7, #16
 800bf02:	46bd      	mov	sp, r7
 800bf04:	bd80      	pop	{r7, pc}

0800bf06 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bf06:	b580      	push	{r7, lr}
 800bf08:	b084      	sub	sp, #16
 800bf0a:	af00      	add	r7, sp, #0
 800bf0c:	6078      	str	r0, [r7, #4]
 800bf0e:	460b      	mov	r3, r1
 800bf10:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf12:	2300      	movs	r3, #0
 800bf14:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf16:	2300      	movs	r3, #0
 800bf18:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bf20:	78fa      	ldrb	r2, [r7, #3]
 800bf22:	4611      	mov	r1, r2
 800bf24:	4618      	mov	r0, r3
 800bf26:	f7fa fb56 	bl	80065d6 <HAL_PCD_EP_ClrStall>
 800bf2a:	4603      	mov	r3, r0
 800bf2c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf2e:	7bfb      	ldrb	r3, [r7, #15]
 800bf30:	4618      	mov	r0, r3
 800bf32:	f000 f8ad 	bl	800c090 <USBD_Get_USB_Status>
 800bf36:	4603      	mov	r3, r0
 800bf38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf3a:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	3710      	adds	r7, #16
 800bf40:	46bd      	mov	sp, r7
 800bf42:	bd80      	pop	{r7, pc}

0800bf44 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bf44:	b480      	push	{r7}
 800bf46:	b085      	sub	sp, #20
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	6078      	str	r0, [r7, #4]
 800bf4c:	460b      	mov	r3, r1
 800bf4e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bf56:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bf58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	da0b      	bge.n	800bf78 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bf60:	78fb      	ldrb	r3, [r7, #3]
 800bf62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bf66:	68f9      	ldr	r1, [r7, #12]
 800bf68:	4613      	mov	r3, r2
 800bf6a:	00db      	lsls	r3, r3, #3
 800bf6c:	4413      	add	r3, r2
 800bf6e:	009b      	lsls	r3, r3, #2
 800bf70:	440b      	add	r3, r1
 800bf72:	333e      	adds	r3, #62	; 0x3e
 800bf74:	781b      	ldrb	r3, [r3, #0]
 800bf76:	e00b      	b.n	800bf90 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bf78:	78fb      	ldrb	r3, [r7, #3]
 800bf7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bf7e:	68f9      	ldr	r1, [r7, #12]
 800bf80:	4613      	mov	r3, r2
 800bf82:	00db      	lsls	r3, r3, #3
 800bf84:	4413      	add	r3, r2
 800bf86:	009b      	lsls	r3, r3, #2
 800bf88:	440b      	add	r3, r1
 800bf8a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800bf8e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bf90:	4618      	mov	r0, r3
 800bf92:	3714      	adds	r7, #20
 800bf94:	46bd      	mov	sp, r7
 800bf96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf9a:	4770      	bx	lr

0800bf9c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bf9c:	b580      	push	{r7, lr}
 800bf9e:	b084      	sub	sp, #16
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]
 800bfa4:	460b      	mov	r3, r1
 800bfa6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bfac:	2300      	movs	r3, #0
 800bfae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bfb6:	78fa      	ldrb	r2, [r7, #3]
 800bfb8:	4611      	mov	r1, r2
 800bfba:	4618      	mov	r0, r3
 800bfbc:	f7fa f93b 	bl	8006236 <HAL_PCD_SetAddress>
 800bfc0:	4603      	mov	r3, r0
 800bfc2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bfc4:	7bfb      	ldrb	r3, [r7, #15]
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	f000 f862 	bl	800c090 <USBD_Get_USB_Status>
 800bfcc:	4603      	mov	r3, r0
 800bfce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bfd0:	7bbb      	ldrb	r3, [r7, #14]
}
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	3710      	adds	r7, #16
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	bd80      	pop	{r7, pc}

0800bfda <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bfda:	b580      	push	{r7, lr}
 800bfdc:	b086      	sub	sp, #24
 800bfde:	af00      	add	r7, sp, #0
 800bfe0:	60f8      	str	r0, [r7, #12]
 800bfe2:	607a      	str	r2, [r7, #4]
 800bfe4:	603b      	str	r3, [r7, #0]
 800bfe6:	460b      	mov	r3, r1
 800bfe8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bfea:	2300      	movs	r3, #0
 800bfec:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bfee:	2300      	movs	r3, #0
 800bff0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bff8:	7af9      	ldrb	r1, [r7, #11]
 800bffa:	683b      	ldr	r3, [r7, #0]
 800bffc:	687a      	ldr	r2, [r7, #4]
 800bffe:	f7fa fa3c 	bl	800647a <HAL_PCD_EP_Transmit>
 800c002:	4603      	mov	r3, r0
 800c004:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c006:	7dfb      	ldrb	r3, [r7, #23]
 800c008:	4618      	mov	r0, r3
 800c00a:	f000 f841 	bl	800c090 <USBD_Get_USB_Status>
 800c00e:	4603      	mov	r3, r0
 800c010:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c012:	7dbb      	ldrb	r3, [r7, #22]
}
 800c014:	4618      	mov	r0, r3
 800c016:	3718      	adds	r7, #24
 800c018:	46bd      	mov	sp, r7
 800c01a:	bd80      	pop	{r7, pc}

0800c01c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c01c:	b580      	push	{r7, lr}
 800c01e:	b086      	sub	sp, #24
 800c020:	af00      	add	r7, sp, #0
 800c022:	60f8      	str	r0, [r7, #12]
 800c024:	607a      	str	r2, [r7, #4]
 800c026:	603b      	str	r3, [r7, #0]
 800c028:	460b      	mov	r3, r1
 800c02a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c02c:	2300      	movs	r3, #0
 800c02e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c030:	2300      	movs	r3, #0
 800c032:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c03a:	7af9      	ldrb	r1, [r7, #11]
 800c03c:	683b      	ldr	r3, [r7, #0]
 800c03e:	687a      	ldr	r2, [r7, #4]
 800c040:	f7fa f9d0 	bl	80063e4 <HAL_PCD_EP_Receive>
 800c044:	4603      	mov	r3, r0
 800c046:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c048:	7dfb      	ldrb	r3, [r7, #23]
 800c04a:	4618      	mov	r0, r3
 800c04c:	f000 f820 	bl	800c090 <USBD_Get_USB_Status>
 800c050:	4603      	mov	r3, r0
 800c052:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c054:	7dbb      	ldrb	r3, [r7, #22]
}
 800c056:	4618      	mov	r0, r3
 800c058:	3718      	adds	r7, #24
 800c05a:	46bd      	mov	sp, r7
 800c05c:	bd80      	pop	{r7, pc}
	...

0800c060 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c060:	b480      	push	{r7}
 800c062:	b083      	sub	sp, #12
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c068:	4b03      	ldr	r3, [pc, #12]	; (800c078 <USBD_static_malloc+0x18>)
}
 800c06a:	4618      	mov	r0, r3
 800c06c:	370c      	adds	r7, #12
 800c06e:	46bd      	mov	sp, r7
 800c070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c074:	4770      	bx	lr
 800c076:	bf00      	nop
 800c078:	20000e00 	.word	0x20000e00

0800c07c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c07c:	b480      	push	{r7}
 800c07e:	b083      	sub	sp, #12
 800c080:	af00      	add	r7, sp, #0
 800c082:	6078      	str	r0, [r7, #4]

}
 800c084:	bf00      	nop
 800c086:	370c      	adds	r7, #12
 800c088:	46bd      	mov	sp, r7
 800c08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08e:	4770      	bx	lr

0800c090 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c090:	b480      	push	{r7}
 800c092:	b085      	sub	sp, #20
 800c094:	af00      	add	r7, sp, #0
 800c096:	4603      	mov	r3, r0
 800c098:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c09a:	2300      	movs	r3, #0
 800c09c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c09e:	79fb      	ldrb	r3, [r7, #7]
 800c0a0:	2b03      	cmp	r3, #3
 800c0a2:	d817      	bhi.n	800c0d4 <USBD_Get_USB_Status+0x44>
 800c0a4:	a201      	add	r2, pc, #4	; (adr r2, 800c0ac <USBD_Get_USB_Status+0x1c>)
 800c0a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0aa:	bf00      	nop
 800c0ac:	0800c0bd 	.word	0x0800c0bd
 800c0b0:	0800c0c3 	.word	0x0800c0c3
 800c0b4:	0800c0c9 	.word	0x0800c0c9
 800c0b8:	0800c0cf 	.word	0x0800c0cf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c0bc:	2300      	movs	r3, #0
 800c0be:	73fb      	strb	r3, [r7, #15]
    break;
 800c0c0:	e00b      	b.n	800c0da <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c0c2:	2303      	movs	r3, #3
 800c0c4:	73fb      	strb	r3, [r7, #15]
    break;
 800c0c6:	e008      	b.n	800c0da <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c0c8:	2301      	movs	r3, #1
 800c0ca:	73fb      	strb	r3, [r7, #15]
    break;
 800c0cc:	e005      	b.n	800c0da <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c0ce:	2303      	movs	r3, #3
 800c0d0:	73fb      	strb	r3, [r7, #15]
    break;
 800c0d2:	e002      	b.n	800c0da <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c0d4:	2303      	movs	r3, #3
 800c0d6:	73fb      	strb	r3, [r7, #15]
    break;
 800c0d8:	bf00      	nop
  }
  return usb_status;
 800c0da:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0dc:	4618      	mov	r0, r3
 800c0de:	3714      	adds	r7, #20
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e6:	4770      	bx	lr

0800c0e8 <__errno>:
 800c0e8:	4b01      	ldr	r3, [pc, #4]	; (800c0f0 <__errno+0x8>)
 800c0ea:	6818      	ldr	r0, [r3, #0]
 800c0ec:	4770      	bx	lr
 800c0ee:	bf00      	nop
 800c0f0:	20000148 	.word	0x20000148

0800c0f4 <__libc_init_array>:
 800c0f4:	b570      	push	{r4, r5, r6, lr}
 800c0f6:	4d0d      	ldr	r5, [pc, #52]	; (800c12c <__libc_init_array+0x38>)
 800c0f8:	4c0d      	ldr	r4, [pc, #52]	; (800c130 <__libc_init_array+0x3c>)
 800c0fa:	1b64      	subs	r4, r4, r5
 800c0fc:	10a4      	asrs	r4, r4, #2
 800c0fe:	2600      	movs	r6, #0
 800c100:	42a6      	cmp	r6, r4
 800c102:	d109      	bne.n	800c118 <__libc_init_array+0x24>
 800c104:	4d0b      	ldr	r5, [pc, #44]	; (800c134 <__libc_init_array+0x40>)
 800c106:	4c0c      	ldr	r4, [pc, #48]	; (800c138 <__libc_init_array+0x44>)
 800c108:	f001 f9e8 	bl	800d4dc <_init>
 800c10c:	1b64      	subs	r4, r4, r5
 800c10e:	10a4      	asrs	r4, r4, #2
 800c110:	2600      	movs	r6, #0
 800c112:	42a6      	cmp	r6, r4
 800c114:	d105      	bne.n	800c122 <__libc_init_array+0x2e>
 800c116:	bd70      	pop	{r4, r5, r6, pc}
 800c118:	f855 3b04 	ldr.w	r3, [r5], #4
 800c11c:	4798      	blx	r3
 800c11e:	3601      	adds	r6, #1
 800c120:	e7ee      	b.n	800c100 <__libc_init_array+0xc>
 800c122:	f855 3b04 	ldr.w	r3, [r5], #4
 800c126:	4798      	blx	r3
 800c128:	3601      	adds	r6, #1
 800c12a:	e7f2      	b.n	800c112 <__libc_init_array+0x1e>
 800c12c:	08017bb8 	.word	0x08017bb8
 800c130:	08017bb8 	.word	0x08017bb8
 800c134:	08017bb8 	.word	0x08017bb8
 800c138:	08017bbc 	.word	0x08017bbc

0800c13c <memset>:
 800c13c:	4402      	add	r2, r0
 800c13e:	4603      	mov	r3, r0
 800c140:	4293      	cmp	r3, r2
 800c142:	d100      	bne.n	800c146 <memset+0xa>
 800c144:	4770      	bx	lr
 800c146:	f803 1b01 	strb.w	r1, [r3], #1
 800c14a:	e7f9      	b.n	800c140 <memset+0x4>

0800c14c <iprintf>:
 800c14c:	b40f      	push	{r0, r1, r2, r3}
 800c14e:	4b0a      	ldr	r3, [pc, #40]	; (800c178 <iprintf+0x2c>)
 800c150:	b513      	push	{r0, r1, r4, lr}
 800c152:	681c      	ldr	r4, [r3, #0]
 800c154:	b124      	cbz	r4, 800c160 <iprintf+0x14>
 800c156:	69a3      	ldr	r3, [r4, #24]
 800c158:	b913      	cbnz	r3, 800c160 <iprintf+0x14>
 800c15a:	4620      	mov	r0, r4
 800c15c:	f000 f89c 	bl	800c298 <__sinit>
 800c160:	ab05      	add	r3, sp, #20
 800c162:	9a04      	ldr	r2, [sp, #16]
 800c164:	68a1      	ldr	r1, [r4, #8]
 800c166:	9301      	str	r3, [sp, #4]
 800c168:	4620      	mov	r0, r4
 800c16a:	f000 fb4f 	bl	800c80c <_vfiprintf_r>
 800c16e:	b002      	add	sp, #8
 800c170:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c174:	b004      	add	sp, #16
 800c176:	4770      	bx	lr
 800c178:	20000148 	.word	0x20000148

0800c17c <putchar>:
 800c17c:	4b09      	ldr	r3, [pc, #36]	; (800c1a4 <putchar+0x28>)
 800c17e:	b513      	push	{r0, r1, r4, lr}
 800c180:	681c      	ldr	r4, [r3, #0]
 800c182:	4601      	mov	r1, r0
 800c184:	b134      	cbz	r4, 800c194 <putchar+0x18>
 800c186:	69a3      	ldr	r3, [r4, #24]
 800c188:	b923      	cbnz	r3, 800c194 <putchar+0x18>
 800c18a:	9001      	str	r0, [sp, #4]
 800c18c:	4620      	mov	r0, r4
 800c18e:	f000 f883 	bl	800c298 <__sinit>
 800c192:	9901      	ldr	r1, [sp, #4]
 800c194:	68a2      	ldr	r2, [r4, #8]
 800c196:	4620      	mov	r0, r4
 800c198:	b002      	add	sp, #8
 800c19a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c19e:	f000 bdf9 	b.w	800cd94 <_putc_r>
 800c1a2:	bf00      	nop
 800c1a4:	20000148 	.word	0x20000148

0800c1a8 <siprintf>:
 800c1a8:	b40e      	push	{r1, r2, r3}
 800c1aa:	b500      	push	{lr}
 800c1ac:	b09c      	sub	sp, #112	; 0x70
 800c1ae:	ab1d      	add	r3, sp, #116	; 0x74
 800c1b0:	9002      	str	r0, [sp, #8]
 800c1b2:	9006      	str	r0, [sp, #24]
 800c1b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c1b8:	4809      	ldr	r0, [pc, #36]	; (800c1e0 <siprintf+0x38>)
 800c1ba:	9107      	str	r1, [sp, #28]
 800c1bc:	9104      	str	r1, [sp, #16]
 800c1be:	4909      	ldr	r1, [pc, #36]	; (800c1e4 <siprintf+0x3c>)
 800c1c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c1c4:	9105      	str	r1, [sp, #20]
 800c1c6:	6800      	ldr	r0, [r0, #0]
 800c1c8:	9301      	str	r3, [sp, #4]
 800c1ca:	a902      	add	r1, sp, #8
 800c1cc:	f000 f9f4 	bl	800c5b8 <_svfiprintf_r>
 800c1d0:	9b02      	ldr	r3, [sp, #8]
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	701a      	strb	r2, [r3, #0]
 800c1d6:	b01c      	add	sp, #112	; 0x70
 800c1d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c1dc:	b003      	add	sp, #12
 800c1de:	4770      	bx	lr
 800c1e0:	20000148 	.word	0x20000148
 800c1e4:	ffff0208 	.word	0xffff0208

0800c1e8 <std>:
 800c1e8:	2300      	movs	r3, #0
 800c1ea:	b510      	push	{r4, lr}
 800c1ec:	4604      	mov	r4, r0
 800c1ee:	e9c0 3300 	strd	r3, r3, [r0]
 800c1f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c1f6:	6083      	str	r3, [r0, #8]
 800c1f8:	8181      	strh	r1, [r0, #12]
 800c1fa:	6643      	str	r3, [r0, #100]	; 0x64
 800c1fc:	81c2      	strh	r2, [r0, #14]
 800c1fe:	6183      	str	r3, [r0, #24]
 800c200:	4619      	mov	r1, r3
 800c202:	2208      	movs	r2, #8
 800c204:	305c      	adds	r0, #92	; 0x5c
 800c206:	f7ff ff99 	bl	800c13c <memset>
 800c20a:	4b05      	ldr	r3, [pc, #20]	; (800c220 <std+0x38>)
 800c20c:	6263      	str	r3, [r4, #36]	; 0x24
 800c20e:	4b05      	ldr	r3, [pc, #20]	; (800c224 <std+0x3c>)
 800c210:	62a3      	str	r3, [r4, #40]	; 0x28
 800c212:	4b05      	ldr	r3, [pc, #20]	; (800c228 <std+0x40>)
 800c214:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c216:	4b05      	ldr	r3, [pc, #20]	; (800c22c <std+0x44>)
 800c218:	6224      	str	r4, [r4, #32]
 800c21a:	6323      	str	r3, [r4, #48]	; 0x30
 800c21c:	bd10      	pop	{r4, pc}
 800c21e:	bf00      	nop
 800c220:	0800ce45 	.word	0x0800ce45
 800c224:	0800ce67 	.word	0x0800ce67
 800c228:	0800ce9f 	.word	0x0800ce9f
 800c22c:	0800cec3 	.word	0x0800cec3

0800c230 <_cleanup_r>:
 800c230:	4901      	ldr	r1, [pc, #4]	; (800c238 <_cleanup_r+0x8>)
 800c232:	f000 b8af 	b.w	800c394 <_fwalk_reent>
 800c236:	bf00      	nop
 800c238:	0800d19d 	.word	0x0800d19d

0800c23c <__sfmoreglue>:
 800c23c:	b570      	push	{r4, r5, r6, lr}
 800c23e:	2268      	movs	r2, #104	; 0x68
 800c240:	1e4d      	subs	r5, r1, #1
 800c242:	4355      	muls	r5, r2
 800c244:	460e      	mov	r6, r1
 800c246:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c24a:	f000 f8e5 	bl	800c418 <_malloc_r>
 800c24e:	4604      	mov	r4, r0
 800c250:	b140      	cbz	r0, 800c264 <__sfmoreglue+0x28>
 800c252:	2100      	movs	r1, #0
 800c254:	e9c0 1600 	strd	r1, r6, [r0]
 800c258:	300c      	adds	r0, #12
 800c25a:	60a0      	str	r0, [r4, #8]
 800c25c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c260:	f7ff ff6c 	bl	800c13c <memset>
 800c264:	4620      	mov	r0, r4
 800c266:	bd70      	pop	{r4, r5, r6, pc}

0800c268 <__sfp_lock_acquire>:
 800c268:	4801      	ldr	r0, [pc, #4]	; (800c270 <__sfp_lock_acquire+0x8>)
 800c26a:	f000 b8b3 	b.w	800c3d4 <__retarget_lock_acquire_recursive>
 800c26e:	bf00      	nop
 800c270:	20000e15 	.word	0x20000e15

0800c274 <__sfp_lock_release>:
 800c274:	4801      	ldr	r0, [pc, #4]	; (800c27c <__sfp_lock_release+0x8>)
 800c276:	f000 b8ae 	b.w	800c3d6 <__retarget_lock_release_recursive>
 800c27a:	bf00      	nop
 800c27c:	20000e15 	.word	0x20000e15

0800c280 <__sinit_lock_acquire>:
 800c280:	4801      	ldr	r0, [pc, #4]	; (800c288 <__sinit_lock_acquire+0x8>)
 800c282:	f000 b8a7 	b.w	800c3d4 <__retarget_lock_acquire_recursive>
 800c286:	bf00      	nop
 800c288:	20000e16 	.word	0x20000e16

0800c28c <__sinit_lock_release>:
 800c28c:	4801      	ldr	r0, [pc, #4]	; (800c294 <__sinit_lock_release+0x8>)
 800c28e:	f000 b8a2 	b.w	800c3d6 <__retarget_lock_release_recursive>
 800c292:	bf00      	nop
 800c294:	20000e16 	.word	0x20000e16

0800c298 <__sinit>:
 800c298:	b510      	push	{r4, lr}
 800c29a:	4604      	mov	r4, r0
 800c29c:	f7ff fff0 	bl	800c280 <__sinit_lock_acquire>
 800c2a0:	69a3      	ldr	r3, [r4, #24]
 800c2a2:	b11b      	cbz	r3, 800c2ac <__sinit+0x14>
 800c2a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c2a8:	f7ff bff0 	b.w	800c28c <__sinit_lock_release>
 800c2ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c2b0:	6523      	str	r3, [r4, #80]	; 0x50
 800c2b2:	4b13      	ldr	r3, [pc, #76]	; (800c300 <__sinit+0x68>)
 800c2b4:	4a13      	ldr	r2, [pc, #76]	; (800c304 <__sinit+0x6c>)
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	62a2      	str	r2, [r4, #40]	; 0x28
 800c2ba:	42a3      	cmp	r3, r4
 800c2bc:	bf04      	itt	eq
 800c2be:	2301      	moveq	r3, #1
 800c2c0:	61a3      	streq	r3, [r4, #24]
 800c2c2:	4620      	mov	r0, r4
 800c2c4:	f000 f820 	bl	800c308 <__sfp>
 800c2c8:	6060      	str	r0, [r4, #4]
 800c2ca:	4620      	mov	r0, r4
 800c2cc:	f000 f81c 	bl	800c308 <__sfp>
 800c2d0:	60a0      	str	r0, [r4, #8]
 800c2d2:	4620      	mov	r0, r4
 800c2d4:	f000 f818 	bl	800c308 <__sfp>
 800c2d8:	2200      	movs	r2, #0
 800c2da:	60e0      	str	r0, [r4, #12]
 800c2dc:	2104      	movs	r1, #4
 800c2de:	6860      	ldr	r0, [r4, #4]
 800c2e0:	f7ff ff82 	bl	800c1e8 <std>
 800c2e4:	68a0      	ldr	r0, [r4, #8]
 800c2e6:	2201      	movs	r2, #1
 800c2e8:	2109      	movs	r1, #9
 800c2ea:	f7ff ff7d 	bl	800c1e8 <std>
 800c2ee:	68e0      	ldr	r0, [r4, #12]
 800c2f0:	2202      	movs	r2, #2
 800c2f2:	2112      	movs	r1, #18
 800c2f4:	f7ff ff78 	bl	800c1e8 <std>
 800c2f8:	2301      	movs	r3, #1
 800c2fa:	61a3      	str	r3, [r4, #24]
 800c2fc:	e7d2      	b.n	800c2a4 <__sinit+0xc>
 800c2fe:	bf00      	nop
 800c300:	08017b18 	.word	0x08017b18
 800c304:	0800c231 	.word	0x0800c231

0800c308 <__sfp>:
 800c308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c30a:	4607      	mov	r7, r0
 800c30c:	f7ff ffac 	bl	800c268 <__sfp_lock_acquire>
 800c310:	4b1e      	ldr	r3, [pc, #120]	; (800c38c <__sfp+0x84>)
 800c312:	681e      	ldr	r6, [r3, #0]
 800c314:	69b3      	ldr	r3, [r6, #24]
 800c316:	b913      	cbnz	r3, 800c31e <__sfp+0x16>
 800c318:	4630      	mov	r0, r6
 800c31a:	f7ff ffbd 	bl	800c298 <__sinit>
 800c31e:	3648      	adds	r6, #72	; 0x48
 800c320:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c324:	3b01      	subs	r3, #1
 800c326:	d503      	bpl.n	800c330 <__sfp+0x28>
 800c328:	6833      	ldr	r3, [r6, #0]
 800c32a:	b30b      	cbz	r3, 800c370 <__sfp+0x68>
 800c32c:	6836      	ldr	r6, [r6, #0]
 800c32e:	e7f7      	b.n	800c320 <__sfp+0x18>
 800c330:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c334:	b9d5      	cbnz	r5, 800c36c <__sfp+0x64>
 800c336:	4b16      	ldr	r3, [pc, #88]	; (800c390 <__sfp+0x88>)
 800c338:	60e3      	str	r3, [r4, #12]
 800c33a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c33e:	6665      	str	r5, [r4, #100]	; 0x64
 800c340:	f000 f847 	bl	800c3d2 <__retarget_lock_init_recursive>
 800c344:	f7ff ff96 	bl	800c274 <__sfp_lock_release>
 800c348:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c34c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c350:	6025      	str	r5, [r4, #0]
 800c352:	61a5      	str	r5, [r4, #24]
 800c354:	2208      	movs	r2, #8
 800c356:	4629      	mov	r1, r5
 800c358:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c35c:	f7ff feee 	bl	800c13c <memset>
 800c360:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c364:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c368:	4620      	mov	r0, r4
 800c36a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c36c:	3468      	adds	r4, #104	; 0x68
 800c36e:	e7d9      	b.n	800c324 <__sfp+0x1c>
 800c370:	2104      	movs	r1, #4
 800c372:	4638      	mov	r0, r7
 800c374:	f7ff ff62 	bl	800c23c <__sfmoreglue>
 800c378:	4604      	mov	r4, r0
 800c37a:	6030      	str	r0, [r6, #0]
 800c37c:	2800      	cmp	r0, #0
 800c37e:	d1d5      	bne.n	800c32c <__sfp+0x24>
 800c380:	f7ff ff78 	bl	800c274 <__sfp_lock_release>
 800c384:	230c      	movs	r3, #12
 800c386:	603b      	str	r3, [r7, #0]
 800c388:	e7ee      	b.n	800c368 <__sfp+0x60>
 800c38a:	bf00      	nop
 800c38c:	08017b18 	.word	0x08017b18
 800c390:	ffff0001 	.word	0xffff0001

0800c394 <_fwalk_reent>:
 800c394:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c398:	4606      	mov	r6, r0
 800c39a:	4688      	mov	r8, r1
 800c39c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c3a0:	2700      	movs	r7, #0
 800c3a2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c3a6:	f1b9 0901 	subs.w	r9, r9, #1
 800c3aa:	d505      	bpl.n	800c3b8 <_fwalk_reent+0x24>
 800c3ac:	6824      	ldr	r4, [r4, #0]
 800c3ae:	2c00      	cmp	r4, #0
 800c3b0:	d1f7      	bne.n	800c3a2 <_fwalk_reent+0xe>
 800c3b2:	4638      	mov	r0, r7
 800c3b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c3b8:	89ab      	ldrh	r3, [r5, #12]
 800c3ba:	2b01      	cmp	r3, #1
 800c3bc:	d907      	bls.n	800c3ce <_fwalk_reent+0x3a>
 800c3be:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c3c2:	3301      	adds	r3, #1
 800c3c4:	d003      	beq.n	800c3ce <_fwalk_reent+0x3a>
 800c3c6:	4629      	mov	r1, r5
 800c3c8:	4630      	mov	r0, r6
 800c3ca:	47c0      	blx	r8
 800c3cc:	4307      	orrs	r7, r0
 800c3ce:	3568      	adds	r5, #104	; 0x68
 800c3d0:	e7e9      	b.n	800c3a6 <_fwalk_reent+0x12>

0800c3d2 <__retarget_lock_init_recursive>:
 800c3d2:	4770      	bx	lr

0800c3d4 <__retarget_lock_acquire_recursive>:
 800c3d4:	4770      	bx	lr

0800c3d6 <__retarget_lock_release_recursive>:
 800c3d6:	4770      	bx	lr

0800c3d8 <sbrk_aligned>:
 800c3d8:	b570      	push	{r4, r5, r6, lr}
 800c3da:	4e0e      	ldr	r6, [pc, #56]	; (800c414 <sbrk_aligned+0x3c>)
 800c3dc:	460c      	mov	r4, r1
 800c3de:	6831      	ldr	r1, [r6, #0]
 800c3e0:	4605      	mov	r5, r0
 800c3e2:	b911      	cbnz	r1, 800c3ea <sbrk_aligned+0x12>
 800c3e4:	f000 fd1e 	bl	800ce24 <_sbrk_r>
 800c3e8:	6030      	str	r0, [r6, #0]
 800c3ea:	4621      	mov	r1, r4
 800c3ec:	4628      	mov	r0, r5
 800c3ee:	f000 fd19 	bl	800ce24 <_sbrk_r>
 800c3f2:	1c43      	adds	r3, r0, #1
 800c3f4:	d00a      	beq.n	800c40c <sbrk_aligned+0x34>
 800c3f6:	1cc4      	adds	r4, r0, #3
 800c3f8:	f024 0403 	bic.w	r4, r4, #3
 800c3fc:	42a0      	cmp	r0, r4
 800c3fe:	d007      	beq.n	800c410 <sbrk_aligned+0x38>
 800c400:	1a21      	subs	r1, r4, r0
 800c402:	4628      	mov	r0, r5
 800c404:	f000 fd0e 	bl	800ce24 <_sbrk_r>
 800c408:	3001      	adds	r0, #1
 800c40a:	d101      	bne.n	800c410 <sbrk_aligned+0x38>
 800c40c:	f04f 34ff 	mov.w	r4, #4294967295
 800c410:	4620      	mov	r0, r4
 800c412:	bd70      	pop	{r4, r5, r6, pc}
 800c414:	20000e1c 	.word	0x20000e1c

0800c418 <_malloc_r>:
 800c418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c41c:	1ccd      	adds	r5, r1, #3
 800c41e:	f025 0503 	bic.w	r5, r5, #3
 800c422:	3508      	adds	r5, #8
 800c424:	2d0c      	cmp	r5, #12
 800c426:	bf38      	it	cc
 800c428:	250c      	movcc	r5, #12
 800c42a:	2d00      	cmp	r5, #0
 800c42c:	4607      	mov	r7, r0
 800c42e:	db01      	blt.n	800c434 <_malloc_r+0x1c>
 800c430:	42a9      	cmp	r1, r5
 800c432:	d905      	bls.n	800c440 <_malloc_r+0x28>
 800c434:	230c      	movs	r3, #12
 800c436:	603b      	str	r3, [r7, #0]
 800c438:	2600      	movs	r6, #0
 800c43a:	4630      	mov	r0, r6
 800c43c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c440:	4e2e      	ldr	r6, [pc, #184]	; (800c4fc <_malloc_r+0xe4>)
 800c442:	f000 ff87 	bl	800d354 <__malloc_lock>
 800c446:	6833      	ldr	r3, [r6, #0]
 800c448:	461c      	mov	r4, r3
 800c44a:	bb34      	cbnz	r4, 800c49a <_malloc_r+0x82>
 800c44c:	4629      	mov	r1, r5
 800c44e:	4638      	mov	r0, r7
 800c450:	f7ff ffc2 	bl	800c3d8 <sbrk_aligned>
 800c454:	1c43      	adds	r3, r0, #1
 800c456:	4604      	mov	r4, r0
 800c458:	d14d      	bne.n	800c4f6 <_malloc_r+0xde>
 800c45a:	6834      	ldr	r4, [r6, #0]
 800c45c:	4626      	mov	r6, r4
 800c45e:	2e00      	cmp	r6, #0
 800c460:	d140      	bne.n	800c4e4 <_malloc_r+0xcc>
 800c462:	6823      	ldr	r3, [r4, #0]
 800c464:	4631      	mov	r1, r6
 800c466:	4638      	mov	r0, r7
 800c468:	eb04 0803 	add.w	r8, r4, r3
 800c46c:	f000 fcda 	bl	800ce24 <_sbrk_r>
 800c470:	4580      	cmp	r8, r0
 800c472:	d13a      	bne.n	800c4ea <_malloc_r+0xd2>
 800c474:	6821      	ldr	r1, [r4, #0]
 800c476:	3503      	adds	r5, #3
 800c478:	1a6d      	subs	r5, r5, r1
 800c47a:	f025 0503 	bic.w	r5, r5, #3
 800c47e:	3508      	adds	r5, #8
 800c480:	2d0c      	cmp	r5, #12
 800c482:	bf38      	it	cc
 800c484:	250c      	movcc	r5, #12
 800c486:	4629      	mov	r1, r5
 800c488:	4638      	mov	r0, r7
 800c48a:	f7ff ffa5 	bl	800c3d8 <sbrk_aligned>
 800c48e:	3001      	adds	r0, #1
 800c490:	d02b      	beq.n	800c4ea <_malloc_r+0xd2>
 800c492:	6823      	ldr	r3, [r4, #0]
 800c494:	442b      	add	r3, r5
 800c496:	6023      	str	r3, [r4, #0]
 800c498:	e00e      	b.n	800c4b8 <_malloc_r+0xa0>
 800c49a:	6822      	ldr	r2, [r4, #0]
 800c49c:	1b52      	subs	r2, r2, r5
 800c49e:	d41e      	bmi.n	800c4de <_malloc_r+0xc6>
 800c4a0:	2a0b      	cmp	r2, #11
 800c4a2:	d916      	bls.n	800c4d2 <_malloc_r+0xba>
 800c4a4:	1961      	adds	r1, r4, r5
 800c4a6:	42a3      	cmp	r3, r4
 800c4a8:	6025      	str	r5, [r4, #0]
 800c4aa:	bf18      	it	ne
 800c4ac:	6059      	strne	r1, [r3, #4]
 800c4ae:	6863      	ldr	r3, [r4, #4]
 800c4b0:	bf08      	it	eq
 800c4b2:	6031      	streq	r1, [r6, #0]
 800c4b4:	5162      	str	r2, [r4, r5]
 800c4b6:	604b      	str	r3, [r1, #4]
 800c4b8:	4638      	mov	r0, r7
 800c4ba:	f104 060b 	add.w	r6, r4, #11
 800c4be:	f000 ff4f 	bl	800d360 <__malloc_unlock>
 800c4c2:	f026 0607 	bic.w	r6, r6, #7
 800c4c6:	1d23      	adds	r3, r4, #4
 800c4c8:	1af2      	subs	r2, r6, r3
 800c4ca:	d0b6      	beq.n	800c43a <_malloc_r+0x22>
 800c4cc:	1b9b      	subs	r3, r3, r6
 800c4ce:	50a3      	str	r3, [r4, r2]
 800c4d0:	e7b3      	b.n	800c43a <_malloc_r+0x22>
 800c4d2:	6862      	ldr	r2, [r4, #4]
 800c4d4:	42a3      	cmp	r3, r4
 800c4d6:	bf0c      	ite	eq
 800c4d8:	6032      	streq	r2, [r6, #0]
 800c4da:	605a      	strne	r2, [r3, #4]
 800c4dc:	e7ec      	b.n	800c4b8 <_malloc_r+0xa0>
 800c4de:	4623      	mov	r3, r4
 800c4e0:	6864      	ldr	r4, [r4, #4]
 800c4e2:	e7b2      	b.n	800c44a <_malloc_r+0x32>
 800c4e4:	4634      	mov	r4, r6
 800c4e6:	6876      	ldr	r6, [r6, #4]
 800c4e8:	e7b9      	b.n	800c45e <_malloc_r+0x46>
 800c4ea:	230c      	movs	r3, #12
 800c4ec:	603b      	str	r3, [r7, #0]
 800c4ee:	4638      	mov	r0, r7
 800c4f0:	f000 ff36 	bl	800d360 <__malloc_unlock>
 800c4f4:	e7a1      	b.n	800c43a <_malloc_r+0x22>
 800c4f6:	6025      	str	r5, [r4, #0]
 800c4f8:	e7de      	b.n	800c4b8 <_malloc_r+0xa0>
 800c4fa:	bf00      	nop
 800c4fc:	20000e18 	.word	0x20000e18

0800c500 <__ssputs_r>:
 800c500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c504:	688e      	ldr	r6, [r1, #8]
 800c506:	429e      	cmp	r6, r3
 800c508:	4682      	mov	sl, r0
 800c50a:	460c      	mov	r4, r1
 800c50c:	4690      	mov	r8, r2
 800c50e:	461f      	mov	r7, r3
 800c510:	d838      	bhi.n	800c584 <__ssputs_r+0x84>
 800c512:	898a      	ldrh	r2, [r1, #12]
 800c514:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c518:	d032      	beq.n	800c580 <__ssputs_r+0x80>
 800c51a:	6825      	ldr	r5, [r4, #0]
 800c51c:	6909      	ldr	r1, [r1, #16]
 800c51e:	eba5 0901 	sub.w	r9, r5, r1
 800c522:	6965      	ldr	r5, [r4, #20]
 800c524:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c528:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c52c:	3301      	adds	r3, #1
 800c52e:	444b      	add	r3, r9
 800c530:	106d      	asrs	r5, r5, #1
 800c532:	429d      	cmp	r5, r3
 800c534:	bf38      	it	cc
 800c536:	461d      	movcc	r5, r3
 800c538:	0553      	lsls	r3, r2, #21
 800c53a:	d531      	bpl.n	800c5a0 <__ssputs_r+0xa0>
 800c53c:	4629      	mov	r1, r5
 800c53e:	f7ff ff6b 	bl	800c418 <_malloc_r>
 800c542:	4606      	mov	r6, r0
 800c544:	b950      	cbnz	r0, 800c55c <__ssputs_r+0x5c>
 800c546:	230c      	movs	r3, #12
 800c548:	f8ca 3000 	str.w	r3, [sl]
 800c54c:	89a3      	ldrh	r3, [r4, #12]
 800c54e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c552:	81a3      	strh	r3, [r4, #12]
 800c554:	f04f 30ff 	mov.w	r0, #4294967295
 800c558:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c55c:	6921      	ldr	r1, [r4, #16]
 800c55e:	464a      	mov	r2, r9
 800c560:	f000 fed0 	bl	800d304 <memcpy>
 800c564:	89a3      	ldrh	r3, [r4, #12]
 800c566:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c56a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c56e:	81a3      	strh	r3, [r4, #12]
 800c570:	6126      	str	r6, [r4, #16]
 800c572:	6165      	str	r5, [r4, #20]
 800c574:	444e      	add	r6, r9
 800c576:	eba5 0509 	sub.w	r5, r5, r9
 800c57a:	6026      	str	r6, [r4, #0]
 800c57c:	60a5      	str	r5, [r4, #8]
 800c57e:	463e      	mov	r6, r7
 800c580:	42be      	cmp	r6, r7
 800c582:	d900      	bls.n	800c586 <__ssputs_r+0x86>
 800c584:	463e      	mov	r6, r7
 800c586:	6820      	ldr	r0, [r4, #0]
 800c588:	4632      	mov	r2, r6
 800c58a:	4641      	mov	r1, r8
 800c58c:	f000 fec8 	bl	800d320 <memmove>
 800c590:	68a3      	ldr	r3, [r4, #8]
 800c592:	1b9b      	subs	r3, r3, r6
 800c594:	60a3      	str	r3, [r4, #8]
 800c596:	6823      	ldr	r3, [r4, #0]
 800c598:	4433      	add	r3, r6
 800c59a:	6023      	str	r3, [r4, #0]
 800c59c:	2000      	movs	r0, #0
 800c59e:	e7db      	b.n	800c558 <__ssputs_r+0x58>
 800c5a0:	462a      	mov	r2, r5
 800c5a2:	f000 ff2f 	bl	800d404 <_realloc_r>
 800c5a6:	4606      	mov	r6, r0
 800c5a8:	2800      	cmp	r0, #0
 800c5aa:	d1e1      	bne.n	800c570 <__ssputs_r+0x70>
 800c5ac:	6921      	ldr	r1, [r4, #16]
 800c5ae:	4650      	mov	r0, sl
 800c5b0:	f000 fedc 	bl	800d36c <_free_r>
 800c5b4:	e7c7      	b.n	800c546 <__ssputs_r+0x46>
	...

0800c5b8 <_svfiprintf_r>:
 800c5b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5bc:	4698      	mov	r8, r3
 800c5be:	898b      	ldrh	r3, [r1, #12]
 800c5c0:	061b      	lsls	r3, r3, #24
 800c5c2:	b09d      	sub	sp, #116	; 0x74
 800c5c4:	4607      	mov	r7, r0
 800c5c6:	460d      	mov	r5, r1
 800c5c8:	4614      	mov	r4, r2
 800c5ca:	d50e      	bpl.n	800c5ea <_svfiprintf_r+0x32>
 800c5cc:	690b      	ldr	r3, [r1, #16]
 800c5ce:	b963      	cbnz	r3, 800c5ea <_svfiprintf_r+0x32>
 800c5d0:	2140      	movs	r1, #64	; 0x40
 800c5d2:	f7ff ff21 	bl	800c418 <_malloc_r>
 800c5d6:	6028      	str	r0, [r5, #0]
 800c5d8:	6128      	str	r0, [r5, #16]
 800c5da:	b920      	cbnz	r0, 800c5e6 <_svfiprintf_r+0x2e>
 800c5dc:	230c      	movs	r3, #12
 800c5de:	603b      	str	r3, [r7, #0]
 800c5e0:	f04f 30ff 	mov.w	r0, #4294967295
 800c5e4:	e0d1      	b.n	800c78a <_svfiprintf_r+0x1d2>
 800c5e6:	2340      	movs	r3, #64	; 0x40
 800c5e8:	616b      	str	r3, [r5, #20]
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	9309      	str	r3, [sp, #36]	; 0x24
 800c5ee:	2320      	movs	r3, #32
 800c5f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c5f4:	f8cd 800c 	str.w	r8, [sp, #12]
 800c5f8:	2330      	movs	r3, #48	; 0x30
 800c5fa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c7a4 <_svfiprintf_r+0x1ec>
 800c5fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c602:	f04f 0901 	mov.w	r9, #1
 800c606:	4623      	mov	r3, r4
 800c608:	469a      	mov	sl, r3
 800c60a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c60e:	b10a      	cbz	r2, 800c614 <_svfiprintf_r+0x5c>
 800c610:	2a25      	cmp	r2, #37	; 0x25
 800c612:	d1f9      	bne.n	800c608 <_svfiprintf_r+0x50>
 800c614:	ebba 0b04 	subs.w	fp, sl, r4
 800c618:	d00b      	beq.n	800c632 <_svfiprintf_r+0x7a>
 800c61a:	465b      	mov	r3, fp
 800c61c:	4622      	mov	r2, r4
 800c61e:	4629      	mov	r1, r5
 800c620:	4638      	mov	r0, r7
 800c622:	f7ff ff6d 	bl	800c500 <__ssputs_r>
 800c626:	3001      	adds	r0, #1
 800c628:	f000 80aa 	beq.w	800c780 <_svfiprintf_r+0x1c8>
 800c62c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c62e:	445a      	add	r2, fp
 800c630:	9209      	str	r2, [sp, #36]	; 0x24
 800c632:	f89a 3000 	ldrb.w	r3, [sl]
 800c636:	2b00      	cmp	r3, #0
 800c638:	f000 80a2 	beq.w	800c780 <_svfiprintf_r+0x1c8>
 800c63c:	2300      	movs	r3, #0
 800c63e:	f04f 32ff 	mov.w	r2, #4294967295
 800c642:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c646:	f10a 0a01 	add.w	sl, sl, #1
 800c64a:	9304      	str	r3, [sp, #16]
 800c64c:	9307      	str	r3, [sp, #28]
 800c64e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c652:	931a      	str	r3, [sp, #104]	; 0x68
 800c654:	4654      	mov	r4, sl
 800c656:	2205      	movs	r2, #5
 800c658:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c65c:	4851      	ldr	r0, [pc, #324]	; (800c7a4 <_svfiprintf_r+0x1ec>)
 800c65e:	f7f3 fdb7 	bl	80001d0 <memchr>
 800c662:	9a04      	ldr	r2, [sp, #16]
 800c664:	b9d8      	cbnz	r0, 800c69e <_svfiprintf_r+0xe6>
 800c666:	06d0      	lsls	r0, r2, #27
 800c668:	bf44      	itt	mi
 800c66a:	2320      	movmi	r3, #32
 800c66c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c670:	0711      	lsls	r1, r2, #28
 800c672:	bf44      	itt	mi
 800c674:	232b      	movmi	r3, #43	; 0x2b
 800c676:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c67a:	f89a 3000 	ldrb.w	r3, [sl]
 800c67e:	2b2a      	cmp	r3, #42	; 0x2a
 800c680:	d015      	beq.n	800c6ae <_svfiprintf_r+0xf6>
 800c682:	9a07      	ldr	r2, [sp, #28]
 800c684:	4654      	mov	r4, sl
 800c686:	2000      	movs	r0, #0
 800c688:	f04f 0c0a 	mov.w	ip, #10
 800c68c:	4621      	mov	r1, r4
 800c68e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c692:	3b30      	subs	r3, #48	; 0x30
 800c694:	2b09      	cmp	r3, #9
 800c696:	d94e      	bls.n	800c736 <_svfiprintf_r+0x17e>
 800c698:	b1b0      	cbz	r0, 800c6c8 <_svfiprintf_r+0x110>
 800c69a:	9207      	str	r2, [sp, #28]
 800c69c:	e014      	b.n	800c6c8 <_svfiprintf_r+0x110>
 800c69e:	eba0 0308 	sub.w	r3, r0, r8
 800c6a2:	fa09 f303 	lsl.w	r3, r9, r3
 800c6a6:	4313      	orrs	r3, r2
 800c6a8:	9304      	str	r3, [sp, #16]
 800c6aa:	46a2      	mov	sl, r4
 800c6ac:	e7d2      	b.n	800c654 <_svfiprintf_r+0x9c>
 800c6ae:	9b03      	ldr	r3, [sp, #12]
 800c6b0:	1d19      	adds	r1, r3, #4
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	9103      	str	r1, [sp, #12]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	bfbb      	ittet	lt
 800c6ba:	425b      	neglt	r3, r3
 800c6bc:	f042 0202 	orrlt.w	r2, r2, #2
 800c6c0:	9307      	strge	r3, [sp, #28]
 800c6c2:	9307      	strlt	r3, [sp, #28]
 800c6c4:	bfb8      	it	lt
 800c6c6:	9204      	strlt	r2, [sp, #16]
 800c6c8:	7823      	ldrb	r3, [r4, #0]
 800c6ca:	2b2e      	cmp	r3, #46	; 0x2e
 800c6cc:	d10c      	bne.n	800c6e8 <_svfiprintf_r+0x130>
 800c6ce:	7863      	ldrb	r3, [r4, #1]
 800c6d0:	2b2a      	cmp	r3, #42	; 0x2a
 800c6d2:	d135      	bne.n	800c740 <_svfiprintf_r+0x188>
 800c6d4:	9b03      	ldr	r3, [sp, #12]
 800c6d6:	1d1a      	adds	r2, r3, #4
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	9203      	str	r2, [sp, #12]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	bfb8      	it	lt
 800c6e0:	f04f 33ff 	movlt.w	r3, #4294967295
 800c6e4:	3402      	adds	r4, #2
 800c6e6:	9305      	str	r3, [sp, #20]
 800c6e8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c7b4 <_svfiprintf_r+0x1fc>
 800c6ec:	7821      	ldrb	r1, [r4, #0]
 800c6ee:	2203      	movs	r2, #3
 800c6f0:	4650      	mov	r0, sl
 800c6f2:	f7f3 fd6d 	bl	80001d0 <memchr>
 800c6f6:	b140      	cbz	r0, 800c70a <_svfiprintf_r+0x152>
 800c6f8:	2340      	movs	r3, #64	; 0x40
 800c6fa:	eba0 000a 	sub.w	r0, r0, sl
 800c6fe:	fa03 f000 	lsl.w	r0, r3, r0
 800c702:	9b04      	ldr	r3, [sp, #16]
 800c704:	4303      	orrs	r3, r0
 800c706:	3401      	adds	r4, #1
 800c708:	9304      	str	r3, [sp, #16]
 800c70a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c70e:	4826      	ldr	r0, [pc, #152]	; (800c7a8 <_svfiprintf_r+0x1f0>)
 800c710:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c714:	2206      	movs	r2, #6
 800c716:	f7f3 fd5b 	bl	80001d0 <memchr>
 800c71a:	2800      	cmp	r0, #0
 800c71c:	d038      	beq.n	800c790 <_svfiprintf_r+0x1d8>
 800c71e:	4b23      	ldr	r3, [pc, #140]	; (800c7ac <_svfiprintf_r+0x1f4>)
 800c720:	bb1b      	cbnz	r3, 800c76a <_svfiprintf_r+0x1b2>
 800c722:	9b03      	ldr	r3, [sp, #12]
 800c724:	3307      	adds	r3, #7
 800c726:	f023 0307 	bic.w	r3, r3, #7
 800c72a:	3308      	adds	r3, #8
 800c72c:	9303      	str	r3, [sp, #12]
 800c72e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c730:	4433      	add	r3, r6
 800c732:	9309      	str	r3, [sp, #36]	; 0x24
 800c734:	e767      	b.n	800c606 <_svfiprintf_r+0x4e>
 800c736:	fb0c 3202 	mla	r2, ip, r2, r3
 800c73a:	460c      	mov	r4, r1
 800c73c:	2001      	movs	r0, #1
 800c73e:	e7a5      	b.n	800c68c <_svfiprintf_r+0xd4>
 800c740:	2300      	movs	r3, #0
 800c742:	3401      	adds	r4, #1
 800c744:	9305      	str	r3, [sp, #20]
 800c746:	4619      	mov	r1, r3
 800c748:	f04f 0c0a 	mov.w	ip, #10
 800c74c:	4620      	mov	r0, r4
 800c74e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c752:	3a30      	subs	r2, #48	; 0x30
 800c754:	2a09      	cmp	r2, #9
 800c756:	d903      	bls.n	800c760 <_svfiprintf_r+0x1a8>
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d0c5      	beq.n	800c6e8 <_svfiprintf_r+0x130>
 800c75c:	9105      	str	r1, [sp, #20]
 800c75e:	e7c3      	b.n	800c6e8 <_svfiprintf_r+0x130>
 800c760:	fb0c 2101 	mla	r1, ip, r1, r2
 800c764:	4604      	mov	r4, r0
 800c766:	2301      	movs	r3, #1
 800c768:	e7f0      	b.n	800c74c <_svfiprintf_r+0x194>
 800c76a:	ab03      	add	r3, sp, #12
 800c76c:	9300      	str	r3, [sp, #0]
 800c76e:	462a      	mov	r2, r5
 800c770:	4b0f      	ldr	r3, [pc, #60]	; (800c7b0 <_svfiprintf_r+0x1f8>)
 800c772:	a904      	add	r1, sp, #16
 800c774:	4638      	mov	r0, r7
 800c776:	f3af 8000 	nop.w
 800c77a:	1c42      	adds	r2, r0, #1
 800c77c:	4606      	mov	r6, r0
 800c77e:	d1d6      	bne.n	800c72e <_svfiprintf_r+0x176>
 800c780:	89ab      	ldrh	r3, [r5, #12]
 800c782:	065b      	lsls	r3, r3, #25
 800c784:	f53f af2c 	bmi.w	800c5e0 <_svfiprintf_r+0x28>
 800c788:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c78a:	b01d      	add	sp, #116	; 0x74
 800c78c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c790:	ab03      	add	r3, sp, #12
 800c792:	9300      	str	r3, [sp, #0]
 800c794:	462a      	mov	r2, r5
 800c796:	4b06      	ldr	r3, [pc, #24]	; (800c7b0 <_svfiprintf_r+0x1f8>)
 800c798:	a904      	add	r1, sp, #16
 800c79a:	4638      	mov	r0, r7
 800c79c:	f000 f9d4 	bl	800cb48 <_printf_i>
 800c7a0:	e7eb      	b.n	800c77a <_svfiprintf_r+0x1c2>
 800c7a2:	bf00      	nop
 800c7a4:	08017b7c 	.word	0x08017b7c
 800c7a8:	08017b86 	.word	0x08017b86
 800c7ac:	00000000 	.word	0x00000000
 800c7b0:	0800c501 	.word	0x0800c501
 800c7b4:	08017b82 	.word	0x08017b82

0800c7b8 <__sfputc_r>:
 800c7b8:	6893      	ldr	r3, [r2, #8]
 800c7ba:	3b01      	subs	r3, #1
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	b410      	push	{r4}
 800c7c0:	6093      	str	r3, [r2, #8]
 800c7c2:	da08      	bge.n	800c7d6 <__sfputc_r+0x1e>
 800c7c4:	6994      	ldr	r4, [r2, #24]
 800c7c6:	42a3      	cmp	r3, r4
 800c7c8:	db01      	blt.n	800c7ce <__sfputc_r+0x16>
 800c7ca:	290a      	cmp	r1, #10
 800c7cc:	d103      	bne.n	800c7d6 <__sfputc_r+0x1e>
 800c7ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c7d2:	f000 bb7b 	b.w	800cecc <__swbuf_r>
 800c7d6:	6813      	ldr	r3, [r2, #0]
 800c7d8:	1c58      	adds	r0, r3, #1
 800c7da:	6010      	str	r0, [r2, #0]
 800c7dc:	7019      	strb	r1, [r3, #0]
 800c7de:	4608      	mov	r0, r1
 800c7e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c7e4:	4770      	bx	lr

0800c7e6 <__sfputs_r>:
 800c7e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7e8:	4606      	mov	r6, r0
 800c7ea:	460f      	mov	r7, r1
 800c7ec:	4614      	mov	r4, r2
 800c7ee:	18d5      	adds	r5, r2, r3
 800c7f0:	42ac      	cmp	r4, r5
 800c7f2:	d101      	bne.n	800c7f8 <__sfputs_r+0x12>
 800c7f4:	2000      	movs	r0, #0
 800c7f6:	e007      	b.n	800c808 <__sfputs_r+0x22>
 800c7f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7fc:	463a      	mov	r2, r7
 800c7fe:	4630      	mov	r0, r6
 800c800:	f7ff ffda 	bl	800c7b8 <__sfputc_r>
 800c804:	1c43      	adds	r3, r0, #1
 800c806:	d1f3      	bne.n	800c7f0 <__sfputs_r+0xa>
 800c808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c80c <_vfiprintf_r>:
 800c80c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c810:	460d      	mov	r5, r1
 800c812:	b09d      	sub	sp, #116	; 0x74
 800c814:	4614      	mov	r4, r2
 800c816:	4698      	mov	r8, r3
 800c818:	4606      	mov	r6, r0
 800c81a:	b118      	cbz	r0, 800c824 <_vfiprintf_r+0x18>
 800c81c:	6983      	ldr	r3, [r0, #24]
 800c81e:	b90b      	cbnz	r3, 800c824 <_vfiprintf_r+0x18>
 800c820:	f7ff fd3a 	bl	800c298 <__sinit>
 800c824:	4b89      	ldr	r3, [pc, #548]	; (800ca4c <_vfiprintf_r+0x240>)
 800c826:	429d      	cmp	r5, r3
 800c828:	d11b      	bne.n	800c862 <_vfiprintf_r+0x56>
 800c82a:	6875      	ldr	r5, [r6, #4]
 800c82c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c82e:	07d9      	lsls	r1, r3, #31
 800c830:	d405      	bmi.n	800c83e <_vfiprintf_r+0x32>
 800c832:	89ab      	ldrh	r3, [r5, #12]
 800c834:	059a      	lsls	r2, r3, #22
 800c836:	d402      	bmi.n	800c83e <_vfiprintf_r+0x32>
 800c838:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c83a:	f7ff fdcb 	bl	800c3d4 <__retarget_lock_acquire_recursive>
 800c83e:	89ab      	ldrh	r3, [r5, #12]
 800c840:	071b      	lsls	r3, r3, #28
 800c842:	d501      	bpl.n	800c848 <_vfiprintf_r+0x3c>
 800c844:	692b      	ldr	r3, [r5, #16]
 800c846:	b9eb      	cbnz	r3, 800c884 <_vfiprintf_r+0x78>
 800c848:	4629      	mov	r1, r5
 800c84a:	4630      	mov	r0, r6
 800c84c:	f000 fba2 	bl	800cf94 <__swsetup_r>
 800c850:	b1c0      	cbz	r0, 800c884 <_vfiprintf_r+0x78>
 800c852:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c854:	07dc      	lsls	r4, r3, #31
 800c856:	d50e      	bpl.n	800c876 <_vfiprintf_r+0x6a>
 800c858:	f04f 30ff 	mov.w	r0, #4294967295
 800c85c:	b01d      	add	sp, #116	; 0x74
 800c85e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c862:	4b7b      	ldr	r3, [pc, #492]	; (800ca50 <_vfiprintf_r+0x244>)
 800c864:	429d      	cmp	r5, r3
 800c866:	d101      	bne.n	800c86c <_vfiprintf_r+0x60>
 800c868:	68b5      	ldr	r5, [r6, #8]
 800c86a:	e7df      	b.n	800c82c <_vfiprintf_r+0x20>
 800c86c:	4b79      	ldr	r3, [pc, #484]	; (800ca54 <_vfiprintf_r+0x248>)
 800c86e:	429d      	cmp	r5, r3
 800c870:	bf08      	it	eq
 800c872:	68f5      	ldreq	r5, [r6, #12]
 800c874:	e7da      	b.n	800c82c <_vfiprintf_r+0x20>
 800c876:	89ab      	ldrh	r3, [r5, #12]
 800c878:	0598      	lsls	r0, r3, #22
 800c87a:	d4ed      	bmi.n	800c858 <_vfiprintf_r+0x4c>
 800c87c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c87e:	f7ff fdaa 	bl	800c3d6 <__retarget_lock_release_recursive>
 800c882:	e7e9      	b.n	800c858 <_vfiprintf_r+0x4c>
 800c884:	2300      	movs	r3, #0
 800c886:	9309      	str	r3, [sp, #36]	; 0x24
 800c888:	2320      	movs	r3, #32
 800c88a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c88e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c892:	2330      	movs	r3, #48	; 0x30
 800c894:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ca58 <_vfiprintf_r+0x24c>
 800c898:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c89c:	f04f 0901 	mov.w	r9, #1
 800c8a0:	4623      	mov	r3, r4
 800c8a2:	469a      	mov	sl, r3
 800c8a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c8a8:	b10a      	cbz	r2, 800c8ae <_vfiprintf_r+0xa2>
 800c8aa:	2a25      	cmp	r2, #37	; 0x25
 800c8ac:	d1f9      	bne.n	800c8a2 <_vfiprintf_r+0x96>
 800c8ae:	ebba 0b04 	subs.w	fp, sl, r4
 800c8b2:	d00b      	beq.n	800c8cc <_vfiprintf_r+0xc0>
 800c8b4:	465b      	mov	r3, fp
 800c8b6:	4622      	mov	r2, r4
 800c8b8:	4629      	mov	r1, r5
 800c8ba:	4630      	mov	r0, r6
 800c8bc:	f7ff ff93 	bl	800c7e6 <__sfputs_r>
 800c8c0:	3001      	adds	r0, #1
 800c8c2:	f000 80aa 	beq.w	800ca1a <_vfiprintf_r+0x20e>
 800c8c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c8c8:	445a      	add	r2, fp
 800c8ca:	9209      	str	r2, [sp, #36]	; 0x24
 800c8cc:	f89a 3000 	ldrb.w	r3, [sl]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	f000 80a2 	beq.w	800ca1a <_vfiprintf_r+0x20e>
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	f04f 32ff 	mov.w	r2, #4294967295
 800c8dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c8e0:	f10a 0a01 	add.w	sl, sl, #1
 800c8e4:	9304      	str	r3, [sp, #16]
 800c8e6:	9307      	str	r3, [sp, #28]
 800c8e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c8ec:	931a      	str	r3, [sp, #104]	; 0x68
 800c8ee:	4654      	mov	r4, sl
 800c8f0:	2205      	movs	r2, #5
 800c8f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8f6:	4858      	ldr	r0, [pc, #352]	; (800ca58 <_vfiprintf_r+0x24c>)
 800c8f8:	f7f3 fc6a 	bl	80001d0 <memchr>
 800c8fc:	9a04      	ldr	r2, [sp, #16]
 800c8fe:	b9d8      	cbnz	r0, 800c938 <_vfiprintf_r+0x12c>
 800c900:	06d1      	lsls	r1, r2, #27
 800c902:	bf44      	itt	mi
 800c904:	2320      	movmi	r3, #32
 800c906:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c90a:	0713      	lsls	r3, r2, #28
 800c90c:	bf44      	itt	mi
 800c90e:	232b      	movmi	r3, #43	; 0x2b
 800c910:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c914:	f89a 3000 	ldrb.w	r3, [sl]
 800c918:	2b2a      	cmp	r3, #42	; 0x2a
 800c91a:	d015      	beq.n	800c948 <_vfiprintf_r+0x13c>
 800c91c:	9a07      	ldr	r2, [sp, #28]
 800c91e:	4654      	mov	r4, sl
 800c920:	2000      	movs	r0, #0
 800c922:	f04f 0c0a 	mov.w	ip, #10
 800c926:	4621      	mov	r1, r4
 800c928:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c92c:	3b30      	subs	r3, #48	; 0x30
 800c92e:	2b09      	cmp	r3, #9
 800c930:	d94e      	bls.n	800c9d0 <_vfiprintf_r+0x1c4>
 800c932:	b1b0      	cbz	r0, 800c962 <_vfiprintf_r+0x156>
 800c934:	9207      	str	r2, [sp, #28]
 800c936:	e014      	b.n	800c962 <_vfiprintf_r+0x156>
 800c938:	eba0 0308 	sub.w	r3, r0, r8
 800c93c:	fa09 f303 	lsl.w	r3, r9, r3
 800c940:	4313      	orrs	r3, r2
 800c942:	9304      	str	r3, [sp, #16]
 800c944:	46a2      	mov	sl, r4
 800c946:	e7d2      	b.n	800c8ee <_vfiprintf_r+0xe2>
 800c948:	9b03      	ldr	r3, [sp, #12]
 800c94a:	1d19      	adds	r1, r3, #4
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	9103      	str	r1, [sp, #12]
 800c950:	2b00      	cmp	r3, #0
 800c952:	bfbb      	ittet	lt
 800c954:	425b      	neglt	r3, r3
 800c956:	f042 0202 	orrlt.w	r2, r2, #2
 800c95a:	9307      	strge	r3, [sp, #28]
 800c95c:	9307      	strlt	r3, [sp, #28]
 800c95e:	bfb8      	it	lt
 800c960:	9204      	strlt	r2, [sp, #16]
 800c962:	7823      	ldrb	r3, [r4, #0]
 800c964:	2b2e      	cmp	r3, #46	; 0x2e
 800c966:	d10c      	bne.n	800c982 <_vfiprintf_r+0x176>
 800c968:	7863      	ldrb	r3, [r4, #1]
 800c96a:	2b2a      	cmp	r3, #42	; 0x2a
 800c96c:	d135      	bne.n	800c9da <_vfiprintf_r+0x1ce>
 800c96e:	9b03      	ldr	r3, [sp, #12]
 800c970:	1d1a      	adds	r2, r3, #4
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	9203      	str	r2, [sp, #12]
 800c976:	2b00      	cmp	r3, #0
 800c978:	bfb8      	it	lt
 800c97a:	f04f 33ff 	movlt.w	r3, #4294967295
 800c97e:	3402      	adds	r4, #2
 800c980:	9305      	str	r3, [sp, #20]
 800c982:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ca68 <_vfiprintf_r+0x25c>
 800c986:	7821      	ldrb	r1, [r4, #0]
 800c988:	2203      	movs	r2, #3
 800c98a:	4650      	mov	r0, sl
 800c98c:	f7f3 fc20 	bl	80001d0 <memchr>
 800c990:	b140      	cbz	r0, 800c9a4 <_vfiprintf_r+0x198>
 800c992:	2340      	movs	r3, #64	; 0x40
 800c994:	eba0 000a 	sub.w	r0, r0, sl
 800c998:	fa03 f000 	lsl.w	r0, r3, r0
 800c99c:	9b04      	ldr	r3, [sp, #16]
 800c99e:	4303      	orrs	r3, r0
 800c9a0:	3401      	adds	r4, #1
 800c9a2:	9304      	str	r3, [sp, #16]
 800c9a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9a8:	482c      	ldr	r0, [pc, #176]	; (800ca5c <_vfiprintf_r+0x250>)
 800c9aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c9ae:	2206      	movs	r2, #6
 800c9b0:	f7f3 fc0e 	bl	80001d0 <memchr>
 800c9b4:	2800      	cmp	r0, #0
 800c9b6:	d03f      	beq.n	800ca38 <_vfiprintf_r+0x22c>
 800c9b8:	4b29      	ldr	r3, [pc, #164]	; (800ca60 <_vfiprintf_r+0x254>)
 800c9ba:	bb1b      	cbnz	r3, 800ca04 <_vfiprintf_r+0x1f8>
 800c9bc:	9b03      	ldr	r3, [sp, #12]
 800c9be:	3307      	adds	r3, #7
 800c9c0:	f023 0307 	bic.w	r3, r3, #7
 800c9c4:	3308      	adds	r3, #8
 800c9c6:	9303      	str	r3, [sp, #12]
 800c9c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9ca:	443b      	add	r3, r7
 800c9cc:	9309      	str	r3, [sp, #36]	; 0x24
 800c9ce:	e767      	b.n	800c8a0 <_vfiprintf_r+0x94>
 800c9d0:	fb0c 3202 	mla	r2, ip, r2, r3
 800c9d4:	460c      	mov	r4, r1
 800c9d6:	2001      	movs	r0, #1
 800c9d8:	e7a5      	b.n	800c926 <_vfiprintf_r+0x11a>
 800c9da:	2300      	movs	r3, #0
 800c9dc:	3401      	adds	r4, #1
 800c9de:	9305      	str	r3, [sp, #20]
 800c9e0:	4619      	mov	r1, r3
 800c9e2:	f04f 0c0a 	mov.w	ip, #10
 800c9e6:	4620      	mov	r0, r4
 800c9e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c9ec:	3a30      	subs	r2, #48	; 0x30
 800c9ee:	2a09      	cmp	r2, #9
 800c9f0:	d903      	bls.n	800c9fa <_vfiprintf_r+0x1ee>
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d0c5      	beq.n	800c982 <_vfiprintf_r+0x176>
 800c9f6:	9105      	str	r1, [sp, #20]
 800c9f8:	e7c3      	b.n	800c982 <_vfiprintf_r+0x176>
 800c9fa:	fb0c 2101 	mla	r1, ip, r1, r2
 800c9fe:	4604      	mov	r4, r0
 800ca00:	2301      	movs	r3, #1
 800ca02:	e7f0      	b.n	800c9e6 <_vfiprintf_r+0x1da>
 800ca04:	ab03      	add	r3, sp, #12
 800ca06:	9300      	str	r3, [sp, #0]
 800ca08:	462a      	mov	r2, r5
 800ca0a:	4b16      	ldr	r3, [pc, #88]	; (800ca64 <_vfiprintf_r+0x258>)
 800ca0c:	a904      	add	r1, sp, #16
 800ca0e:	4630      	mov	r0, r6
 800ca10:	f3af 8000 	nop.w
 800ca14:	4607      	mov	r7, r0
 800ca16:	1c78      	adds	r0, r7, #1
 800ca18:	d1d6      	bne.n	800c9c8 <_vfiprintf_r+0x1bc>
 800ca1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ca1c:	07d9      	lsls	r1, r3, #31
 800ca1e:	d405      	bmi.n	800ca2c <_vfiprintf_r+0x220>
 800ca20:	89ab      	ldrh	r3, [r5, #12]
 800ca22:	059a      	lsls	r2, r3, #22
 800ca24:	d402      	bmi.n	800ca2c <_vfiprintf_r+0x220>
 800ca26:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ca28:	f7ff fcd5 	bl	800c3d6 <__retarget_lock_release_recursive>
 800ca2c:	89ab      	ldrh	r3, [r5, #12]
 800ca2e:	065b      	lsls	r3, r3, #25
 800ca30:	f53f af12 	bmi.w	800c858 <_vfiprintf_r+0x4c>
 800ca34:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ca36:	e711      	b.n	800c85c <_vfiprintf_r+0x50>
 800ca38:	ab03      	add	r3, sp, #12
 800ca3a:	9300      	str	r3, [sp, #0]
 800ca3c:	462a      	mov	r2, r5
 800ca3e:	4b09      	ldr	r3, [pc, #36]	; (800ca64 <_vfiprintf_r+0x258>)
 800ca40:	a904      	add	r1, sp, #16
 800ca42:	4630      	mov	r0, r6
 800ca44:	f000 f880 	bl	800cb48 <_printf_i>
 800ca48:	e7e4      	b.n	800ca14 <_vfiprintf_r+0x208>
 800ca4a:	bf00      	nop
 800ca4c:	08017b3c 	.word	0x08017b3c
 800ca50:	08017b5c 	.word	0x08017b5c
 800ca54:	08017b1c 	.word	0x08017b1c
 800ca58:	08017b7c 	.word	0x08017b7c
 800ca5c:	08017b86 	.word	0x08017b86
 800ca60:	00000000 	.word	0x00000000
 800ca64:	0800c7e7 	.word	0x0800c7e7
 800ca68:	08017b82 	.word	0x08017b82

0800ca6c <_printf_common>:
 800ca6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca70:	4616      	mov	r6, r2
 800ca72:	4699      	mov	r9, r3
 800ca74:	688a      	ldr	r2, [r1, #8]
 800ca76:	690b      	ldr	r3, [r1, #16]
 800ca78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ca7c:	4293      	cmp	r3, r2
 800ca7e:	bfb8      	it	lt
 800ca80:	4613      	movlt	r3, r2
 800ca82:	6033      	str	r3, [r6, #0]
 800ca84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ca88:	4607      	mov	r7, r0
 800ca8a:	460c      	mov	r4, r1
 800ca8c:	b10a      	cbz	r2, 800ca92 <_printf_common+0x26>
 800ca8e:	3301      	adds	r3, #1
 800ca90:	6033      	str	r3, [r6, #0]
 800ca92:	6823      	ldr	r3, [r4, #0]
 800ca94:	0699      	lsls	r1, r3, #26
 800ca96:	bf42      	ittt	mi
 800ca98:	6833      	ldrmi	r3, [r6, #0]
 800ca9a:	3302      	addmi	r3, #2
 800ca9c:	6033      	strmi	r3, [r6, #0]
 800ca9e:	6825      	ldr	r5, [r4, #0]
 800caa0:	f015 0506 	ands.w	r5, r5, #6
 800caa4:	d106      	bne.n	800cab4 <_printf_common+0x48>
 800caa6:	f104 0a19 	add.w	sl, r4, #25
 800caaa:	68e3      	ldr	r3, [r4, #12]
 800caac:	6832      	ldr	r2, [r6, #0]
 800caae:	1a9b      	subs	r3, r3, r2
 800cab0:	42ab      	cmp	r3, r5
 800cab2:	dc26      	bgt.n	800cb02 <_printf_common+0x96>
 800cab4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cab8:	1e13      	subs	r3, r2, #0
 800caba:	6822      	ldr	r2, [r4, #0]
 800cabc:	bf18      	it	ne
 800cabe:	2301      	movne	r3, #1
 800cac0:	0692      	lsls	r2, r2, #26
 800cac2:	d42b      	bmi.n	800cb1c <_printf_common+0xb0>
 800cac4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cac8:	4649      	mov	r1, r9
 800caca:	4638      	mov	r0, r7
 800cacc:	47c0      	blx	r8
 800cace:	3001      	adds	r0, #1
 800cad0:	d01e      	beq.n	800cb10 <_printf_common+0xa4>
 800cad2:	6823      	ldr	r3, [r4, #0]
 800cad4:	68e5      	ldr	r5, [r4, #12]
 800cad6:	6832      	ldr	r2, [r6, #0]
 800cad8:	f003 0306 	and.w	r3, r3, #6
 800cadc:	2b04      	cmp	r3, #4
 800cade:	bf08      	it	eq
 800cae0:	1aad      	subeq	r5, r5, r2
 800cae2:	68a3      	ldr	r3, [r4, #8]
 800cae4:	6922      	ldr	r2, [r4, #16]
 800cae6:	bf0c      	ite	eq
 800cae8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800caec:	2500      	movne	r5, #0
 800caee:	4293      	cmp	r3, r2
 800caf0:	bfc4      	itt	gt
 800caf2:	1a9b      	subgt	r3, r3, r2
 800caf4:	18ed      	addgt	r5, r5, r3
 800caf6:	2600      	movs	r6, #0
 800caf8:	341a      	adds	r4, #26
 800cafa:	42b5      	cmp	r5, r6
 800cafc:	d11a      	bne.n	800cb34 <_printf_common+0xc8>
 800cafe:	2000      	movs	r0, #0
 800cb00:	e008      	b.n	800cb14 <_printf_common+0xa8>
 800cb02:	2301      	movs	r3, #1
 800cb04:	4652      	mov	r2, sl
 800cb06:	4649      	mov	r1, r9
 800cb08:	4638      	mov	r0, r7
 800cb0a:	47c0      	blx	r8
 800cb0c:	3001      	adds	r0, #1
 800cb0e:	d103      	bne.n	800cb18 <_printf_common+0xac>
 800cb10:	f04f 30ff 	mov.w	r0, #4294967295
 800cb14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb18:	3501      	adds	r5, #1
 800cb1a:	e7c6      	b.n	800caaa <_printf_common+0x3e>
 800cb1c:	18e1      	adds	r1, r4, r3
 800cb1e:	1c5a      	adds	r2, r3, #1
 800cb20:	2030      	movs	r0, #48	; 0x30
 800cb22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cb26:	4422      	add	r2, r4
 800cb28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cb2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cb30:	3302      	adds	r3, #2
 800cb32:	e7c7      	b.n	800cac4 <_printf_common+0x58>
 800cb34:	2301      	movs	r3, #1
 800cb36:	4622      	mov	r2, r4
 800cb38:	4649      	mov	r1, r9
 800cb3a:	4638      	mov	r0, r7
 800cb3c:	47c0      	blx	r8
 800cb3e:	3001      	adds	r0, #1
 800cb40:	d0e6      	beq.n	800cb10 <_printf_common+0xa4>
 800cb42:	3601      	adds	r6, #1
 800cb44:	e7d9      	b.n	800cafa <_printf_common+0x8e>
	...

0800cb48 <_printf_i>:
 800cb48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cb4c:	7e0f      	ldrb	r7, [r1, #24]
 800cb4e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cb50:	2f78      	cmp	r7, #120	; 0x78
 800cb52:	4691      	mov	r9, r2
 800cb54:	4680      	mov	r8, r0
 800cb56:	460c      	mov	r4, r1
 800cb58:	469a      	mov	sl, r3
 800cb5a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cb5e:	d807      	bhi.n	800cb70 <_printf_i+0x28>
 800cb60:	2f62      	cmp	r7, #98	; 0x62
 800cb62:	d80a      	bhi.n	800cb7a <_printf_i+0x32>
 800cb64:	2f00      	cmp	r7, #0
 800cb66:	f000 80d8 	beq.w	800cd1a <_printf_i+0x1d2>
 800cb6a:	2f58      	cmp	r7, #88	; 0x58
 800cb6c:	f000 80a3 	beq.w	800ccb6 <_printf_i+0x16e>
 800cb70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cb74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cb78:	e03a      	b.n	800cbf0 <_printf_i+0xa8>
 800cb7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cb7e:	2b15      	cmp	r3, #21
 800cb80:	d8f6      	bhi.n	800cb70 <_printf_i+0x28>
 800cb82:	a101      	add	r1, pc, #4	; (adr r1, 800cb88 <_printf_i+0x40>)
 800cb84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cb88:	0800cbe1 	.word	0x0800cbe1
 800cb8c:	0800cbf5 	.word	0x0800cbf5
 800cb90:	0800cb71 	.word	0x0800cb71
 800cb94:	0800cb71 	.word	0x0800cb71
 800cb98:	0800cb71 	.word	0x0800cb71
 800cb9c:	0800cb71 	.word	0x0800cb71
 800cba0:	0800cbf5 	.word	0x0800cbf5
 800cba4:	0800cb71 	.word	0x0800cb71
 800cba8:	0800cb71 	.word	0x0800cb71
 800cbac:	0800cb71 	.word	0x0800cb71
 800cbb0:	0800cb71 	.word	0x0800cb71
 800cbb4:	0800cd01 	.word	0x0800cd01
 800cbb8:	0800cc25 	.word	0x0800cc25
 800cbbc:	0800cce3 	.word	0x0800cce3
 800cbc0:	0800cb71 	.word	0x0800cb71
 800cbc4:	0800cb71 	.word	0x0800cb71
 800cbc8:	0800cd23 	.word	0x0800cd23
 800cbcc:	0800cb71 	.word	0x0800cb71
 800cbd0:	0800cc25 	.word	0x0800cc25
 800cbd4:	0800cb71 	.word	0x0800cb71
 800cbd8:	0800cb71 	.word	0x0800cb71
 800cbdc:	0800cceb 	.word	0x0800cceb
 800cbe0:	682b      	ldr	r3, [r5, #0]
 800cbe2:	1d1a      	adds	r2, r3, #4
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	602a      	str	r2, [r5, #0]
 800cbe8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cbec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cbf0:	2301      	movs	r3, #1
 800cbf2:	e0a3      	b.n	800cd3c <_printf_i+0x1f4>
 800cbf4:	6820      	ldr	r0, [r4, #0]
 800cbf6:	6829      	ldr	r1, [r5, #0]
 800cbf8:	0606      	lsls	r6, r0, #24
 800cbfa:	f101 0304 	add.w	r3, r1, #4
 800cbfe:	d50a      	bpl.n	800cc16 <_printf_i+0xce>
 800cc00:	680e      	ldr	r6, [r1, #0]
 800cc02:	602b      	str	r3, [r5, #0]
 800cc04:	2e00      	cmp	r6, #0
 800cc06:	da03      	bge.n	800cc10 <_printf_i+0xc8>
 800cc08:	232d      	movs	r3, #45	; 0x2d
 800cc0a:	4276      	negs	r6, r6
 800cc0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cc10:	485e      	ldr	r0, [pc, #376]	; (800cd8c <_printf_i+0x244>)
 800cc12:	230a      	movs	r3, #10
 800cc14:	e019      	b.n	800cc4a <_printf_i+0x102>
 800cc16:	680e      	ldr	r6, [r1, #0]
 800cc18:	602b      	str	r3, [r5, #0]
 800cc1a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800cc1e:	bf18      	it	ne
 800cc20:	b236      	sxthne	r6, r6
 800cc22:	e7ef      	b.n	800cc04 <_printf_i+0xbc>
 800cc24:	682b      	ldr	r3, [r5, #0]
 800cc26:	6820      	ldr	r0, [r4, #0]
 800cc28:	1d19      	adds	r1, r3, #4
 800cc2a:	6029      	str	r1, [r5, #0]
 800cc2c:	0601      	lsls	r1, r0, #24
 800cc2e:	d501      	bpl.n	800cc34 <_printf_i+0xec>
 800cc30:	681e      	ldr	r6, [r3, #0]
 800cc32:	e002      	b.n	800cc3a <_printf_i+0xf2>
 800cc34:	0646      	lsls	r6, r0, #25
 800cc36:	d5fb      	bpl.n	800cc30 <_printf_i+0xe8>
 800cc38:	881e      	ldrh	r6, [r3, #0]
 800cc3a:	4854      	ldr	r0, [pc, #336]	; (800cd8c <_printf_i+0x244>)
 800cc3c:	2f6f      	cmp	r7, #111	; 0x6f
 800cc3e:	bf0c      	ite	eq
 800cc40:	2308      	moveq	r3, #8
 800cc42:	230a      	movne	r3, #10
 800cc44:	2100      	movs	r1, #0
 800cc46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cc4a:	6865      	ldr	r5, [r4, #4]
 800cc4c:	60a5      	str	r5, [r4, #8]
 800cc4e:	2d00      	cmp	r5, #0
 800cc50:	bfa2      	ittt	ge
 800cc52:	6821      	ldrge	r1, [r4, #0]
 800cc54:	f021 0104 	bicge.w	r1, r1, #4
 800cc58:	6021      	strge	r1, [r4, #0]
 800cc5a:	b90e      	cbnz	r6, 800cc60 <_printf_i+0x118>
 800cc5c:	2d00      	cmp	r5, #0
 800cc5e:	d04d      	beq.n	800ccfc <_printf_i+0x1b4>
 800cc60:	4615      	mov	r5, r2
 800cc62:	fbb6 f1f3 	udiv	r1, r6, r3
 800cc66:	fb03 6711 	mls	r7, r3, r1, r6
 800cc6a:	5dc7      	ldrb	r7, [r0, r7]
 800cc6c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cc70:	4637      	mov	r7, r6
 800cc72:	42bb      	cmp	r3, r7
 800cc74:	460e      	mov	r6, r1
 800cc76:	d9f4      	bls.n	800cc62 <_printf_i+0x11a>
 800cc78:	2b08      	cmp	r3, #8
 800cc7a:	d10b      	bne.n	800cc94 <_printf_i+0x14c>
 800cc7c:	6823      	ldr	r3, [r4, #0]
 800cc7e:	07de      	lsls	r6, r3, #31
 800cc80:	d508      	bpl.n	800cc94 <_printf_i+0x14c>
 800cc82:	6923      	ldr	r3, [r4, #16]
 800cc84:	6861      	ldr	r1, [r4, #4]
 800cc86:	4299      	cmp	r1, r3
 800cc88:	bfde      	ittt	le
 800cc8a:	2330      	movle	r3, #48	; 0x30
 800cc8c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cc90:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cc94:	1b52      	subs	r2, r2, r5
 800cc96:	6122      	str	r2, [r4, #16]
 800cc98:	f8cd a000 	str.w	sl, [sp]
 800cc9c:	464b      	mov	r3, r9
 800cc9e:	aa03      	add	r2, sp, #12
 800cca0:	4621      	mov	r1, r4
 800cca2:	4640      	mov	r0, r8
 800cca4:	f7ff fee2 	bl	800ca6c <_printf_common>
 800cca8:	3001      	adds	r0, #1
 800ccaa:	d14c      	bne.n	800cd46 <_printf_i+0x1fe>
 800ccac:	f04f 30ff 	mov.w	r0, #4294967295
 800ccb0:	b004      	add	sp, #16
 800ccb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ccb6:	4835      	ldr	r0, [pc, #212]	; (800cd8c <_printf_i+0x244>)
 800ccb8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ccbc:	6829      	ldr	r1, [r5, #0]
 800ccbe:	6823      	ldr	r3, [r4, #0]
 800ccc0:	f851 6b04 	ldr.w	r6, [r1], #4
 800ccc4:	6029      	str	r1, [r5, #0]
 800ccc6:	061d      	lsls	r5, r3, #24
 800ccc8:	d514      	bpl.n	800ccf4 <_printf_i+0x1ac>
 800ccca:	07df      	lsls	r7, r3, #31
 800cccc:	bf44      	itt	mi
 800ccce:	f043 0320 	orrmi.w	r3, r3, #32
 800ccd2:	6023      	strmi	r3, [r4, #0]
 800ccd4:	b91e      	cbnz	r6, 800ccde <_printf_i+0x196>
 800ccd6:	6823      	ldr	r3, [r4, #0]
 800ccd8:	f023 0320 	bic.w	r3, r3, #32
 800ccdc:	6023      	str	r3, [r4, #0]
 800ccde:	2310      	movs	r3, #16
 800cce0:	e7b0      	b.n	800cc44 <_printf_i+0xfc>
 800cce2:	6823      	ldr	r3, [r4, #0]
 800cce4:	f043 0320 	orr.w	r3, r3, #32
 800cce8:	6023      	str	r3, [r4, #0]
 800ccea:	2378      	movs	r3, #120	; 0x78
 800ccec:	4828      	ldr	r0, [pc, #160]	; (800cd90 <_printf_i+0x248>)
 800ccee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ccf2:	e7e3      	b.n	800ccbc <_printf_i+0x174>
 800ccf4:	0659      	lsls	r1, r3, #25
 800ccf6:	bf48      	it	mi
 800ccf8:	b2b6      	uxthmi	r6, r6
 800ccfa:	e7e6      	b.n	800ccca <_printf_i+0x182>
 800ccfc:	4615      	mov	r5, r2
 800ccfe:	e7bb      	b.n	800cc78 <_printf_i+0x130>
 800cd00:	682b      	ldr	r3, [r5, #0]
 800cd02:	6826      	ldr	r6, [r4, #0]
 800cd04:	6961      	ldr	r1, [r4, #20]
 800cd06:	1d18      	adds	r0, r3, #4
 800cd08:	6028      	str	r0, [r5, #0]
 800cd0a:	0635      	lsls	r5, r6, #24
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	d501      	bpl.n	800cd14 <_printf_i+0x1cc>
 800cd10:	6019      	str	r1, [r3, #0]
 800cd12:	e002      	b.n	800cd1a <_printf_i+0x1d2>
 800cd14:	0670      	lsls	r0, r6, #25
 800cd16:	d5fb      	bpl.n	800cd10 <_printf_i+0x1c8>
 800cd18:	8019      	strh	r1, [r3, #0]
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	6123      	str	r3, [r4, #16]
 800cd1e:	4615      	mov	r5, r2
 800cd20:	e7ba      	b.n	800cc98 <_printf_i+0x150>
 800cd22:	682b      	ldr	r3, [r5, #0]
 800cd24:	1d1a      	adds	r2, r3, #4
 800cd26:	602a      	str	r2, [r5, #0]
 800cd28:	681d      	ldr	r5, [r3, #0]
 800cd2a:	6862      	ldr	r2, [r4, #4]
 800cd2c:	2100      	movs	r1, #0
 800cd2e:	4628      	mov	r0, r5
 800cd30:	f7f3 fa4e 	bl	80001d0 <memchr>
 800cd34:	b108      	cbz	r0, 800cd3a <_printf_i+0x1f2>
 800cd36:	1b40      	subs	r0, r0, r5
 800cd38:	6060      	str	r0, [r4, #4]
 800cd3a:	6863      	ldr	r3, [r4, #4]
 800cd3c:	6123      	str	r3, [r4, #16]
 800cd3e:	2300      	movs	r3, #0
 800cd40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cd44:	e7a8      	b.n	800cc98 <_printf_i+0x150>
 800cd46:	6923      	ldr	r3, [r4, #16]
 800cd48:	462a      	mov	r2, r5
 800cd4a:	4649      	mov	r1, r9
 800cd4c:	4640      	mov	r0, r8
 800cd4e:	47d0      	blx	sl
 800cd50:	3001      	adds	r0, #1
 800cd52:	d0ab      	beq.n	800ccac <_printf_i+0x164>
 800cd54:	6823      	ldr	r3, [r4, #0]
 800cd56:	079b      	lsls	r3, r3, #30
 800cd58:	d413      	bmi.n	800cd82 <_printf_i+0x23a>
 800cd5a:	68e0      	ldr	r0, [r4, #12]
 800cd5c:	9b03      	ldr	r3, [sp, #12]
 800cd5e:	4298      	cmp	r0, r3
 800cd60:	bfb8      	it	lt
 800cd62:	4618      	movlt	r0, r3
 800cd64:	e7a4      	b.n	800ccb0 <_printf_i+0x168>
 800cd66:	2301      	movs	r3, #1
 800cd68:	4632      	mov	r2, r6
 800cd6a:	4649      	mov	r1, r9
 800cd6c:	4640      	mov	r0, r8
 800cd6e:	47d0      	blx	sl
 800cd70:	3001      	adds	r0, #1
 800cd72:	d09b      	beq.n	800ccac <_printf_i+0x164>
 800cd74:	3501      	adds	r5, #1
 800cd76:	68e3      	ldr	r3, [r4, #12]
 800cd78:	9903      	ldr	r1, [sp, #12]
 800cd7a:	1a5b      	subs	r3, r3, r1
 800cd7c:	42ab      	cmp	r3, r5
 800cd7e:	dcf2      	bgt.n	800cd66 <_printf_i+0x21e>
 800cd80:	e7eb      	b.n	800cd5a <_printf_i+0x212>
 800cd82:	2500      	movs	r5, #0
 800cd84:	f104 0619 	add.w	r6, r4, #25
 800cd88:	e7f5      	b.n	800cd76 <_printf_i+0x22e>
 800cd8a:	bf00      	nop
 800cd8c:	08017b8d 	.word	0x08017b8d
 800cd90:	08017b9e 	.word	0x08017b9e

0800cd94 <_putc_r>:
 800cd94:	b570      	push	{r4, r5, r6, lr}
 800cd96:	460d      	mov	r5, r1
 800cd98:	4614      	mov	r4, r2
 800cd9a:	4606      	mov	r6, r0
 800cd9c:	b118      	cbz	r0, 800cda6 <_putc_r+0x12>
 800cd9e:	6983      	ldr	r3, [r0, #24]
 800cda0:	b90b      	cbnz	r3, 800cda6 <_putc_r+0x12>
 800cda2:	f7ff fa79 	bl	800c298 <__sinit>
 800cda6:	4b1c      	ldr	r3, [pc, #112]	; (800ce18 <_putc_r+0x84>)
 800cda8:	429c      	cmp	r4, r3
 800cdaa:	d124      	bne.n	800cdf6 <_putc_r+0x62>
 800cdac:	6874      	ldr	r4, [r6, #4]
 800cdae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cdb0:	07d8      	lsls	r0, r3, #31
 800cdb2:	d405      	bmi.n	800cdc0 <_putc_r+0x2c>
 800cdb4:	89a3      	ldrh	r3, [r4, #12]
 800cdb6:	0599      	lsls	r1, r3, #22
 800cdb8:	d402      	bmi.n	800cdc0 <_putc_r+0x2c>
 800cdba:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cdbc:	f7ff fb0a 	bl	800c3d4 <__retarget_lock_acquire_recursive>
 800cdc0:	68a3      	ldr	r3, [r4, #8]
 800cdc2:	3b01      	subs	r3, #1
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	60a3      	str	r3, [r4, #8]
 800cdc8:	da05      	bge.n	800cdd6 <_putc_r+0x42>
 800cdca:	69a2      	ldr	r2, [r4, #24]
 800cdcc:	4293      	cmp	r3, r2
 800cdce:	db1c      	blt.n	800ce0a <_putc_r+0x76>
 800cdd0:	b2eb      	uxtb	r3, r5
 800cdd2:	2b0a      	cmp	r3, #10
 800cdd4:	d019      	beq.n	800ce0a <_putc_r+0x76>
 800cdd6:	6823      	ldr	r3, [r4, #0]
 800cdd8:	1c5a      	adds	r2, r3, #1
 800cdda:	6022      	str	r2, [r4, #0]
 800cddc:	701d      	strb	r5, [r3, #0]
 800cdde:	b2ed      	uxtb	r5, r5
 800cde0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cde2:	07da      	lsls	r2, r3, #31
 800cde4:	d405      	bmi.n	800cdf2 <_putc_r+0x5e>
 800cde6:	89a3      	ldrh	r3, [r4, #12]
 800cde8:	059b      	lsls	r3, r3, #22
 800cdea:	d402      	bmi.n	800cdf2 <_putc_r+0x5e>
 800cdec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cdee:	f7ff faf2 	bl	800c3d6 <__retarget_lock_release_recursive>
 800cdf2:	4628      	mov	r0, r5
 800cdf4:	bd70      	pop	{r4, r5, r6, pc}
 800cdf6:	4b09      	ldr	r3, [pc, #36]	; (800ce1c <_putc_r+0x88>)
 800cdf8:	429c      	cmp	r4, r3
 800cdfa:	d101      	bne.n	800ce00 <_putc_r+0x6c>
 800cdfc:	68b4      	ldr	r4, [r6, #8]
 800cdfe:	e7d6      	b.n	800cdae <_putc_r+0x1a>
 800ce00:	4b07      	ldr	r3, [pc, #28]	; (800ce20 <_putc_r+0x8c>)
 800ce02:	429c      	cmp	r4, r3
 800ce04:	bf08      	it	eq
 800ce06:	68f4      	ldreq	r4, [r6, #12]
 800ce08:	e7d1      	b.n	800cdae <_putc_r+0x1a>
 800ce0a:	4629      	mov	r1, r5
 800ce0c:	4622      	mov	r2, r4
 800ce0e:	4630      	mov	r0, r6
 800ce10:	f000 f85c 	bl	800cecc <__swbuf_r>
 800ce14:	4605      	mov	r5, r0
 800ce16:	e7e3      	b.n	800cde0 <_putc_r+0x4c>
 800ce18:	08017b3c 	.word	0x08017b3c
 800ce1c:	08017b5c 	.word	0x08017b5c
 800ce20:	08017b1c 	.word	0x08017b1c

0800ce24 <_sbrk_r>:
 800ce24:	b538      	push	{r3, r4, r5, lr}
 800ce26:	4d06      	ldr	r5, [pc, #24]	; (800ce40 <_sbrk_r+0x1c>)
 800ce28:	2300      	movs	r3, #0
 800ce2a:	4604      	mov	r4, r0
 800ce2c:	4608      	mov	r0, r1
 800ce2e:	602b      	str	r3, [r5, #0]
 800ce30:	f7f5 f930 	bl	8002094 <_sbrk>
 800ce34:	1c43      	adds	r3, r0, #1
 800ce36:	d102      	bne.n	800ce3e <_sbrk_r+0x1a>
 800ce38:	682b      	ldr	r3, [r5, #0]
 800ce3a:	b103      	cbz	r3, 800ce3e <_sbrk_r+0x1a>
 800ce3c:	6023      	str	r3, [r4, #0]
 800ce3e:	bd38      	pop	{r3, r4, r5, pc}
 800ce40:	20000e20 	.word	0x20000e20

0800ce44 <__sread>:
 800ce44:	b510      	push	{r4, lr}
 800ce46:	460c      	mov	r4, r1
 800ce48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce4c:	f000 fb0a 	bl	800d464 <_read_r>
 800ce50:	2800      	cmp	r0, #0
 800ce52:	bfab      	itete	ge
 800ce54:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ce56:	89a3      	ldrhlt	r3, [r4, #12]
 800ce58:	181b      	addge	r3, r3, r0
 800ce5a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ce5e:	bfac      	ite	ge
 800ce60:	6563      	strge	r3, [r4, #84]	; 0x54
 800ce62:	81a3      	strhlt	r3, [r4, #12]
 800ce64:	bd10      	pop	{r4, pc}

0800ce66 <__swrite>:
 800ce66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce6a:	461f      	mov	r7, r3
 800ce6c:	898b      	ldrh	r3, [r1, #12]
 800ce6e:	05db      	lsls	r3, r3, #23
 800ce70:	4605      	mov	r5, r0
 800ce72:	460c      	mov	r4, r1
 800ce74:	4616      	mov	r6, r2
 800ce76:	d505      	bpl.n	800ce84 <__swrite+0x1e>
 800ce78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce7c:	2302      	movs	r3, #2
 800ce7e:	2200      	movs	r2, #0
 800ce80:	f000 f9c8 	bl	800d214 <_lseek_r>
 800ce84:	89a3      	ldrh	r3, [r4, #12]
 800ce86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ce8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ce8e:	81a3      	strh	r3, [r4, #12]
 800ce90:	4632      	mov	r2, r6
 800ce92:	463b      	mov	r3, r7
 800ce94:	4628      	mov	r0, r5
 800ce96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ce9a:	f000 b869 	b.w	800cf70 <_write_r>

0800ce9e <__sseek>:
 800ce9e:	b510      	push	{r4, lr}
 800cea0:	460c      	mov	r4, r1
 800cea2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cea6:	f000 f9b5 	bl	800d214 <_lseek_r>
 800ceaa:	1c43      	adds	r3, r0, #1
 800ceac:	89a3      	ldrh	r3, [r4, #12]
 800ceae:	bf15      	itete	ne
 800ceb0:	6560      	strne	r0, [r4, #84]	; 0x54
 800ceb2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ceb6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ceba:	81a3      	strheq	r3, [r4, #12]
 800cebc:	bf18      	it	ne
 800cebe:	81a3      	strhne	r3, [r4, #12]
 800cec0:	bd10      	pop	{r4, pc}

0800cec2 <__sclose>:
 800cec2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cec6:	f000 b8d3 	b.w	800d070 <_close_r>
	...

0800cecc <__swbuf_r>:
 800cecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cece:	460e      	mov	r6, r1
 800ced0:	4614      	mov	r4, r2
 800ced2:	4605      	mov	r5, r0
 800ced4:	b118      	cbz	r0, 800cede <__swbuf_r+0x12>
 800ced6:	6983      	ldr	r3, [r0, #24]
 800ced8:	b90b      	cbnz	r3, 800cede <__swbuf_r+0x12>
 800ceda:	f7ff f9dd 	bl	800c298 <__sinit>
 800cede:	4b21      	ldr	r3, [pc, #132]	; (800cf64 <__swbuf_r+0x98>)
 800cee0:	429c      	cmp	r4, r3
 800cee2:	d12b      	bne.n	800cf3c <__swbuf_r+0x70>
 800cee4:	686c      	ldr	r4, [r5, #4]
 800cee6:	69a3      	ldr	r3, [r4, #24]
 800cee8:	60a3      	str	r3, [r4, #8]
 800ceea:	89a3      	ldrh	r3, [r4, #12]
 800ceec:	071a      	lsls	r2, r3, #28
 800ceee:	d52f      	bpl.n	800cf50 <__swbuf_r+0x84>
 800cef0:	6923      	ldr	r3, [r4, #16]
 800cef2:	b36b      	cbz	r3, 800cf50 <__swbuf_r+0x84>
 800cef4:	6923      	ldr	r3, [r4, #16]
 800cef6:	6820      	ldr	r0, [r4, #0]
 800cef8:	1ac0      	subs	r0, r0, r3
 800cefa:	6963      	ldr	r3, [r4, #20]
 800cefc:	b2f6      	uxtb	r6, r6
 800cefe:	4283      	cmp	r3, r0
 800cf00:	4637      	mov	r7, r6
 800cf02:	dc04      	bgt.n	800cf0e <__swbuf_r+0x42>
 800cf04:	4621      	mov	r1, r4
 800cf06:	4628      	mov	r0, r5
 800cf08:	f000 f948 	bl	800d19c <_fflush_r>
 800cf0c:	bb30      	cbnz	r0, 800cf5c <__swbuf_r+0x90>
 800cf0e:	68a3      	ldr	r3, [r4, #8]
 800cf10:	3b01      	subs	r3, #1
 800cf12:	60a3      	str	r3, [r4, #8]
 800cf14:	6823      	ldr	r3, [r4, #0]
 800cf16:	1c5a      	adds	r2, r3, #1
 800cf18:	6022      	str	r2, [r4, #0]
 800cf1a:	701e      	strb	r6, [r3, #0]
 800cf1c:	6963      	ldr	r3, [r4, #20]
 800cf1e:	3001      	adds	r0, #1
 800cf20:	4283      	cmp	r3, r0
 800cf22:	d004      	beq.n	800cf2e <__swbuf_r+0x62>
 800cf24:	89a3      	ldrh	r3, [r4, #12]
 800cf26:	07db      	lsls	r3, r3, #31
 800cf28:	d506      	bpl.n	800cf38 <__swbuf_r+0x6c>
 800cf2a:	2e0a      	cmp	r6, #10
 800cf2c:	d104      	bne.n	800cf38 <__swbuf_r+0x6c>
 800cf2e:	4621      	mov	r1, r4
 800cf30:	4628      	mov	r0, r5
 800cf32:	f000 f933 	bl	800d19c <_fflush_r>
 800cf36:	b988      	cbnz	r0, 800cf5c <__swbuf_r+0x90>
 800cf38:	4638      	mov	r0, r7
 800cf3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf3c:	4b0a      	ldr	r3, [pc, #40]	; (800cf68 <__swbuf_r+0x9c>)
 800cf3e:	429c      	cmp	r4, r3
 800cf40:	d101      	bne.n	800cf46 <__swbuf_r+0x7a>
 800cf42:	68ac      	ldr	r4, [r5, #8]
 800cf44:	e7cf      	b.n	800cee6 <__swbuf_r+0x1a>
 800cf46:	4b09      	ldr	r3, [pc, #36]	; (800cf6c <__swbuf_r+0xa0>)
 800cf48:	429c      	cmp	r4, r3
 800cf4a:	bf08      	it	eq
 800cf4c:	68ec      	ldreq	r4, [r5, #12]
 800cf4e:	e7ca      	b.n	800cee6 <__swbuf_r+0x1a>
 800cf50:	4621      	mov	r1, r4
 800cf52:	4628      	mov	r0, r5
 800cf54:	f000 f81e 	bl	800cf94 <__swsetup_r>
 800cf58:	2800      	cmp	r0, #0
 800cf5a:	d0cb      	beq.n	800cef4 <__swbuf_r+0x28>
 800cf5c:	f04f 37ff 	mov.w	r7, #4294967295
 800cf60:	e7ea      	b.n	800cf38 <__swbuf_r+0x6c>
 800cf62:	bf00      	nop
 800cf64:	08017b3c 	.word	0x08017b3c
 800cf68:	08017b5c 	.word	0x08017b5c
 800cf6c:	08017b1c 	.word	0x08017b1c

0800cf70 <_write_r>:
 800cf70:	b538      	push	{r3, r4, r5, lr}
 800cf72:	4d07      	ldr	r5, [pc, #28]	; (800cf90 <_write_r+0x20>)
 800cf74:	4604      	mov	r4, r0
 800cf76:	4608      	mov	r0, r1
 800cf78:	4611      	mov	r1, r2
 800cf7a:	2200      	movs	r2, #0
 800cf7c:	602a      	str	r2, [r5, #0]
 800cf7e:	461a      	mov	r2, r3
 800cf80:	f7f5 f837 	bl	8001ff2 <_write>
 800cf84:	1c43      	adds	r3, r0, #1
 800cf86:	d102      	bne.n	800cf8e <_write_r+0x1e>
 800cf88:	682b      	ldr	r3, [r5, #0]
 800cf8a:	b103      	cbz	r3, 800cf8e <_write_r+0x1e>
 800cf8c:	6023      	str	r3, [r4, #0]
 800cf8e:	bd38      	pop	{r3, r4, r5, pc}
 800cf90:	20000e20 	.word	0x20000e20

0800cf94 <__swsetup_r>:
 800cf94:	4b32      	ldr	r3, [pc, #200]	; (800d060 <__swsetup_r+0xcc>)
 800cf96:	b570      	push	{r4, r5, r6, lr}
 800cf98:	681d      	ldr	r5, [r3, #0]
 800cf9a:	4606      	mov	r6, r0
 800cf9c:	460c      	mov	r4, r1
 800cf9e:	b125      	cbz	r5, 800cfaa <__swsetup_r+0x16>
 800cfa0:	69ab      	ldr	r3, [r5, #24]
 800cfa2:	b913      	cbnz	r3, 800cfaa <__swsetup_r+0x16>
 800cfa4:	4628      	mov	r0, r5
 800cfa6:	f7ff f977 	bl	800c298 <__sinit>
 800cfaa:	4b2e      	ldr	r3, [pc, #184]	; (800d064 <__swsetup_r+0xd0>)
 800cfac:	429c      	cmp	r4, r3
 800cfae:	d10f      	bne.n	800cfd0 <__swsetup_r+0x3c>
 800cfb0:	686c      	ldr	r4, [r5, #4]
 800cfb2:	89a3      	ldrh	r3, [r4, #12]
 800cfb4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cfb8:	0719      	lsls	r1, r3, #28
 800cfba:	d42c      	bmi.n	800d016 <__swsetup_r+0x82>
 800cfbc:	06dd      	lsls	r5, r3, #27
 800cfbe:	d411      	bmi.n	800cfe4 <__swsetup_r+0x50>
 800cfc0:	2309      	movs	r3, #9
 800cfc2:	6033      	str	r3, [r6, #0]
 800cfc4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cfc8:	81a3      	strh	r3, [r4, #12]
 800cfca:	f04f 30ff 	mov.w	r0, #4294967295
 800cfce:	e03e      	b.n	800d04e <__swsetup_r+0xba>
 800cfd0:	4b25      	ldr	r3, [pc, #148]	; (800d068 <__swsetup_r+0xd4>)
 800cfd2:	429c      	cmp	r4, r3
 800cfd4:	d101      	bne.n	800cfda <__swsetup_r+0x46>
 800cfd6:	68ac      	ldr	r4, [r5, #8]
 800cfd8:	e7eb      	b.n	800cfb2 <__swsetup_r+0x1e>
 800cfda:	4b24      	ldr	r3, [pc, #144]	; (800d06c <__swsetup_r+0xd8>)
 800cfdc:	429c      	cmp	r4, r3
 800cfde:	bf08      	it	eq
 800cfe0:	68ec      	ldreq	r4, [r5, #12]
 800cfe2:	e7e6      	b.n	800cfb2 <__swsetup_r+0x1e>
 800cfe4:	0758      	lsls	r0, r3, #29
 800cfe6:	d512      	bpl.n	800d00e <__swsetup_r+0x7a>
 800cfe8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cfea:	b141      	cbz	r1, 800cffe <__swsetup_r+0x6a>
 800cfec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cff0:	4299      	cmp	r1, r3
 800cff2:	d002      	beq.n	800cffa <__swsetup_r+0x66>
 800cff4:	4630      	mov	r0, r6
 800cff6:	f000 f9b9 	bl	800d36c <_free_r>
 800cffa:	2300      	movs	r3, #0
 800cffc:	6363      	str	r3, [r4, #52]	; 0x34
 800cffe:	89a3      	ldrh	r3, [r4, #12]
 800d000:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d004:	81a3      	strh	r3, [r4, #12]
 800d006:	2300      	movs	r3, #0
 800d008:	6063      	str	r3, [r4, #4]
 800d00a:	6923      	ldr	r3, [r4, #16]
 800d00c:	6023      	str	r3, [r4, #0]
 800d00e:	89a3      	ldrh	r3, [r4, #12]
 800d010:	f043 0308 	orr.w	r3, r3, #8
 800d014:	81a3      	strh	r3, [r4, #12]
 800d016:	6923      	ldr	r3, [r4, #16]
 800d018:	b94b      	cbnz	r3, 800d02e <__swsetup_r+0x9a>
 800d01a:	89a3      	ldrh	r3, [r4, #12]
 800d01c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d020:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d024:	d003      	beq.n	800d02e <__swsetup_r+0x9a>
 800d026:	4621      	mov	r1, r4
 800d028:	4630      	mov	r0, r6
 800d02a:	f000 f92b 	bl	800d284 <__smakebuf_r>
 800d02e:	89a0      	ldrh	r0, [r4, #12]
 800d030:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d034:	f010 0301 	ands.w	r3, r0, #1
 800d038:	d00a      	beq.n	800d050 <__swsetup_r+0xbc>
 800d03a:	2300      	movs	r3, #0
 800d03c:	60a3      	str	r3, [r4, #8]
 800d03e:	6963      	ldr	r3, [r4, #20]
 800d040:	425b      	negs	r3, r3
 800d042:	61a3      	str	r3, [r4, #24]
 800d044:	6923      	ldr	r3, [r4, #16]
 800d046:	b943      	cbnz	r3, 800d05a <__swsetup_r+0xc6>
 800d048:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d04c:	d1ba      	bne.n	800cfc4 <__swsetup_r+0x30>
 800d04e:	bd70      	pop	{r4, r5, r6, pc}
 800d050:	0781      	lsls	r1, r0, #30
 800d052:	bf58      	it	pl
 800d054:	6963      	ldrpl	r3, [r4, #20]
 800d056:	60a3      	str	r3, [r4, #8]
 800d058:	e7f4      	b.n	800d044 <__swsetup_r+0xb0>
 800d05a:	2000      	movs	r0, #0
 800d05c:	e7f7      	b.n	800d04e <__swsetup_r+0xba>
 800d05e:	bf00      	nop
 800d060:	20000148 	.word	0x20000148
 800d064:	08017b3c 	.word	0x08017b3c
 800d068:	08017b5c 	.word	0x08017b5c
 800d06c:	08017b1c 	.word	0x08017b1c

0800d070 <_close_r>:
 800d070:	b538      	push	{r3, r4, r5, lr}
 800d072:	4d06      	ldr	r5, [pc, #24]	; (800d08c <_close_r+0x1c>)
 800d074:	2300      	movs	r3, #0
 800d076:	4604      	mov	r4, r0
 800d078:	4608      	mov	r0, r1
 800d07a:	602b      	str	r3, [r5, #0]
 800d07c:	f7f4 ffd5 	bl	800202a <_close>
 800d080:	1c43      	adds	r3, r0, #1
 800d082:	d102      	bne.n	800d08a <_close_r+0x1a>
 800d084:	682b      	ldr	r3, [r5, #0]
 800d086:	b103      	cbz	r3, 800d08a <_close_r+0x1a>
 800d088:	6023      	str	r3, [r4, #0]
 800d08a:	bd38      	pop	{r3, r4, r5, pc}
 800d08c:	20000e20 	.word	0x20000e20

0800d090 <__sflush_r>:
 800d090:	898a      	ldrh	r2, [r1, #12]
 800d092:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d096:	4605      	mov	r5, r0
 800d098:	0710      	lsls	r0, r2, #28
 800d09a:	460c      	mov	r4, r1
 800d09c:	d458      	bmi.n	800d150 <__sflush_r+0xc0>
 800d09e:	684b      	ldr	r3, [r1, #4]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	dc05      	bgt.n	800d0b0 <__sflush_r+0x20>
 800d0a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	dc02      	bgt.n	800d0b0 <__sflush_r+0x20>
 800d0aa:	2000      	movs	r0, #0
 800d0ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d0b2:	2e00      	cmp	r6, #0
 800d0b4:	d0f9      	beq.n	800d0aa <__sflush_r+0x1a>
 800d0b6:	2300      	movs	r3, #0
 800d0b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d0bc:	682f      	ldr	r7, [r5, #0]
 800d0be:	602b      	str	r3, [r5, #0]
 800d0c0:	d032      	beq.n	800d128 <__sflush_r+0x98>
 800d0c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d0c4:	89a3      	ldrh	r3, [r4, #12]
 800d0c6:	075a      	lsls	r2, r3, #29
 800d0c8:	d505      	bpl.n	800d0d6 <__sflush_r+0x46>
 800d0ca:	6863      	ldr	r3, [r4, #4]
 800d0cc:	1ac0      	subs	r0, r0, r3
 800d0ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d0d0:	b10b      	cbz	r3, 800d0d6 <__sflush_r+0x46>
 800d0d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d0d4:	1ac0      	subs	r0, r0, r3
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	4602      	mov	r2, r0
 800d0da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d0dc:	6a21      	ldr	r1, [r4, #32]
 800d0de:	4628      	mov	r0, r5
 800d0e0:	47b0      	blx	r6
 800d0e2:	1c43      	adds	r3, r0, #1
 800d0e4:	89a3      	ldrh	r3, [r4, #12]
 800d0e6:	d106      	bne.n	800d0f6 <__sflush_r+0x66>
 800d0e8:	6829      	ldr	r1, [r5, #0]
 800d0ea:	291d      	cmp	r1, #29
 800d0ec:	d82c      	bhi.n	800d148 <__sflush_r+0xb8>
 800d0ee:	4a2a      	ldr	r2, [pc, #168]	; (800d198 <__sflush_r+0x108>)
 800d0f0:	40ca      	lsrs	r2, r1
 800d0f2:	07d6      	lsls	r6, r2, #31
 800d0f4:	d528      	bpl.n	800d148 <__sflush_r+0xb8>
 800d0f6:	2200      	movs	r2, #0
 800d0f8:	6062      	str	r2, [r4, #4]
 800d0fa:	04d9      	lsls	r1, r3, #19
 800d0fc:	6922      	ldr	r2, [r4, #16]
 800d0fe:	6022      	str	r2, [r4, #0]
 800d100:	d504      	bpl.n	800d10c <__sflush_r+0x7c>
 800d102:	1c42      	adds	r2, r0, #1
 800d104:	d101      	bne.n	800d10a <__sflush_r+0x7a>
 800d106:	682b      	ldr	r3, [r5, #0]
 800d108:	b903      	cbnz	r3, 800d10c <__sflush_r+0x7c>
 800d10a:	6560      	str	r0, [r4, #84]	; 0x54
 800d10c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d10e:	602f      	str	r7, [r5, #0]
 800d110:	2900      	cmp	r1, #0
 800d112:	d0ca      	beq.n	800d0aa <__sflush_r+0x1a>
 800d114:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d118:	4299      	cmp	r1, r3
 800d11a:	d002      	beq.n	800d122 <__sflush_r+0x92>
 800d11c:	4628      	mov	r0, r5
 800d11e:	f000 f925 	bl	800d36c <_free_r>
 800d122:	2000      	movs	r0, #0
 800d124:	6360      	str	r0, [r4, #52]	; 0x34
 800d126:	e7c1      	b.n	800d0ac <__sflush_r+0x1c>
 800d128:	6a21      	ldr	r1, [r4, #32]
 800d12a:	2301      	movs	r3, #1
 800d12c:	4628      	mov	r0, r5
 800d12e:	47b0      	blx	r6
 800d130:	1c41      	adds	r1, r0, #1
 800d132:	d1c7      	bne.n	800d0c4 <__sflush_r+0x34>
 800d134:	682b      	ldr	r3, [r5, #0]
 800d136:	2b00      	cmp	r3, #0
 800d138:	d0c4      	beq.n	800d0c4 <__sflush_r+0x34>
 800d13a:	2b1d      	cmp	r3, #29
 800d13c:	d001      	beq.n	800d142 <__sflush_r+0xb2>
 800d13e:	2b16      	cmp	r3, #22
 800d140:	d101      	bne.n	800d146 <__sflush_r+0xb6>
 800d142:	602f      	str	r7, [r5, #0]
 800d144:	e7b1      	b.n	800d0aa <__sflush_r+0x1a>
 800d146:	89a3      	ldrh	r3, [r4, #12]
 800d148:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d14c:	81a3      	strh	r3, [r4, #12]
 800d14e:	e7ad      	b.n	800d0ac <__sflush_r+0x1c>
 800d150:	690f      	ldr	r7, [r1, #16]
 800d152:	2f00      	cmp	r7, #0
 800d154:	d0a9      	beq.n	800d0aa <__sflush_r+0x1a>
 800d156:	0793      	lsls	r3, r2, #30
 800d158:	680e      	ldr	r6, [r1, #0]
 800d15a:	bf08      	it	eq
 800d15c:	694b      	ldreq	r3, [r1, #20]
 800d15e:	600f      	str	r7, [r1, #0]
 800d160:	bf18      	it	ne
 800d162:	2300      	movne	r3, #0
 800d164:	eba6 0807 	sub.w	r8, r6, r7
 800d168:	608b      	str	r3, [r1, #8]
 800d16a:	f1b8 0f00 	cmp.w	r8, #0
 800d16e:	dd9c      	ble.n	800d0aa <__sflush_r+0x1a>
 800d170:	6a21      	ldr	r1, [r4, #32]
 800d172:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d174:	4643      	mov	r3, r8
 800d176:	463a      	mov	r2, r7
 800d178:	4628      	mov	r0, r5
 800d17a:	47b0      	blx	r6
 800d17c:	2800      	cmp	r0, #0
 800d17e:	dc06      	bgt.n	800d18e <__sflush_r+0xfe>
 800d180:	89a3      	ldrh	r3, [r4, #12]
 800d182:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d186:	81a3      	strh	r3, [r4, #12]
 800d188:	f04f 30ff 	mov.w	r0, #4294967295
 800d18c:	e78e      	b.n	800d0ac <__sflush_r+0x1c>
 800d18e:	4407      	add	r7, r0
 800d190:	eba8 0800 	sub.w	r8, r8, r0
 800d194:	e7e9      	b.n	800d16a <__sflush_r+0xda>
 800d196:	bf00      	nop
 800d198:	20400001 	.word	0x20400001

0800d19c <_fflush_r>:
 800d19c:	b538      	push	{r3, r4, r5, lr}
 800d19e:	690b      	ldr	r3, [r1, #16]
 800d1a0:	4605      	mov	r5, r0
 800d1a2:	460c      	mov	r4, r1
 800d1a4:	b913      	cbnz	r3, 800d1ac <_fflush_r+0x10>
 800d1a6:	2500      	movs	r5, #0
 800d1a8:	4628      	mov	r0, r5
 800d1aa:	bd38      	pop	{r3, r4, r5, pc}
 800d1ac:	b118      	cbz	r0, 800d1b6 <_fflush_r+0x1a>
 800d1ae:	6983      	ldr	r3, [r0, #24]
 800d1b0:	b90b      	cbnz	r3, 800d1b6 <_fflush_r+0x1a>
 800d1b2:	f7ff f871 	bl	800c298 <__sinit>
 800d1b6:	4b14      	ldr	r3, [pc, #80]	; (800d208 <_fflush_r+0x6c>)
 800d1b8:	429c      	cmp	r4, r3
 800d1ba:	d11b      	bne.n	800d1f4 <_fflush_r+0x58>
 800d1bc:	686c      	ldr	r4, [r5, #4]
 800d1be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d0ef      	beq.n	800d1a6 <_fflush_r+0xa>
 800d1c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d1c8:	07d0      	lsls	r0, r2, #31
 800d1ca:	d404      	bmi.n	800d1d6 <_fflush_r+0x3a>
 800d1cc:	0599      	lsls	r1, r3, #22
 800d1ce:	d402      	bmi.n	800d1d6 <_fflush_r+0x3a>
 800d1d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d1d2:	f7ff f8ff 	bl	800c3d4 <__retarget_lock_acquire_recursive>
 800d1d6:	4628      	mov	r0, r5
 800d1d8:	4621      	mov	r1, r4
 800d1da:	f7ff ff59 	bl	800d090 <__sflush_r>
 800d1de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d1e0:	07da      	lsls	r2, r3, #31
 800d1e2:	4605      	mov	r5, r0
 800d1e4:	d4e0      	bmi.n	800d1a8 <_fflush_r+0xc>
 800d1e6:	89a3      	ldrh	r3, [r4, #12]
 800d1e8:	059b      	lsls	r3, r3, #22
 800d1ea:	d4dd      	bmi.n	800d1a8 <_fflush_r+0xc>
 800d1ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d1ee:	f7ff f8f2 	bl	800c3d6 <__retarget_lock_release_recursive>
 800d1f2:	e7d9      	b.n	800d1a8 <_fflush_r+0xc>
 800d1f4:	4b05      	ldr	r3, [pc, #20]	; (800d20c <_fflush_r+0x70>)
 800d1f6:	429c      	cmp	r4, r3
 800d1f8:	d101      	bne.n	800d1fe <_fflush_r+0x62>
 800d1fa:	68ac      	ldr	r4, [r5, #8]
 800d1fc:	e7df      	b.n	800d1be <_fflush_r+0x22>
 800d1fe:	4b04      	ldr	r3, [pc, #16]	; (800d210 <_fflush_r+0x74>)
 800d200:	429c      	cmp	r4, r3
 800d202:	bf08      	it	eq
 800d204:	68ec      	ldreq	r4, [r5, #12]
 800d206:	e7da      	b.n	800d1be <_fflush_r+0x22>
 800d208:	08017b3c 	.word	0x08017b3c
 800d20c:	08017b5c 	.word	0x08017b5c
 800d210:	08017b1c 	.word	0x08017b1c

0800d214 <_lseek_r>:
 800d214:	b538      	push	{r3, r4, r5, lr}
 800d216:	4d07      	ldr	r5, [pc, #28]	; (800d234 <_lseek_r+0x20>)
 800d218:	4604      	mov	r4, r0
 800d21a:	4608      	mov	r0, r1
 800d21c:	4611      	mov	r1, r2
 800d21e:	2200      	movs	r2, #0
 800d220:	602a      	str	r2, [r5, #0]
 800d222:	461a      	mov	r2, r3
 800d224:	f7f4 ff28 	bl	8002078 <_lseek>
 800d228:	1c43      	adds	r3, r0, #1
 800d22a:	d102      	bne.n	800d232 <_lseek_r+0x1e>
 800d22c:	682b      	ldr	r3, [r5, #0]
 800d22e:	b103      	cbz	r3, 800d232 <_lseek_r+0x1e>
 800d230:	6023      	str	r3, [r4, #0]
 800d232:	bd38      	pop	{r3, r4, r5, pc}
 800d234:	20000e20 	.word	0x20000e20

0800d238 <__swhatbuf_r>:
 800d238:	b570      	push	{r4, r5, r6, lr}
 800d23a:	460e      	mov	r6, r1
 800d23c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d240:	2900      	cmp	r1, #0
 800d242:	b096      	sub	sp, #88	; 0x58
 800d244:	4614      	mov	r4, r2
 800d246:	461d      	mov	r5, r3
 800d248:	da08      	bge.n	800d25c <__swhatbuf_r+0x24>
 800d24a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d24e:	2200      	movs	r2, #0
 800d250:	602a      	str	r2, [r5, #0]
 800d252:	061a      	lsls	r2, r3, #24
 800d254:	d410      	bmi.n	800d278 <__swhatbuf_r+0x40>
 800d256:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d25a:	e00e      	b.n	800d27a <__swhatbuf_r+0x42>
 800d25c:	466a      	mov	r2, sp
 800d25e:	f000 f913 	bl	800d488 <_fstat_r>
 800d262:	2800      	cmp	r0, #0
 800d264:	dbf1      	blt.n	800d24a <__swhatbuf_r+0x12>
 800d266:	9a01      	ldr	r2, [sp, #4]
 800d268:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d26c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d270:	425a      	negs	r2, r3
 800d272:	415a      	adcs	r2, r3
 800d274:	602a      	str	r2, [r5, #0]
 800d276:	e7ee      	b.n	800d256 <__swhatbuf_r+0x1e>
 800d278:	2340      	movs	r3, #64	; 0x40
 800d27a:	2000      	movs	r0, #0
 800d27c:	6023      	str	r3, [r4, #0]
 800d27e:	b016      	add	sp, #88	; 0x58
 800d280:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d284 <__smakebuf_r>:
 800d284:	898b      	ldrh	r3, [r1, #12]
 800d286:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d288:	079d      	lsls	r5, r3, #30
 800d28a:	4606      	mov	r6, r0
 800d28c:	460c      	mov	r4, r1
 800d28e:	d507      	bpl.n	800d2a0 <__smakebuf_r+0x1c>
 800d290:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d294:	6023      	str	r3, [r4, #0]
 800d296:	6123      	str	r3, [r4, #16]
 800d298:	2301      	movs	r3, #1
 800d29a:	6163      	str	r3, [r4, #20]
 800d29c:	b002      	add	sp, #8
 800d29e:	bd70      	pop	{r4, r5, r6, pc}
 800d2a0:	ab01      	add	r3, sp, #4
 800d2a2:	466a      	mov	r2, sp
 800d2a4:	f7ff ffc8 	bl	800d238 <__swhatbuf_r>
 800d2a8:	9900      	ldr	r1, [sp, #0]
 800d2aa:	4605      	mov	r5, r0
 800d2ac:	4630      	mov	r0, r6
 800d2ae:	f7ff f8b3 	bl	800c418 <_malloc_r>
 800d2b2:	b948      	cbnz	r0, 800d2c8 <__smakebuf_r+0x44>
 800d2b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d2b8:	059a      	lsls	r2, r3, #22
 800d2ba:	d4ef      	bmi.n	800d29c <__smakebuf_r+0x18>
 800d2bc:	f023 0303 	bic.w	r3, r3, #3
 800d2c0:	f043 0302 	orr.w	r3, r3, #2
 800d2c4:	81a3      	strh	r3, [r4, #12]
 800d2c6:	e7e3      	b.n	800d290 <__smakebuf_r+0xc>
 800d2c8:	4b0d      	ldr	r3, [pc, #52]	; (800d300 <__smakebuf_r+0x7c>)
 800d2ca:	62b3      	str	r3, [r6, #40]	; 0x28
 800d2cc:	89a3      	ldrh	r3, [r4, #12]
 800d2ce:	6020      	str	r0, [r4, #0]
 800d2d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d2d4:	81a3      	strh	r3, [r4, #12]
 800d2d6:	9b00      	ldr	r3, [sp, #0]
 800d2d8:	6163      	str	r3, [r4, #20]
 800d2da:	9b01      	ldr	r3, [sp, #4]
 800d2dc:	6120      	str	r0, [r4, #16]
 800d2de:	b15b      	cbz	r3, 800d2f8 <__smakebuf_r+0x74>
 800d2e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d2e4:	4630      	mov	r0, r6
 800d2e6:	f000 f8e1 	bl	800d4ac <_isatty_r>
 800d2ea:	b128      	cbz	r0, 800d2f8 <__smakebuf_r+0x74>
 800d2ec:	89a3      	ldrh	r3, [r4, #12]
 800d2ee:	f023 0303 	bic.w	r3, r3, #3
 800d2f2:	f043 0301 	orr.w	r3, r3, #1
 800d2f6:	81a3      	strh	r3, [r4, #12]
 800d2f8:	89a0      	ldrh	r0, [r4, #12]
 800d2fa:	4305      	orrs	r5, r0
 800d2fc:	81a5      	strh	r5, [r4, #12]
 800d2fe:	e7cd      	b.n	800d29c <__smakebuf_r+0x18>
 800d300:	0800c231 	.word	0x0800c231

0800d304 <memcpy>:
 800d304:	440a      	add	r2, r1
 800d306:	4291      	cmp	r1, r2
 800d308:	f100 33ff 	add.w	r3, r0, #4294967295
 800d30c:	d100      	bne.n	800d310 <memcpy+0xc>
 800d30e:	4770      	bx	lr
 800d310:	b510      	push	{r4, lr}
 800d312:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d316:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d31a:	4291      	cmp	r1, r2
 800d31c:	d1f9      	bne.n	800d312 <memcpy+0xe>
 800d31e:	bd10      	pop	{r4, pc}

0800d320 <memmove>:
 800d320:	4288      	cmp	r0, r1
 800d322:	b510      	push	{r4, lr}
 800d324:	eb01 0402 	add.w	r4, r1, r2
 800d328:	d902      	bls.n	800d330 <memmove+0x10>
 800d32a:	4284      	cmp	r4, r0
 800d32c:	4623      	mov	r3, r4
 800d32e:	d807      	bhi.n	800d340 <memmove+0x20>
 800d330:	1e43      	subs	r3, r0, #1
 800d332:	42a1      	cmp	r1, r4
 800d334:	d008      	beq.n	800d348 <memmove+0x28>
 800d336:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d33a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d33e:	e7f8      	b.n	800d332 <memmove+0x12>
 800d340:	4402      	add	r2, r0
 800d342:	4601      	mov	r1, r0
 800d344:	428a      	cmp	r2, r1
 800d346:	d100      	bne.n	800d34a <memmove+0x2a>
 800d348:	bd10      	pop	{r4, pc}
 800d34a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d34e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d352:	e7f7      	b.n	800d344 <memmove+0x24>

0800d354 <__malloc_lock>:
 800d354:	4801      	ldr	r0, [pc, #4]	; (800d35c <__malloc_lock+0x8>)
 800d356:	f7ff b83d 	b.w	800c3d4 <__retarget_lock_acquire_recursive>
 800d35a:	bf00      	nop
 800d35c:	20000e14 	.word	0x20000e14

0800d360 <__malloc_unlock>:
 800d360:	4801      	ldr	r0, [pc, #4]	; (800d368 <__malloc_unlock+0x8>)
 800d362:	f7ff b838 	b.w	800c3d6 <__retarget_lock_release_recursive>
 800d366:	bf00      	nop
 800d368:	20000e14 	.word	0x20000e14

0800d36c <_free_r>:
 800d36c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d36e:	2900      	cmp	r1, #0
 800d370:	d044      	beq.n	800d3fc <_free_r+0x90>
 800d372:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d376:	9001      	str	r0, [sp, #4]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	f1a1 0404 	sub.w	r4, r1, #4
 800d37e:	bfb8      	it	lt
 800d380:	18e4      	addlt	r4, r4, r3
 800d382:	f7ff ffe7 	bl	800d354 <__malloc_lock>
 800d386:	4a1e      	ldr	r2, [pc, #120]	; (800d400 <_free_r+0x94>)
 800d388:	9801      	ldr	r0, [sp, #4]
 800d38a:	6813      	ldr	r3, [r2, #0]
 800d38c:	b933      	cbnz	r3, 800d39c <_free_r+0x30>
 800d38e:	6063      	str	r3, [r4, #4]
 800d390:	6014      	str	r4, [r2, #0]
 800d392:	b003      	add	sp, #12
 800d394:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d398:	f7ff bfe2 	b.w	800d360 <__malloc_unlock>
 800d39c:	42a3      	cmp	r3, r4
 800d39e:	d908      	bls.n	800d3b2 <_free_r+0x46>
 800d3a0:	6825      	ldr	r5, [r4, #0]
 800d3a2:	1961      	adds	r1, r4, r5
 800d3a4:	428b      	cmp	r3, r1
 800d3a6:	bf01      	itttt	eq
 800d3a8:	6819      	ldreq	r1, [r3, #0]
 800d3aa:	685b      	ldreq	r3, [r3, #4]
 800d3ac:	1949      	addeq	r1, r1, r5
 800d3ae:	6021      	streq	r1, [r4, #0]
 800d3b0:	e7ed      	b.n	800d38e <_free_r+0x22>
 800d3b2:	461a      	mov	r2, r3
 800d3b4:	685b      	ldr	r3, [r3, #4]
 800d3b6:	b10b      	cbz	r3, 800d3bc <_free_r+0x50>
 800d3b8:	42a3      	cmp	r3, r4
 800d3ba:	d9fa      	bls.n	800d3b2 <_free_r+0x46>
 800d3bc:	6811      	ldr	r1, [r2, #0]
 800d3be:	1855      	adds	r5, r2, r1
 800d3c0:	42a5      	cmp	r5, r4
 800d3c2:	d10b      	bne.n	800d3dc <_free_r+0x70>
 800d3c4:	6824      	ldr	r4, [r4, #0]
 800d3c6:	4421      	add	r1, r4
 800d3c8:	1854      	adds	r4, r2, r1
 800d3ca:	42a3      	cmp	r3, r4
 800d3cc:	6011      	str	r1, [r2, #0]
 800d3ce:	d1e0      	bne.n	800d392 <_free_r+0x26>
 800d3d0:	681c      	ldr	r4, [r3, #0]
 800d3d2:	685b      	ldr	r3, [r3, #4]
 800d3d4:	6053      	str	r3, [r2, #4]
 800d3d6:	4421      	add	r1, r4
 800d3d8:	6011      	str	r1, [r2, #0]
 800d3da:	e7da      	b.n	800d392 <_free_r+0x26>
 800d3dc:	d902      	bls.n	800d3e4 <_free_r+0x78>
 800d3de:	230c      	movs	r3, #12
 800d3e0:	6003      	str	r3, [r0, #0]
 800d3e2:	e7d6      	b.n	800d392 <_free_r+0x26>
 800d3e4:	6825      	ldr	r5, [r4, #0]
 800d3e6:	1961      	adds	r1, r4, r5
 800d3e8:	428b      	cmp	r3, r1
 800d3ea:	bf04      	itt	eq
 800d3ec:	6819      	ldreq	r1, [r3, #0]
 800d3ee:	685b      	ldreq	r3, [r3, #4]
 800d3f0:	6063      	str	r3, [r4, #4]
 800d3f2:	bf04      	itt	eq
 800d3f4:	1949      	addeq	r1, r1, r5
 800d3f6:	6021      	streq	r1, [r4, #0]
 800d3f8:	6054      	str	r4, [r2, #4]
 800d3fa:	e7ca      	b.n	800d392 <_free_r+0x26>
 800d3fc:	b003      	add	sp, #12
 800d3fe:	bd30      	pop	{r4, r5, pc}
 800d400:	20000e18 	.word	0x20000e18

0800d404 <_realloc_r>:
 800d404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d408:	4680      	mov	r8, r0
 800d40a:	4614      	mov	r4, r2
 800d40c:	460e      	mov	r6, r1
 800d40e:	b921      	cbnz	r1, 800d41a <_realloc_r+0x16>
 800d410:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d414:	4611      	mov	r1, r2
 800d416:	f7fe bfff 	b.w	800c418 <_malloc_r>
 800d41a:	b92a      	cbnz	r2, 800d428 <_realloc_r+0x24>
 800d41c:	f7ff ffa6 	bl	800d36c <_free_r>
 800d420:	4625      	mov	r5, r4
 800d422:	4628      	mov	r0, r5
 800d424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d428:	f000 f850 	bl	800d4cc <_malloc_usable_size_r>
 800d42c:	4284      	cmp	r4, r0
 800d42e:	4607      	mov	r7, r0
 800d430:	d802      	bhi.n	800d438 <_realloc_r+0x34>
 800d432:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d436:	d812      	bhi.n	800d45e <_realloc_r+0x5a>
 800d438:	4621      	mov	r1, r4
 800d43a:	4640      	mov	r0, r8
 800d43c:	f7fe ffec 	bl	800c418 <_malloc_r>
 800d440:	4605      	mov	r5, r0
 800d442:	2800      	cmp	r0, #0
 800d444:	d0ed      	beq.n	800d422 <_realloc_r+0x1e>
 800d446:	42bc      	cmp	r4, r7
 800d448:	4622      	mov	r2, r4
 800d44a:	4631      	mov	r1, r6
 800d44c:	bf28      	it	cs
 800d44e:	463a      	movcs	r2, r7
 800d450:	f7ff ff58 	bl	800d304 <memcpy>
 800d454:	4631      	mov	r1, r6
 800d456:	4640      	mov	r0, r8
 800d458:	f7ff ff88 	bl	800d36c <_free_r>
 800d45c:	e7e1      	b.n	800d422 <_realloc_r+0x1e>
 800d45e:	4635      	mov	r5, r6
 800d460:	e7df      	b.n	800d422 <_realloc_r+0x1e>
	...

0800d464 <_read_r>:
 800d464:	b538      	push	{r3, r4, r5, lr}
 800d466:	4d07      	ldr	r5, [pc, #28]	; (800d484 <_read_r+0x20>)
 800d468:	4604      	mov	r4, r0
 800d46a:	4608      	mov	r0, r1
 800d46c:	4611      	mov	r1, r2
 800d46e:	2200      	movs	r2, #0
 800d470:	602a      	str	r2, [r5, #0]
 800d472:	461a      	mov	r2, r3
 800d474:	f7f4 fda0 	bl	8001fb8 <_read>
 800d478:	1c43      	adds	r3, r0, #1
 800d47a:	d102      	bne.n	800d482 <_read_r+0x1e>
 800d47c:	682b      	ldr	r3, [r5, #0]
 800d47e:	b103      	cbz	r3, 800d482 <_read_r+0x1e>
 800d480:	6023      	str	r3, [r4, #0]
 800d482:	bd38      	pop	{r3, r4, r5, pc}
 800d484:	20000e20 	.word	0x20000e20

0800d488 <_fstat_r>:
 800d488:	b538      	push	{r3, r4, r5, lr}
 800d48a:	4d07      	ldr	r5, [pc, #28]	; (800d4a8 <_fstat_r+0x20>)
 800d48c:	2300      	movs	r3, #0
 800d48e:	4604      	mov	r4, r0
 800d490:	4608      	mov	r0, r1
 800d492:	4611      	mov	r1, r2
 800d494:	602b      	str	r3, [r5, #0]
 800d496:	f7f4 fdd4 	bl	8002042 <_fstat>
 800d49a:	1c43      	adds	r3, r0, #1
 800d49c:	d102      	bne.n	800d4a4 <_fstat_r+0x1c>
 800d49e:	682b      	ldr	r3, [r5, #0]
 800d4a0:	b103      	cbz	r3, 800d4a4 <_fstat_r+0x1c>
 800d4a2:	6023      	str	r3, [r4, #0]
 800d4a4:	bd38      	pop	{r3, r4, r5, pc}
 800d4a6:	bf00      	nop
 800d4a8:	20000e20 	.word	0x20000e20

0800d4ac <_isatty_r>:
 800d4ac:	b538      	push	{r3, r4, r5, lr}
 800d4ae:	4d06      	ldr	r5, [pc, #24]	; (800d4c8 <_isatty_r+0x1c>)
 800d4b0:	2300      	movs	r3, #0
 800d4b2:	4604      	mov	r4, r0
 800d4b4:	4608      	mov	r0, r1
 800d4b6:	602b      	str	r3, [r5, #0]
 800d4b8:	f7f4 fdd3 	bl	8002062 <_isatty>
 800d4bc:	1c43      	adds	r3, r0, #1
 800d4be:	d102      	bne.n	800d4c6 <_isatty_r+0x1a>
 800d4c0:	682b      	ldr	r3, [r5, #0]
 800d4c2:	b103      	cbz	r3, 800d4c6 <_isatty_r+0x1a>
 800d4c4:	6023      	str	r3, [r4, #0]
 800d4c6:	bd38      	pop	{r3, r4, r5, pc}
 800d4c8:	20000e20 	.word	0x20000e20

0800d4cc <_malloc_usable_size_r>:
 800d4cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d4d0:	1f18      	subs	r0, r3, #4
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	bfbc      	itt	lt
 800d4d6:	580b      	ldrlt	r3, [r1, r0]
 800d4d8:	18c0      	addlt	r0, r0, r3
 800d4da:	4770      	bx	lr

0800d4dc <_init>:
 800d4dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4de:	bf00      	nop
 800d4e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d4e2:	bc08      	pop	{r3}
 800d4e4:	469e      	mov	lr, r3
 800d4e6:	4770      	bx	lr

0800d4e8 <_fini>:
 800d4e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4ea:	bf00      	nop
 800d4ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d4ee:	bc08      	pop	{r3}
 800d4f0:	469e      	mov	lr, r3
 800d4f2:	4770      	bx	lr
