
F407_Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d6dc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00006958  0800d86c  0800d86c  0001d86c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080141c4  080141c4  000301a8  2**0
                  CONTENTS
  4 .ARM          00000008  080141c4  080141c4  000241c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080141cc  080141cc  000301a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080141cc  080141cc  000241cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080141d0  080141d0  000241d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a8  20000000  080141d4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301a8  2**0
                  CONTENTS
 10 .bss          00000cc4  200001a8  200001a8  000301a8  2**2
                  ALLOC
 11 ._user_heap_stack 00001404  20000e6c  20000e6c  000301a8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a89a  00000000  00000000  000301d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003bcf  00000000  00000000  0004aa72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017a8  00000000  00000000  0004e648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000015f0  00000000  00000000  0004fdf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025c9d  00000000  00000000  000513e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d17d  00000000  00000000  0007707d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d32b2  00000000  00000000  000941fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001674ac  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006dc8  00000000  00000000  001674fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001a8 	.word	0x200001a8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d854 	.word	0x0800d854

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ac 	.word	0x200001ac
 80001cc:	0800d854 	.word	0x0800d854

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <ILI9341_DrawChar>:

	ILI9341_DrawRectangle(X0True, Y0True, xLen, yLen, color);
}

void ILI9341_DrawChar(char ch, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 8000574:	b590      	push	{r4, r7, lr}
 8000576:	b08d      	sub	sp, #52	; 0x34
 8000578:	af02      	add	r7, sp, #8
 800057a:	60b9      	str	r1, [r7, #8]
 800057c:	4611      	mov	r1, r2
 800057e:	461a      	mov	r2, r3
 8000580:	4603      	mov	r3, r0
 8000582:	73fb      	strb	r3, [r7, #15]
 8000584:	460b      	mov	r3, r1
 8000586:	81bb      	strh	r3, [r7, #12]
 8000588:	4613      	mov	r3, r2
 800058a:	80fb      	strh	r3, [r7, #6]
	if ((ch < 31) || (ch > 127)) return;
 800058c:	7bfb      	ldrb	r3, [r7, #15]
 800058e:	2b1e      	cmp	r3, #30
 8000590:	d961      	bls.n	8000656 <ILI9341_DrawChar+0xe2>
 8000592:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000596:	2b00      	cmp	r3, #0
 8000598:	db5d      	blt.n	8000656 <ILI9341_DrawChar+0xe2>

	uint8_t fOffset, fWidth, fHeight, fBPL;
	uint8_t *tempChar;

	fOffset = font[0];
 800059a:	68bb      	ldr	r3, [r7, #8]
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	77fb      	strb	r3, [r7, #31]
	fWidth = font[1];
 80005a0:	68bb      	ldr	r3, [r7, #8]
 80005a2:	785b      	ldrb	r3, [r3, #1]
 80005a4:	77bb      	strb	r3, [r7, #30]
	fHeight = font[2];
 80005a6:	68bb      	ldr	r3, [r7, #8]
 80005a8:	789b      	ldrb	r3, [r3, #2]
 80005aa:	777b      	strb	r3, [r7, #29]
	fBPL = font[3];
 80005ac:	68bb      	ldr	r3, [r7, #8]
 80005ae:	78db      	ldrb	r3, [r3, #3]
 80005b0:	773b      	strb	r3, [r7, #28]

	tempChar = (uint8_t*)&font[((ch - 0x20) * fOffset) + 4]; /* Current Character = Meta + (Character Index * Offset) */
 80005b2:	7bfb      	ldrb	r3, [r7, #15]
 80005b4:	3b20      	subs	r3, #32
 80005b6:	7ffa      	ldrb	r2, [r7, #31]
 80005b8:	fb02 f303 	mul.w	r3, r2, r3
 80005bc:	3304      	adds	r3, #4
 80005be:	68ba      	ldr	r2, [r7, #8]
 80005c0:	4413      	add	r3, r2
 80005c2:	61bb      	str	r3, [r7, #24]

	/* Clear background first */
	ILI9341_DrawRectangle(X, Y, fWidth, fHeight, bgcolor);
 80005c4:	7fbb      	ldrb	r3, [r7, #30]
 80005c6:	b29a      	uxth	r2, r3
 80005c8:	7f7b      	ldrb	r3, [r7, #29]
 80005ca:	b29c      	uxth	r4, r3
 80005cc:	88f9      	ldrh	r1, [r7, #6]
 80005ce:	89b8      	ldrh	r0, [r7, #12]
 80005d0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80005d2:	9300      	str	r3, [sp, #0]
 80005d4:	4623      	mov	r3, r4
 80005d6:	f000 fc67 	bl	8000ea8 <ILI9341_DrawRectangle>

	for (int j=0; j < fHeight; j++)
 80005da:	2300      	movs	r3, #0
 80005dc:	627b      	str	r3, [r7, #36]	; 0x24
 80005de:	e035      	b.n	800064c <ILI9341_DrawChar+0xd8>
	{
		for (int i=0; i < fWidth; i++)
 80005e0:	2300      	movs	r3, #0
 80005e2:	623b      	str	r3, [r7, #32]
 80005e4:	e02b      	b.n	800063e <ILI9341_DrawChar+0xca>
		{
			uint8_t z =  tempChar[fBPL * i + ((j & 0xF8) >> 3) + 1]; /* (j & 0xF8) >> 3, increase one by 8-bits */
 80005e6:	7f3b      	ldrb	r3, [r7, #28]
 80005e8:	6a3a      	ldr	r2, [r7, #32]
 80005ea:	fb03 f202 	mul.w	r2, r3, r2
 80005ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005f0:	10db      	asrs	r3, r3, #3
 80005f2:	f003 031f 	and.w	r3, r3, #31
 80005f6:	4413      	add	r3, r2
 80005f8:	3301      	adds	r3, #1
 80005fa:	69ba      	ldr	r2, [r7, #24]
 80005fc:	4413      	add	r3, r2
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	75fb      	strb	r3, [r7, #23]
			uint8_t b = 1 << (j & 0x07);
 8000602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000604:	f003 0307 	and.w	r3, r3, #7
 8000608:	2201      	movs	r2, #1
 800060a:	fa02 f303 	lsl.w	r3, r2, r3
 800060e:	75bb      	strb	r3, [r7, #22]
			if (( z & b ) != 0x00)
 8000610:	7dfa      	ldrb	r2, [r7, #23]
 8000612:	7dbb      	ldrb	r3, [r7, #22]
 8000614:	4013      	ands	r3, r2
 8000616:	b2db      	uxtb	r3, r3
 8000618:	2b00      	cmp	r3, #0
 800061a:	d00d      	beq.n	8000638 <ILI9341_DrawChar+0xc4>
			{
				ILI9341_DrawPixel(X+i, Y+j, color);
 800061c:	6a3b      	ldr	r3, [r7, #32]
 800061e:	b29a      	uxth	r2, r3
 8000620:	89bb      	ldrh	r3, [r7, #12]
 8000622:	4413      	add	r3, r2
 8000624:	b298      	uxth	r0, r3
 8000626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000628:	b29a      	uxth	r2, r3
 800062a:	88fb      	ldrh	r3, [r7, #6]
 800062c:	4413      	add	r3, r2
 800062e:	b29b      	uxth	r3, r3
 8000630:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8000632:	4619      	mov	r1, r3
 8000634:	f000 fbd2 	bl	8000ddc <ILI9341_DrawPixel>
		for (int i=0; i < fWidth; i++)
 8000638:	6a3b      	ldr	r3, [r7, #32]
 800063a:	3301      	adds	r3, #1
 800063c:	623b      	str	r3, [r7, #32]
 800063e:	7fbb      	ldrb	r3, [r7, #30]
 8000640:	6a3a      	ldr	r2, [r7, #32]
 8000642:	429a      	cmp	r2, r3
 8000644:	dbcf      	blt.n	80005e6 <ILI9341_DrawChar+0x72>
	for (int j=0; j < fHeight; j++)
 8000646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000648:	3301      	adds	r3, #1
 800064a:	627b      	str	r3, [r7, #36]	; 0x24
 800064c:	7f7b      	ldrb	r3, [r7, #29]
 800064e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000650:	429a      	cmp	r2, r3
 8000652:	dbc5      	blt.n	80005e0 <ILI9341_DrawChar+0x6c>
 8000654:	e000      	b.n	8000658 <ILI9341_DrawChar+0xe4>
	if ((ch < 31) || (ch > 127)) return;
 8000656:	bf00      	nop
			}
		}
	}
}
 8000658:	372c      	adds	r7, #44	; 0x2c
 800065a:	46bd      	mov	sp, r7
 800065c:	bd90      	pop	{r4, r7, pc}

0800065e <ILI9341_DrawText>:

void ILI9341_DrawText(const char* str, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 800065e:	b580      	push	{r7, lr}
 8000660:	b08a      	sub	sp, #40	; 0x28
 8000662:	af02      	add	r7, sp, #8
 8000664:	60f8      	str	r0, [r7, #12]
 8000666:	60b9      	str	r1, [r7, #8]
 8000668:	4611      	mov	r1, r2
 800066a:	461a      	mov	r2, r3
 800066c:	460b      	mov	r3, r1
 800066e:	80fb      	strh	r3, [r7, #6]
 8000670:	4613      	mov	r3, r2
 8000672:	80bb      	strh	r3, [r7, #4]
	uint8_t charWidth;			/* Width of character */
	uint8_t fOffset = font[0];	/* Offset of character */
 8000674:	68bb      	ldr	r3, [r7, #8]
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	77fb      	strb	r3, [r7, #31]
	uint8_t fWidth = font[1];	/* Width of font */
 800067a:	68bb      	ldr	r3, [r7, #8]
 800067c:	785b      	ldrb	r3, [r3, #1]
 800067e:	77bb      	strb	r3, [r7, #30]

	while (*str)
 8000680:	e02d      	b.n	80006de <ILI9341_DrawText+0x80>
	{
		ILI9341_DrawChar(*str, font, X, Y, color, bgcolor);
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	7818      	ldrb	r0, [r3, #0]
 8000686:	88b9      	ldrh	r1, [r7, #4]
 8000688:	88fa      	ldrh	r2, [r7, #6]
 800068a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000690:	9300      	str	r3, [sp, #0]
 8000692:	460b      	mov	r3, r1
 8000694:	68b9      	ldr	r1, [r7, #8]
 8000696:	f7ff ff6d 	bl	8000574 <ILI9341_DrawChar>

		/* Check character width and calculate proper position */
		uint8_t *tempChar = (uint8_t*)&font[((*str - 0x20) * fOffset) + 4];
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	3b20      	subs	r3, #32
 80006a0:	7ffa      	ldrb	r2, [r7, #31]
 80006a2:	fb02 f303 	mul.w	r3, r2, r3
 80006a6:	3304      	adds	r3, #4
 80006a8:	68ba      	ldr	r2, [r7, #8]
 80006aa:	4413      	add	r3, r2
 80006ac:	61bb      	str	r3, [r7, #24]
		charWidth = tempChar[0];
 80006ae:	69bb      	ldr	r3, [r7, #24]
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	75fb      	strb	r3, [r7, #23]

		if(charWidth + 2 < fWidth)
 80006b4:	7dfb      	ldrb	r3, [r7, #23]
 80006b6:	1c9a      	adds	r2, r3, #2
 80006b8:	7fbb      	ldrb	r3, [r7, #30]
 80006ba:	429a      	cmp	r2, r3
 80006bc:	da07      	bge.n	80006ce <ILI9341_DrawText+0x70>
		{
			/* If character width is smaller than font width */
			X += (charWidth + 2);
 80006be:	7dfb      	ldrb	r3, [r7, #23]
 80006c0:	b29a      	uxth	r2, r3
 80006c2:	88fb      	ldrh	r3, [r7, #6]
 80006c4:	4413      	add	r3, r2
 80006c6:	b29b      	uxth	r3, r3
 80006c8:	3302      	adds	r3, #2
 80006ca:	80fb      	strh	r3, [r7, #6]
 80006cc:	e004      	b.n	80006d8 <ILI9341_DrawText+0x7a>
		}
		else
		{
			X += fWidth;
 80006ce:	7fbb      	ldrb	r3, [r7, #30]
 80006d0:	b29a      	uxth	r2, r3
 80006d2:	88fb      	ldrh	r3, [r7, #6]
 80006d4:	4413      	add	r3, r2
 80006d6:	80fb      	strh	r3, [r7, #6]
		}

		str++;
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	3301      	adds	r3, #1
 80006dc:	60fb      	str	r3, [r7, #12]
	while (*str)
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d1cd      	bne.n	8000682 <ILI9341_DrawText+0x24>
	}
}
 80006e6:	bf00      	nop
 80006e8:	bf00      	nop
 80006ea:	3720      	adds	r7, #32
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}

080006f0 <HAL_SPI_TxCpltCallback>:
uint16_t LCD_DC_PIN = LCD1_DC_PIN;
GPIO_TypeDef* LCD_RST_PORT = LCD1_RST_PORT;
uint16_t LCD_RST_PIN = LCD1_RST_PIN;

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  /* Deselect when Tx Complete */
  if(hspi == HSPI_INSTANCE)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	4a07      	ldr	r2, [pc, #28]	; (8000718 <HAL_SPI_TxCpltCallback+0x28>)
 80006fc:	4293      	cmp	r3, r2
 80006fe:	d107      	bne.n	8000710 <HAL_SPI_TxCpltCallback+0x20>
  {
	  HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000700:	4b06      	ldr	r3, [pc, #24]	; (800071c <HAL_SPI_TxCpltCallback+0x2c>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a06      	ldr	r2, [pc, #24]	; (8000720 <HAL_SPI_TxCpltCallback+0x30>)
 8000706:	8811      	ldrh	r1, [r2, #0]
 8000708:	2201      	movs	r2, #1
 800070a:	4618      	mov	r0, r3
 800070c:	f002 fdea 	bl	80032e4 <HAL_GPIO_WritePin>
  }
}
 8000710:	bf00      	nop
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	20000278 	.word	0x20000278
 800071c:	20000004 	.word	0x20000004
 8000720:	20000008 	.word	0x20000008

08000724 <ILI9341_SPI_Tx>:

static void ILI9341_SPI_Tx(uint8_t data)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 800072e:	bf00      	nop
 8000730:	4b08      	ldr	r3, [pc, #32]	; (8000754 <ILI9341_SPI_Tx+0x30>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	689b      	ldr	r3, [r3, #8]
 8000736:	f003 0302 	and.w	r3, r3, #2
 800073a:	2b02      	cmp	r3, #2
 800073c:	d1f8      	bne.n	8000730 <ILI9341_SPI_Tx+0xc>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, &data, 1);
 800073e:	1dfb      	adds	r3, r7, #7
 8000740:	2201      	movs	r2, #1
 8000742:	4619      	mov	r1, r3
 8000744:	4803      	ldr	r0, [pc, #12]	; (8000754 <ILI9341_SPI_Tx+0x30>)
 8000746:	f007 f9f3 	bl	8007b30 <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
}
 800074a:	bf00      	nop
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	20000278 	.word	0x20000278

08000758 <ILI9341_SPI_TxBuffer>:

static void ILI9341_SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
 8000760:	460b      	mov	r3, r1
 8000762:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 8000764:	bf00      	nop
 8000766:	4b08      	ldr	r3, [pc, #32]	; (8000788 <ILI9341_SPI_TxBuffer+0x30>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	689b      	ldr	r3, [r3, #8]
 800076c:	f003 0302 	and.w	r3, r3, #2
 8000770:	2b02      	cmp	r3, #2
 8000772:	d1f8      	bne.n	8000766 <ILI9341_SPI_TxBuffer+0xe>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, buffer, len);
 8000774:	887b      	ldrh	r3, [r7, #2]
 8000776:	461a      	mov	r2, r3
 8000778:	6879      	ldr	r1, [r7, #4]
 800077a:	4803      	ldr	r0, [pc, #12]	; (8000788 <ILI9341_SPI_TxBuffer+0x30>)
 800077c:	f007 f9d8 	bl	8007b30 <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, buffer, len, 10);
}
 8000780:	bf00      	nop
 8000782:	3708      	adds	r7, #8
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	20000278 	.word	0x20000278

0800078c <ILI9341_WriteCommand>:

void ILI9341_WriteCommand(uint8_t cmd)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	4603      	mov	r3, r0
 8000794:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	//command
 8000796:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <ILI9341_WriteCommand+0x3c>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	4a0c      	ldr	r2, [pc, #48]	; (80007cc <ILI9341_WriteCommand+0x40>)
 800079c:	8811      	ldrh	r1, [r2, #0]
 800079e:	2200      	movs	r2, #0
 80007a0:	4618      	mov	r0, r3
 80007a2:	f002 fd9f 	bl	80032e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 80007a6:	4b0a      	ldr	r3, [pc, #40]	; (80007d0 <ILI9341_WriteCommand+0x44>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4a0a      	ldr	r2, [pc, #40]	; (80007d4 <ILI9341_WriteCommand+0x48>)
 80007ac:	8811      	ldrh	r1, [r2, #0]
 80007ae:	2200      	movs	r2, #0
 80007b0:	4618      	mov	r0, r3
 80007b2:	f002 fd97 	bl	80032e4 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(cmd);
 80007b6:	79fb      	ldrb	r3, [r7, #7]
 80007b8:	4618      	mov	r0, r3
 80007ba:	f7ff ffb3 	bl	8000724 <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 80007be:	bf00      	nop
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	2000000c 	.word	0x2000000c
 80007cc:	20000010 	.word	0x20000010
 80007d0:	20000004 	.word	0x20000004
 80007d4:	20000008 	.word	0x20000008

080007d8 <ILI9341_WriteData>:

void ILI9341_WriteData(uint8_t data)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 80007e2:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <ILI9341_WriteData+0x3c>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	4a0c      	ldr	r2, [pc, #48]	; (8000818 <ILI9341_WriteData+0x40>)
 80007e8:	8811      	ldrh	r1, [r2, #0]
 80007ea:	2201      	movs	r2, #1
 80007ec:	4618      	mov	r0, r3
 80007ee:	f002 fd79 	bl	80032e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 80007f2:	4b0a      	ldr	r3, [pc, #40]	; (800081c <ILI9341_WriteData+0x44>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4a0a      	ldr	r2, [pc, #40]	; (8000820 <ILI9341_WriteData+0x48>)
 80007f8:	8811      	ldrh	r1, [r2, #0]
 80007fa:	2200      	movs	r2, #0
 80007fc:	4618      	mov	r0, r3
 80007fe:	f002 fd71 	bl	80032e4 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(data);
 8000802:	79fb      	ldrb	r3, [r7, #7]
 8000804:	4618      	mov	r0, r3
 8000806:	f7ff ff8d 	bl	8000724 <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 800080a:	bf00      	nop
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	2000000c 	.word	0x2000000c
 8000818:	20000010 	.word	0x20000010
 800081c:	20000004 	.word	0x20000004
 8000820:	20000008 	.word	0x20000008

08000824 <ILI9341_WriteBuffer>:

void ILI9341_WriteBuffer(uint8_t *buffer, uint16_t len)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	460b      	mov	r3, r1
 800082e:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 8000830:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <ILI9341_WriteBuffer+0x40>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a0c      	ldr	r2, [pc, #48]	; (8000868 <ILI9341_WriteBuffer+0x44>)
 8000836:	8811      	ldrh	r1, [r2, #0]
 8000838:	2201      	movs	r2, #1
 800083a:	4618      	mov	r0, r3
 800083c:	f002 fd52 	bl	80032e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8000840:	4b0a      	ldr	r3, [pc, #40]	; (800086c <ILI9341_WriteBuffer+0x48>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a0a      	ldr	r2, [pc, #40]	; (8000870 <ILI9341_WriteBuffer+0x4c>)
 8000846:	8811      	ldrh	r1, [r2, #0]
 8000848:	2200      	movs	r2, #0
 800084a:	4618      	mov	r0, r3
 800084c:	f002 fd4a 	bl	80032e4 <HAL_GPIO_WritePin>
	ILI9341_SPI_TxBuffer(buffer, len);
 8000850:	887b      	ldrh	r3, [r7, #2]
 8000852:	4619      	mov	r1, r3
 8000854:	6878      	ldr	r0, [r7, #4]
 8000856:	f7ff ff7f 	bl	8000758 <ILI9341_SPI_TxBuffer>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 800085a:	bf00      	nop
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	2000000c 	.word	0x2000000c
 8000868:	20000010 	.word	0x20000010
 800086c:	20000004 	.word	0x20000004
 8000870:	20000008 	.word	0x20000008

08000874 <ILI9341_SetAddress>:

void ILI9341_SetAddress(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8000874:	b590      	push	{r4, r7, lr}
 8000876:	b085      	sub	sp, #20
 8000878:	af00      	add	r7, sp, #0
 800087a:	4604      	mov	r4, r0
 800087c:	4608      	mov	r0, r1
 800087e:	4611      	mov	r1, r2
 8000880:	461a      	mov	r2, r3
 8000882:	4623      	mov	r3, r4
 8000884:	80fb      	strh	r3, [r7, #6]
 8000886:	4603      	mov	r3, r0
 8000888:	80bb      	strh	r3, [r7, #4]
 800088a:	460b      	mov	r3, r1
 800088c:	807b      	strh	r3, [r7, #2]
 800088e:	4613      	mov	r3, r2
 8000890:	803b      	strh	r3, [r7, #0]
	uint8_t buffer[4];
	buffer[0] = x1 >> 8;
 8000892:	88fb      	ldrh	r3, [r7, #6]
 8000894:	0a1b      	lsrs	r3, r3, #8
 8000896:	b29b      	uxth	r3, r3
 8000898:	b2db      	uxtb	r3, r3
 800089a:	733b      	strb	r3, [r7, #12]
	buffer[1] = x1;
 800089c:	88fb      	ldrh	r3, [r7, #6]
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	737b      	strb	r3, [r7, #13]
	buffer[2] = x2 >> 8;
 80008a2:	887b      	ldrh	r3, [r7, #2]
 80008a4:	0a1b      	lsrs	r3, r3, #8
 80008a6:	b29b      	uxth	r3, r3
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	73bb      	strb	r3, [r7, #14]
	buffer[3] = x2;
 80008ac:	887b      	ldrh	r3, [r7, #2]
 80008ae:	b2db      	uxtb	r3, r3
 80008b0:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2A);
 80008b2:	202a      	movs	r0, #42	; 0x2a
 80008b4:	f7ff ff6a 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 80008b8:	f107 030c 	add.w	r3, r7, #12
 80008bc:	2104      	movs	r1, #4
 80008be:	4618      	mov	r0, r3
 80008c0:	f7ff ffb0 	bl	8000824 <ILI9341_WriteBuffer>

	buffer[0] = y1 >> 8;
 80008c4:	88bb      	ldrh	r3, [r7, #4]
 80008c6:	0a1b      	lsrs	r3, r3, #8
 80008c8:	b29b      	uxth	r3, r3
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	733b      	strb	r3, [r7, #12]
	buffer[1] = y1;
 80008ce:	88bb      	ldrh	r3, [r7, #4]
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	737b      	strb	r3, [r7, #13]
	buffer[2] = y2 >> 8;
 80008d4:	883b      	ldrh	r3, [r7, #0]
 80008d6:	0a1b      	lsrs	r3, r3, #8
 80008d8:	b29b      	uxth	r3, r3
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	73bb      	strb	r3, [r7, #14]
	buffer[3] = y2;
 80008de:	883b      	ldrh	r3, [r7, #0]
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2B);
 80008e4:	202b      	movs	r0, #43	; 0x2b
 80008e6:	f7ff ff51 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 80008ea:	f107 030c 	add.w	r3, r7, #12
 80008ee:	2104      	movs	r1, #4
 80008f0:	4618      	mov	r0, r3
 80008f2:	f7ff ff97 	bl	8000824 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);
 80008f6:	202c      	movs	r0, #44	; 0x2c
 80008f8:	f7ff ff48 	bl	800078c <ILI9341_WriteCommand>
}
 80008fc:	bf00      	nop
 80008fe:	3714      	adds	r7, #20
 8000900:	46bd      	mov	sp, r7
 8000902:	bd90      	pop	{r4, r7, pc}

08000904 <ILI9341_Reset>:

void ILI9341_Reset(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);	//Disable
 8000908:	4b13      	ldr	r3, [pc, #76]	; (8000958 <ILI9341_Reset+0x54>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a13      	ldr	r2, [pc, #76]	; (800095c <ILI9341_Reset+0x58>)
 800090e:	8811      	ldrh	r1, [r2, #0]
 8000910:	2200      	movs	r2, #0
 8000912:	4618      	mov	r0, r3
 8000914:	f002 fce6 	bl	80032e4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000918:	200a      	movs	r0, #10
 800091a:	f001 fe59 	bl	80025d0 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);		//Select
 800091e:	4b10      	ldr	r3, [pc, #64]	; (8000960 <ILI9341_Reset+0x5c>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4a10      	ldr	r2, [pc, #64]	; (8000964 <ILI9341_Reset+0x60>)
 8000924:	8811      	ldrh	r1, [r2, #0]
 8000926:	2200      	movs	r2, #0
 8000928:	4618      	mov	r0, r3
 800092a:	f002 fcdb 	bl	80032e4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800092e:	200a      	movs	r0, #10
 8000930:	f001 fe4e 	bl	80025d0 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 8000934:	4b08      	ldr	r3, [pc, #32]	; (8000958 <ILI9341_Reset+0x54>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a08      	ldr	r2, [pc, #32]	; (800095c <ILI9341_Reset+0x58>)
 800093a:	8811      	ldrh	r1, [r2, #0]
 800093c:	2201      	movs	r2, #1
 800093e:	4618      	mov	r0, r3
 8000940:	f002 fcd0 	bl	80032e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET); 		//Deselect
 8000944:	4b06      	ldr	r3, [pc, #24]	; (8000960 <ILI9341_Reset+0x5c>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a06      	ldr	r2, [pc, #24]	; (8000964 <ILI9341_Reset+0x60>)
 800094a:	8811      	ldrh	r1, [r2, #0]
 800094c:	2201      	movs	r2, #1
 800094e:	4618      	mov	r0, r3
 8000950:	f002 fcc8 	bl	80032e4 <HAL_GPIO_WritePin>
}
 8000954:	bf00      	nop
 8000956:	bd80      	pop	{r7, pc}
 8000958:	20000014 	.word	0x20000014
 800095c:	20000018 	.word	0x20000018
 8000960:	20000004 	.word	0x20000004
 8000964:	20000008 	.word	0x20000008

08000968 <ILI9341_Enable>:

void ILI9341_Enable(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 800096c:	4b04      	ldr	r3, [pc, #16]	; (8000980 <ILI9341_Enable+0x18>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a04      	ldr	r2, [pc, #16]	; (8000984 <ILI9341_Enable+0x1c>)
 8000972:	8811      	ldrh	r1, [r2, #0]
 8000974:	2201      	movs	r2, #1
 8000976:	4618      	mov	r0, r3
 8000978:	f002 fcb4 	bl	80032e4 <HAL_GPIO_WritePin>
}
 800097c:	bf00      	nop
 800097e:	bd80      	pop	{r7, pc}
 8000980:	20000014 	.word	0x20000014
 8000984:	20000018 	.word	0x20000018

08000988 <ILI9341_Init>:

void ILI9341_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
	ILI9341_Enable();
 800098c:	f7ff ffec 	bl	8000968 <ILI9341_Enable>
	ILI9341_Reset();
 8000990:	f7ff ffb8 	bl	8000904 <ILI9341_Reset>

	//SOFTWARE RESET
	ILI9341_WriteCommand(0x01);
 8000994:	2001      	movs	r0, #1
 8000996:	f7ff fef9 	bl	800078c <ILI9341_WriteCommand>
	HAL_Delay(10);
 800099a:	200a      	movs	r0, #10
 800099c:	f001 fe18 	bl	80025d0 <HAL_Delay>

	//POWER CONTROL A
	ILI9341_WriteCommand(0xCB);
 80009a0:	20cb      	movs	r0, #203	; 0xcb
 80009a2:	f7ff fef3 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x39);
 80009a6:	2039      	movs	r0, #57	; 0x39
 80009a8:	f7ff ff16 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x2C);
 80009ac:	202c      	movs	r0, #44	; 0x2c
 80009ae:	f7ff ff13 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 80009b2:	2000      	movs	r0, #0
 80009b4:	f7ff ff10 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x34);
 80009b8:	2034      	movs	r0, #52	; 0x34
 80009ba:	f7ff ff0d 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x02);
 80009be:	2002      	movs	r0, #2
 80009c0:	f7ff ff0a 	bl	80007d8 <ILI9341_WriteData>

	//POWER CONTROL B
	ILI9341_WriteCommand(0xCF);
 80009c4:	20cf      	movs	r0, #207	; 0xcf
 80009c6:	f7ff fee1 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 80009ca:	2000      	movs	r0, #0
 80009cc:	f7ff ff04 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 80009d0:	20c1      	movs	r0, #193	; 0xc1
 80009d2:	f7ff ff01 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x30);
 80009d6:	2030      	movs	r0, #48	; 0x30
 80009d8:	f7ff fefe 	bl	80007d8 <ILI9341_WriteData>

	//DRIVER TIMING CONTROL A
	ILI9341_WriteCommand(0xE8);
 80009dc:	20e8      	movs	r0, #232	; 0xe8
 80009de:	f7ff fed5 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x85);
 80009e2:	2085      	movs	r0, #133	; 0x85
 80009e4:	f7ff fef8 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 80009e8:	2000      	movs	r0, #0
 80009ea:	f7ff fef5 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x78);
 80009ee:	2078      	movs	r0, #120	; 0x78
 80009f0:	f7ff fef2 	bl	80007d8 <ILI9341_WriteData>

	//DRIVER TIMING CONTROL B
	ILI9341_WriteCommand(0xEA);
 80009f4:	20ea      	movs	r0, #234	; 0xea
 80009f6:	f7ff fec9 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 80009fa:	2000      	movs	r0, #0
 80009fc:	f7ff feec 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000a00:	2000      	movs	r0, #0
 8000a02:	f7ff fee9 	bl	80007d8 <ILI9341_WriteData>

	//POWER ON SEQUENCE CONTROL
	ILI9341_WriteCommand(0xED);
 8000a06:	20ed      	movs	r0, #237	; 0xed
 8000a08:	f7ff fec0 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x64);
 8000a0c:	2064      	movs	r0, #100	; 0x64
 8000a0e:	f7ff fee3 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8000a12:	2003      	movs	r0, #3
 8000a14:	f7ff fee0 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x12);
 8000a18:	2012      	movs	r0, #18
 8000a1a:	f7ff fedd 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x81);
 8000a1e:	2081      	movs	r0, #129	; 0x81
 8000a20:	f7ff feda 	bl	80007d8 <ILI9341_WriteData>

	//PUMP RATIO CONTROL
	ILI9341_WriteCommand(0xF7);
 8000a24:	20f7      	movs	r0, #247	; 0xf7
 8000a26:	f7ff feb1 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x20);
 8000a2a:	2020      	movs	r0, #32
 8000a2c:	f7ff fed4 	bl	80007d8 <ILI9341_WriteData>

	//POWER CONTROL,VRH[5:0]
	ILI9341_WriteCommand(0xC0);
 8000a30:	20c0      	movs	r0, #192	; 0xc0
 8000a32:	f7ff feab 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x23);
 8000a36:	2023      	movs	r0, #35	; 0x23
 8000a38:	f7ff fece 	bl	80007d8 <ILI9341_WriteData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_WriteCommand(0xC1);
 8000a3c:	20c1      	movs	r0, #193	; 0xc1
 8000a3e:	f7ff fea5 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x10);
 8000a42:	2010      	movs	r0, #16
 8000a44:	f7ff fec8 	bl	80007d8 <ILI9341_WriteData>

	//VCM CONTROL
	ILI9341_WriteCommand(0xC5);
 8000a48:	20c5      	movs	r0, #197	; 0xc5
 8000a4a:	f7ff fe9f 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x3E);
 8000a4e:	203e      	movs	r0, #62	; 0x3e
 8000a50:	f7ff fec2 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x28);
 8000a54:	2028      	movs	r0, #40	; 0x28
 8000a56:	f7ff febf 	bl	80007d8 <ILI9341_WriteData>

	//VCM CONTROL 2
	ILI9341_WriteCommand(0xC7);
 8000a5a:	20c7      	movs	r0, #199	; 0xc7
 8000a5c:	f7ff fe96 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x86);
 8000a60:	2086      	movs	r0, #134	; 0x86
 8000a62:	f7ff feb9 	bl	80007d8 <ILI9341_WriteData>

	//MEMORY ACCESS CONTROL
	ILI9341_WriteCommand(0x36);
 8000a66:	2036      	movs	r0, #54	; 0x36
 8000a68:	f7ff fe90 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x48);
 8000a6c:	2048      	movs	r0, #72	; 0x48
 8000a6e:	f7ff feb3 	bl	80007d8 <ILI9341_WriteData>

	//PIXEL FORMAT
	ILI9341_WriteCommand(0x3A);
 8000a72:	203a      	movs	r0, #58	; 0x3a
 8000a74:	f7ff fe8a 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x55);
 8000a78:	2055      	movs	r0, #85	; 0x55
 8000a7a:	f7ff fead 	bl	80007d8 <ILI9341_WriteData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_WriteCommand(0xB1);
 8000a7e:	20b1      	movs	r0, #177	; 0xb1
 8000a80:	f7ff fe84 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000a84:	2000      	movs	r0, #0
 8000a86:	f7ff fea7 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x18);
 8000a8a:	2018      	movs	r0, #24
 8000a8c:	f7ff fea4 	bl	80007d8 <ILI9341_WriteData>

	//DISPLAY FUNCTION CONTROL
	ILI9341_WriteCommand(0xB6);
 8000a90:	20b6      	movs	r0, #182	; 0xb6
 8000a92:	f7ff fe7b 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x08);
 8000a96:	2008      	movs	r0, #8
 8000a98:	f7ff fe9e 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x82);
 8000a9c:	2082      	movs	r0, #130	; 0x82
 8000a9e:	f7ff fe9b 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x27);
 8000aa2:	2027      	movs	r0, #39	; 0x27
 8000aa4:	f7ff fe98 	bl	80007d8 <ILI9341_WriteData>

	//3GAMMA FUNCTION DISABLE
	ILI9341_WriteCommand(0xF2);
 8000aa8:	20f2      	movs	r0, #242	; 0xf2
 8000aaa:	f7ff fe6f 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000aae:	2000      	movs	r0, #0
 8000ab0:	f7ff fe92 	bl	80007d8 <ILI9341_WriteData>

	//GAMMA CURVE SELECTED
	ILI9341_WriteCommand(0x26);
 8000ab4:	2026      	movs	r0, #38	; 0x26
 8000ab6:	f7ff fe69 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x01);
 8000aba:	2001      	movs	r0, #1
 8000abc:	f7ff fe8c 	bl	80007d8 <ILI9341_WriteData>

	//POSITIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE0);
 8000ac0:	20e0      	movs	r0, #224	; 0xe0
 8000ac2:	f7ff fe63 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x0F);
 8000ac6:	200f      	movs	r0, #15
 8000ac8:	f7ff fe86 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8000acc:	2031      	movs	r0, #49	; 0x31
 8000ace:	f7ff fe83 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x2B);
 8000ad2:	202b      	movs	r0, #43	; 0x2b
 8000ad4:	f7ff fe80 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 8000ad8:	200c      	movs	r0, #12
 8000ada:	f7ff fe7d 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8000ade:	200e      	movs	r0, #14
 8000ae0:	f7ff fe7a 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 8000ae4:	2008      	movs	r0, #8
 8000ae6:	f7ff fe77 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x4E);
 8000aea:	204e      	movs	r0, #78	; 0x4e
 8000aec:	f7ff fe74 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0xF1);
 8000af0:	20f1      	movs	r0, #241	; 0xf1
 8000af2:	f7ff fe71 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x37);
 8000af6:	2037      	movs	r0, #55	; 0x37
 8000af8:	f7ff fe6e 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 8000afc:	2007      	movs	r0, #7
 8000afe:	f7ff fe6b 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x10);
 8000b02:	2010      	movs	r0, #16
 8000b04:	f7ff fe68 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8000b08:	2003      	movs	r0, #3
 8000b0a:	f7ff fe65 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8000b0e:	200e      	movs	r0, #14
 8000b10:	f7ff fe62 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x09);
 8000b14:	2009      	movs	r0, #9
 8000b16:	f7ff fe5f 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8000b1a:	2000      	movs	r0, #0
 8000b1c:	f7ff fe5c 	bl	80007d8 <ILI9341_WriteData>

	//NEGATIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE1);
 8000b20:	20e1      	movs	r0, #225	; 0xe1
 8000b22:	f7ff fe33 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8000b26:	2000      	movs	r0, #0
 8000b28:	f7ff fe56 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8000b2c:	200e      	movs	r0, #14
 8000b2e:	f7ff fe53 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x14);
 8000b32:	2014      	movs	r0, #20
 8000b34:	f7ff fe50 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8000b38:	2003      	movs	r0, #3
 8000b3a:	f7ff fe4d 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x11);
 8000b3e:	2011      	movs	r0, #17
 8000b40:	f7ff fe4a 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 8000b44:	2007      	movs	r0, #7
 8000b46:	f7ff fe47 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8000b4a:	2031      	movs	r0, #49	; 0x31
 8000b4c:	f7ff fe44 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 8000b50:	20c1      	movs	r0, #193	; 0xc1
 8000b52:	f7ff fe41 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x48);
 8000b56:	2048      	movs	r0, #72	; 0x48
 8000b58:	f7ff fe3e 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 8000b5c:	2008      	movs	r0, #8
 8000b5e:	f7ff fe3b 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 8000b62:	200f      	movs	r0, #15
 8000b64:	f7ff fe38 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 8000b68:	200c      	movs	r0, #12
 8000b6a:	f7ff fe35 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8000b6e:	2031      	movs	r0, #49	; 0x31
 8000b70:	f7ff fe32 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x36);
 8000b74:	2036      	movs	r0, #54	; 0x36
 8000b76:	f7ff fe2f 	bl	80007d8 <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 8000b7a:	200f      	movs	r0, #15
 8000b7c:	f7ff fe2c 	bl	80007d8 <ILI9341_WriteData>

	//EXIT SLEEP
	ILI9341_WriteCommand(0x11);
 8000b80:	2011      	movs	r0, #17
 8000b82:	f7ff fe03 	bl	800078c <ILI9341_WriteCommand>
	HAL_Delay(100);
 8000b86:	2064      	movs	r0, #100	; 0x64
 8000b88:	f001 fd22 	bl	80025d0 <HAL_Delay>

	//TURN ON DISPLAY
	ILI9341_WriteCommand(0x29);
 8000b8c:	2029      	movs	r0, #41	; 0x29
 8000b8e:	f7ff fdfd 	bl	800078c <ILI9341_WriteCommand>

	//STARTING ROTATION
	ILI9341_SetRotation(SCREEN_VERTICAL_1);
 8000b92:	2000      	movs	r0, #0
 8000b94:	f000 f802 	bl	8000b9c <ILI9341_SetRotation>
}
 8000b98:	bf00      	nop
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <ILI9341_SetRotation>:

void ILI9341_SetRotation(uint8_t rotation)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	71fb      	strb	r3, [r7, #7]
	ILI9341_WriteCommand(0x36);
 8000ba6:	2036      	movs	r0, #54	; 0x36
 8000ba8:	f7ff fdf0 	bl	800078c <ILI9341_WriteCommand>
	HAL_Delay(1);
 8000bac:	2001      	movs	r0, #1
 8000bae:	f001 fd0f 	bl	80025d0 <HAL_Delay>

	switch(rotation)
 8000bb2:	79fb      	ldrb	r3, [r7, #7]
 8000bb4:	2b03      	cmp	r3, #3
 8000bb6:	d837      	bhi.n	8000c28 <ILI9341_SetRotation+0x8c>
 8000bb8:	a201      	add	r2, pc, #4	; (adr r2, 8000bc0 <ILI9341_SetRotation+0x24>)
 8000bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bbe:	bf00      	nop
 8000bc0:	08000bd1 	.word	0x08000bd1
 8000bc4:	08000be7 	.word	0x08000be7
 8000bc8:	08000bfd 	.word	0x08000bfd
 8000bcc:	08000c13 	.word	0x08000c13
	{
	case SCREEN_VERTICAL_1:
		ILI9341_WriteData(0x40|0x08);
 8000bd0:	2048      	movs	r0, #72	; 0x48
 8000bd2:	f7ff fe01 	bl	80007d8 <ILI9341_WriteData>
		LCD_WIDTH = 240;
 8000bd6:	4b17      	ldr	r3, [pc, #92]	; (8000c34 <ILI9341_SetRotation+0x98>)
 8000bd8:	22f0      	movs	r2, #240	; 0xf0
 8000bda:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8000bdc:	4b16      	ldr	r3, [pc, #88]	; (8000c38 <ILI9341_SetRotation+0x9c>)
 8000bde:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000be2:	801a      	strh	r2, [r3, #0]
		break;
 8000be4:	e021      	b.n	8000c2a <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_1:
		ILI9341_WriteData(0x20|0x08);
 8000be6:	2028      	movs	r0, #40	; 0x28
 8000be8:	f7ff fdf6 	bl	80007d8 <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 8000bec:	4b11      	ldr	r3, [pc, #68]	; (8000c34 <ILI9341_SetRotation+0x98>)
 8000bee:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000bf2:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8000bf4:	4b10      	ldr	r3, [pc, #64]	; (8000c38 <ILI9341_SetRotation+0x9c>)
 8000bf6:	22f0      	movs	r2, #240	; 0xf0
 8000bf8:	801a      	strh	r2, [r3, #0]
		break;
 8000bfa:	e016      	b.n	8000c2a <ILI9341_SetRotation+0x8e>
	case SCREEN_VERTICAL_2:
		ILI9341_WriteData(0x80|0x08);
 8000bfc:	2088      	movs	r0, #136	; 0x88
 8000bfe:	f7ff fdeb 	bl	80007d8 <ILI9341_WriteData>
		LCD_WIDTH  = 240;
 8000c02:	4b0c      	ldr	r3, [pc, #48]	; (8000c34 <ILI9341_SetRotation+0x98>)
 8000c04:	22f0      	movs	r2, #240	; 0xf0
 8000c06:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8000c08:	4b0b      	ldr	r3, [pc, #44]	; (8000c38 <ILI9341_SetRotation+0x9c>)
 8000c0a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000c0e:	801a      	strh	r2, [r3, #0]
		break;
 8000c10:	e00b      	b.n	8000c2a <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_2:
		ILI9341_WriteData(0x40|0x80|0x20|0x08);
 8000c12:	20e8      	movs	r0, #232	; 0xe8
 8000c14:	f7ff fde0 	bl	80007d8 <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 8000c18:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <ILI9341_SetRotation+0x98>)
 8000c1a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000c1e:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8000c20:	4b05      	ldr	r3, [pc, #20]	; (8000c38 <ILI9341_SetRotation+0x9c>)
 8000c22:	22f0      	movs	r2, #240	; 0xf0
 8000c24:	801a      	strh	r2, [r3, #0]
		break;
 8000c26:	e000      	b.n	8000c2a <ILI9341_SetRotation+0x8e>
	default:
		break;
 8000c28:	bf00      	nop
	}
}
 8000c2a:	bf00      	nop
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	20000002 	.word	0x20000002
 8000c38:	20000000 	.word	0x20000000

08000c3c <ILI9341_DrawColorBurst>:
	uint8_t buffer[2] = {color>>8, color};
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
}

void ILI9341_DrawColorBurst(uint16_t color, uint32_t size)
{
 8000c3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000c40:	b08d      	sub	sp, #52	; 0x34
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	4603      	mov	r3, r0
 8000c46:	6039      	str	r1, [r7, #0]
 8000c48:	80fb      	strh	r3, [r7, #6]
 8000c4a:	466b      	mov	r3, sp
 8000c4c:	461e      	mov	r6, r3
	uint32_t BufferSize = 0;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	627b      	str	r3, [r7, #36]	; 0x24

	if((size*2) < BURST_MAX_SIZE)
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	005b      	lsls	r3, r3, #1
 8000c56:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000c5a:	d202      	bcs.n	8000c62 <ILI9341_DrawColorBurst+0x26>
	{
		BufferSize = size;
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	627b      	str	r3, [r7, #36]	; 0x24
 8000c60:	e002      	b.n	8000c68 <ILI9341_DrawColorBurst+0x2c>
	}
	else
	{
		BufferSize = BURST_MAX_SIZE;
 8000c62:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000c66:	627b      	str	r3, [r7, #36]	; 0x24
	}

	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8000c68:	4b44      	ldr	r3, [pc, #272]	; (8000d7c <ILI9341_DrawColorBurst+0x140>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a44      	ldr	r2, [pc, #272]	; (8000d80 <ILI9341_DrawColorBurst+0x144>)
 8000c6e:	8811      	ldrh	r1, [r2, #0]
 8000c70:	2201      	movs	r2, #1
 8000c72:	4618      	mov	r0, r3
 8000c74:	f002 fb36 	bl	80032e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000c78:	4b42      	ldr	r3, [pc, #264]	; (8000d84 <ILI9341_DrawColorBurst+0x148>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a42      	ldr	r2, [pc, #264]	; (8000d88 <ILI9341_DrawColorBurst+0x14c>)
 8000c7e:	8811      	ldrh	r1, [r2, #0]
 8000c80:	2200      	movs	r2, #0
 8000c82:	4618      	mov	r0, r3
 8000c84:	f002 fb2e 	bl	80032e4 <HAL_GPIO_WritePin>

	uint8_t chifted = color>>8;
 8000c88:	88fb      	ldrh	r3, [r7, #6]
 8000c8a:	0a1b      	lsrs	r3, r3, #8
 8000c8c:	b29b      	uxth	r3, r3
 8000c8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t BurstBuffer[BufferSize];
 8000c92:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000c94:	460b      	mov	r3, r1
 8000c96:	3b01      	subs	r3, #1
 8000c98:	61fb      	str	r3, [r7, #28]
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	4688      	mov	r8, r1
 8000c9e:	4699      	mov	r9, r3
 8000ca0:	f04f 0200 	mov.w	r2, #0
 8000ca4:	f04f 0300 	mov.w	r3, #0
 8000ca8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000cac:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000cb0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	460c      	mov	r4, r1
 8000cb8:	461d      	mov	r5, r3
 8000cba:	f04f 0200 	mov.w	r2, #0
 8000cbe:	f04f 0300 	mov.w	r3, #0
 8000cc2:	00eb      	lsls	r3, r5, #3
 8000cc4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000cc8:	00e2      	lsls	r2, r4, #3
 8000cca:	1dcb      	adds	r3, r1, #7
 8000ccc:	08db      	lsrs	r3, r3, #3
 8000cce:	00db      	lsls	r3, r3, #3
 8000cd0:	ebad 0d03 	sub.w	sp, sp, r3
 8000cd4:	466b      	mov	r3, sp
 8000cd6:	3300      	adds	r3, #0
 8000cd8:	61bb      	str	r3, [r7, #24]

	for(uint32_t j = 0; j < BufferSize; j+=2)
 8000cda:	2300      	movs	r3, #0
 8000cdc:	62bb      	str	r3, [r7, #40]	; 0x28
 8000cde:	e00e      	b.n	8000cfe <ILI9341_DrawColorBurst+0xc2>
	{
		BurstBuffer[j] = chifted;
 8000ce0:	69ba      	ldr	r2, [r7, #24]
 8000ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ce4:	4413      	add	r3, r2
 8000ce6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000cea:	701a      	strb	r2, [r3, #0]
		BurstBuffer[j+1] = color;
 8000cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cee:	3301      	adds	r3, #1
 8000cf0:	88fa      	ldrh	r2, [r7, #6]
 8000cf2:	b2d1      	uxtb	r1, r2
 8000cf4:	69ba      	ldr	r2, [r7, #24]
 8000cf6:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < BufferSize; j+=2)
 8000cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cfa:	3302      	adds	r3, #2
 8000cfc:	62bb      	str	r3, [r7, #40]	; 0x28
 8000cfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d3ec      	bcc.n	8000ce0 <ILI9341_DrawColorBurst+0xa4>
	}

	uint32_t SendingSize = size * 2;
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	617b      	str	r3, [r7, #20]
	uint32_t SendingInBlock = SendingSize / BufferSize;
 8000d0c:	697a      	ldr	r2, [r7, #20]
 8000d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d14:	613b      	str	r3, [r7, #16]
	uint32_t RemainderFromBlock = SendingSize % BufferSize;
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d1a:	fbb3 f2f2 	udiv	r2, r3, r2
 8000d1e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000d20:	fb01 f202 	mul.w	r2, r1, r2
 8000d24:	1a9b      	subs	r3, r3, r2
 8000d26:	60fb      	str	r3, [r7, #12]

	if(SendingInBlock != 0)
 8000d28:	693b      	ldr	r3, [r7, #16]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d010      	beq.n	8000d50 <ILI9341_DrawColorBurst+0x114>
	{
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 8000d2e:	2300      	movs	r3, #0
 8000d30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d32:	e009      	b.n	8000d48 <ILI9341_DrawColorBurst+0x10c>
		{
			HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, BufferSize, 10);
 8000d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d36:	b29a      	uxth	r2, r3
 8000d38:	230a      	movs	r3, #10
 8000d3a:	69b9      	ldr	r1, [r7, #24]
 8000d3c:	4813      	ldr	r0, [pc, #76]	; (8000d8c <ILI9341_DrawColorBurst+0x150>)
 8000d3e:	f006 fdba 	bl	80078b6 <HAL_SPI_Transmit>
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 8000d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d44:	3301      	adds	r3, #1
 8000d46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000d4a:	693b      	ldr	r3, [r7, #16]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	d3f1      	bcc.n	8000d34 <ILI9341_DrawColorBurst+0xf8>
		}
	}

	HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, RemainderFromBlock, 10);
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	b29a      	uxth	r2, r3
 8000d54:	230a      	movs	r3, #10
 8000d56:	69b9      	ldr	r1, [r7, #24]
 8000d58:	480c      	ldr	r0, [pc, #48]	; (8000d8c <ILI9341_DrawColorBurst+0x150>)
 8000d5a:	f006 fdac 	bl	80078b6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000d5e:	4b09      	ldr	r3, [pc, #36]	; (8000d84 <ILI9341_DrawColorBurst+0x148>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a09      	ldr	r2, [pc, #36]	; (8000d88 <ILI9341_DrawColorBurst+0x14c>)
 8000d64:	8811      	ldrh	r1, [r2, #0]
 8000d66:	2201      	movs	r2, #1
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f002 fabb 	bl	80032e4 <HAL_GPIO_WritePin>
 8000d6e:	46b5      	mov	sp, r6
}
 8000d70:	bf00      	nop
 8000d72:	3734      	adds	r7, #52	; 0x34
 8000d74:	46bd      	mov	sp, r7
 8000d76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000d7a:	bf00      	nop
 8000d7c:	2000000c 	.word	0x2000000c
 8000d80:	20000010 	.word	0x20000010
 8000d84:	20000004 	.word	0x20000004
 8000d88:	20000008 	.word	0x20000008
 8000d8c:	20000278 	.word	0x20000278

08000d90 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	80fb      	strh	r3, [r7, #6]
	ILI9341_SetAddress(0, 0, LCD_WIDTH, LCD_HEIGHT);
 8000d9a:	4b0e      	ldr	r3, [pc, #56]	; (8000dd4 <ILI9341_FillScreen+0x44>)
 8000d9c:	881b      	ldrh	r3, [r3, #0]
 8000d9e:	b29a      	uxth	r2, r3
 8000da0:	4b0d      	ldr	r3, [pc, #52]	; (8000dd8 <ILI9341_FillScreen+0x48>)
 8000da2:	881b      	ldrh	r3, [r3, #0]
 8000da4:	b29b      	uxth	r3, r3
 8000da6:	2100      	movs	r1, #0
 8000da8:	2000      	movs	r0, #0
 8000daa:	f7ff fd63 	bl	8000874 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, LCD_WIDTH*LCD_HEIGHT);
 8000dae:	4b09      	ldr	r3, [pc, #36]	; (8000dd4 <ILI9341_FillScreen+0x44>)
 8000db0:	881b      	ldrh	r3, [r3, #0]
 8000db2:	b29b      	uxth	r3, r3
 8000db4:	461a      	mov	r2, r3
 8000db6:	4b08      	ldr	r3, [pc, #32]	; (8000dd8 <ILI9341_FillScreen+0x48>)
 8000db8:	881b      	ldrh	r3, [r3, #0]
 8000dba:	b29b      	uxth	r3, r3
 8000dbc:	fb02 f303 	mul.w	r3, r2, r3
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	88fb      	ldrh	r3, [r7, #6]
 8000dc4:	4611      	mov	r1, r2
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff ff38 	bl	8000c3c <ILI9341_DrawColorBurst>
}
 8000dcc:	bf00      	nop
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	20000002 	.word	0x20000002
 8000dd8:	20000000 	.word	0x20000000

08000ddc <ILI9341_DrawPixel>:

void ILI9341_DrawPixel(uint16_t x,uint16_t y,uint16_t color)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b086      	sub	sp, #24
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	80fb      	strh	r3, [r7, #6]
 8000de6:	460b      	mov	r3, r1
 8000de8:	80bb      	strh	r3, [r7, #4]
 8000dea:	4613      	mov	r3, r2
 8000dec:	807b      	strh	r3, [r7, #2]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8000dee:	4b2c      	ldr	r3, [pc, #176]	; (8000ea0 <ILI9341_DrawPixel+0xc4>)
 8000df0:	881b      	ldrh	r3, [r3, #0]
 8000df2:	b29b      	uxth	r3, r3
 8000df4:	88fa      	ldrh	r2, [r7, #6]
 8000df6:	429a      	cmp	r2, r3
 8000df8:	d24d      	bcs.n	8000e96 <ILI9341_DrawPixel+0xba>
 8000dfa:	4b2a      	ldr	r3, [pc, #168]	; (8000ea4 <ILI9341_DrawPixel+0xc8>)
 8000dfc:	881b      	ldrh	r3, [r3, #0]
 8000dfe:	b29b      	uxth	r3, r3
 8000e00:	88ba      	ldrh	r2, [r7, #4]
 8000e02:	429a      	cmp	r2, r3
 8000e04:	d247      	bcs.n	8000e96 <ILI9341_DrawPixel+0xba>

	uint8_t bufferX[4] = {x>>8, x, (x+1)>>8, (x+1)};
 8000e06:	88fb      	ldrh	r3, [r7, #6]
 8000e08:	0a1b      	lsrs	r3, r3, #8
 8000e0a:	b29b      	uxth	r3, r3
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	753b      	strb	r3, [r7, #20]
 8000e10:	88fb      	ldrh	r3, [r7, #6]
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	757b      	strb	r3, [r7, #21]
 8000e16:	88fb      	ldrh	r3, [r7, #6]
 8000e18:	3301      	adds	r3, #1
 8000e1a:	121b      	asrs	r3, r3, #8
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	75bb      	strb	r3, [r7, #22]
 8000e20:	88fb      	ldrh	r3, [r7, #6]
 8000e22:	b2db      	uxtb	r3, r3
 8000e24:	3301      	adds	r3, #1
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	75fb      	strb	r3, [r7, #23]
	uint8_t bufferY[4] = {y>>8, y, (y+1)>>8, (y+1)};
 8000e2a:	88bb      	ldrh	r3, [r7, #4]
 8000e2c:	0a1b      	lsrs	r3, r3, #8
 8000e2e:	b29b      	uxth	r3, r3
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	743b      	strb	r3, [r7, #16]
 8000e34:	88bb      	ldrh	r3, [r7, #4]
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	747b      	strb	r3, [r7, #17]
 8000e3a:	88bb      	ldrh	r3, [r7, #4]
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	121b      	asrs	r3, r3, #8
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	74bb      	strb	r3, [r7, #18]
 8000e44:	88bb      	ldrh	r3, [r7, #4]
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	3301      	adds	r3, #1
 8000e4a:	b2db      	uxtb	r3, r3
 8000e4c:	74fb      	strb	r3, [r7, #19]
	uint8_t bufferC[2] = {color>>8, color};
 8000e4e:	887b      	ldrh	r3, [r7, #2]
 8000e50:	0a1b      	lsrs	r3, r3, #8
 8000e52:	b29b      	uxth	r3, r3
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	733b      	strb	r3, [r7, #12]
 8000e58:	887b      	ldrh	r3, [r7, #2]
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	737b      	strb	r3, [r7, #13]

	ILI9341_WriteCommand(0x2A);						//ADDRESS
 8000e5e:	202a      	movs	r0, #42	; 0x2a
 8000e60:	f7ff fc94 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferX, sizeof(bufferX));	//XDATA
 8000e64:	f107 0314 	add.w	r3, r7, #20
 8000e68:	2104      	movs	r1, #4
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f7ff fcda 	bl	8000824 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2B);						//ADDRESS
 8000e70:	202b      	movs	r0, #43	; 0x2b
 8000e72:	f7ff fc8b 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferY, sizeof(bufferY));	//YDATA
 8000e76:	f107 0310 	add.w	r3, r7, #16
 8000e7a:	2104      	movs	r1, #4
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff fcd1 	bl	8000824 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);						//ADDRESS
 8000e82:	202c      	movs	r0, #44	; 0x2c
 8000e84:	f7ff fc82 	bl	800078c <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferC, sizeof(bufferC));	//COLOR
 8000e88:	f107 030c 	add.w	r3, r7, #12
 8000e8c:	2102      	movs	r1, #2
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f7ff fcc8 	bl	8000824 <ILI9341_WriteBuffer>
 8000e94:	e000      	b.n	8000e98 <ILI9341_DrawPixel+0xbc>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8000e96:	bf00      	nop
}
 8000e98:	3718      	adds	r7, #24
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20000002 	.word	0x20000002
 8000ea4:	20000000 	.word	0x20000000

08000ea8 <ILI9341_DrawRectangle>:

void ILI9341_DrawRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color)
{
 8000ea8:	b590      	push	{r4, r7, lr}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4604      	mov	r4, r0
 8000eb0:	4608      	mov	r0, r1
 8000eb2:	4611      	mov	r1, r2
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	4623      	mov	r3, r4
 8000eb8:	80fb      	strh	r3, [r7, #6]
 8000eba:	4603      	mov	r3, r0
 8000ebc:	80bb      	strh	r3, [r7, #4]
 8000ebe:	460b      	mov	r3, r1
 8000ec0:	807b      	strh	r3, [r7, #2]
 8000ec2:	4613      	mov	r3, r2
 8000ec4:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8000ec6:	4b24      	ldr	r3, [pc, #144]	; (8000f58 <ILI9341_DrawRectangle+0xb0>)
 8000ec8:	881b      	ldrh	r3, [r3, #0]
 8000eca:	b29b      	uxth	r3, r3
 8000ecc:	88fa      	ldrh	r2, [r7, #6]
 8000ece:	429a      	cmp	r2, r3
 8000ed0:	d23d      	bcs.n	8000f4e <ILI9341_DrawRectangle+0xa6>
 8000ed2:	4b22      	ldr	r3, [pc, #136]	; (8000f5c <ILI9341_DrawRectangle+0xb4>)
 8000ed4:	881b      	ldrh	r3, [r3, #0]
 8000ed6:	b29b      	uxth	r3, r3
 8000ed8:	88ba      	ldrh	r2, [r7, #4]
 8000eda:	429a      	cmp	r2, r3
 8000edc:	d237      	bcs.n	8000f4e <ILI9341_DrawRectangle+0xa6>

	if((x+width-1)>=LCD_WIDTH)
 8000ede:	88fa      	ldrh	r2, [r7, #6]
 8000ee0:	887b      	ldrh	r3, [r7, #2]
 8000ee2:	4413      	add	r3, r2
 8000ee4:	4a1c      	ldr	r2, [pc, #112]	; (8000f58 <ILI9341_DrawRectangle+0xb0>)
 8000ee6:	8812      	ldrh	r2, [r2, #0]
 8000ee8:	b292      	uxth	r2, r2
 8000eea:	4293      	cmp	r3, r2
 8000eec:	dd05      	ble.n	8000efa <ILI9341_DrawRectangle+0x52>
	{
		width=LCD_WIDTH-x;
 8000eee:	4b1a      	ldr	r3, [pc, #104]	; (8000f58 <ILI9341_DrawRectangle+0xb0>)
 8000ef0:	881b      	ldrh	r3, [r3, #0]
 8000ef2:	b29a      	uxth	r2, r3
 8000ef4:	88fb      	ldrh	r3, [r7, #6]
 8000ef6:	1ad3      	subs	r3, r2, r3
 8000ef8:	807b      	strh	r3, [r7, #2]
	}

	if((y+height-1)>=LCD_HEIGHT)
 8000efa:	88ba      	ldrh	r2, [r7, #4]
 8000efc:	883b      	ldrh	r3, [r7, #0]
 8000efe:	4413      	add	r3, r2
 8000f00:	4a16      	ldr	r2, [pc, #88]	; (8000f5c <ILI9341_DrawRectangle+0xb4>)
 8000f02:	8812      	ldrh	r2, [r2, #0]
 8000f04:	b292      	uxth	r2, r2
 8000f06:	4293      	cmp	r3, r2
 8000f08:	dd05      	ble.n	8000f16 <ILI9341_DrawRectangle+0x6e>
	{
		height=LCD_HEIGHT-y;
 8000f0a:	4b14      	ldr	r3, [pc, #80]	; (8000f5c <ILI9341_DrawRectangle+0xb4>)
 8000f0c:	881b      	ldrh	r3, [r3, #0]
 8000f0e:	b29a      	uxth	r2, r3
 8000f10:	88bb      	ldrh	r3, [r7, #4]
 8000f12:	1ad3      	subs	r3, r2, r3
 8000f14:	803b      	strh	r3, [r7, #0]
	}

	ILI9341_SetAddress(x, y, x+width-1, y+height-1);
 8000f16:	88fa      	ldrh	r2, [r7, #6]
 8000f18:	887b      	ldrh	r3, [r7, #2]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	b29b      	uxth	r3, r3
 8000f1e:	3b01      	subs	r3, #1
 8000f20:	b29c      	uxth	r4, r3
 8000f22:	88ba      	ldrh	r2, [r7, #4]
 8000f24:	883b      	ldrh	r3, [r7, #0]
 8000f26:	4413      	add	r3, r2
 8000f28:	b29b      	uxth	r3, r3
 8000f2a:	3b01      	subs	r3, #1
 8000f2c:	b29b      	uxth	r3, r3
 8000f2e:	88b9      	ldrh	r1, [r7, #4]
 8000f30:	88f8      	ldrh	r0, [r7, #6]
 8000f32:	4622      	mov	r2, r4
 8000f34:	f7ff fc9e 	bl	8000874 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, height*width);
 8000f38:	883b      	ldrh	r3, [r7, #0]
 8000f3a:	887a      	ldrh	r2, [r7, #2]
 8000f3c:	fb02 f303 	mul.w	r3, r2, r3
 8000f40:	461a      	mov	r2, r3
 8000f42:	8b3b      	ldrh	r3, [r7, #24]
 8000f44:	4611      	mov	r1, r2
 8000f46:	4618      	mov	r0, r3
 8000f48:	f7ff fe78 	bl	8000c3c <ILI9341_DrawColorBurst>
 8000f4c:	e000      	b.n	8000f50 <ILI9341_DrawRectangle+0xa8>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8000f4e:	bf00      	nop
}
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd90      	pop	{r4, r7, pc}
 8000f56:	bf00      	nop
 8000f58:	20000002 	.word	0x20000002
 8000f5c:	20000000 	.word	0x20000000

08000f60 <scan_keypad>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* Local Keypad Scanning */
void scan_keypad() {
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
  set_rows();
 8000f66:	f000 f8bf 	bl	80010e8 <set_rows>

  // update the global variables for col values
  get_cols();
 8000f6a:	f000 f969 	bl	8001240 <get_cols>

  // scan local cols
  for(int i = 0; i < nCols1; i++) {
 8000f6e:	2300      	movs	r3, #0
 8000f70:	607b      	str	r3, [r7, #4]
 8000f72:	e047      	b.n	8001004 <scan_keypad+0xa4>
    if(local_cols & (1 << i)) {
 8000f74:	4b50      	ldr	r3, [pc, #320]	; (80010b8 <scan_keypad+0x158>)
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	fa42 f303 	asr.w	r3, r2, r3
 8000f7e:	f003 0301 	and.w	r3, r3, #1
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d02f      	beq.n	8000fe6 <scan_keypad+0x86>
    	if (keypresses1[row][i] != 1) {
 8000f86:	4b4d      	ldr	r3, [pc, #308]	; (80010bc <scan_keypad+0x15c>)
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	494d      	ldr	r1, [pc, #308]	; (80010c0 <scan_keypad+0x160>)
 8000f8c:	4613      	mov	r3, r2
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	4413      	add	r3, r2
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	18ca      	adds	r2, r1, r3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4413      	add	r3, r2
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d02e      	beq.n	8000ffe <scan_keypad+0x9e>
    		keypresses1[row][i] = 1;
 8000fa0:	4b46      	ldr	r3, [pc, #280]	; (80010bc <scan_keypad+0x15c>)
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	4946      	ldr	r1, [pc, #280]	; (80010c0 <scan_keypad+0x160>)
 8000fa6:	4613      	mov	r3, r2
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	4413      	add	r3, r2
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	18ca      	adds	r2, r1, r3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	701a      	strb	r2, [r3, #0]
    	    // WPM timer not enabled
    	    if (!(TIM1->CR1 && TIM_CR1_CEN)) {
 8000fb8:	4b42      	ldr	r3, [pc, #264]	; (80010c4 <scan_keypad+0x164>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d102      	bne.n	8000fc6 <scan_keypad+0x66>
    	    	HAL_TIM_Base_Start_IT(&htim7);
 8000fc0:	4841      	ldr	r0, [pc, #260]	; (80010c8 <scan_keypad+0x168>)
 8000fc2:	f007 f81b 	bl	8007ffc <HAL_TIM_Base_Start_IT>
    	    }
    	    charCount++;
 8000fc6:	4b41      	ldr	r3, [pc, #260]	; (80010cc <scan_keypad+0x16c>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	3301      	adds	r3, #1
 8000fcc:	4a3f      	ldr	r2, [pc, #252]	; (80010cc <scan_keypad+0x16c>)
 8000fce:	6013      	str	r3, [r2, #0]
    	    totalChars++;
 8000fd0:	4b3f      	ldr	r3, [pc, #252]	; (80010d0 <scan_keypad+0x170>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	4a3e      	ldr	r2, [pc, #248]	; (80010d0 <scan_keypad+0x170>)
 8000fd8:	6013      	str	r3, [r2, #0]
    	    charsInCycle++;
 8000fda:	4b3e      	ldr	r3, [pc, #248]	; (80010d4 <scan_keypad+0x174>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	3301      	adds	r3, #1
 8000fe0:	4a3c      	ldr	r2, [pc, #240]	; (80010d4 <scan_keypad+0x174>)
 8000fe2:	6013      	str	r3, [r2, #0]
 8000fe4:	e00b      	b.n	8000ffe <scan_keypad+0x9e>
    	}
    }
    else {
      keypresses1[row][i] = 0;
 8000fe6:	4b35      	ldr	r3, [pc, #212]	; (80010bc <scan_keypad+0x15c>)
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	4935      	ldr	r1, [pc, #212]	; (80010c0 <scan_keypad+0x160>)
 8000fec:	4613      	mov	r3, r2
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	4413      	add	r3, r2
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	18ca      	adds	r2, r1, r3
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < nCols1; i++) {
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	3301      	adds	r3, #1
 8001002:	607b      	str	r3, [r7, #4]
 8001004:	4b34      	ldr	r3, [pc, #208]	; (80010d8 <scan_keypad+0x178>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	687a      	ldr	r2, [r7, #4]
 800100a:	429a      	cmp	r2, r3
 800100c:	dbb2      	blt.n	8000f74 <scan_keypad+0x14>
    }
  }

  // scan expander cols
  for(int i = 0; i < nCols2; i++) {
 800100e:	2300      	movs	r3, #0
 8001010:	603b      	str	r3, [r7, #0]
 8001012:	e047      	b.n	80010a4 <scan_keypad+0x144>
    if(expander_cols & (1 << i)) {
 8001014:	4b31      	ldr	r3, [pc, #196]	; (80010dc <scan_keypad+0x17c>)
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	fa42 f303 	asr.w	r3, r2, r3
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	2b00      	cmp	r3, #0
 8001024:	d02f      	beq.n	8001086 <scan_keypad+0x126>
      if (keypresses2[row][i] != 1) {
 8001026:	4b25      	ldr	r3, [pc, #148]	; (80010bc <scan_keypad+0x15c>)
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	492d      	ldr	r1, [pc, #180]	; (80010e0 <scan_keypad+0x180>)
 800102c:	4613      	mov	r3, r2
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	4413      	add	r3, r2
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	18ca      	adds	r2, r1, r3
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	4413      	add	r3, r2
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	2b01      	cmp	r3, #1
 800103e:	d02e      	beq.n	800109e <scan_keypad+0x13e>
    	  keypresses2[row][i] = 1;
 8001040:	4b1e      	ldr	r3, [pc, #120]	; (80010bc <scan_keypad+0x15c>)
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	4926      	ldr	r1, [pc, #152]	; (80010e0 <scan_keypad+0x180>)
 8001046:	4613      	mov	r3, r2
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	4413      	add	r3, r2
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	18ca      	adds	r2, r1, r3
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	4413      	add	r3, r2
 8001054:	2201      	movs	r2, #1
 8001056:	701a      	strb	r2, [r3, #0]
    	  // WPM timer not enabled
    	  if (!(TIM1->CR1 && TIM_CR1_CEN)) {
 8001058:	4b1a      	ldr	r3, [pc, #104]	; (80010c4 <scan_keypad+0x164>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d102      	bne.n	8001066 <scan_keypad+0x106>
    		  HAL_TIM_Base_Start_IT(&htim7);
 8001060:	4819      	ldr	r0, [pc, #100]	; (80010c8 <scan_keypad+0x168>)
 8001062:	f006 ffcb 	bl	8007ffc <HAL_TIM_Base_Start_IT>
    	  }
    	  charCount++;
 8001066:	4b19      	ldr	r3, [pc, #100]	; (80010cc <scan_keypad+0x16c>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	3301      	adds	r3, #1
 800106c:	4a17      	ldr	r2, [pc, #92]	; (80010cc <scan_keypad+0x16c>)
 800106e:	6013      	str	r3, [r2, #0]
    	  totalChars++;
 8001070:	4b17      	ldr	r3, [pc, #92]	; (80010d0 <scan_keypad+0x170>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	3301      	adds	r3, #1
 8001076:	4a16      	ldr	r2, [pc, #88]	; (80010d0 <scan_keypad+0x170>)
 8001078:	6013      	str	r3, [r2, #0]
    	  charsInCycle++;
 800107a:	4b16      	ldr	r3, [pc, #88]	; (80010d4 <scan_keypad+0x174>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	3301      	adds	r3, #1
 8001080:	4a14      	ldr	r2, [pc, #80]	; (80010d4 <scan_keypad+0x174>)
 8001082:	6013      	str	r3, [r2, #0]
 8001084:	e00b      	b.n	800109e <scan_keypad+0x13e>
      }
    }
    else {
      keypresses2[row][i] = 0;
 8001086:	4b0d      	ldr	r3, [pc, #52]	; (80010bc <scan_keypad+0x15c>)
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	4915      	ldr	r1, [pc, #84]	; (80010e0 <scan_keypad+0x180>)
 800108c:	4613      	mov	r3, r2
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	4413      	add	r3, r2
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	18ca      	adds	r2, r1, r3
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	4413      	add	r3, r2
 800109a:	2200      	movs	r2, #0
 800109c:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < nCols2; i++) {
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	3301      	adds	r3, #1
 80010a2:	603b      	str	r3, [r7, #0]
 80010a4:	4b0f      	ldr	r3, [pc, #60]	; (80010e4 <scan_keypad+0x184>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	683a      	ldr	r2, [r7, #0]
 80010aa:	429a      	cmp	r2, r3
 80010ac:	dbb2      	blt.n	8001014 <scan_keypad+0xb4>
    }

  }

}
 80010ae:	bf00      	nop
 80010b0:	bf00      	nop
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	20000428 	.word	0x20000428
 80010bc:	20000424 	.word	0x20000424
 80010c0:	200001c4 	.word	0x200001c4
 80010c4:	40010000 	.word	0x40010000
 80010c8:	200003c0 	.word	0x200003c0
 80010cc:	20000408 	.word	0x20000408
 80010d0:	20000420 	.word	0x20000420
 80010d4:	2000040c 	.word	0x2000040c
 80010d8:	20000020 	.word	0x20000020
 80010dc:	2000042c 	.word	0x2000042c
 80010e0:	200001f0 	.word	0x200001f0
 80010e4:	20000028 	.word	0x20000028

080010e8 <set_rows>:

void set_rows() {
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af02      	add	r7, sp, #8
  // update row value
  row = (row + 1) % nRows1;
 80010ee:	4b4f      	ldr	r3, [pc, #316]	; (800122c <set_rows+0x144>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	3301      	adds	r3, #1
 80010f4:	4a4e      	ldr	r2, [pc, #312]	; (8001230 <set_rows+0x148>)
 80010f6:	6812      	ldr	r2, [r2, #0]
 80010f8:	fb93 f1f2 	sdiv	r1, r3, r2
 80010fc:	fb01 f202 	mul.w	r2, r1, r2
 8001100:	1a9b      	subs	r3, r3, r2
 8001102:	4a4a      	ldr	r2, [pc, #296]	; (800122c <set_rows+0x144>)
 8001104:	6013      	str	r3, [r2, #0]
  HAL_GPIO_WritePin(GPIOD, ROW0_Pin, GPIO_PIN_SET);
 8001106:	2201      	movs	r2, #1
 8001108:	2101      	movs	r1, #1
 800110a:	484a      	ldr	r0, [pc, #296]	; (8001234 <set_rows+0x14c>)
 800110c:	f002 f8ea 	bl	80032e4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, ROW1_Pin, GPIO_PIN_SET);
 8001110:	2201      	movs	r2, #1
 8001112:	2102      	movs	r1, #2
 8001114:	4847      	ldr	r0, [pc, #284]	; (8001234 <set_rows+0x14c>)
 8001116:	f002 f8e5 	bl	80032e4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, ROW2_Pin, GPIO_PIN_SET);
 800111a:	2201      	movs	r2, #1
 800111c:	2104      	movs	r1, #4
 800111e:	4845      	ldr	r0, [pc, #276]	; (8001234 <set_rows+0x14c>)
 8001120:	f002 f8e0 	bl	80032e4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, ROW3_Pin, GPIO_PIN_SET);
 8001124:	2201      	movs	r2, #1
 8001126:	2108      	movs	r1, #8
 8001128:	4842      	ldr	r0, [pc, #264]	; (8001234 <set_rows+0x14c>)
 800112a:	f002 f8db 	bl	80032e4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, ROW4_Pin, GPIO_PIN_SET);
 800112e:	2201      	movs	r2, #1
 8001130:	2110      	movs	r1, #16
 8001132:	4840      	ldr	r0, [pc, #256]	; (8001234 <set_rows+0x14c>)
 8001134:	f002 f8d6 	bl	80032e4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, ROW5_Pin, GPIO_PIN_SET);
 8001138:	2201      	movs	r2, #1
 800113a:	2120      	movs	r1, #32
 800113c:	483d      	ldr	r0, [pc, #244]	; (8001234 <set_rows+0x14c>)
 800113e:	f002 f8d1 	bl	80032e4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, ROW6_Pin, GPIO_PIN_SET);
 8001142:	2201      	movs	r2, #1
 8001144:	2140      	movs	r1, #64	; 0x40
 8001146:	483b      	ldr	r0, [pc, #236]	; (8001234 <set_rows+0x14c>)
 8001148:	f002 f8cc 	bl	80032e4 <HAL_GPIO_WritePin>

  // use global variable row to set the correct row to low and last row back to high
  switch(row) {
 800114c:	4b37      	ldr	r3, [pc, #220]	; (800122c <set_rows+0x144>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2b06      	cmp	r3, #6
 8001152:	d83b      	bhi.n	80011cc <set_rows+0xe4>
 8001154:	a201      	add	r2, pc, #4	; (adr r2, 800115c <set_rows+0x74>)
 8001156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800115a:	bf00      	nop
 800115c:	08001179 	.word	0x08001179
 8001160:	08001185 	.word	0x08001185
 8001164:	08001191 	.word	0x08001191
 8001168:	0800119d 	.word	0x0800119d
 800116c:	080011a9 	.word	0x080011a9
 8001170:	080011b5 	.word	0x080011b5
 8001174:	080011c1 	.word	0x080011c1
    case 0:
      HAL_GPIO_WritePin(GPIOD, ROW0_Pin, GPIO_PIN_RESET);
 8001178:	2200      	movs	r2, #0
 800117a:	2101      	movs	r1, #1
 800117c:	482d      	ldr	r0, [pc, #180]	; (8001234 <set_rows+0x14c>)
 800117e:	f002 f8b1 	bl	80032e4 <HAL_GPIO_WritePin>
      break;
 8001182:	e023      	b.n	80011cc <set_rows+0xe4>
    case 1:
      HAL_GPIO_WritePin(GPIOD, ROW1_Pin, GPIO_PIN_RESET);
 8001184:	2200      	movs	r2, #0
 8001186:	2102      	movs	r1, #2
 8001188:	482a      	ldr	r0, [pc, #168]	; (8001234 <set_rows+0x14c>)
 800118a:	f002 f8ab 	bl	80032e4 <HAL_GPIO_WritePin>
      break;
 800118e:	e01d      	b.n	80011cc <set_rows+0xe4>
    case 2:
      HAL_GPIO_WritePin(GPIOD, ROW2_Pin, GPIO_PIN_RESET);
 8001190:	2200      	movs	r2, #0
 8001192:	2104      	movs	r1, #4
 8001194:	4827      	ldr	r0, [pc, #156]	; (8001234 <set_rows+0x14c>)
 8001196:	f002 f8a5 	bl	80032e4 <HAL_GPIO_WritePin>
      break;
 800119a:	e017      	b.n	80011cc <set_rows+0xe4>
    case 3:
      HAL_GPIO_WritePin(GPIOD, ROW3_Pin, GPIO_PIN_RESET);
 800119c:	2200      	movs	r2, #0
 800119e:	2108      	movs	r1, #8
 80011a0:	4824      	ldr	r0, [pc, #144]	; (8001234 <set_rows+0x14c>)
 80011a2:	f002 f89f 	bl	80032e4 <HAL_GPIO_WritePin>
      break;
 80011a6:	e011      	b.n	80011cc <set_rows+0xe4>
    case 4:
      HAL_GPIO_WritePin(GPIOD, ROW4_Pin, GPIO_PIN_RESET);
 80011a8:	2200      	movs	r2, #0
 80011aa:	2110      	movs	r1, #16
 80011ac:	4821      	ldr	r0, [pc, #132]	; (8001234 <set_rows+0x14c>)
 80011ae:	f002 f899 	bl	80032e4 <HAL_GPIO_WritePin>
      break;
 80011b2:	e00b      	b.n	80011cc <set_rows+0xe4>
    case 5:
	  HAL_GPIO_WritePin(GPIOD, ROW5_Pin, GPIO_PIN_RESET);
 80011b4:	2200      	movs	r2, #0
 80011b6:	2120      	movs	r1, #32
 80011b8:	481e      	ldr	r0, [pc, #120]	; (8001234 <set_rows+0x14c>)
 80011ba:	f002 f893 	bl	80032e4 <HAL_GPIO_WritePin>
	  break;
 80011be:	e005      	b.n	80011cc <set_rows+0xe4>
    case 6:
	  HAL_GPIO_WritePin(GPIOD, ROW6_Pin, GPIO_PIN_RESET);
 80011c0:	2200      	movs	r2, #0
 80011c2:	2140      	movs	r1, #64	; 0x40
 80011c4:	481b      	ldr	r0, [pc, #108]	; (8001234 <set_rows+0x14c>)
 80011c6:	f002 f88d 	bl	80032e4 <HAL_GPIO_WritePin>
	  break;
 80011ca:	bf00      	nop
  }

  // ! GPIOB2 - GPIOB7 maps to row0 - row5, GPIOA7 maps to row6
  if (row != 6){
 80011cc:	4b17      	ldr	r3, [pc, #92]	; (800122c <set_rows+0x144>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	2b06      	cmp	r3, #6
 80011d2:	d016      	beq.n	8001202 <set_rows+0x11a>
	  uint8_t data[3] = {0x14, ~0, ~( 0x04 << row )}; // addr 0x14 for IOCON.BANK = 0, 0x0A for IOCON.BANK = 1
 80011d4:	2314      	movs	r3, #20
 80011d6:	713b      	strb	r3, [r7, #4]
 80011d8:	23ff      	movs	r3, #255	; 0xff
 80011da:	717b      	strb	r3, [r7, #5]
 80011dc:	4b13      	ldr	r3, [pc, #76]	; (800122c <set_rows+0x144>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	2204      	movs	r2, #4
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	43db      	mvns	r3, r3
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	71bb      	strb	r3, [r7, #6]
	  HAL_I2C_Master_Transmit(&hi2c2, GPIOEX_ADDR, data, 3, 1000);
 80011ee:	1d3a      	adds	r2, r7, #4
 80011f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011f4:	9300      	str	r3, [sp, #0]
 80011f6:	2303      	movs	r3, #3
 80011f8:	2140      	movs	r1, #64	; 0x40
 80011fa:	480f      	ldr	r0, [pc, #60]	; (8001238 <set_rows+0x150>)
 80011fc:	f002 f9d0 	bl	80035a0 <HAL_I2C_Master_Transmit>
  } else {
	  uint8_t data[3] = {0x14, ~0x80, ~0}; // addr 0x14 for IOCON.BANK = 0, 0x0A for IOCON.BANK = 1
	  HAL_I2C_Master_Transmit(&hi2c2, GPIOEX_ADDR, data, 3, 1000);
  }
}
 8001200:	e010      	b.n	8001224 <set_rows+0x13c>
	  uint8_t data[3] = {0x14, ~0x80, ~0}; // addr 0x14 for IOCON.BANK = 0, 0x0A for IOCON.BANK = 1
 8001202:	4a0e      	ldr	r2, [pc, #56]	; (800123c <set_rows+0x154>)
 8001204:	463b      	mov	r3, r7
 8001206:	6812      	ldr	r2, [r2, #0]
 8001208:	4611      	mov	r1, r2
 800120a:	8019      	strh	r1, [r3, #0]
 800120c:	3302      	adds	r3, #2
 800120e:	0c12      	lsrs	r2, r2, #16
 8001210:	701a      	strb	r2, [r3, #0]
	  HAL_I2C_Master_Transmit(&hi2c2, GPIOEX_ADDR, data, 3, 1000);
 8001212:	463a      	mov	r2, r7
 8001214:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001218:	9300      	str	r3, [sp, #0]
 800121a:	2303      	movs	r3, #3
 800121c:	2140      	movs	r1, #64	; 0x40
 800121e:	4806      	ldr	r0, [pc, #24]	; (8001238 <set_rows+0x150>)
 8001220:	f002 f9be 	bl	80035a0 <HAL_I2C_Master_Transmit>
}
 8001224:	bf00      	nop
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	20000424 	.word	0x20000424
 8001230:	2000001c 	.word	0x2000001c
 8001234:	40020c00 	.word	0x40020c00
 8001238:	20000224 	.word	0x20000224
 800123c:	0800d86c 	.word	0x0800d86c

08001240 <get_cols>:

void get_cols() {
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af02      	add	r7, sp, #8
  // get the value of all columns as one int from the GPIO register
  // PD7-4
  local_cols = ~(GPIOD->IDR >> 7) & 0x3F;
 8001246:	4b17      	ldr	r3, [pc, #92]	; (80012a4 <get_cols+0x64>)
 8001248:	691b      	ldr	r3, [r3, #16]
 800124a:	09db      	lsrs	r3, r3, #7
 800124c:	43db      	mvns	r3, r3
 800124e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001252:	4a15      	ldr	r2, [pc, #84]	; (80012a8 <get_cols+0x68>)
 8001254:	6013      	str	r3, [r2, #0]

  // read the GPIO expander columns
  // ! GPIOA0 - GPIOA5 maps to col0 - col5
  uint8_t data[2] = {0x12, 0x00}; // addr 0x12 for IOCON.BANK = 0, 0x09 for IOCON.BANK = 1
 8001256:	2312      	movs	r3, #18
 8001258:	80bb      	strh	r3, [r7, #4]
  HAL_I2C_Master_Transmit(&hi2c2, GPIOEX_ADDR, data, 1, 1000);
 800125a:	1d3a      	adds	r2, r7, #4
 800125c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001260:	9300      	str	r3, [sp, #0]
 8001262:	2301      	movs	r3, #1
 8001264:	2140      	movs	r1, #64	; 0x40
 8001266:	4811      	ldr	r0, [pc, #68]	; (80012ac <get_cols+0x6c>)
 8001268:	f002 f99a 	bl	80035a0 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&hi2c2, GPIOEX_ADDR, data, 2, 1000);
 800126c:	1d3a      	adds	r2, r7, #4
 800126e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001272:	9300      	str	r3, [sp, #0]
 8001274:	2302      	movs	r3, #2
 8001276:	2140      	movs	r1, #64	; 0x40
 8001278:	480c      	ldr	r0, [pc, #48]	; (80012ac <get_cols+0x6c>)
 800127a:	f002 fa8f 	bl	800379c <HAL_I2C_Master_Receive>

  expander_cols = data[0] & 0x3F;
 800127e:	793b      	ldrb	r3, [r7, #4]
 8001280:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001284:	4a0a      	ldr	r2, [pc, #40]	; (80012b0 <get_cols+0x70>)
 8001286:	6013      	str	r3, [r2, #0]

  expander_rot = (data[1] & 0x03) | ((data[0] & 0x40) >> 4); // switch, A, B
 8001288:	797b      	ldrb	r3, [r7, #5]
 800128a:	f003 0203 	and.w	r2, r3, #3
 800128e:	793b      	ldrb	r3, [r7, #4]
 8001290:	111b      	asrs	r3, r3, #4
 8001292:	f003 0304 	and.w	r3, r3, #4
 8001296:	4313      	orrs	r3, r2
 8001298:	4a06      	ldr	r2, [pc, #24]	; (80012b4 <get_cols+0x74>)
 800129a:	6013      	str	r3, [r2, #0]
}
 800129c:	bf00      	nop
 800129e:	3708      	adds	r7, #8
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	40020c00 	.word	0x40020c00
 80012a8:	20000428 	.word	0x20000428
 80012ac:	20000224 	.word	0x20000224
 80012b0:	2000042c 	.word	0x2000042c
 80012b4:	20000430 	.word	0x20000430

080012b8 <scan_rotary>:

/* Rotary Encoder Scanning */
void scan_rotary() {
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
  currentStateCLK = HAL_GPIO_ReadPin(GPIOD, ENC_A_Pin);
 80012be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012c2:	4860      	ldr	r0, [pc, #384]	; (8001444 <scan_rotary+0x18c>)
 80012c4:	f001 fff6 	bl	80032b4 <HAL_GPIO_ReadPin>
 80012c8:	4603      	mov	r3, r0
 80012ca:	461a      	mov	r2, r3
 80012cc:	4b5e      	ldr	r3, [pc, #376]	; (8001448 <scan_rotary+0x190>)
 80012ce:	601a      	str	r2, [r3, #0]

  // if CLK pin has changed, then the rotary encoder has turned
  if (currentStateCLK != lastStateCLK && rotLock == 0 ) {// && rotLock == 0) {
 80012d0:	4b5d      	ldr	r3, [pc, #372]	; (8001448 <scan_rotary+0x190>)
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	4b5d      	ldr	r3, [pc, #372]	; (800144c <scan_rotary+0x194>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	429a      	cmp	r2, r3
 80012da:	d025      	beq.n	8001328 <scan_rotary+0x70>
 80012dc:	4b5c      	ldr	r3, [pc, #368]	; (8001450 <scan_rotary+0x198>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d121      	bne.n	8001328 <scan_rotary+0x70>
    // if the DT state is different, then the encoder is rotating counter-clockwise
    currentStateDT = HAL_GPIO_ReadPin(GPIOD, ENC_B_Pin);
 80012e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012e8:	4856      	ldr	r0, [pc, #344]	; (8001444 <scan_rotary+0x18c>)
 80012ea:	f001 ffe3 	bl	80032b4 <HAL_GPIO_ReadPin>
 80012ee:	4603      	mov	r3, r0
 80012f0:	461a      	mov	r2, r3
 80012f2:	4b58      	ldr	r3, [pc, #352]	; (8001454 <scan_rotary+0x19c>)
 80012f4:	601a      	str	r2, [r3, #0]

    if (currentStateDT != currentStateCLK) {
 80012f6:	4b57      	ldr	r3, [pc, #348]	; (8001454 <scan_rotary+0x19c>)
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	4b53      	ldr	r3, [pc, #332]	; (8001448 <scan_rotary+0x190>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	429a      	cmp	r2, r3
 8001300:	d003      	beq.n	800130a <scan_rotary+0x52>
      // Volume Down
      rotary_keypresses1[1] = 1;
 8001302:	4b55      	ldr	r3, [pc, #340]	; (8001458 <scan_rotary+0x1a0>)
 8001304:	2201      	movs	r2, #1
 8001306:	705a      	strb	r2, [r3, #1]
 8001308:	e008      	b.n	800131c <scan_rotary+0x64>
    }

    // otherwise, it is turning clockwise
    else if (currentStateDT == currentStateCLK) {
 800130a:	4b52      	ldr	r3, [pc, #328]	; (8001454 <scan_rotary+0x19c>)
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	4b4e      	ldr	r3, [pc, #312]	; (8001448 <scan_rotary+0x190>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	429a      	cmp	r2, r3
 8001314:	d102      	bne.n	800131c <scan_rotary+0x64>
      // Volume Up
      rotary_keypresses1[2] = 1;
 8001316:	4b50      	ldr	r3, [pc, #320]	; (8001458 <scan_rotary+0x1a0>)
 8001318:	2201      	movs	r2, #1
 800131a:	709a      	strb	r2, [r3, #2]
    }
    rotLock++;
 800131c:	4b4c      	ldr	r3, [pc, #304]	; (8001450 <scan_rotary+0x198>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	3301      	adds	r3, #1
 8001322:	4a4b      	ldr	r2, [pc, #300]	; (8001450 <scan_rotary+0x198>)
 8001324:	6013      	str	r3, [r2, #0]
 8001326:	e009      	b.n	800133c <scan_rotary+0x84>

  }
  else if (rotLock == 0) {
 8001328:	4b49      	ldr	r3, [pc, #292]	; (8001450 <scan_rotary+0x198>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d105      	bne.n	800133c <scan_rotary+0x84>
	  rotary_keypresses1[1] = 0;
 8001330:	4b49      	ldr	r3, [pc, #292]	; (8001458 <scan_rotary+0x1a0>)
 8001332:	2200      	movs	r2, #0
 8001334:	705a      	strb	r2, [r3, #1]
	  rotary_keypresses1[2] = 0;
 8001336:	4b48      	ldr	r3, [pc, #288]	; (8001458 <scan_rotary+0x1a0>)
 8001338:	2200      	movs	r2, #0
 800133a:	709a      	strb	r2, [r3, #2]
  }

  lastStateCLK = currentStateCLK;
 800133c:	4b42      	ldr	r3, [pc, #264]	; (8001448 <scan_rotary+0x190>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a42      	ldr	r2, [pc, #264]	; (800144c <scan_rotary+0x194>)
 8001342:	6013      	str	r3, [r2, #0]

  // rotLock allows the rotary encoder's inputs to settle over a few extra clock cycles
  if(rotLock != 0) {
 8001344:	4b42      	ldr	r3, [pc, #264]	; (8001450 <scan_rotary+0x198>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d00e      	beq.n	800136a <scan_rotary+0xb2>
    rotLock = (rotLock + 1) % 150;
 800134c:	4b40      	ldr	r3, [pc, #256]	; (8001450 <scan_rotary+0x198>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	1c5a      	adds	r2, r3, #1
 8001352:	4b42      	ldr	r3, [pc, #264]	; (800145c <scan_rotary+0x1a4>)
 8001354:	fb83 1302 	smull	r1, r3, r3, r2
 8001358:	1119      	asrs	r1, r3, #4
 800135a:	17d3      	asrs	r3, r2, #31
 800135c:	1acb      	subs	r3, r1, r3
 800135e:	2196      	movs	r1, #150	; 0x96
 8001360:	fb01 f303 	mul.w	r3, r1, r3
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	4a3a      	ldr	r2, [pc, #232]	; (8001450 <scan_rotary+0x198>)
 8001368:	6013      	str	r3, [r2, #0]
  }

  // if the state is low (default is high), turn toggle the LED
  if (HAL_GPIO_ReadPin(GPIOD, ENC_SW_Pin) == 0) {
 800136a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800136e:	4835      	ldr	r0, [pc, #212]	; (8001444 <scan_rotary+0x18c>)
 8001370:	f001 ffa0 	bl	80032b4 <HAL_GPIO_ReadPin>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d103      	bne.n	8001382 <scan_rotary+0xca>
    // Volume Mute Toggle
	  rotary_keypresses1[0] = 1;
 800137a:	4b37      	ldr	r3, [pc, #220]	; (8001458 <scan_rotary+0x1a0>)
 800137c:	2201      	movs	r2, #1
 800137e:	701a      	strb	r2, [r3, #0]
 8001380:	e002      	b.n	8001388 <scan_rotary+0xd0>
  }
  else {
	  rotary_keypresses1[0] = 0;
 8001382:	4b35      	ldr	r3, [pc, #212]	; (8001458 <scan_rotary+0x1a0>)
 8001384:	2200      	movs	r2, #0
 8001386:	701a      	strb	r2, [r3, #0]
  }

  // Expander rotary encoder
  int exCLK  = (expander_rot & 0x01);
 8001388:	4b35      	ldr	r3, [pc, #212]	; (8001460 <scan_rotary+0x1a8>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f003 0301 	and.w	r3, r3, #1
 8001390:	60fb      	str	r3, [r7, #12]
  int exDT = (expander_rot & 0x02) >> 1;
 8001392:	4b33      	ldr	r3, [pc, #204]	; (8001460 <scan_rotary+0x1a8>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	105b      	asrs	r3, r3, #1
 8001398:	f003 0301 	and.w	r3, r3, #1
 800139c:	60bb      	str	r3, [r7, #8]
  int exSW  = (expander_rot & 0x04) >> 2;
 800139e:	4b30      	ldr	r3, [pc, #192]	; (8001460 <scan_rotary+0x1a8>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	109b      	asrs	r3, r3, #2
 80013a4:	f003 0301 	and.w	r3, r3, #1
 80013a8:	607b      	str	r3, [r7, #4]

  // if CLK pin has changed, then the rotary encoder has turned
  if (exCLK != exLastCLK && exRotLock == 0 ) {// && rotLock == 0) {
 80013aa:	4b2e      	ldr	r3, [pc, #184]	; (8001464 <scan_rotary+0x1ac>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	68fa      	ldr	r2, [r7, #12]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d018      	beq.n	80013e6 <scan_rotary+0x12e>
 80013b4:	4b2c      	ldr	r3, [pc, #176]	; (8001468 <scan_rotary+0x1b0>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d114      	bne.n	80013e6 <scan_rotary+0x12e>
	  // if the DT state is different, then the encoder is rotating counter-clockwise

	  if (exDT != exCLK) {
 80013bc:	68ba      	ldr	r2, [r7, #8]
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d003      	beq.n	80013cc <scan_rotary+0x114>
		// Volume Down
		rotary_keypresses2[1] = 1;
 80013c4:	4b29      	ldr	r3, [pc, #164]	; (800146c <scan_rotary+0x1b4>)
 80013c6:	2201      	movs	r2, #1
 80013c8:	705a      	strb	r2, [r3, #1]
 80013ca:	e006      	b.n	80013da <scan_rotary+0x122>
	  }

	  // otherwise, it is turning clockwise
	  else if (exDT == exCLK) {
 80013cc:	68ba      	ldr	r2, [r7, #8]
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d102      	bne.n	80013da <scan_rotary+0x122>
		// Volume Up
		rotary_keypresses2[2] = 1;
 80013d4:	4b25      	ldr	r3, [pc, #148]	; (800146c <scan_rotary+0x1b4>)
 80013d6:	2201      	movs	r2, #1
 80013d8:	709a      	strb	r2, [r3, #2]
	  }
	  exRotLock++;
 80013da:	4b23      	ldr	r3, [pc, #140]	; (8001468 <scan_rotary+0x1b0>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	3301      	adds	r3, #1
 80013e0:	4a21      	ldr	r2, [pc, #132]	; (8001468 <scan_rotary+0x1b0>)
 80013e2:	6013      	str	r3, [r2, #0]
 80013e4:	e009      	b.n	80013fa <scan_rotary+0x142>

  }
  else if (exRotLock == 0) {
 80013e6:	4b20      	ldr	r3, [pc, #128]	; (8001468 <scan_rotary+0x1b0>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d105      	bne.n	80013fa <scan_rotary+0x142>
	  rotary_keypresses2[1] = 0;
 80013ee:	4b1f      	ldr	r3, [pc, #124]	; (800146c <scan_rotary+0x1b4>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	705a      	strb	r2, [r3, #1]
	  rotary_keypresses2[2] = 0;
 80013f4:	4b1d      	ldr	r3, [pc, #116]	; (800146c <scan_rotary+0x1b4>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	709a      	strb	r2, [r3, #2]
  }

  exLastCLK = exCLK;
 80013fa:	4a1a      	ldr	r2, [pc, #104]	; (8001464 <scan_rotary+0x1ac>)
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	6013      	str	r3, [r2, #0]

  if(exRotLock != 0) {
 8001400:	4b19      	ldr	r3, [pc, #100]	; (8001468 <scan_rotary+0x1b0>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d00e      	beq.n	8001426 <scan_rotary+0x16e>
      exRotLock = (exRotLock + 1) % 150;
 8001408:	4b17      	ldr	r3, [pc, #92]	; (8001468 <scan_rotary+0x1b0>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	1c5a      	adds	r2, r3, #1
 800140e:	4b13      	ldr	r3, [pc, #76]	; (800145c <scan_rotary+0x1a4>)
 8001410:	fb83 1302 	smull	r1, r3, r3, r2
 8001414:	1119      	asrs	r1, r3, #4
 8001416:	17d3      	asrs	r3, r2, #31
 8001418:	1acb      	subs	r3, r1, r3
 800141a:	2196      	movs	r1, #150	; 0x96
 800141c:	fb01 f303 	mul.w	r3, r1, r3
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	4a11      	ldr	r2, [pc, #68]	; (8001468 <scan_rotary+0x1b0>)
 8001424:	6013      	str	r3, [r2, #0]
  }

  if(exSW)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d003      	beq.n	8001434 <scan_rotary+0x17c>
	  rotary_keypresses2[0] = 1;
 800142c:	4b0f      	ldr	r3, [pc, #60]	; (800146c <scan_rotary+0x1b4>)
 800142e:	2201      	movs	r2, #1
 8001430:	701a      	strb	r2, [r3, #0]
  else
	  rotary_keypresses2[0] = 0;


}
 8001432:	e002      	b.n	800143a <scan_rotary+0x182>
	  rotary_keypresses2[0] = 0;
 8001434:	4b0d      	ldr	r3, [pc, #52]	; (800146c <scan_rotary+0x1b4>)
 8001436:	2200      	movs	r2, #0
 8001438:	701a      	strb	r2, [r3, #0]
}
 800143a:	bf00      	nop
 800143c:	3710      	adds	r7, #16
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	40020c00 	.word	0x40020c00
 8001448:	2000043c 	.word	0x2000043c
 800144c:	20000440 	.word	0x20000440
 8001450:	20000448 	.word	0x20000448
 8001454:	20000444 	.word	0x20000444
 8001458:	2000021c 	.word	0x2000021c
 800145c:	1b4e81b5 	.word	0x1b4e81b5
 8001460:	20000430 	.word	0x20000430
 8001464:	20000434 	.word	0x20000434
 8001468:	20000438 	.word	0x20000438
 800146c:	20000220 	.word	0x20000220

08001470 <record_keys>:
/* END Rotary Encoder Scanning */

/* USB Functions */
void record_keys() {
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af00      	add	r7, sp, #0
  // reset keyboardhid to 0
  memset(&keyboardhid, 0, sizeof(keyboardHID));
 8001476:	2208      	movs	r2, #8
 8001478:	2100      	movs	r1, #0
 800147a:	484a      	ldr	r0, [pc, #296]	; (80015a4 <record_keys+0x134>)
 800147c:	f00b f81a 	bl	800c4b4 <memset>
  keycodeNum = 1;
 8001480:	4b49      	ldr	r3, [pc, #292]	; (80015a8 <record_keys+0x138>)
 8001482:	2201      	movs	r2, #1
 8001484:	601a      	str	r2, [r3, #0]

  // Add local keypresses
  for(int i = 0; i < nRows1; i++) {
 8001486:	2300      	movs	r3, #0
 8001488:	617b      	str	r3, [r7, #20]
 800148a:	e026      	b.n	80014da <record_keys+0x6a>
	  for(int j = 0; j < nCols1; j++) {
 800148c:	2300      	movs	r3, #0
 800148e:	613b      	str	r3, [r7, #16]
 8001490:	e01b      	b.n	80014ca <record_keys+0x5a>
		  if(keypresses1[i][j] == 1) {
 8001492:	4946      	ldr	r1, [pc, #280]	; (80015ac <record_keys+0x13c>)
 8001494:	697a      	ldr	r2, [r7, #20]
 8001496:	4613      	mov	r3, r2
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	4413      	add	r3, r2
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	18ca      	adds	r2, r1, r3
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	4413      	add	r3, r2
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d10c      	bne.n	80014c4 <record_keys+0x54>
			  add_keypress(layout1[i][j]);
 80014aa:	4941      	ldr	r1, [pc, #260]	; (80015b0 <record_keys+0x140>)
 80014ac:	697a      	ldr	r2, [r7, #20]
 80014ae:	4613      	mov	r3, r2
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	4413      	add	r3, r2
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	4413      	add	r3, r2
 80014ba:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80014be:	4618      	mov	r0, r3
 80014c0:	f000 f88c 	bl	80015dc <add_keypress>
	  for(int j = 0; j < nCols1; j++) {
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	3301      	adds	r3, #1
 80014c8:	613b      	str	r3, [r7, #16]
 80014ca:	4b3a      	ldr	r3, [pc, #232]	; (80015b4 <record_keys+0x144>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	693a      	ldr	r2, [r7, #16]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	dbde      	blt.n	8001492 <record_keys+0x22>
  for(int i = 0; i < nRows1; i++) {
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	3301      	adds	r3, #1
 80014d8:	617b      	str	r3, [r7, #20]
 80014da:	4b37      	ldr	r3, [pc, #220]	; (80015b8 <record_keys+0x148>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	697a      	ldr	r2, [r7, #20]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	dbd3      	blt.n	800148c <record_keys+0x1c>
	    }
	  }
  }

  // Add GPIO Expander keypresses
  for(int i = 0; i < nRows2; i++) {
 80014e4:	2300      	movs	r3, #0
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	e026      	b.n	8001538 <record_keys+0xc8>
	  for(int j = 0; j < nCols2; j++) {
 80014ea:	2300      	movs	r3, #0
 80014ec:	60bb      	str	r3, [r7, #8]
 80014ee:	e01b      	b.n	8001528 <record_keys+0xb8>
		  if(keypresses2[i][j] == 1) {
 80014f0:	4932      	ldr	r1, [pc, #200]	; (80015bc <record_keys+0x14c>)
 80014f2:	68fa      	ldr	r2, [r7, #12]
 80014f4:	4613      	mov	r3, r2
 80014f6:	005b      	lsls	r3, r3, #1
 80014f8:	4413      	add	r3, r2
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	18ca      	adds	r2, r1, r3
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	4413      	add	r3, r2
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	2b01      	cmp	r3, #1
 8001506:	d10c      	bne.n	8001522 <record_keys+0xb2>
			  add_keypress(layout2[i][j]);
 8001508:	492d      	ldr	r1, [pc, #180]	; (80015c0 <record_keys+0x150>)
 800150a:	68fa      	ldr	r2, [r7, #12]
 800150c:	4613      	mov	r3, r2
 800150e:	005b      	lsls	r3, r3, #1
 8001510:	4413      	add	r3, r2
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	68ba      	ldr	r2, [r7, #8]
 8001516:	4413      	add	r3, r2
 8001518:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800151c:	4618      	mov	r0, r3
 800151e:	f000 f85d 	bl	80015dc <add_keypress>
	  for(int j = 0; j < nCols2; j++) {
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	3301      	adds	r3, #1
 8001526:	60bb      	str	r3, [r7, #8]
 8001528:	4b26      	ldr	r3, [pc, #152]	; (80015c4 <record_keys+0x154>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	68ba      	ldr	r2, [r7, #8]
 800152e:	429a      	cmp	r2, r3
 8001530:	dbde      	blt.n	80014f0 <record_keys+0x80>
  for(int i = 0; i < nRows2; i++) {
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	3301      	adds	r3, #1
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	4b23      	ldr	r3, [pc, #140]	; (80015c8 <record_keys+0x158>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	68fa      	ldr	r2, [r7, #12]
 800153e:	429a      	cmp	r2, r3
 8001540:	dbd3      	blt.n	80014ea <record_keys+0x7a>
		  }
	  }
  }

  // Add Rotary Encoder keypresses
  for(int i = 0; i < 4; i++) {
 8001542:	2300      	movs	r3, #0
 8001544:	607b      	str	r3, [r7, #4]
 8001546:	e00f      	b.n	8001568 <record_keys+0xf8>
	  if(rotary_keypresses1[i] == 1)
 8001548:	4a20      	ldr	r2, [pc, #128]	; (80015cc <record_keys+0x15c>)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4413      	add	r3, r2
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	2b01      	cmp	r3, #1
 8001552:	d106      	bne.n	8001562 <record_keys+0xf2>
		  add_keypress(rotary_keys1[i]);
 8001554:	4a1e      	ldr	r2, [pc, #120]	; (80015d0 <record_keys+0x160>)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800155c:	4618      	mov	r0, r3
 800155e:	f000 f83d 	bl	80015dc <add_keypress>
  for(int i = 0; i < 4; i++) {
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	3301      	adds	r3, #1
 8001566:	607b      	str	r3, [r7, #4]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2b03      	cmp	r3, #3
 800156c:	ddec      	ble.n	8001548 <record_keys+0xd8>
  }

  // Add Expander Rotary Encoder
  for(int i = 0; i < 4; i++) {
 800156e:	2300      	movs	r3, #0
 8001570:	603b      	str	r3, [r7, #0]
 8001572:	e00f      	b.n	8001594 <record_keys+0x124>
	  if(rotary_keypresses2[i] == 1)
 8001574:	4a17      	ldr	r2, [pc, #92]	; (80015d4 <record_keys+0x164>)
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	4413      	add	r3, r2
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	2b01      	cmp	r3, #1
 800157e:	d106      	bne.n	800158e <record_keys+0x11e>
		  add_keypress(rotary_keys2[i]);
 8001580:	4a15      	ldr	r2, [pc, #84]	; (80015d8 <record_keys+0x168>)
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001588:	4618      	mov	r0, r3
 800158a:	f000 f827 	bl	80015dc <add_keypress>
  for(int i = 0; i < 4; i++) {
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	3301      	adds	r3, #1
 8001592:	603b      	str	r3, [r7, #0]
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	2b03      	cmp	r3, #3
 8001598:	ddec      	ble.n	8001574 <record_keys+0x104>
   }

}
 800159a:	bf00      	nop
 800159c:	bf00      	nop
 800159e:	3718      	adds	r7, #24
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	2000044c 	.word	0x2000044c
 80015a8:	20000030 	.word	0x20000030
 80015ac:	200001c4 	.word	0x200001c4
 80015b0:	08014054 	.word	0x08014054
 80015b4:	20000020 	.word	0x20000020
 80015b8:	2000001c 	.word	0x2000001c
 80015bc:	200001f0 	.word	0x200001f0
 80015c0:	080140a8 	.word	0x080140a8
 80015c4:	20000028 	.word	0x20000028
 80015c8:	20000024 	.word	0x20000024
 80015cc:	2000021c 	.word	0x2000021c
 80015d0:	080140fc 	.word	0x080140fc
 80015d4:	20000220 	.word	0x20000220
 80015d8:	08014104 	.word	0x08014104

080015dc <add_keypress>:

void add_keypress(uint16_t key) {
 80015dc:	b480      	push	{r7}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	4603      	mov	r3, r0
 80015e4:	80fb      	strh	r3, [r7, #6]

	if( (key & 0xFF00) == 0xFF00) {
 80015e6:	88fb      	ldrh	r3, [r7, #6]
 80015e8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80015ec:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 80015f0:	d110      	bne.n	8001614 <add_keypress+0x38>
		int shift = key & 0xFF;
 80015f2:	88fb      	ldrh	r3, [r7, #6]
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	60fb      	str	r3, [r7, #12]
		keyboardhid.MODIFIER |= (1<<shift);
 80015f8:	4b25      	ldr	r3, [pc, #148]	; (8001690 <add_keypress+0xb4>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	b25a      	sxtb	r2, r3
 80015fe:	2101      	movs	r1, #1
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	fa01 f303 	lsl.w	r3, r1, r3
 8001606:	b25b      	sxtb	r3, r3
 8001608:	4313      	orrs	r3, r2
 800160a:	b25b      	sxtb	r3, r3
 800160c:	b2da      	uxtb	r2, r3
 800160e:	4b20      	ldr	r3, [pc, #128]	; (8001690 <add_keypress+0xb4>)
 8001610:	701a      	strb	r2, [r3, #0]

		return;
 8001612:	e037      	b.n	8001684 <add_keypress+0xa8>
	}

	switch(keycodeNum) {
 8001614:	4b1f      	ldr	r3, [pc, #124]	; (8001694 <add_keypress+0xb8>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	3b01      	subs	r3, #1
 800161a:	2b05      	cmp	r3, #5
 800161c:	d82c      	bhi.n	8001678 <add_keypress+0x9c>
 800161e:	a201      	add	r2, pc, #4	; (adr r2, 8001624 <add_keypress+0x48>)
 8001620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001624:	0800163d 	.word	0x0800163d
 8001628:	08001647 	.word	0x08001647
 800162c:	08001651 	.word	0x08001651
 8001630:	0800165b 	.word	0x0800165b
 8001634:	08001665 	.word	0x08001665
 8001638:	0800166f 	.word	0x0800166f
		case 1:
		  keyboardhid.KEYCODE1 = key;
 800163c:	88fb      	ldrh	r3, [r7, #6]
 800163e:	b2da      	uxtb	r2, r3
 8001640:	4b13      	ldr	r3, [pc, #76]	; (8001690 <add_keypress+0xb4>)
 8001642:	709a      	strb	r2, [r3, #2]
		  break;
 8001644:	e019      	b.n	800167a <add_keypress+0x9e>
		case 2:
		  keyboardhid.KEYCODE2 = key;
 8001646:	88fb      	ldrh	r3, [r7, #6]
 8001648:	b2da      	uxtb	r2, r3
 800164a:	4b11      	ldr	r3, [pc, #68]	; (8001690 <add_keypress+0xb4>)
 800164c:	70da      	strb	r2, [r3, #3]
		  break;
 800164e:	e014      	b.n	800167a <add_keypress+0x9e>
		case 3:
		  keyboardhid.KEYCODE3 = key;
 8001650:	88fb      	ldrh	r3, [r7, #6]
 8001652:	b2da      	uxtb	r2, r3
 8001654:	4b0e      	ldr	r3, [pc, #56]	; (8001690 <add_keypress+0xb4>)
 8001656:	711a      	strb	r2, [r3, #4]
		  break;
 8001658:	e00f      	b.n	800167a <add_keypress+0x9e>
		case 4:
		  keyboardhid.KEYCODE4 = key;
 800165a:	88fb      	ldrh	r3, [r7, #6]
 800165c:	b2da      	uxtb	r2, r3
 800165e:	4b0c      	ldr	r3, [pc, #48]	; (8001690 <add_keypress+0xb4>)
 8001660:	715a      	strb	r2, [r3, #5]
		  break;
 8001662:	e00a      	b.n	800167a <add_keypress+0x9e>
		case 5:
		  keyboardhid.KEYCODE5 = key;
 8001664:	88fb      	ldrh	r3, [r7, #6]
 8001666:	b2da      	uxtb	r2, r3
 8001668:	4b09      	ldr	r3, [pc, #36]	; (8001690 <add_keypress+0xb4>)
 800166a:	719a      	strb	r2, [r3, #6]
		  break;
 800166c:	e005      	b.n	800167a <add_keypress+0x9e>
		case 6:
		  keyboardhid.KEYCODE6 = key;
 800166e:	88fb      	ldrh	r3, [r7, #6]
 8001670:	b2da      	uxtb	r2, r3
 8001672:	4b07      	ldr	r3, [pc, #28]	; (8001690 <add_keypress+0xb4>)
 8001674:	71da      	strb	r2, [r3, #7]
		  break;
 8001676:	e000      	b.n	800167a <add_keypress+0x9e>
		default:
			break;
 8001678:	bf00      	nop
	}
	keycodeNum++;
 800167a:	4b06      	ldr	r3, [pc, #24]	; (8001694 <add_keypress+0xb8>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	3301      	adds	r3, #1
 8001680:	4a04      	ldr	r2, [pc, #16]	; (8001694 <add_keypress+0xb8>)
 8001682:	6013      	str	r3, [r2, #0]

}
 8001684:	3714      	adds	r7, #20
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	2000044c 	.word	0x2000044c
 8001694:	20000030 	.word	0x20000030

08001698 <switch_lcd>:
/* END USB Functions */

/* LCD Functions */
void switch_lcd() {
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  // switch LCD_*_PIN and LCD_*_PORT between LCD1_* and LCD2_*
  if(LCD_DC_PIN == LCD2_DC_PIN) {
 800169c:	4b19      	ldr	r3, [pc, #100]	; (8001704 <switch_lcd+0x6c>)
 800169e:	881b      	ldrh	r3, [r3, #0]
 80016a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016a4:	d114      	bne.n	80016d0 <switch_lcd+0x38>
	LCD_CS_PORT = LCD1_CS_PORT;
 80016a6:	4b18      	ldr	r3, [pc, #96]	; (8001708 <switch_lcd+0x70>)
 80016a8:	4a18      	ldr	r2, [pc, #96]	; (800170c <switch_lcd+0x74>)
 80016aa:	601a      	str	r2, [r3, #0]
	LCD_CS_PIN = LCD1_CS_PIN;
 80016ac:	4b18      	ldr	r3, [pc, #96]	; (8001710 <switch_lcd+0x78>)
 80016ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016b2:	801a      	strh	r2, [r3, #0]
	LCD_DC_PORT = LCD1_DC_PORT;
 80016b4:	4b17      	ldr	r3, [pc, #92]	; (8001714 <switch_lcd+0x7c>)
 80016b6:	4a15      	ldr	r2, [pc, #84]	; (800170c <switch_lcd+0x74>)
 80016b8:	601a      	str	r2, [r3, #0]
	LCD_DC_PIN = LCD1_DC_PIN;
 80016ba:	4b12      	ldr	r3, [pc, #72]	; (8001704 <switch_lcd+0x6c>)
 80016bc:	2280      	movs	r2, #128	; 0x80
 80016be:	801a      	strh	r2, [r3, #0]
	LCD_RST_PORT = LCD1_RST_PORT;
 80016c0:	4b15      	ldr	r3, [pc, #84]	; (8001718 <switch_lcd+0x80>)
 80016c2:	4a16      	ldr	r2, [pc, #88]	; (800171c <switch_lcd+0x84>)
 80016c4:	601a      	str	r2, [r3, #0]
	LCD_RST_PIN = LCD1_RST_PIN;
 80016c6:	4b16      	ldr	r3, [pc, #88]	; (8001720 <switch_lcd+0x88>)
 80016c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016cc:	801a      	strh	r2, [r3, #0]
	LCD_DC_PORT = LCD2_DC_PORT;
	LCD_DC_PIN = LCD2_DC_PIN;
	LCD_RST_PORT = LCD2_RST_PORT;
	LCD_RST_PIN = LCD2_RST_PIN;
  }
}
 80016ce:	e014      	b.n	80016fa <switch_lcd+0x62>
	LCD_CS_PORT = LCD2_CS_PORT;
 80016d0:	4b0d      	ldr	r3, [pc, #52]	; (8001708 <switch_lcd+0x70>)
 80016d2:	4a12      	ldr	r2, [pc, #72]	; (800171c <switch_lcd+0x84>)
 80016d4:	601a      	str	r2, [r3, #0]
	LCD_CS_PIN = LCD2_CS_PIN;
 80016d6:	4b0e      	ldr	r3, [pc, #56]	; (8001710 <switch_lcd+0x78>)
 80016d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016dc:	801a      	strh	r2, [r3, #0]
	LCD_DC_PORT = LCD2_DC_PORT;
 80016de:	4b0d      	ldr	r3, [pc, #52]	; (8001714 <switch_lcd+0x7c>)
 80016e0:	4a0a      	ldr	r2, [pc, #40]	; (800170c <switch_lcd+0x74>)
 80016e2:	601a      	str	r2, [r3, #0]
	LCD_DC_PIN = LCD2_DC_PIN;
 80016e4:	4b07      	ldr	r3, [pc, #28]	; (8001704 <switch_lcd+0x6c>)
 80016e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016ea:	801a      	strh	r2, [r3, #0]
	LCD_RST_PORT = LCD2_RST_PORT;
 80016ec:	4b0a      	ldr	r3, [pc, #40]	; (8001718 <switch_lcd+0x80>)
 80016ee:	4a0b      	ldr	r2, [pc, #44]	; (800171c <switch_lcd+0x84>)
 80016f0:	601a      	str	r2, [r3, #0]
	LCD_RST_PIN = LCD2_RST_PIN;
 80016f2:	4b0b      	ldr	r3, [pc, #44]	; (8001720 <switch_lcd+0x88>)
 80016f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016f8:	801a      	strh	r2, [r3, #0]
}
 80016fa:	bf00      	nop
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	20000010 	.word	0x20000010
 8001708:	20000004 	.word	0x20000004
 800170c:	40020800 	.word	0x40020800
 8001710:	20000008 	.word	0x20000008
 8001714:	2000000c 	.word	0x2000000c
 8001718:	20000014 	.word	0x20000014
 800171c:	40020000 	.word	0x40020000
 8001720:	20000018 	.word	0x20000018

08001724 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b08e      	sub	sp, #56	; 0x38
 8001728:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800172a:	f000 fedf 	bl	80024ec <HAL_Init>
  /* USER CODE BEGIN Init */
  //HAL_Delay(2000);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800172e:	f000 f917 	bl	8001960 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001732:	f000 fadd 	bl	8001cf0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001736:	f000 fabb 	bl	8001cb0 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 800173a:	f00a fa59 	bl	800bbf0 <MX_USB_DEVICE_Init>
  MX_TIM4_Init();
 800173e:	f000 f9ff 	bl	8001b40 <MX_TIM4_Init>
  MX_TIM6_Init();
 8001742:	f000 fa49 	bl	8001bd8 <MX_TIM6_Init>
  MX_TIM7_Init();
 8001746:	f000 fa7d 	bl	8001c44 <MX_TIM7_Init>
  MX_I2C2_Init();
 800174a:	f000 f971 	bl	8001a30 <MX_I2C2_Init>
  MX_SPI2_Init();
 800174e:	f000 f9c1 	bl	8001ad4 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  // Initialize the LCDs
  // Left Screen
  char writeBuff[20];
  ILI9341_Init();
 8001752:	f7ff f919 	bl	8000988 <ILI9341_Init>
  ILI9341_SetRotation(SCREEN_VERTICAL_1);
 8001756:	2000      	movs	r0, #0
 8001758:	f7ff fa20 	bl	8000b9c <ILI9341_SetRotation>
  ILI9341_FillScreen(BLACK);
 800175c:	2000      	movs	r0, #0
 800175e:	f7ff fb17 	bl	8000d90 <ILI9341_FillScreen>
//  sprintf(writeBuff, "Characters");
//  ILI9341_DrawText(writeBuff, FONT5, 25, 85, WHITE, BLACK);
//  sprintf(writeBuff, "Pressed ");
//  ILI9341_DrawText(writeBuff, FONT5, 25, 135, WHITE, BLACK);
  sprintf(writeBuff, "Characters");
 8001762:	f107 031c 	add.w	r3, r7, #28
 8001766:	496e      	ldr	r1, [pc, #440]	; (8001920 <main+0x1fc>)
 8001768:	4618      	mov	r0, r3
 800176a:	f00a fed9 	bl	800c520 <siprintf>
  ILI9341_DrawText(writeBuff, FONT5, 10, 85, WHITE, BLACK);
 800176e:	f107 001c 	add.w	r0, r7, #28
 8001772:	2300      	movs	r3, #0
 8001774:	9301      	str	r3, [sp, #4]
 8001776:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800177a:	9300      	str	r3, [sp, #0]
 800177c:	2355      	movs	r3, #85	; 0x55
 800177e:	220a      	movs	r2, #10
 8001780:	4968      	ldr	r1, [pc, #416]	; (8001924 <main+0x200>)
 8001782:	f7fe ff6c 	bl	800065e <ILI9341_DrawText>
  sprintf(writeBuff, "Per");
 8001786:	f107 031c 	add.w	r3, r7, #28
 800178a:	4967      	ldr	r1, [pc, #412]	; (8001928 <main+0x204>)
 800178c:	4618      	mov	r0, r3
 800178e:	f00a fec7 	bl	800c520 <siprintf>
  ILI9341_DrawText(writeBuff, FONT5, 10, 135, WHITE, BLACK);
 8001792:	f107 001c 	add.w	r0, r7, #28
 8001796:	2300      	movs	r3, #0
 8001798:	9301      	str	r3, [sp, #4]
 800179a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800179e:	9300      	str	r3, [sp, #0]
 80017a0:	2387      	movs	r3, #135	; 0x87
 80017a2:	220a      	movs	r2, #10
 80017a4:	495f      	ldr	r1, [pc, #380]	; (8001924 <main+0x200>)
 80017a6:	f7fe ff5a 	bl	800065e <ILI9341_DrawText>
  sprintf(writeBuff, "Minute:");
 80017aa:	f107 031c 	add.w	r3, r7, #28
 80017ae:	495f      	ldr	r1, [pc, #380]	; (800192c <main+0x208>)
 80017b0:	4618      	mov	r0, r3
 80017b2:	f00a feb5 	bl	800c520 <siprintf>
  ILI9341_DrawText(writeBuff, FONT5, 10, 185, WHITE, BLACK);
 80017b6:	f107 001c 	add.w	r0, r7, #28
 80017ba:	2300      	movs	r3, #0
 80017bc:	9301      	str	r3, [sp, #4]
 80017be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017c2:	9300      	str	r3, [sp, #0]
 80017c4:	23b9      	movs	r3, #185	; 0xb9
 80017c6:	220a      	movs	r2, #10
 80017c8:	4956      	ldr	r1, [pc, #344]	; (8001924 <main+0x200>)
 80017ca:	f7fe ff48 	bl	800065e <ILI9341_DrawText>
  sprintf(writeBuff, "Total Pressed:");
 80017ce:	f107 031c 	add.w	r3, r7, #28
 80017d2:	4957      	ldr	r1, [pc, #348]	; (8001930 <main+0x20c>)
 80017d4:	4618      	mov	r0, r3
 80017d6:	f00a fea3 	bl	800c520 <siprintf>
  ILI9341_DrawText(writeBuff, FONT4, 10, 290, WHITE, BLACK);
 80017da:	f107 001c 	add.w	r0, r7, #28
 80017de:	2300      	movs	r3, #0
 80017e0:	9301      	str	r3, [sp, #4]
 80017e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017e6:	9300      	str	r3, [sp, #0]
 80017e8:	f44f 7391 	mov.w	r3, #290	; 0x122
 80017ec:	220a      	movs	r2, #10
 80017ee:	4951      	ldr	r1, [pc, #324]	; (8001934 <main+0x210>)
 80017f0:	f7fe ff35 	bl	800065e <ILI9341_DrawText>

  // Right Screen
  switch_lcd();
 80017f4:	f7ff ff50 	bl	8001698 <switch_lcd>
  ILI9341_Init();
 80017f8:	f7ff f8c6 	bl	8000988 <ILI9341_Init>
  ILI9341_SetRotation(SCREEN_VERTICAL_1);
 80017fc:	2000      	movs	r0, #0
 80017fe:	f7ff f9cd 	bl	8000b9c <ILI9341_SetRotation>
  ILI9341_FillScreen(BLACK);
 8001802:	2000      	movs	r0, #0
 8001804:	f7ff fac4 	bl	8000d90 <ILI9341_FillScreen>
  sprintf(writeBuff, "Words");
 8001808:	f107 031c 	add.w	r3, r7, #28
 800180c:	494a      	ldr	r1, [pc, #296]	; (8001938 <main+0x214>)
 800180e:	4618      	mov	r0, r3
 8001810:	f00a fe86 	bl	800c520 <siprintf>
  ILI9341_DrawText(writeBuff, FONT5, 25, 85, WHITE, BLACK);
 8001814:	f107 001c 	add.w	r0, r7, #28
 8001818:	2300      	movs	r3, #0
 800181a:	9301      	str	r3, [sp, #4]
 800181c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001820:	9300      	str	r3, [sp, #0]
 8001822:	2355      	movs	r3, #85	; 0x55
 8001824:	2219      	movs	r2, #25
 8001826:	493f      	ldr	r1, [pc, #252]	; (8001924 <main+0x200>)
 8001828:	f7fe ff19 	bl	800065e <ILI9341_DrawText>
  sprintf(writeBuff, "Per");
 800182c:	f107 031c 	add.w	r3, r7, #28
 8001830:	493d      	ldr	r1, [pc, #244]	; (8001928 <main+0x204>)
 8001832:	4618      	mov	r0, r3
 8001834:	f00a fe74 	bl	800c520 <siprintf>
  ILI9341_DrawText(writeBuff, FONT5, 25, 135, WHITE, BLACK);
 8001838:	f107 001c 	add.w	r0, r7, #28
 800183c:	2300      	movs	r3, #0
 800183e:	9301      	str	r3, [sp, #4]
 8001840:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001844:	9300      	str	r3, [sp, #0]
 8001846:	2387      	movs	r3, #135	; 0x87
 8001848:	2219      	movs	r2, #25
 800184a:	4936      	ldr	r1, [pc, #216]	; (8001924 <main+0x200>)
 800184c:	f7fe ff07 	bl	800065e <ILI9341_DrawText>
  sprintf(writeBuff, "Minute:");
 8001850:	f107 031c 	add.w	r3, r7, #28
 8001854:	4935      	ldr	r1, [pc, #212]	; (800192c <main+0x208>)
 8001856:	4618      	mov	r0, r3
 8001858:	f00a fe62 	bl	800c520 <siprintf>
  ILI9341_DrawText(writeBuff, FONT5, 25, 185, WHITE, BLACK);
 800185c:	f107 001c 	add.w	r0, r7, #28
 8001860:	2300      	movs	r3, #0
 8001862:	9301      	str	r3, [sp, #4]
 8001864:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001868:	9300      	str	r3, [sp, #0]
 800186a:	23b9      	movs	r3, #185	; 0xb9
 800186c:	2219      	movs	r2, #25
 800186e:	492d      	ldr	r1, [pc, #180]	; (8001924 <main+0x200>)
 8001870:	f7fe fef5 	bl	800065e <ILI9341_DrawText>

  // start the timer interrupt
  HAL_TIM_Base_Start_IT(&htim4);
 8001874:	4831      	ldr	r0, [pc, #196]	; (800193c <main+0x218>)
 8001876:	f006 fbc1 	bl	8007ffc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 800187a:	4831      	ldr	r0, [pc, #196]	; (8001940 <main+0x21c>)
 800187c:	f006 fbbe 	bl	8007ffc <HAL_TIM_Base_Start_IT>
  char buffer2[10];

  while (1)
  {
//	  //draw the counter to the lcd
	  if (writeScreen) {
 8001880:	4b30      	ldr	r3, [pc, #192]	; (8001944 <main+0x220>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d0fb      	beq.n	8001880 <main+0x15c>
		  sprintf(buffer1, "%-3d", (int)wpm);
 8001888:	4b2f      	ldr	r3, [pc, #188]	; (8001948 <main+0x224>)
 800188a:	edd3 7a00 	vldr	s15, [r3]
 800188e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001892:	f107 0310 	add.w	r3, r7, #16
 8001896:	ee17 2a90 	vmov	r2, s15
 800189a:	492c      	ldr	r1, [pc, #176]	; (800194c <main+0x228>)
 800189c:	4618      	mov	r0, r3
 800189e:	f00a fe3f 	bl	800c520 <siprintf>
	  	  ILI9341_DrawText(buffer1, FONT5, 	165, 185, WHITE, BLACK);
 80018a2:	f107 0010 	add.w	r0, r7, #16
 80018a6:	2300      	movs	r3, #0
 80018a8:	9301      	str	r3, [sp, #4]
 80018aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018ae:	9300      	str	r3, [sp, #0]
 80018b0:	23b9      	movs	r3, #185	; 0xb9
 80018b2:	22a5      	movs	r2, #165	; 0xa5
 80018b4:	491b      	ldr	r1, [pc, #108]	; (8001924 <main+0x200>)
 80018b6:	f7fe fed2 	bl	800065e <ILI9341_DrawText>

	  	  switch_lcd();
 80018ba:	f7ff feed 	bl	8001698 <switch_lcd>

	  	  sprintf(buffer2, "%-4d", (int)cpm);
 80018be:	4b24      	ldr	r3, [pc, #144]	; (8001950 <main+0x22c>)
 80018c0:	edd3 7a00 	vldr	s15, [r3]
 80018c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018c8:	1d3b      	adds	r3, r7, #4
 80018ca:	ee17 2a90 	vmov	r2, s15
 80018ce:	4921      	ldr	r1, [pc, #132]	; (8001954 <main+0x230>)
 80018d0:	4618      	mov	r0, r3
 80018d2:	f00a fe25 	bl	800c520 <siprintf>
	  	  ILI9341_DrawText(buffer2, FONT5, 150, 185, WHITE, BLACK);
 80018d6:	1d38      	adds	r0, r7, #4
 80018d8:	2300      	movs	r3, #0
 80018da:	9301      	str	r3, [sp, #4]
 80018dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018e0:	9300      	str	r3, [sp, #0]
 80018e2:	23b9      	movs	r3, #185	; 0xb9
 80018e4:	2296      	movs	r2, #150	; 0x96
 80018e6:	490f      	ldr	r1, [pc, #60]	; (8001924 <main+0x200>)
 80018e8:	f7fe feb9 	bl	800065e <ILI9341_DrawText>


	  	  sprintf(buffer2, "%9ld", totalChars);
 80018ec:	4b1a      	ldr	r3, [pc, #104]	; (8001958 <main+0x234>)
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	1d3b      	adds	r3, r7, #4
 80018f2:	491a      	ldr	r1, [pc, #104]	; (800195c <main+0x238>)
 80018f4:	4618      	mov	r0, r3
 80018f6:	f00a fe13 	bl	800c520 <siprintf>
	  	  ILI9341_DrawText(buffer2, FONT4, 140, 290, WHITE, BLACK);
 80018fa:	1d38      	adds	r0, r7, #4
 80018fc:	2300      	movs	r3, #0
 80018fe:	9301      	str	r3, [sp, #4]
 8001900:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001904:	9300      	str	r3, [sp, #0]
 8001906:	f44f 7391 	mov.w	r3, #290	; 0x122
 800190a:	228c      	movs	r2, #140	; 0x8c
 800190c:	4909      	ldr	r1, [pc, #36]	; (8001934 <main+0x210>)
 800190e:	f7fe fea6 	bl	800065e <ILI9341_DrawText>
	  	  writeScreen = 0;
 8001912:	4b0c      	ldr	r3, [pc, #48]	; (8001944 <main+0x220>)
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]

	  	  switch_lcd();
 8001918:	f7ff febe 	bl	8001698 <switch_lcd>
	  if (writeScreen) {
 800191c:	e7b0      	b.n	8001880 <main+0x15c>
 800191e:	bf00      	nop
 8001920:	0800d870 	.word	0x0800d870
 8001924:	0800ea70 	.word	0x0800ea70
 8001928:	0800d87c 	.word	0x0800d87c
 800192c:	0800d880 	.word	0x0800d880
 8001930:	0800d888 	.word	0x0800d888
 8001934:	0800d92c 	.word	0x0800d92c
 8001938:	0800d898 	.word	0x0800d898
 800193c:	20000330 	.word	0x20000330
 8001940:	20000378 	.word	0x20000378
 8001944:	2000002c 	.word	0x2000002c
 8001948:	20000418 	.word	0x20000418
 800194c:	0800d8a0 	.word	0x0800d8a0
 8001950:	2000041c 	.word	0x2000041c
 8001954:	0800d8a8 	.word	0x0800d8a8
 8001958:	20000420 	.word	0x20000420
 800195c:	0800d8b0 	.word	0x0800d8b0

08001960 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b094      	sub	sp, #80	; 0x50
 8001964:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001966:	f107 0320 	add.w	r3, r7, #32
 800196a:	2230      	movs	r2, #48	; 0x30
 800196c:	2100      	movs	r1, #0
 800196e:	4618      	mov	r0, r3
 8001970:	f00a fda0 	bl	800c4b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001974:	f107 030c 	add.w	r3, r7, #12
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	605a      	str	r2, [r3, #4]
 800197e:	609a      	str	r2, [r3, #8]
 8001980:	60da      	str	r2, [r3, #12]
 8001982:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001984:	2300      	movs	r3, #0
 8001986:	60bb      	str	r3, [r7, #8]
 8001988:	4b27      	ldr	r3, [pc, #156]	; (8001a28 <SystemClock_Config+0xc8>)
 800198a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198c:	4a26      	ldr	r2, [pc, #152]	; (8001a28 <SystemClock_Config+0xc8>)
 800198e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001992:	6413      	str	r3, [r2, #64]	; 0x40
 8001994:	4b24      	ldr	r3, [pc, #144]	; (8001a28 <SystemClock_Config+0xc8>)
 8001996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001998:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800199c:	60bb      	str	r3, [r7, #8]
 800199e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019a0:	2300      	movs	r3, #0
 80019a2:	607b      	str	r3, [r7, #4]
 80019a4:	4b21      	ldr	r3, [pc, #132]	; (8001a2c <SystemClock_Config+0xcc>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a20      	ldr	r2, [pc, #128]	; (8001a2c <SystemClock_Config+0xcc>)
 80019aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019ae:	6013      	str	r3, [r2, #0]
 80019b0:	4b1e      	ldr	r3, [pc, #120]	; (8001a2c <SystemClock_Config+0xcc>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019b8:	607b      	str	r3, [r7, #4]
 80019ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019bc:	2301      	movs	r3, #1
 80019be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80019c0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80019c4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019c6:	2302      	movs	r3, #2
 80019c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80019d0:	2304      	movs	r3, #4
 80019d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80019d4:	2348      	movs	r3, #72	; 0x48
 80019d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019d8:	2302      	movs	r3, #2
 80019da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80019dc:	2303      	movs	r3, #3
 80019de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019e0:	f107 0320 	add.w	r3, r7, #32
 80019e4:	4618      	mov	r0, r3
 80019e6:	f005 fa57 	bl	8006e98 <HAL_RCC_OscConfig>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80019f0:	f000 faba 	bl	8001f68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019f4:	230f      	movs	r3, #15
 80019f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019f8:	2302      	movs	r3, #2
 80019fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019fc:	2300      	movs	r3, #0
 80019fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a04:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a06:	2300      	movs	r3, #0
 8001a08:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a0a:	f107 030c 	add.w	r3, r7, #12
 8001a0e:	2102      	movs	r1, #2
 8001a10:	4618      	mov	r0, r3
 8001a12:	f005 fcbb 	bl	800738c <HAL_RCC_ClockConfig>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001a1c:	f000 faa4 	bl	8001f68 <Error_Handler>
  }
}
 8001a20:	bf00      	nop
 8001a22:	3750      	adds	r7, #80	; 0x50
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	40023800 	.word	0x40023800
 8001a2c:	40007000 	.word	0x40007000

08001a30 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b086      	sub	sp, #24
 8001a34:	af02      	add	r7, sp, #8
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001a36:	4b23      	ldr	r3, [pc, #140]	; (8001ac4 <MX_I2C2_Init+0x94>)
 8001a38:	4a23      	ldr	r2, [pc, #140]	; (8001ac8 <MX_I2C2_Init+0x98>)
 8001a3a:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001a3c:	4b21      	ldr	r3, [pc, #132]	; (8001ac4 <MX_I2C2_Init+0x94>)
 8001a3e:	4a23      	ldr	r2, [pc, #140]	; (8001acc <MX_I2C2_Init+0x9c>)
 8001a40:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a42:	4b20      	ldr	r3, [pc, #128]	; (8001ac4 <MX_I2C2_Init+0x94>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001a48:	4b1e      	ldr	r3, [pc, #120]	; (8001ac4 <MX_I2C2_Init+0x94>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a4e:	4b1d      	ldr	r3, [pc, #116]	; (8001ac4 <MX_I2C2_Init+0x94>)
 8001a50:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a54:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a56:	4b1b      	ldr	r3, [pc, #108]	; (8001ac4 <MX_I2C2_Init+0x94>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001a5c:	4b19      	ldr	r3, [pc, #100]	; (8001ac4 <MX_I2C2_Init+0x94>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a62:	4b18      	ldr	r3, [pc, #96]	; (8001ac4 <MX_I2C2_Init+0x94>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a68:	4b16      	ldr	r3, [pc, #88]	; (8001ac4 <MX_I2C2_Init+0x94>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001a6e:	4815      	ldr	r0, [pc, #84]	; (8001ac4 <MX_I2C2_Init+0x94>)
 8001a70:	f001 fc52 	bl	8003318 <HAL_I2C_Init>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <MX_I2C2_Init+0x4e>
  {
    Error_Handler();
 8001a7a:	f000 fa75 	bl	8001f68 <Error_Handler>
  // Reverse polarity of the input pins since we are using active low
  // 1: input/reverse polarity
  // 0: output/regular polarity
  // GPIOA: 0111 1111
  // GPIOB: 0000 0011
  uint8_t data[5] = {0x00, 0x7F, 0x03, 0x7F, 0x03}; // addr 0x00 with data 0x7F
 8001a7e:	4a14      	ldr	r2, [pc, #80]	; (8001ad0 <MX_I2C2_Init+0xa0>)
 8001a80:	f107 0308 	add.w	r3, r7, #8
 8001a84:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a88:	6018      	str	r0, [r3, #0]
 8001a8a:	3304      	adds	r3, #4
 8001a8c:	7019      	strb	r1, [r3, #0]
  HAL_I2C_Master_Transmit(&hi2c2, GPIOEX_ADDR, data, 5, 1000);
 8001a8e:	f107 0208 	add.w	r2, r7, #8
 8001a92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a96:	9300      	str	r3, [sp, #0]
 8001a98:	2305      	movs	r3, #5
 8001a9a:	2140      	movs	r1, #64	; 0x40
 8001a9c:	4809      	ldr	r0, [pc, #36]	; (8001ac4 <MX_I2C2_Init+0x94>)
 8001a9e:	f001 fd7f 	bl	80035a0 <HAL_I2C_Master_Transmit>

  // internal pull up
  uint8_t data2[2] = {0x0C, 0x3F};
 8001aa2:	f643 730c 	movw	r3, #16140	; 0x3f0c
 8001aa6:	80bb      	strh	r3, [r7, #4]
  HAL_I2C_Master_Transmit(&hi2c2, GPIOEX_ADDR, data2, 2, 1000);
 8001aa8:	1d3a      	adds	r2, r7, #4
 8001aaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aae:	9300      	str	r3, [sp, #0]
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	2140      	movs	r1, #64	; 0x40
 8001ab4:	4803      	ldr	r0, [pc, #12]	; (8001ac4 <MX_I2C2_Init+0x94>)
 8001ab6:	f001 fd73 	bl	80035a0 <HAL_I2C_Master_Transmit>


  /* USER CODE END I2C2_Init 2 */

}
 8001aba:	bf00      	nop
 8001abc:	3710      	adds	r7, #16
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	20000224 	.word	0x20000224
 8001ac8:	40005800 	.word	0x40005800
 8001acc:	00061a80 	.word	0x00061a80
 8001ad0:	0800d8b8 	.word	0x0800d8b8

08001ad4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001ad8:	4b17      	ldr	r3, [pc, #92]	; (8001b38 <MX_SPI2_Init+0x64>)
 8001ada:	4a18      	ldr	r2, [pc, #96]	; (8001b3c <MX_SPI2_Init+0x68>)
 8001adc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001ade:	4b16      	ldr	r3, [pc, #88]	; (8001b38 <MX_SPI2_Init+0x64>)
 8001ae0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ae4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001ae6:	4b14      	ldr	r3, [pc, #80]	; (8001b38 <MX_SPI2_Init+0x64>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001aec:	4b12      	ldr	r3, [pc, #72]	; (8001b38 <MX_SPI2_Init+0x64>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001af2:	4b11      	ldr	r3, [pc, #68]	; (8001b38 <MX_SPI2_Init+0x64>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001af8:	4b0f      	ldr	r3, [pc, #60]	; (8001b38 <MX_SPI2_Init+0x64>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001afe:	4b0e      	ldr	r3, [pc, #56]	; (8001b38 <MX_SPI2_Init+0x64>)
 8001b00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b04:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001b06:	4b0c      	ldr	r3, [pc, #48]	; (8001b38 <MX_SPI2_Init+0x64>)
 8001b08:	2208      	movs	r2, #8
 8001b0a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b0c:	4b0a      	ldr	r3, [pc, #40]	; (8001b38 <MX_SPI2_Init+0x64>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b12:	4b09      	ldr	r3, [pc, #36]	; (8001b38 <MX_SPI2_Init+0x64>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b18:	4b07      	ldr	r3, [pc, #28]	; (8001b38 <MX_SPI2_Init+0x64>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001b1e:	4b06      	ldr	r3, [pc, #24]	; (8001b38 <MX_SPI2_Init+0x64>)
 8001b20:	220a      	movs	r2, #10
 8001b22:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001b24:	4804      	ldr	r0, [pc, #16]	; (8001b38 <MX_SPI2_Init+0x64>)
 8001b26:	f005 fe3d 	bl	80077a4 <HAL_SPI_Init>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001b30:	f000 fa1a 	bl	8001f68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001b34:	bf00      	nop
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	20000278 	.word	0x20000278
 8001b3c:	40003800 	.word	0x40003800

08001b40 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b086      	sub	sp, #24
 8001b44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b46:	f107 0308 	add.w	r3, r7, #8
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	601a      	str	r2, [r3, #0]
 8001b4e:	605a      	str	r2, [r3, #4]
 8001b50:	609a      	str	r2, [r3, #8]
 8001b52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b54:	463b      	mov	r3, r7
 8001b56:	2200      	movs	r2, #0
 8001b58:	601a      	str	r2, [r3, #0]
 8001b5a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001b5c:	4b1c      	ldr	r3, [pc, #112]	; (8001bd0 <MX_TIM4_Init+0x90>)
 8001b5e:	4a1d      	ldr	r2, [pc, #116]	; (8001bd4 <MX_TIM4_Init+0x94>)
 8001b60:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 160-1;
 8001b62:	4b1b      	ldr	r3, [pc, #108]	; (8001bd0 <MX_TIM4_Init+0x90>)
 8001b64:	229f      	movs	r2, #159	; 0x9f
 8001b66:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b68:	4b19      	ldr	r3, [pc, #100]	; (8001bd0 <MX_TIM4_Init+0x90>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8001b6e:	4b18      	ldr	r3, [pc, #96]	; (8001bd0 <MX_TIM4_Init+0x90>)
 8001b70:	2263      	movs	r2, #99	; 0x63
 8001b72:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b74:	4b16      	ldr	r3, [pc, #88]	; (8001bd0 <MX_TIM4_Init+0x90>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b7a:	4b15      	ldr	r3, [pc, #84]	; (8001bd0 <MX_TIM4_Init+0x90>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001b80:	4813      	ldr	r0, [pc, #76]	; (8001bd0 <MX_TIM4_Init+0x90>)
 8001b82:	f006 f9eb 	bl	8007f5c <HAL_TIM_Base_Init>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 8001b8c:	f000 f9ec 	bl	8001f68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b94:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001b96:	f107 0308 	add.w	r3, r7, #8
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	480c      	ldr	r0, [pc, #48]	; (8001bd0 <MX_TIM4_Init+0x90>)
 8001b9e:	f006 fbd4 	bl	800834a <HAL_TIM_ConfigClockSource>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 8001ba8:	f000 f9de 	bl	8001f68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bac:	2300      	movs	r3, #0
 8001bae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001bb4:	463b      	mov	r3, r7
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4805      	ldr	r0, [pc, #20]	; (8001bd0 <MX_TIM4_Init+0x90>)
 8001bba:	f006 fdef 	bl	800879c <HAL_TIMEx_MasterConfigSynchronization>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8001bc4:	f000 f9d0 	bl	8001f68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001bc8:	bf00      	nop
 8001bca:	3718      	adds	r7, #24
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	20000330 	.word	0x20000330
 8001bd4:	40000800 	.word	0x40000800

08001bd8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bde:	463b      	mov	r3, r7
 8001be0:	2200      	movs	r2, #0
 8001be2:	601a      	str	r2, [r3, #0]
 8001be4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001be6:	4b15      	ldr	r3, [pc, #84]	; (8001c3c <MX_TIM6_Init+0x64>)
 8001be8:	4a15      	ldr	r2, [pc, #84]	; (8001c40 <MX_TIM6_Init+0x68>)
 8001bea:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1600-1;
 8001bec:	4b13      	ldr	r3, [pc, #76]	; (8001c3c <MX_TIM6_Init+0x64>)
 8001bee:	f240 623f 	movw	r2, #1599	; 0x63f
 8001bf2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bf4:	4b11      	ldr	r3, [pc, #68]	; (8001c3c <MX_TIM6_Init+0x64>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 20-1;
 8001bfa:	4b10      	ldr	r3, [pc, #64]	; (8001c3c <MX_TIM6_Init+0x64>)
 8001bfc:	2213      	movs	r2, #19
 8001bfe:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c00:	4b0e      	ldr	r3, [pc, #56]	; (8001c3c <MX_TIM6_Init+0x64>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001c06:	480d      	ldr	r0, [pc, #52]	; (8001c3c <MX_TIM6_Init+0x64>)
 8001c08:	f006 f9a8 	bl	8007f5c <HAL_TIM_Base_Init>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001c12:	f000 f9a9 	bl	8001f68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c16:	2300      	movs	r3, #0
 8001c18:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001c1e:	463b      	mov	r3, r7
 8001c20:	4619      	mov	r1, r3
 8001c22:	4806      	ldr	r0, [pc, #24]	; (8001c3c <MX_TIM6_Init+0x64>)
 8001c24:	f006 fdba 	bl	800879c <HAL_TIMEx_MasterConfigSynchronization>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001c2e:	f000 f99b 	bl	8001f68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001c32:	bf00      	nop
 8001c34:	3708      	adds	r7, #8
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	20000378 	.word	0x20000378
 8001c40:	40001000 	.word	0x40001000

08001c44 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c4a:	463b      	mov	r3, r7
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001c52:	4b15      	ldr	r3, [pc, #84]	; (8001ca8 <MX_TIM7_Init+0x64>)
 8001c54:	4a15      	ldr	r2, [pc, #84]	; (8001cac <MX_TIM7_Init+0x68>)
 8001c56:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 36000-1;
 8001c58:	4b13      	ldr	r3, [pc, #76]	; (8001ca8 <MX_TIM7_Init+0x64>)
 8001c5a:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8001c5e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c60:	4b11      	ldr	r3, [pc, #68]	; (8001ca8 <MX_TIM7_Init+0x64>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 4000-1;
 8001c66:	4b10      	ldr	r3, [pc, #64]	; (8001ca8 <MX_TIM7_Init+0x64>)
 8001c68:	f640 729f 	movw	r2, #3999	; 0xf9f
 8001c6c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ca8 <MX_TIM7_Init+0x64>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001c74:	480c      	ldr	r0, [pc, #48]	; (8001ca8 <MX_TIM7_Init+0x64>)
 8001c76:	f006 f971 	bl	8007f5c <HAL_TIM_Base_Init>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001c80:	f000 f972 	bl	8001f68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c84:	2300      	movs	r3, #0
 8001c86:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001c8c:	463b      	mov	r3, r7
 8001c8e:	4619      	mov	r1, r3
 8001c90:	4805      	ldr	r0, [pc, #20]	; (8001ca8 <MX_TIM7_Init+0x64>)
 8001c92:	f006 fd83 	bl	800879c <HAL_TIMEx_MasterConfigSynchronization>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001c9c:	f000 f964 	bl	8001f68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001ca0:	bf00      	nop
 8001ca2:	3708      	adds	r7, #8
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	200003c0 	.word	0x200003c0
 8001cac:	40001400 	.word	0x40001400

08001cb0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	607b      	str	r3, [r7, #4]
 8001cba:	4b0c      	ldr	r3, [pc, #48]	; (8001cec <MX_DMA_Init+0x3c>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbe:	4a0b      	ldr	r2, [pc, #44]	; (8001cec <MX_DMA_Init+0x3c>)
 8001cc0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cc6:	4b09      	ldr	r3, [pc, #36]	; (8001cec <MX_DMA_Init+0x3c>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cce:	607b      	str	r3, [r7, #4]
 8001cd0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	200f      	movs	r0, #15
 8001cd8:	f000 fd79 	bl	80027ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001cdc:	200f      	movs	r0, #15
 8001cde:	f000 fd92 	bl	8002806 <HAL_NVIC_EnableIRQ>

}
 8001ce2:	bf00      	nop
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	40023800 	.word	0x40023800

08001cf0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b08a      	sub	sp, #40	; 0x28
 8001cf4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf6:	f107 0314 	add.w	r3, r7, #20
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	601a      	str	r2, [r3, #0]
 8001cfe:	605a      	str	r2, [r3, #4]
 8001d00:	609a      	str	r2, [r3, #8]
 8001d02:	60da      	str	r2, [r3, #12]
 8001d04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d06:	2300      	movs	r3, #0
 8001d08:	613b      	str	r3, [r7, #16]
 8001d0a:	4b49      	ldr	r3, [pc, #292]	; (8001e30 <MX_GPIO_Init+0x140>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0e:	4a48      	ldr	r2, [pc, #288]	; (8001e30 <MX_GPIO_Init+0x140>)
 8001d10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d14:	6313      	str	r3, [r2, #48]	; 0x30
 8001d16:	4b46      	ldr	r3, [pc, #280]	; (8001e30 <MX_GPIO_Init+0x140>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d1e:	613b      	str	r3, [r7, #16]
 8001d20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d22:	2300      	movs	r3, #0
 8001d24:	60fb      	str	r3, [r7, #12]
 8001d26:	4b42      	ldr	r3, [pc, #264]	; (8001e30 <MX_GPIO_Init+0x140>)
 8001d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2a:	4a41      	ldr	r2, [pc, #260]	; (8001e30 <MX_GPIO_Init+0x140>)
 8001d2c:	f043 0304 	orr.w	r3, r3, #4
 8001d30:	6313      	str	r3, [r2, #48]	; 0x30
 8001d32:	4b3f      	ldr	r3, [pc, #252]	; (8001e30 <MX_GPIO_Init+0x140>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d36:	f003 0304 	and.w	r3, r3, #4
 8001d3a:	60fb      	str	r3, [r7, #12]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d3e:	2300      	movs	r3, #0
 8001d40:	60bb      	str	r3, [r7, #8]
 8001d42:	4b3b      	ldr	r3, [pc, #236]	; (8001e30 <MX_GPIO_Init+0x140>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d46:	4a3a      	ldr	r2, [pc, #232]	; (8001e30 <MX_GPIO_Init+0x140>)
 8001d48:	f043 0302 	orr.w	r3, r3, #2
 8001d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d4e:	4b38      	ldr	r3, [pc, #224]	; (8001e30 <MX_GPIO_Init+0x140>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d52:	f003 0302 	and.w	r3, r3, #2
 8001d56:	60bb      	str	r3, [r7, #8]
 8001d58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	607b      	str	r3, [r7, #4]
 8001d5e:	4b34      	ldr	r3, [pc, #208]	; (8001e30 <MX_GPIO_Init+0x140>)
 8001d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d62:	4a33      	ldr	r2, [pc, #204]	; (8001e30 <MX_GPIO_Init+0x140>)
 8001d64:	f043 0308 	orr.w	r3, r3, #8
 8001d68:	6313      	str	r3, [r2, #48]	; 0x30
 8001d6a:	4b31      	ldr	r3, [pc, #196]	; (8001e30 <MX_GPIO_Init+0x140>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6e:	f003 0308 	and.w	r3, r3, #8
 8001d72:	607b      	str	r3, [r7, #4]
 8001d74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d76:	2300      	movs	r3, #0
 8001d78:	603b      	str	r3, [r7, #0]
 8001d7a:	4b2d      	ldr	r3, [pc, #180]	; (8001e30 <MX_GPIO_Init+0x140>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7e:	4a2c      	ldr	r2, [pc, #176]	; (8001e30 <MX_GPIO_Init+0x140>)
 8001d80:	f043 0301 	orr.w	r3, r3, #1
 8001d84:	6313      	str	r3, [r2, #48]	; 0x30
 8001d86:	4b2a      	ldr	r3, [pc, #168]	; (8001e30 <MX_GPIO_Init+0x140>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8a:	f003 0301 	and.w	r3, r3, #1
 8001d8e:	603b      	str	r3, [r7, #0]
 8001d90:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD1_DC_Pin|LCD1_CS_Pin|LCD2_DC_Pin, GPIO_PIN_RESET);
 8001d92:	2200      	movs	r2, #0
 8001d94:	f44f 7160 	mov.w	r1, #896	; 0x380
 8001d98:	4826      	ldr	r0, [pc, #152]	; (8001e34 <MX_GPIO_Init+0x144>)
 8001d9a:	f001 faa3 	bl	80032e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD2_CS_Pin|LCD2_RST_Pin|LCD1_RST_Pin, GPIO_PIN_RESET);
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8001da4:	4824      	ldr	r0, [pc, #144]	; (8001e38 <MX_GPIO_Init+0x148>)
 8001da6:	f001 fa9d 	bl	80032e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ROW0_Pin|ROW1_Pin|ROW2_Pin|ROW3_Pin
 8001daa:	2200      	movs	r2, #0
 8001dac:	217f      	movs	r1, #127	; 0x7f
 8001dae:	4823      	ldr	r0, [pc, #140]	; (8001e3c <MX_GPIO_Init+0x14c>)
 8001db0:	f001 fa98 	bl	80032e4 <HAL_GPIO_WritePin>
                          |ROW4_Pin|ROW5_Pin|ROW6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : COL1_Pin COL2_Pin COL3_Pin COL4_Pin
                           COL5_Pin ENC_A_Pin ENC_B_Pin ENC_SW_Pin
                           COL0_Pin */
  GPIO_InitStruct.Pin = COL1_Pin|COL2_Pin|COL3_Pin|COL4_Pin
 8001db4:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001db8:	617b      	str	r3, [r7, #20]
                          |COL5_Pin|ENC_A_Pin|ENC_B_Pin|ENC_SW_Pin
                          |COL0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001dc2:	f107 0314 	add.w	r3, r7, #20
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	481c      	ldr	r0, [pc, #112]	; (8001e3c <MX_GPIO_Init+0x14c>)
 8001dca:	f001 f8d7 	bl	8002f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD1_DC_Pin LCD1_CS_Pin LCD2_DC_Pin */
  GPIO_InitStruct.Pin = LCD1_DC_Pin|LCD1_CS_Pin|LCD2_DC_Pin;
 8001dce:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001dd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001de0:	f107 0314 	add.w	r3, r7, #20
 8001de4:	4619      	mov	r1, r3
 8001de6:	4813      	ldr	r0, [pc, #76]	; (8001e34 <MX_GPIO_Init+0x144>)
 8001de8:	f001 f8c8 	bl	8002f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD2_CS_Pin LCD2_RST_Pin LCD1_RST_Pin */
  GPIO_InitStruct.Pin = LCD2_CS_Pin|LCD2_RST_Pin|LCD1_RST_Pin;
 8001dec:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001df0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001df2:	2301      	movs	r3, #1
 8001df4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df6:	2300      	movs	r3, #0
 8001df8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dfe:	f107 0314 	add.w	r3, r7, #20
 8001e02:	4619      	mov	r1, r3
 8001e04:	480c      	ldr	r0, [pc, #48]	; (8001e38 <MX_GPIO_Init+0x148>)
 8001e06:	f001 f8b9 	bl	8002f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : ROW0_Pin ROW1_Pin ROW2_Pin ROW3_Pin
                           ROW4_Pin ROW5_Pin ROW6_Pin */
  GPIO_InitStruct.Pin = ROW0_Pin|ROW1_Pin|ROW2_Pin|ROW3_Pin
 8001e0a:	237f      	movs	r3, #127	; 0x7f
 8001e0c:	617b      	str	r3, [r7, #20]
                          |ROW4_Pin|ROW5_Pin|ROW6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e12:	2300      	movs	r3, #0
 8001e14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e16:	2300      	movs	r3, #0
 8001e18:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e1a:	f107 0314 	add.w	r3, r7, #20
 8001e1e:	4619      	mov	r1, r3
 8001e20:	4806      	ldr	r0, [pc, #24]	; (8001e3c <MX_GPIO_Init+0x14c>)
 8001e22:	f001 f8ab 	bl	8002f7c <HAL_GPIO_Init>

}
 8001e26:	bf00      	nop
 8001e28:	3728      	adds	r7, #40	; 0x28
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	40023800 	.word	0x40023800
 8001e34:	40020800 	.word	0x40020800
 8001e38:	40020000 	.word	0x40020000
 8001e3c:	40020c00 	.word	0x40020c00

08001e40 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

// Callback: timer has reset
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]

	// Send USB data
	if (htim == &htim4) {
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	4a3a      	ldr	r2, [pc, #232]	; (8001f34 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d107      	bne.n	8001e60 <HAL_TIM_PeriodElapsedCallback+0x20>
	    // send HID report
		record_keys();
 8001e50:	f7ff fb0e 	bl	8001470 <record_keys>
		USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &keyboardhid, sizeof(keyboardhid));
 8001e54:	2208      	movs	r2, #8
 8001e56:	4938      	ldr	r1, [pc, #224]	; (8001f38 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001e58:	4838      	ldr	r0, [pc, #224]	; (8001f3c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001e5a:	f008 fb33 	bl	800a4c4 <USBD_HID_SendReport>
		cpm = (charCount) / ((2.0f * numCycles) / 60.0f);
		charsInCycle = 0;
		writeScreen = 1;

	}
}
 8001e5e:	e065      	b.n	8001f2c <HAL_TIM_PeriodElapsedCallback+0xec>
	else if (htim == &htim6) {
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	4a37      	ldr	r2, [pc, #220]	; (8001f40 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d104      	bne.n	8001e72 <HAL_TIM_PeriodElapsedCallback+0x32>
		scan_keypad();
 8001e68:	f7ff f87a 	bl	8000f60 <scan_keypad>
		scan_rotary();
 8001e6c:	f7ff fa24 	bl	80012b8 <scan_rotary>
}
 8001e70:	e05c      	b.n	8001f2c <HAL_TIM_PeriodElapsedCallback+0xec>
	else if (htim == &htim7) {
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a33      	ldr	r2, [pc, #204]	; (8001f44 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d158      	bne.n	8001f2c <HAL_TIM_PeriodElapsedCallback+0xec>
		if (charsInCycle == 0) {
 8001e7a:	4b33      	ldr	r3, [pc, #204]	; (8001f48 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d117      	bne.n	8001eb2 <HAL_TIM_PeriodElapsedCallback+0x72>
			dryCycles++;
 8001e82:	4b32      	ldr	r3, [pc, #200]	; (8001f4c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	3301      	adds	r3, #1
 8001e88:	4a30      	ldr	r2, [pc, #192]	; (8001f4c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001e8a:	6013      	str	r3, [r2, #0]
			if (dryCycles == 5) {
 8001e8c:	4b2f      	ldr	r3, [pc, #188]	; (8001f4c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2b05      	cmp	r3, #5
 8001e92:	d10e      	bne.n	8001eb2 <HAL_TIM_PeriodElapsedCallback+0x72>
				charCount = 0;
 8001e94:	4b2e      	ldr	r3, [pc, #184]	; (8001f50 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	601a      	str	r2, [r3, #0]
				charsInCycle = 0;
 8001e9a:	4b2b      	ldr	r3, [pc, #172]	; (8001f48 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]
				dryCycles = 0;
 8001ea0:	4b2a      	ldr	r3, [pc, #168]	; (8001f4c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	601a      	str	r2, [r3, #0]
				numCycles = 0;
 8001ea6:	4b2b      	ldr	r3, [pc, #172]	; (8001f54 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim7);
 8001eac:	4825      	ldr	r0, [pc, #148]	; (8001f44 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001eae:	f006 f915 	bl	80080dc <HAL_TIM_Base_Stop_IT>
		numCycles++;
 8001eb2:	4b28      	ldr	r3, [pc, #160]	; (8001f54 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	4a26      	ldr	r2, [pc, #152]	; (8001f54 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001eba:	6013      	str	r3, [r2, #0]
		wpm = (charCount / 5.0f) / ((2.0f * numCycles) / 60.0f);
 8001ebc:	4b24      	ldr	r3, [pc, #144]	; (8001f50 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	ee07 3a90 	vmov	s15, r3
 8001ec4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ec8:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001ecc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001ed0:	4b20      	ldr	r3, [pc, #128]	; (8001f54 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	ee07 3a90 	vmov	s15, r3
 8001ed8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001edc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001ee0:	ed9f 6a1d 	vldr	s12, [pc, #116]	; 8001f58 <HAL_TIM_PeriodElapsedCallback+0x118>
 8001ee4:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8001ee8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001eec:	4b1b      	ldr	r3, [pc, #108]	; (8001f5c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001eee:	edc3 7a00 	vstr	s15, [r3]
		cpm = (charCount) / ((2.0f * numCycles) / 60.0f);
 8001ef2:	4b17      	ldr	r3, [pc, #92]	; (8001f50 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	ee07 3a90 	vmov	s15, r3
 8001efa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001efe:	4b15      	ldr	r3, [pc, #84]	; (8001f54 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	ee07 3a90 	vmov	s15, r3
 8001f06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f0a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001f0e:	ed9f 6a12 	vldr	s12, [pc, #72]	; 8001f58 <HAL_TIM_PeriodElapsedCallback+0x118>
 8001f12:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8001f16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f1a:	4b11      	ldr	r3, [pc, #68]	; (8001f60 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001f1c:	edc3 7a00 	vstr	s15, [r3]
		charsInCycle = 0;
 8001f20:	4b09      	ldr	r3, [pc, #36]	; (8001f48 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	601a      	str	r2, [r3, #0]
		writeScreen = 1;
 8001f26:	4b0f      	ldr	r3, [pc, #60]	; (8001f64 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001f28:	2201      	movs	r2, #1
 8001f2a:	601a      	str	r2, [r3, #0]
}
 8001f2c:	bf00      	nop
 8001f2e:	3708      	adds	r7, #8
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	20000330 	.word	0x20000330
 8001f38:	2000044c 	.word	0x2000044c
 8001f3c:	20000460 	.word	0x20000460
 8001f40:	20000378 	.word	0x20000378
 8001f44:	200003c0 	.word	0x200003c0
 8001f48:	2000040c 	.word	0x2000040c
 8001f4c:	20000414 	.word	0x20000414
 8001f50:	20000408 	.word	0x20000408
 8001f54:	20000410 	.word	0x20000410
 8001f58:	42700000 	.word	0x42700000
 8001f5c:	20000418 	.word	0x20000418
 8001f60:	2000041c 	.word	0x2000041c
 8001f64:	2000002c 	.word	0x2000002c

08001f68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f6c:	b672      	cpsid	i
}
 8001f6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f70:	e7fe      	b.n	8001f70 <Error_Handler+0x8>
	...

08001f74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	607b      	str	r3, [r7, #4]
 8001f7e:	4b10      	ldr	r3, [pc, #64]	; (8001fc0 <HAL_MspInit+0x4c>)
 8001f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f82:	4a0f      	ldr	r2, [pc, #60]	; (8001fc0 <HAL_MspInit+0x4c>)
 8001f84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f88:	6453      	str	r3, [r2, #68]	; 0x44
 8001f8a:	4b0d      	ldr	r3, [pc, #52]	; (8001fc0 <HAL_MspInit+0x4c>)
 8001f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f92:	607b      	str	r3, [r7, #4]
 8001f94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f96:	2300      	movs	r3, #0
 8001f98:	603b      	str	r3, [r7, #0]
 8001f9a:	4b09      	ldr	r3, [pc, #36]	; (8001fc0 <HAL_MspInit+0x4c>)
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9e:	4a08      	ldr	r2, [pc, #32]	; (8001fc0 <HAL_MspInit+0x4c>)
 8001fa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fa4:	6413      	str	r3, [r2, #64]	; 0x40
 8001fa6:	4b06      	ldr	r3, [pc, #24]	; (8001fc0 <HAL_MspInit+0x4c>)
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fae:	603b      	str	r3, [r7, #0]
 8001fb0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fb2:	bf00      	nop
 8001fb4:	370c      	adds	r7, #12
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	40023800 	.word	0x40023800

08001fc4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b08a      	sub	sp, #40	; 0x28
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fcc:	f107 0314 	add.w	r3, r7, #20
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	605a      	str	r2, [r3, #4]
 8001fd6:	609a      	str	r2, [r3, #8]
 8001fd8:	60da      	str	r2, [r3, #12]
 8001fda:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a1d      	ldr	r2, [pc, #116]	; (8002058 <HAL_I2C_MspInit+0x94>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d134      	bne.n	8002050 <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	613b      	str	r3, [r7, #16]
 8001fea:	4b1c      	ldr	r3, [pc, #112]	; (800205c <HAL_I2C_MspInit+0x98>)
 8001fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fee:	4a1b      	ldr	r2, [pc, #108]	; (800205c <HAL_I2C_MspInit+0x98>)
 8001ff0:	f043 0302 	orr.w	r3, r3, #2
 8001ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ff6:	4b19      	ldr	r3, [pc, #100]	; (800205c <HAL_I2C_MspInit+0x98>)
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	613b      	str	r3, [r7, #16]
 8002000:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002002:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002006:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002008:	2312      	movs	r3, #18
 800200a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200c:	2300      	movs	r3, #0
 800200e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002010:	2303      	movs	r3, #3
 8002012:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002014:	2304      	movs	r3, #4
 8002016:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002018:	f107 0314 	add.w	r3, r7, #20
 800201c:	4619      	mov	r1, r3
 800201e:	4810      	ldr	r0, [pc, #64]	; (8002060 <HAL_I2C_MspInit+0x9c>)
 8002020:	f000 ffac 	bl	8002f7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002024:	2300      	movs	r3, #0
 8002026:	60fb      	str	r3, [r7, #12]
 8002028:	4b0c      	ldr	r3, [pc, #48]	; (800205c <HAL_I2C_MspInit+0x98>)
 800202a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202c:	4a0b      	ldr	r2, [pc, #44]	; (800205c <HAL_I2C_MspInit+0x98>)
 800202e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002032:	6413      	str	r3, [r2, #64]	; 0x40
 8002034:	4b09      	ldr	r3, [pc, #36]	; (800205c <HAL_I2C_MspInit+0x98>)
 8002036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002038:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800203c:	60fb      	str	r3, [r7, #12]
 800203e:	68fb      	ldr	r3, [r7, #12]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8002040:	2200      	movs	r2, #0
 8002042:	2100      	movs	r1, #0
 8002044:	2021      	movs	r0, #33	; 0x21
 8002046:	f000 fbc2 	bl	80027ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800204a:	2021      	movs	r0, #33	; 0x21
 800204c:	f000 fbdb 	bl	8002806 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002050:	bf00      	nop
 8002052:	3728      	adds	r7, #40	; 0x28
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	40005800 	.word	0x40005800
 800205c:	40023800 	.word	0x40023800
 8002060:	40020400 	.word	0x40020400

08002064 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b08a      	sub	sp, #40	; 0x28
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800206c:	f107 0314 	add.w	r3, r7, #20
 8002070:	2200      	movs	r2, #0
 8002072:	601a      	str	r2, [r3, #0]
 8002074:	605a      	str	r2, [r3, #4]
 8002076:	609a      	str	r2, [r3, #8]
 8002078:	60da      	str	r2, [r3, #12]
 800207a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a3f      	ldr	r2, [pc, #252]	; (8002180 <HAL_SPI_MspInit+0x11c>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d177      	bne.n	8002176 <HAL_SPI_MspInit+0x112>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002086:	2300      	movs	r3, #0
 8002088:	613b      	str	r3, [r7, #16]
 800208a:	4b3e      	ldr	r3, [pc, #248]	; (8002184 <HAL_SPI_MspInit+0x120>)
 800208c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208e:	4a3d      	ldr	r2, [pc, #244]	; (8002184 <HAL_SPI_MspInit+0x120>)
 8002090:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002094:	6413      	str	r3, [r2, #64]	; 0x40
 8002096:	4b3b      	ldr	r3, [pc, #236]	; (8002184 <HAL_SPI_MspInit+0x120>)
 8002098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800209e:	613b      	str	r3, [r7, #16]
 80020a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020a2:	2300      	movs	r3, #0
 80020a4:	60fb      	str	r3, [r7, #12]
 80020a6:	4b37      	ldr	r3, [pc, #220]	; (8002184 <HAL_SPI_MspInit+0x120>)
 80020a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020aa:	4a36      	ldr	r2, [pc, #216]	; (8002184 <HAL_SPI_MspInit+0x120>)
 80020ac:	f043 0304 	orr.w	r3, r3, #4
 80020b0:	6313      	str	r3, [r2, #48]	; 0x30
 80020b2:	4b34      	ldr	r3, [pc, #208]	; (8002184 <HAL_SPI_MspInit+0x120>)
 80020b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b6:	f003 0304 	and.w	r3, r3, #4
 80020ba:	60fb      	str	r3, [r7, #12]
 80020bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020be:	2300      	movs	r3, #0
 80020c0:	60bb      	str	r3, [r7, #8]
 80020c2:	4b30      	ldr	r3, [pc, #192]	; (8002184 <HAL_SPI_MspInit+0x120>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	4a2f      	ldr	r2, [pc, #188]	; (8002184 <HAL_SPI_MspInit+0x120>)
 80020c8:	f043 0302 	orr.w	r3, r3, #2
 80020cc:	6313      	str	r3, [r2, #48]	; 0x30
 80020ce:	4b2d      	ldr	r3, [pc, #180]	; (8002184 <HAL_SPI_MspInit+0x120>)
 80020d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	60bb      	str	r3, [r7, #8]
 80020d8:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80020da:	2308      	movs	r3, #8
 80020dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020de:	2302      	movs	r3, #2
 80020e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e2:	2300      	movs	r3, #0
 80020e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020e6:	2303      	movs	r3, #3
 80020e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80020ea:	2305      	movs	r3, #5
 80020ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020ee:	f107 0314 	add.w	r3, r7, #20
 80020f2:	4619      	mov	r1, r3
 80020f4:	4824      	ldr	r0, [pc, #144]	; (8002188 <HAL_SPI_MspInit+0x124>)
 80020f6:	f000 ff41 	bl	8002f7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80020fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002100:	2302      	movs	r3, #2
 8002102:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002104:	2300      	movs	r3, #0
 8002106:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002108:	2303      	movs	r3, #3
 800210a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800210c:	2305      	movs	r3, #5
 800210e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002110:	f107 0314 	add.w	r3, r7, #20
 8002114:	4619      	mov	r1, r3
 8002116:	481d      	ldr	r0, [pc, #116]	; (800218c <HAL_SPI_MspInit+0x128>)
 8002118:	f000 ff30 	bl	8002f7c <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 800211c:	4b1c      	ldr	r3, [pc, #112]	; (8002190 <HAL_SPI_MspInit+0x12c>)
 800211e:	4a1d      	ldr	r2, [pc, #116]	; (8002194 <HAL_SPI_MspInit+0x130>)
 8002120:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8002122:	4b1b      	ldr	r3, [pc, #108]	; (8002190 <HAL_SPI_MspInit+0x12c>)
 8002124:	2200      	movs	r2, #0
 8002126:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002128:	4b19      	ldr	r3, [pc, #100]	; (8002190 <HAL_SPI_MspInit+0x12c>)
 800212a:	2240      	movs	r2, #64	; 0x40
 800212c:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800212e:	4b18      	ldr	r3, [pc, #96]	; (8002190 <HAL_SPI_MspInit+0x12c>)
 8002130:	2200      	movs	r2, #0
 8002132:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002134:	4b16      	ldr	r3, [pc, #88]	; (8002190 <HAL_SPI_MspInit+0x12c>)
 8002136:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800213a:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800213c:	4b14      	ldr	r3, [pc, #80]	; (8002190 <HAL_SPI_MspInit+0x12c>)
 800213e:	2200      	movs	r2, #0
 8002140:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002142:	4b13      	ldr	r3, [pc, #76]	; (8002190 <HAL_SPI_MspInit+0x12c>)
 8002144:	2200      	movs	r2, #0
 8002146:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8002148:	4b11      	ldr	r3, [pc, #68]	; (8002190 <HAL_SPI_MspInit+0x12c>)
 800214a:	2200      	movs	r2, #0
 800214c:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800214e:	4b10      	ldr	r3, [pc, #64]	; (8002190 <HAL_SPI_MspInit+0x12c>)
 8002150:	2200      	movs	r2, #0
 8002152:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002154:	4b0e      	ldr	r3, [pc, #56]	; (8002190 <HAL_SPI_MspInit+0x12c>)
 8002156:	2200      	movs	r2, #0
 8002158:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800215a:	480d      	ldr	r0, [pc, #52]	; (8002190 <HAL_SPI_MspInit+0x12c>)
 800215c:	f000 fb6e 	bl	800283c <HAL_DMA_Init>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <HAL_SPI_MspInit+0x106>
    {
      Error_Handler();
 8002166:	f7ff feff 	bl	8001f68 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a08      	ldr	r2, [pc, #32]	; (8002190 <HAL_SPI_MspInit+0x12c>)
 800216e:	649a      	str	r2, [r3, #72]	; 0x48
 8002170:	4a07      	ldr	r2, [pc, #28]	; (8002190 <HAL_SPI_MspInit+0x12c>)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002176:	bf00      	nop
 8002178:	3728      	adds	r7, #40	; 0x28
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	40003800 	.word	0x40003800
 8002184:	40023800 	.word	0x40023800
 8002188:	40020800 	.word	0x40020800
 800218c:	40020400 	.word	0x40020400
 8002190:	200002d0 	.word	0x200002d0
 8002194:	40026070 	.word	0x40026070

08002198 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a2a      	ldr	r2, [pc, #168]	; (8002250 <HAL_TIM_Base_MspInit+0xb8>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d116      	bne.n	80021d8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80021aa:	2300      	movs	r3, #0
 80021ac:	617b      	str	r3, [r7, #20]
 80021ae:	4b29      	ldr	r3, [pc, #164]	; (8002254 <HAL_TIM_Base_MspInit+0xbc>)
 80021b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b2:	4a28      	ldr	r2, [pc, #160]	; (8002254 <HAL_TIM_Base_MspInit+0xbc>)
 80021b4:	f043 0304 	orr.w	r3, r3, #4
 80021b8:	6413      	str	r3, [r2, #64]	; 0x40
 80021ba:	4b26      	ldr	r3, [pc, #152]	; (8002254 <HAL_TIM_Base_MspInit+0xbc>)
 80021bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021be:	f003 0304 	and.w	r3, r3, #4
 80021c2:	617b      	str	r3, [r7, #20]
 80021c4:	697b      	ldr	r3, [r7, #20]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80021c6:	2200      	movs	r2, #0
 80021c8:	2100      	movs	r1, #0
 80021ca:	201e      	movs	r0, #30
 80021cc:	f000 faff 	bl	80027ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80021d0:	201e      	movs	r0, #30
 80021d2:	f000 fb18 	bl	8002806 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80021d6:	e036      	b.n	8002246 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM6)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a1e      	ldr	r2, [pc, #120]	; (8002258 <HAL_TIM_Base_MspInit+0xc0>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d116      	bne.n	8002210 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80021e2:	2300      	movs	r3, #0
 80021e4:	613b      	str	r3, [r7, #16]
 80021e6:	4b1b      	ldr	r3, [pc, #108]	; (8002254 <HAL_TIM_Base_MspInit+0xbc>)
 80021e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ea:	4a1a      	ldr	r2, [pc, #104]	; (8002254 <HAL_TIM_Base_MspInit+0xbc>)
 80021ec:	f043 0310 	orr.w	r3, r3, #16
 80021f0:	6413      	str	r3, [r2, #64]	; 0x40
 80021f2:	4b18      	ldr	r3, [pc, #96]	; (8002254 <HAL_TIM_Base_MspInit+0xbc>)
 80021f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f6:	f003 0310 	and.w	r3, r3, #16
 80021fa:	613b      	str	r3, [r7, #16]
 80021fc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80021fe:	2200      	movs	r2, #0
 8002200:	2100      	movs	r1, #0
 8002202:	2036      	movs	r0, #54	; 0x36
 8002204:	f000 fae3 	bl	80027ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002208:	2036      	movs	r0, #54	; 0x36
 800220a:	f000 fafc 	bl	8002806 <HAL_NVIC_EnableIRQ>
}
 800220e:	e01a      	b.n	8002246 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM7)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a11      	ldr	r2, [pc, #68]	; (800225c <HAL_TIM_Base_MspInit+0xc4>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d115      	bne.n	8002246 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800221a:	2300      	movs	r3, #0
 800221c:	60fb      	str	r3, [r7, #12]
 800221e:	4b0d      	ldr	r3, [pc, #52]	; (8002254 <HAL_TIM_Base_MspInit+0xbc>)
 8002220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002222:	4a0c      	ldr	r2, [pc, #48]	; (8002254 <HAL_TIM_Base_MspInit+0xbc>)
 8002224:	f043 0320 	orr.w	r3, r3, #32
 8002228:	6413      	str	r3, [r2, #64]	; 0x40
 800222a:	4b0a      	ldr	r3, [pc, #40]	; (8002254 <HAL_TIM_Base_MspInit+0xbc>)
 800222c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222e:	f003 0320 	and.w	r3, r3, #32
 8002232:	60fb      	str	r3, [r7, #12]
 8002234:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002236:	2200      	movs	r2, #0
 8002238:	2100      	movs	r1, #0
 800223a:	2037      	movs	r0, #55	; 0x37
 800223c:	f000 fac7 	bl	80027ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002240:	2037      	movs	r0, #55	; 0x37
 8002242:	f000 fae0 	bl	8002806 <HAL_NVIC_EnableIRQ>
}
 8002246:	bf00      	nop
 8002248:	3718      	adds	r7, #24
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	40000800 	.word	0x40000800
 8002254:	40023800 	.word	0x40023800
 8002258:	40001000 	.word	0x40001000
 800225c:	40001400 	.word	0x40001400

08002260 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002264:	e7fe      	b.n	8002264 <NMI_Handler+0x4>

08002266 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002266:	b480      	push	{r7}
 8002268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800226a:	e7fe      	b.n	800226a <HardFault_Handler+0x4>

0800226c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002270:	e7fe      	b.n	8002270 <MemManage_Handler+0x4>

08002272 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002272:	b480      	push	{r7}
 8002274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002276:	e7fe      	b.n	8002276 <BusFault_Handler+0x4>

08002278 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800227c:	e7fe      	b.n	800227c <UsageFault_Handler+0x4>

0800227e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800227e:	b480      	push	{r7}
 8002280:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002282:	bf00      	nop
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002290:	bf00      	nop
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr

0800229a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800229a:	b480      	push	{r7}
 800229c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800229e:	bf00      	nop
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022ac:	f000 f970 	bl	8002590 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022b0:	bf00      	nop
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80022b8:	4802      	ldr	r0, [pc, #8]	; (80022c4 <DMA1_Stream4_IRQHandler+0x10>)
 80022ba:	f000 fbe7 	bl	8002a8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80022be:	bf00      	nop
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	200002d0 	.word	0x200002d0

080022c8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80022cc:	4802      	ldr	r0, [pc, #8]	; (80022d8 <TIM4_IRQHandler+0x10>)
 80022ce:	f005 ff34 	bl	800813a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80022d2:	bf00      	nop
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	20000330 	.word	0x20000330

080022dc <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80022e0:	4802      	ldr	r0, [pc, #8]	; (80022ec <I2C2_EV_IRQHandler+0x10>)
 80022e2:	f001 fc81 	bl	8003be8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80022e6:	bf00      	nop
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	20000224 	.word	0x20000224

080022f0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80022f4:	4802      	ldr	r0, [pc, #8]	; (8002300 <TIM6_DAC_IRQHandler+0x10>)
 80022f6:	f005 ff20 	bl	800813a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80022fa:	bf00      	nop
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	20000378 	.word	0x20000378

08002304 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002308:	4802      	ldr	r0, [pc, #8]	; (8002314 <TIM7_IRQHandler+0x10>)
 800230a:	f005 ff16 	bl	800813a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800230e:	bf00      	nop
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	200003c0 	.word	0x200003c0

08002318 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800231c:	4802      	ldr	r0, [pc, #8]	; (8002328 <OTG_FS_IRQHandler+0x10>)
 800231e:	f003 fca5 	bl	8005c6c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002322:	bf00      	nop
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	2000093c 	.word	0x2000093c

0800232c <_read>:
 800232c:	b580      	push	{r7, lr}
 800232e:	b086      	sub	sp, #24
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
 8002338:	2300      	movs	r3, #0
 800233a:	617b      	str	r3, [r7, #20]
 800233c:	e00a      	b.n	8002354 <_read+0x28>
 800233e:	f3af 8000 	nop.w
 8002342:	4601      	mov	r1, r0
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	1c5a      	adds	r2, r3, #1
 8002348:	60ba      	str	r2, [r7, #8]
 800234a:	b2ca      	uxtb	r2, r1
 800234c:	701a      	strb	r2, [r3, #0]
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	3301      	adds	r3, #1
 8002352:	617b      	str	r3, [r7, #20]
 8002354:	697a      	ldr	r2, [r7, #20]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	429a      	cmp	r2, r3
 800235a:	dbf0      	blt.n	800233e <_read+0x12>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	4618      	mov	r0, r3
 8002360:	3718      	adds	r7, #24
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <_write>:
 8002366:	b580      	push	{r7, lr}
 8002368:	b086      	sub	sp, #24
 800236a:	af00      	add	r7, sp, #0
 800236c:	60f8      	str	r0, [r7, #12]
 800236e:	60b9      	str	r1, [r7, #8]
 8002370:	607a      	str	r2, [r7, #4]
 8002372:	2300      	movs	r3, #0
 8002374:	617b      	str	r3, [r7, #20]
 8002376:	e009      	b.n	800238c <_write+0x26>
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	1c5a      	adds	r2, r3, #1
 800237c:	60ba      	str	r2, [r7, #8]
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	4618      	mov	r0, r3
 8002382:	f3af 8000 	nop.w
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	3301      	adds	r3, #1
 800238a:	617b      	str	r3, [r7, #20]
 800238c:	697a      	ldr	r2, [r7, #20]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	429a      	cmp	r2, r3
 8002392:	dbf1      	blt.n	8002378 <_write+0x12>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	4618      	mov	r0, r3
 8002398:	3718      	adds	r7, #24
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <_close>:
 800239e:	b480      	push	{r7}
 80023a0:	b083      	sub	sp, #12
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
 80023a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023aa:	4618      	mov	r0, r3
 80023ac:	370c      	adds	r7, #12
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr

080023b6 <_fstat>:
 80023b6:	b480      	push	{r7}
 80023b8:	b083      	sub	sp, #12
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
 80023be:	6039      	str	r1, [r7, #0]
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023c6:	605a      	str	r2, [r3, #4]
 80023c8:	2300      	movs	r3, #0
 80023ca:	4618      	mov	r0, r3
 80023cc:	370c      	adds	r7, #12
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr

080023d6 <_isatty>:
 80023d6:	b480      	push	{r7}
 80023d8:	b083      	sub	sp, #12
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
 80023de:	2301      	movs	r3, #1
 80023e0:	4618      	mov	r0, r3
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <_lseek>:
 80023ec:	b480      	push	{r7}
 80023ee:	b085      	sub	sp, #20
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	60b9      	str	r1, [r7, #8]
 80023f6:	607a      	str	r2, [r7, #4]
 80023f8:	2300      	movs	r3, #0
 80023fa:	4618      	mov	r0, r3
 80023fc:	3714      	adds	r7, #20
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
	...

08002408 <_sbrk>:
 8002408:	b580      	push	{r7, lr}
 800240a:	b086      	sub	sp, #24
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	4a14      	ldr	r2, [pc, #80]	; (8002464 <_sbrk+0x5c>)
 8002412:	4b15      	ldr	r3, [pc, #84]	; (8002468 <_sbrk+0x60>)
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	617b      	str	r3, [r7, #20]
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	613b      	str	r3, [r7, #16]
 800241c:	4b13      	ldr	r3, [pc, #76]	; (800246c <_sbrk+0x64>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d102      	bne.n	800242a <_sbrk+0x22>
 8002424:	4b11      	ldr	r3, [pc, #68]	; (800246c <_sbrk+0x64>)
 8002426:	4a12      	ldr	r2, [pc, #72]	; (8002470 <_sbrk+0x68>)
 8002428:	601a      	str	r2, [r3, #0]
 800242a:	4b10      	ldr	r3, [pc, #64]	; (800246c <_sbrk+0x64>)
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4413      	add	r3, r2
 8002432:	693a      	ldr	r2, [r7, #16]
 8002434:	429a      	cmp	r2, r3
 8002436:	d207      	bcs.n	8002448 <_sbrk+0x40>
 8002438:	f00a f812 	bl	800c460 <__errno>
 800243c:	4603      	mov	r3, r0
 800243e:	220c      	movs	r2, #12
 8002440:	601a      	str	r2, [r3, #0]
 8002442:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002446:	e009      	b.n	800245c <_sbrk+0x54>
 8002448:	4b08      	ldr	r3, [pc, #32]	; (800246c <_sbrk+0x64>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	60fb      	str	r3, [r7, #12]
 800244e:	4b07      	ldr	r3, [pc, #28]	; (800246c <_sbrk+0x64>)
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4413      	add	r3, r2
 8002456:	4a05      	ldr	r2, [pc, #20]	; (800246c <_sbrk+0x64>)
 8002458:	6013      	str	r3, [r2, #0]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	4618      	mov	r0, r3
 800245e:	3718      	adds	r7, #24
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	20020000 	.word	0x20020000
 8002468:	00000400 	.word	0x00000400
 800246c:	20000454 	.word	0x20000454
 8002470:	20000e70 	.word	0x20000e70

08002474 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002478:	4b06      	ldr	r3, [pc, #24]	; (8002494 <SystemInit+0x20>)
 800247a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800247e:	4a05      	ldr	r2, [pc, #20]	; (8002494 <SystemInit+0x20>)
 8002480:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002484:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002488:	bf00      	nop
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	e000ed00 	.word	0xe000ed00

08002498 <Reset_Handler>:
 8002498:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024d0 <LoopFillZerobss+0x12>
 800249c:	480d      	ldr	r0, [pc, #52]	; (80024d4 <LoopFillZerobss+0x16>)
 800249e:	490e      	ldr	r1, [pc, #56]	; (80024d8 <LoopFillZerobss+0x1a>)
 80024a0:	4a0e      	ldr	r2, [pc, #56]	; (80024dc <LoopFillZerobss+0x1e>)
 80024a2:	2300      	movs	r3, #0
 80024a4:	e002      	b.n	80024ac <LoopCopyDataInit>

080024a6 <CopyDataInit>:
 80024a6:	58d4      	ldr	r4, [r2, r3]
 80024a8:	50c4      	str	r4, [r0, r3]
 80024aa:	3304      	adds	r3, #4

080024ac <LoopCopyDataInit>:
 80024ac:	18c4      	adds	r4, r0, r3
 80024ae:	428c      	cmp	r4, r1
 80024b0:	d3f9      	bcc.n	80024a6 <CopyDataInit>
 80024b2:	4a0b      	ldr	r2, [pc, #44]	; (80024e0 <LoopFillZerobss+0x22>)
 80024b4:	4c0b      	ldr	r4, [pc, #44]	; (80024e4 <LoopFillZerobss+0x26>)
 80024b6:	2300      	movs	r3, #0
 80024b8:	e001      	b.n	80024be <LoopFillZerobss>

080024ba <FillZerobss>:
 80024ba:	6013      	str	r3, [r2, #0]
 80024bc:	3204      	adds	r2, #4

080024be <LoopFillZerobss>:
 80024be:	42a2      	cmp	r2, r4
 80024c0:	d3fb      	bcc.n	80024ba <FillZerobss>
 80024c2:	f7ff ffd7 	bl	8002474 <SystemInit>
 80024c6:	f009 ffd1 	bl	800c46c <__libc_init_array>
 80024ca:	f7ff f92b 	bl	8001724 <main>
 80024ce:	4770      	bx	lr
 80024d0:	20020000 	.word	0x20020000
 80024d4:	20000000 	.word	0x20000000
 80024d8:	200001a8 	.word	0x200001a8
 80024dc:	080141d4 	.word	0x080141d4
 80024e0:	200001a8 	.word	0x200001a8
 80024e4:	20000e6c 	.word	0x20000e6c

080024e8 <ADC_IRQHandler>:
 80024e8:	e7fe      	b.n	80024e8 <ADC_IRQHandler>
	...

080024ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80024f0:	4b0e      	ldr	r3, [pc, #56]	; (800252c <HAL_Init+0x40>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a0d      	ldr	r2, [pc, #52]	; (800252c <HAL_Init+0x40>)
 80024f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80024fc:	4b0b      	ldr	r3, [pc, #44]	; (800252c <HAL_Init+0x40>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a0a      	ldr	r2, [pc, #40]	; (800252c <HAL_Init+0x40>)
 8002502:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002506:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002508:	4b08      	ldr	r3, [pc, #32]	; (800252c <HAL_Init+0x40>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a07      	ldr	r2, [pc, #28]	; (800252c <HAL_Init+0x40>)
 800250e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002512:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002514:	2003      	movs	r0, #3
 8002516:	f000 f94f 	bl	80027b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800251a:	200f      	movs	r0, #15
 800251c:	f000 f808 	bl	8002530 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002520:	f7ff fd28 	bl	8001f74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002524:	2300      	movs	r3, #0
}
 8002526:	4618      	mov	r0, r3
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	40023c00 	.word	0x40023c00

08002530 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002538:	4b12      	ldr	r3, [pc, #72]	; (8002584 <HAL_InitTick+0x54>)
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	4b12      	ldr	r3, [pc, #72]	; (8002588 <HAL_InitTick+0x58>)
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	4619      	mov	r1, r3
 8002542:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002546:	fbb3 f3f1 	udiv	r3, r3, r1
 800254a:	fbb2 f3f3 	udiv	r3, r2, r3
 800254e:	4618      	mov	r0, r3
 8002550:	f000 f967 	bl	8002822 <HAL_SYSTICK_Config>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e00e      	b.n	800257c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2b0f      	cmp	r3, #15
 8002562:	d80a      	bhi.n	800257a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002564:	2200      	movs	r2, #0
 8002566:	6879      	ldr	r1, [r7, #4]
 8002568:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800256c:	f000 f92f 	bl	80027ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002570:	4a06      	ldr	r2, [pc, #24]	; (800258c <HAL_InitTick+0x5c>)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002576:	2300      	movs	r3, #0
 8002578:	e000      	b.n	800257c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
}
 800257c:	4618      	mov	r0, r3
 800257e:	3708      	adds	r7, #8
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	20000034 	.word	0x20000034
 8002588:	2000003c 	.word	0x2000003c
 800258c:	20000038 	.word	0x20000038

08002590 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002594:	4b06      	ldr	r3, [pc, #24]	; (80025b0 <HAL_IncTick+0x20>)
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	461a      	mov	r2, r3
 800259a:	4b06      	ldr	r3, [pc, #24]	; (80025b4 <HAL_IncTick+0x24>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4413      	add	r3, r2
 80025a0:	4a04      	ldr	r2, [pc, #16]	; (80025b4 <HAL_IncTick+0x24>)
 80025a2:	6013      	str	r3, [r2, #0]
}
 80025a4:	bf00      	nop
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	2000003c 	.word	0x2000003c
 80025b4:	20000458 	.word	0x20000458

080025b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
  return uwTick;
 80025bc:	4b03      	ldr	r3, [pc, #12]	; (80025cc <HAL_GetTick+0x14>)
 80025be:	681b      	ldr	r3, [r3, #0]
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	20000458 	.word	0x20000458

080025d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025d8:	f7ff ffee 	bl	80025b8 <HAL_GetTick>
 80025dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025e8:	d005      	beq.n	80025f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025ea:	4b0a      	ldr	r3, [pc, #40]	; (8002614 <HAL_Delay+0x44>)
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	461a      	mov	r2, r3
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	4413      	add	r3, r2
 80025f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80025f6:	bf00      	nop
 80025f8:	f7ff ffde 	bl	80025b8 <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	68fa      	ldr	r2, [r7, #12]
 8002604:	429a      	cmp	r2, r3
 8002606:	d8f7      	bhi.n	80025f8 <HAL_Delay+0x28>
  {
  }
}
 8002608:	bf00      	nop
 800260a:	bf00      	nop
 800260c:	3710      	adds	r7, #16
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	2000003c 	.word	0x2000003c

08002618 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002618:	b480      	push	{r7}
 800261a:	b085      	sub	sp, #20
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f003 0307 	and.w	r3, r3, #7
 8002626:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002628:	4b0c      	ldr	r3, [pc, #48]	; (800265c <__NVIC_SetPriorityGrouping+0x44>)
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800262e:	68ba      	ldr	r2, [r7, #8]
 8002630:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002634:	4013      	ands	r3, r2
 8002636:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002640:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002644:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002648:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800264a:	4a04      	ldr	r2, [pc, #16]	; (800265c <__NVIC_SetPriorityGrouping+0x44>)
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	60d3      	str	r3, [r2, #12]
}
 8002650:	bf00      	nop
 8002652:	3714      	adds	r7, #20
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr
 800265c:	e000ed00 	.word	0xe000ed00

08002660 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002664:	4b04      	ldr	r3, [pc, #16]	; (8002678 <__NVIC_GetPriorityGrouping+0x18>)
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	0a1b      	lsrs	r3, r3, #8
 800266a:	f003 0307 	and.w	r3, r3, #7
}
 800266e:	4618      	mov	r0, r3
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr
 8002678:	e000ed00 	.word	0xe000ed00

0800267c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	4603      	mov	r3, r0
 8002684:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800268a:	2b00      	cmp	r3, #0
 800268c:	db0b      	blt.n	80026a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800268e:	79fb      	ldrb	r3, [r7, #7]
 8002690:	f003 021f 	and.w	r2, r3, #31
 8002694:	4907      	ldr	r1, [pc, #28]	; (80026b4 <__NVIC_EnableIRQ+0x38>)
 8002696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800269a:	095b      	lsrs	r3, r3, #5
 800269c:	2001      	movs	r0, #1
 800269e:	fa00 f202 	lsl.w	r2, r0, r2
 80026a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026a6:	bf00      	nop
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	e000e100 	.word	0xe000e100

080026b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	4603      	mov	r3, r0
 80026c0:	6039      	str	r1, [r7, #0]
 80026c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	db0a      	blt.n	80026e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	b2da      	uxtb	r2, r3
 80026d0:	490c      	ldr	r1, [pc, #48]	; (8002704 <__NVIC_SetPriority+0x4c>)
 80026d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d6:	0112      	lsls	r2, r2, #4
 80026d8:	b2d2      	uxtb	r2, r2
 80026da:	440b      	add	r3, r1
 80026dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026e0:	e00a      	b.n	80026f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	b2da      	uxtb	r2, r3
 80026e6:	4908      	ldr	r1, [pc, #32]	; (8002708 <__NVIC_SetPriority+0x50>)
 80026e8:	79fb      	ldrb	r3, [r7, #7]
 80026ea:	f003 030f 	and.w	r3, r3, #15
 80026ee:	3b04      	subs	r3, #4
 80026f0:	0112      	lsls	r2, r2, #4
 80026f2:	b2d2      	uxtb	r2, r2
 80026f4:	440b      	add	r3, r1
 80026f6:	761a      	strb	r2, [r3, #24]
}
 80026f8:	bf00      	nop
 80026fa:	370c      	adds	r7, #12
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr
 8002704:	e000e100 	.word	0xe000e100
 8002708:	e000ed00 	.word	0xe000ed00

0800270c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800270c:	b480      	push	{r7}
 800270e:	b089      	sub	sp, #36	; 0x24
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f003 0307 	and.w	r3, r3, #7
 800271e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	f1c3 0307 	rsb	r3, r3, #7
 8002726:	2b04      	cmp	r3, #4
 8002728:	bf28      	it	cs
 800272a:	2304      	movcs	r3, #4
 800272c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	3304      	adds	r3, #4
 8002732:	2b06      	cmp	r3, #6
 8002734:	d902      	bls.n	800273c <NVIC_EncodePriority+0x30>
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	3b03      	subs	r3, #3
 800273a:	e000      	b.n	800273e <NVIC_EncodePriority+0x32>
 800273c:	2300      	movs	r3, #0
 800273e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002740:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	fa02 f303 	lsl.w	r3, r2, r3
 800274a:	43da      	mvns	r2, r3
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	401a      	ands	r2, r3
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002754:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	fa01 f303 	lsl.w	r3, r1, r3
 800275e:	43d9      	mvns	r1, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002764:	4313      	orrs	r3, r2
         );
}
 8002766:	4618      	mov	r0, r3
 8002768:	3724      	adds	r7, #36	; 0x24
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
	...

08002774 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	3b01      	subs	r3, #1
 8002780:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002784:	d301      	bcc.n	800278a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002786:	2301      	movs	r3, #1
 8002788:	e00f      	b.n	80027aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800278a:	4a0a      	ldr	r2, [pc, #40]	; (80027b4 <SysTick_Config+0x40>)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	3b01      	subs	r3, #1
 8002790:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002792:	210f      	movs	r1, #15
 8002794:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002798:	f7ff ff8e 	bl	80026b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800279c:	4b05      	ldr	r3, [pc, #20]	; (80027b4 <SysTick_Config+0x40>)
 800279e:	2200      	movs	r2, #0
 80027a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027a2:	4b04      	ldr	r3, [pc, #16]	; (80027b4 <SysTick_Config+0x40>)
 80027a4:	2207      	movs	r2, #7
 80027a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3708      	adds	r7, #8
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	e000e010 	.word	0xe000e010

080027b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f7ff ff29 	bl	8002618 <__NVIC_SetPriorityGrouping>
}
 80027c6:	bf00      	nop
 80027c8:	3708      	adds	r7, #8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b086      	sub	sp, #24
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	4603      	mov	r3, r0
 80027d6:	60b9      	str	r1, [r7, #8]
 80027d8:	607a      	str	r2, [r7, #4]
 80027da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027dc:	2300      	movs	r3, #0
 80027de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027e0:	f7ff ff3e 	bl	8002660 <__NVIC_GetPriorityGrouping>
 80027e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	68b9      	ldr	r1, [r7, #8]
 80027ea:	6978      	ldr	r0, [r7, #20]
 80027ec:	f7ff ff8e 	bl	800270c <NVIC_EncodePriority>
 80027f0:	4602      	mov	r2, r0
 80027f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027f6:	4611      	mov	r1, r2
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7ff ff5d 	bl	80026b8 <__NVIC_SetPriority>
}
 80027fe:	bf00      	nop
 8002800:	3718      	adds	r7, #24
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002806:	b580      	push	{r7, lr}
 8002808:	b082      	sub	sp, #8
 800280a:	af00      	add	r7, sp, #0
 800280c:	4603      	mov	r3, r0
 800280e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002814:	4618      	mov	r0, r3
 8002816:	f7ff ff31 	bl	800267c <__NVIC_EnableIRQ>
}
 800281a:	bf00      	nop
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}

08002822 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002822:	b580      	push	{r7, lr}
 8002824:	b082      	sub	sp, #8
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f7ff ffa2 	bl	8002774 <SysTick_Config>
 8002830:	4603      	mov	r3, r0
}
 8002832:	4618      	mov	r0, r3
 8002834:	3708      	adds	r7, #8
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
	...

0800283c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b086      	sub	sp, #24
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002844:	2300      	movs	r3, #0
 8002846:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002848:	f7ff feb6 	bl	80025b8 <HAL_GetTick>
 800284c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d101      	bne.n	8002858 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e099      	b.n	800298c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2202      	movs	r2, #2
 800285c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f022 0201 	bic.w	r2, r2, #1
 8002876:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002878:	e00f      	b.n	800289a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800287a:	f7ff fe9d 	bl	80025b8 <HAL_GetTick>
 800287e:	4602      	mov	r2, r0
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	2b05      	cmp	r3, #5
 8002886:	d908      	bls.n	800289a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2220      	movs	r2, #32
 800288c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2203      	movs	r2, #3
 8002892:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e078      	b.n	800298c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0301 	and.w	r3, r3, #1
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d1e8      	bne.n	800287a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80028b0:	697a      	ldr	r2, [r7, #20]
 80028b2:	4b38      	ldr	r3, [pc, #224]	; (8002994 <HAL_DMA_Init+0x158>)
 80028b4:	4013      	ands	r3, r2
 80028b6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685a      	ldr	r2, [r3, #4]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	691b      	ldr	r3, [r3, #16]
 80028cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	699b      	ldr	r3, [r3, #24]
 80028d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6a1b      	ldr	r3, [r3, #32]
 80028e4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028e6:	697a      	ldr	r2, [r7, #20]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f0:	2b04      	cmp	r3, #4
 80028f2:	d107      	bne.n	8002904 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fc:	4313      	orrs	r3, r2
 80028fe:	697a      	ldr	r2, [r7, #20]
 8002900:	4313      	orrs	r3, r2
 8002902:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	697a      	ldr	r2, [r7, #20]
 800290a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	695b      	ldr	r3, [r3, #20]
 8002912:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	f023 0307 	bic.w	r3, r3, #7
 800291a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002920:	697a      	ldr	r2, [r7, #20]
 8002922:	4313      	orrs	r3, r2
 8002924:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292a:	2b04      	cmp	r3, #4
 800292c:	d117      	bne.n	800295e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002932:	697a      	ldr	r2, [r7, #20]
 8002934:	4313      	orrs	r3, r2
 8002936:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800293c:	2b00      	cmp	r3, #0
 800293e:	d00e      	beq.n	800295e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f000 fa9f 	bl	8002e84 <DMA_CheckFifoParam>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d008      	beq.n	800295e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2240      	movs	r2, #64	; 0x40
 8002950:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2201      	movs	r2, #1
 8002956:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800295a:	2301      	movs	r3, #1
 800295c:	e016      	b.n	800298c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	697a      	ldr	r2, [r7, #20]
 8002964:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f000 fa56 	bl	8002e18 <DMA_CalcBaseAndBitshift>
 800296c:	4603      	mov	r3, r0
 800296e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002974:	223f      	movs	r2, #63	; 0x3f
 8002976:	409a      	lsls	r2, r3
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2201      	movs	r2, #1
 8002986:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800298a:	2300      	movs	r3, #0
}
 800298c:	4618      	mov	r0, r3
 800298e:	3718      	adds	r7, #24
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	f010803f 	.word	0xf010803f

08002998 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b086      	sub	sp, #24
 800299c:	af00      	add	r7, sp, #0
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	60b9      	str	r1, [r7, #8]
 80029a2:	607a      	str	r2, [r7, #4]
 80029a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029a6:	2300      	movs	r3, #0
 80029a8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d101      	bne.n	80029be <HAL_DMA_Start_IT+0x26>
 80029ba:	2302      	movs	r3, #2
 80029bc:	e040      	b.n	8002a40 <HAL_DMA_Start_IT+0xa8>
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2201      	movs	r2, #1
 80029c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d12f      	bne.n	8002a32 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2202      	movs	r2, #2
 80029d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2200      	movs	r2, #0
 80029de:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	68b9      	ldr	r1, [r7, #8]
 80029e6:	68f8      	ldr	r0, [r7, #12]
 80029e8:	f000 f9e8 	bl	8002dbc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029f0:	223f      	movs	r2, #63	; 0x3f
 80029f2:	409a      	lsls	r2, r3
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f042 0216 	orr.w	r2, r2, #22
 8002a06:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d007      	beq.n	8002a20 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f042 0208 	orr.w	r2, r2, #8
 8002a1e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f042 0201 	orr.w	r2, r2, #1
 8002a2e:	601a      	str	r2, [r3, #0]
 8002a30:	e005      	b.n	8002a3e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002a3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3718      	adds	r7, #24
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d004      	beq.n	8002a66 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2280      	movs	r2, #128	; 0x80
 8002a60:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e00c      	b.n	8002a80 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2205      	movs	r2, #5
 8002a6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f022 0201 	bic.w	r2, r2, #1
 8002a7c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a7e:	2300      	movs	r3, #0
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	370c      	adds	r7, #12
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b086      	sub	sp, #24
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002a94:	2300      	movs	r3, #0
 8002a96:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002a98:	4b8e      	ldr	r3, [pc, #568]	; (8002cd4 <HAL_DMA_IRQHandler+0x248>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a8e      	ldr	r2, [pc, #568]	; (8002cd8 <HAL_DMA_IRQHandler+0x24c>)
 8002a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa2:	0a9b      	lsrs	r3, r3, #10
 8002aa4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aaa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ab6:	2208      	movs	r2, #8
 8002ab8:	409a      	lsls	r2, r3
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	4013      	ands	r3, r2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d01a      	beq.n	8002af8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0304 	and.w	r3, r3, #4
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d013      	beq.n	8002af8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f022 0204 	bic.w	r2, r2, #4
 8002ade:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ae4:	2208      	movs	r2, #8
 8002ae6:	409a      	lsls	r2, r3
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002af0:	f043 0201 	orr.w	r2, r3, #1
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002afc:	2201      	movs	r2, #1
 8002afe:	409a      	lsls	r2, r3
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	4013      	ands	r3, r2
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d012      	beq.n	8002b2e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	695b      	ldr	r3, [r3, #20]
 8002b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d00b      	beq.n	8002b2e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	409a      	lsls	r2, r3
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b26:	f043 0202 	orr.w	r2, r3, #2
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b32:	2204      	movs	r2, #4
 8002b34:	409a      	lsls	r2, r3
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	4013      	ands	r3, r2
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d012      	beq.n	8002b64 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0302 	and.w	r3, r3, #2
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d00b      	beq.n	8002b64 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b50:	2204      	movs	r2, #4
 8002b52:	409a      	lsls	r2, r3
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b5c:	f043 0204 	orr.w	r2, r3, #4
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b68:	2210      	movs	r2, #16
 8002b6a:	409a      	lsls	r2, r3
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	4013      	ands	r3, r2
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d043      	beq.n	8002bfc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0308 	and.w	r3, r3, #8
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d03c      	beq.n	8002bfc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b86:	2210      	movs	r2, #16
 8002b88:	409a      	lsls	r2, r3
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d018      	beq.n	8002bce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d108      	bne.n	8002bbc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d024      	beq.n	8002bfc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	4798      	blx	r3
 8002bba:	e01f      	b.n	8002bfc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d01b      	beq.n	8002bfc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	4798      	blx	r3
 8002bcc:	e016      	b.n	8002bfc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d107      	bne.n	8002bec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f022 0208 	bic.w	r2, r2, #8
 8002bea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d003      	beq.n	8002bfc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c00:	2220      	movs	r2, #32
 8002c02:	409a      	lsls	r2, r3
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	4013      	ands	r3, r2
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	f000 808f 	beq.w	8002d2c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0310 	and.w	r3, r3, #16
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	f000 8087 	beq.w	8002d2c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c22:	2220      	movs	r2, #32
 8002c24:	409a      	lsls	r2, r3
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	2b05      	cmp	r3, #5
 8002c34:	d136      	bne.n	8002ca4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f022 0216 	bic.w	r2, r2, #22
 8002c44:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	695a      	ldr	r2, [r3, #20]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c54:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d103      	bne.n	8002c66 <HAL_DMA_IRQHandler+0x1da>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d007      	beq.n	8002c76 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f022 0208 	bic.w	r2, r2, #8
 8002c74:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c7a:	223f      	movs	r2, #63	; 0x3f
 8002c7c:	409a      	lsls	r2, r3
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2201      	movs	r2, #1
 8002c86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d07e      	beq.n	8002d98 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	4798      	blx	r3
        }
        return;
 8002ca2:	e079      	b.n	8002d98 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d01d      	beq.n	8002cee <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d10d      	bne.n	8002cdc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d031      	beq.n	8002d2c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	4798      	blx	r3
 8002cd0:	e02c      	b.n	8002d2c <HAL_DMA_IRQHandler+0x2a0>
 8002cd2:	bf00      	nop
 8002cd4:	20000034 	.word	0x20000034
 8002cd8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d023      	beq.n	8002d2c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	4798      	blx	r3
 8002cec:	e01e      	b.n	8002d2c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d10f      	bne.n	8002d1c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f022 0210 	bic.w	r2, r2, #16
 8002d0a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d003      	beq.n	8002d2c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d032      	beq.n	8002d9a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d38:	f003 0301 	and.w	r3, r3, #1
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d022      	beq.n	8002d86 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2205      	movs	r2, #5
 8002d44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f022 0201 	bic.w	r2, r2, #1
 8002d56:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	60bb      	str	r3, [r7, #8]
 8002d5e:	697a      	ldr	r2, [r7, #20]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d307      	bcc.n	8002d74 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0301 	and.w	r3, r3, #1
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d1f2      	bne.n	8002d58 <HAL_DMA_IRQHandler+0x2cc>
 8002d72:	e000      	b.n	8002d76 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002d74:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2201      	movs	r2, #1
 8002d7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d005      	beq.n	8002d9a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	4798      	blx	r3
 8002d96:	e000      	b.n	8002d9a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002d98:	bf00      	nop
    }
  }
}
 8002d9a:	3718      	adds	r7, #24
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002dae:	b2db      	uxtb	r3, r3
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b085      	sub	sp, #20
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	60b9      	str	r1, [r7, #8]
 8002dc6:	607a      	str	r2, [r7, #4]
 8002dc8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002dd8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	683a      	ldr	r2, [r7, #0]
 8002de0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	2b40      	cmp	r3, #64	; 0x40
 8002de8:	d108      	bne.n	8002dfc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	68ba      	ldr	r2, [r7, #8]
 8002df8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002dfa:	e007      	b.n	8002e0c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68ba      	ldr	r2, [r7, #8]
 8002e02:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	60da      	str	r2, [r3, #12]
}
 8002e0c:	bf00      	nop
 8002e0e:	3714      	adds	r7, #20
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b085      	sub	sp, #20
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	3b10      	subs	r3, #16
 8002e28:	4a14      	ldr	r2, [pc, #80]	; (8002e7c <DMA_CalcBaseAndBitshift+0x64>)
 8002e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e2e:	091b      	lsrs	r3, r3, #4
 8002e30:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002e32:	4a13      	ldr	r2, [pc, #76]	; (8002e80 <DMA_CalcBaseAndBitshift+0x68>)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	4413      	add	r3, r2
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2b03      	cmp	r3, #3
 8002e44:	d909      	bls.n	8002e5a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e4e:	f023 0303 	bic.w	r3, r3, #3
 8002e52:	1d1a      	adds	r2, r3, #4
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	659a      	str	r2, [r3, #88]	; 0x58
 8002e58:	e007      	b.n	8002e6a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e62:	f023 0303 	bic.w	r3, r3, #3
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3714      	adds	r7, #20
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr
 8002e7a:	bf00      	nop
 8002e7c:	aaaaaaab 	.word	0xaaaaaaab
 8002e80:	08014124 	.word	0x08014124

08002e84 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b085      	sub	sp, #20
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e94:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d11f      	bne.n	8002ede <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	2b03      	cmp	r3, #3
 8002ea2:	d856      	bhi.n	8002f52 <DMA_CheckFifoParam+0xce>
 8002ea4:	a201      	add	r2, pc, #4	; (adr r2, 8002eac <DMA_CheckFifoParam+0x28>)
 8002ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eaa:	bf00      	nop
 8002eac:	08002ebd 	.word	0x08002ebd
 8002eb0:	08002ecf 	.word	0x08002ecf
 8002eb4:	08002ebd 	.word	0x08002ebd
 8002eb8:	08002f53 	.word	0x08002f53
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d046      	beq.n	8002f56 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ecc:	e043      	b.n	8002f56 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ed6:	d140      	bne.n	8002f5a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002edc:	e03d      	b.n	8002f5a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ee6:	d121      	bne.n	8002f2c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	2b03      	cmp	r3, #3
 8002eec:	d837      	bhi.n	8002f5e <DMA_CheckFifoParam+0xda>
 8002eee:	a201      	add	r2, pc, #4	; (adr r2, 8002ef4 <DMA_CheckFifoParam+0x70>)
 8002ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ef4:	08002f05 	.word	0x08002f05
 8002ef8:	08002f0b 	.word	0x08002f0b
 8002efc:	08002f05 	.word	0x08002f05
 8002f00:	08002f1d 	.word	0x08002f1d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	73fb      	strb	r3, [r7, #15]
      break;
 8002f08:	e030      	b.n	8002f6c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d025      	beq.n	8002f62 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f1a:	e022      	b.n	8002f62 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f20:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f24:	d11f      	bne.n	8002f66 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002f2a:	e01c      	b.n	8002f66 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d903      	bls.n	8002f3a <DMA_CheckFifoParam+0xb6>
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	2b03      	cmp	r3, #3
 8002f36:	d003      	beq.n	8002f40 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002f38:	e018      	b.n	8002f6c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	73fb      	strb	r3, [r7, #15]
      break;
 8002f3e:	e015      	b.n	8002f6c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d00e      	beq.n	8002f6a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	73fb      	strb	r3, [r7, #15]
      break;
 8002f50:	e00b      	b.n	8002f6a <DMA_CheckFifoParam+0xe6>
      break;
 8002f52:	bf00      	nop
 8002f54:	e00a      	b.n	8002f6c <DMA_CheckFifoParam+0xe8>
      break;
 8002f56:	bf00      	nop
 8002f58:	e008      	b.n	8002f6c <DMA_CheckFifoParam+0xe8>
      break;
 8002f5a:	bf00      	nop
 8002f5c:	e006      	b.n	8002f6c <DMA_CheckFifoParam+0xe8>
      break;
 8002f5e:	bf00      	nop
 8002f60:	e004      	b.n	8002f6c <DMA_CheckFifoParam+0xe8>
      break;
 8002f62:	bf00      	nop
 8002f64:	e002      	b.n	8002f6c <DMA_CheckFifoParam+0xe8>
      break;   
 8002f66:	bf00      	nop
 8002f68:	e000      	b.n	8002f6c <DMA_CheckFifoParam+0xe8>
      break;
 8002f6a:	bf00      	nop
    }
  } 
  
  return status; 
 8002f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3714      	adds	r7, #20
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop

08002f7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b089      	sub	sp, #36	; 0x24
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f86:	2300      	movs	r3, #0
 8002f88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f92:	2300      	movs	r3, #0
 8002f94:	61fb      	str	r3, [r7, #28]
 8002f96:	e16b      	b.n	8003270 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f98:	2201      	movs	r2, #1
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	697a      	ldr	r2, [r7, #20]
 8002fa8:	4013      	ands	r3, r2
 8002faa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002fac:	693a      	ldr	r2, [r7, #16]
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	f040 815a 	bne.w	800326a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f003 0303 	and.w	r3, r3, #3
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d005      	beq.n	8002fce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d130      	bne.n	8003030 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	005b      	lsls	r3, r3, #1
 8002fd8:	2203      	movs	r2, #3
 8002fda:	fa02 f303 	lsl.w	r3, r2, r3
 8002fde:	43db      	mvns	r3, r3
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	68da      	ldr	r2, [r3, #12]
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	005b      	lsls	r3, r3, #1
 8002fee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff2:	69ba      	ldr	r2, [r7, #24]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	69ba      	ldr	r2, [r7, #24]
 8002ffc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003004:	2201      	movs	r2, #1
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	fa02 f303 	lsl.w	r3, r2, r3
 800300c:	43db      	mvns	r3, r3
 800300e:	69ba      	ldr	r2, [r7, #24]
 8003010:	4013      	ands	r3, r2
 8003012:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	091b      	lsrs	r3, r3, #4
 800301a:	f003 0201 	and.w	r2, r3, #1
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	fa02 f303 	lsl.w	r3, r2, r3
 8003024:	69ba      	ldr	r2, [r7, #24]
 8003026:	4313      	orrs	r3, r2
 8003028:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f003 0303 	and.w	r3, r3, #3
 8003038:	2b03      	cmp	r3, #3
 800303a:	d017      	beq.n	800306c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	005b      	lsls	r3, r3, #1
 8003046:	2203      	movs	r2, #3
 8003048:	fa02 f303 	lsl.w	r3, r2, r3
 800304c:	43db      	mvns	r3, r3
 800304e:	69ba      	ldr	r2, [r7, #24]
 8003050:	4013      	ands	r3, r2
 8003052:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	689a      	ldr	r2, [r3, #8]
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	005b      	lsls	r3, r3, #1
 800305c:	fa02 f303 	lsl.w	r3, r2, r3
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	4313      	orrs	r3, r2
 8003064:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	69ba      	ldr	r2, [r7, #24]
 800306a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f003 0303 	and.w	r3, r3, #3
 8003074:	2b02      	cmp	r3, #2
 8003076:	d123      	bne.n	80030c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	08da      	lsrs	r2, r3, #3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	3208      	adds	r2, #8
 8003080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003084:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	f003 0307 	and.w	r3, r3, #7
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	220f      	movs	r2, #15
 8003090:	fa02 f303 	lsl.w	r3, r2, r3
 8003094:	43db      	mvns	r3, r3
 8003096:	69ba      	ldr	r2, [r7, #24]
 8003098:	4013      	ands	r3, r2
 800309a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	691a      	ldr	r2, [r3, #16]
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	f003 0307 	and.w	r3, r3, #7
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ac:	69ba      	ldr	r2, [r7, #24]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	08da      	lsrs	r2, r3, #3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	3208      	adds	r2, #8
 80030ba:	69b9      	ldr	r1, [r7, #24]
 80030bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	005b      	lsls	r3, r3, #1
 80030ca:	2203      	movs	r2, #3
 80030cc:	fa02 f303 	lsl.w	r3, r2, r3
 80030d0:	43db      	mvns	r3, r3
 80030d2:	69ba      	ldr	r2, [r7, #24]
 80030d4:	4013      	ands	r3, r2
 80030d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f003 0203 	and.w	r2, r3, #3
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	005b      	lsls	r3, r3, #1
 80030e4:	fa02 f303 	lsl.w	r3, r2, r3
 80030e8:	69ba      	ldr	r2, [r7, #24]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	69ba      	ldr	r2, [r7, #24]
 80030f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	f000 80b4 	beq.w	800326a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003102:	2300      	movs	r3, #0
 8003104:	60fb      	str	r3, [r7, #12]
 8003106:	4b60      	ldr	r3, [pc, #384]	; (8003288 <HAL_GPIO_Init+0x30c>)
 8003108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800310a:	4a5f      	ldr	r2, [pc, #380]	; (8003288 <HAL_GPIO_Init+0x30c>)
 800310c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003110:	6453      	str	r3, [r2, #68]	; 0x44
 8003112:	4b5d      	ldr	r3, [pc, #372]	; (8003288 <HAL_GPIO_Init+0x30c>)
 8003114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003116:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800311a:	60fb      	str	r3, [r7, #12]
 800311c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800311e:	4a5b      	ldr	r2, [pc, #364]	; (800328c <HAL_GPIO_Init+0x310>)
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	089b      	lsrs	r3, r3, #2
 8003124:	3302      	adds	r3, #2
 8003126:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800312a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	f003 0303 	and.w	r3, r3, #3
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	220f      	movs	r2, #15
 8003136:	fa02 f303 	lsl.w	r3, r2, r3
 800313a:	43db      	mvns	r3, r3
 800313c:	69ba      	ldr	r2, [r7, #24]
 800313e:	4013      	ands	r3, r2
 8003140:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a52      	ldr	r2, [pc, #328]	; (8003290 <HAL_GPIO_Init+0x314>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d02b      	beq.n	80031a2 <HAL_GPIO_Init+0x226>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a51      	ldr	r2, [pc, #324]	; (8003294 <HAL_GPIO_Init+0x318>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d025      	beq.n	800319e <HAL_GPIO_Init+0x222>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a50      	ldr	r2, [pc, #320]	; (8003298 <HAL_GPIO_Init+0x31c>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d01f      	beq.n	800319a <HAL_GPIO_Init+0x21e>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a4f      	ldr	r2, [pc, #316]	; (800329c <HAL_GPIO_Init+0x320>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d019      	beq.n	8003196 <HAL_GPIO_Init+0x21a>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a4e      	ldr	r2, [pc, #312]	; (80032a0 <HAL_GPIO_Init+0x324>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d013      	beq.n	8003192 <HAL_GPIO_Init+0x216>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a4d      	ldr	r2, [pc, #308]	; (80032a4 <HAL_GPIO_Init+0x328>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d00d      	beq.n	800318e <HAL_GPIO_Init+0x212>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a4c      	ldr	r2, [pc, #304]	; (80032a8 <HAL_GPIO_Init+0x32c>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d007      	beq.n	800318a <HAL_GPIO_Init+0x20e>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a4b      	ldr	r2, [pc, #300]	; (80032ac <HAL_GPIO_Init+0x330>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d101      	bne.n	8003186 <HAL_GPIO_Init+0x20a>
 8003182:	2307      	movs	r3, #7
 8003184:	e00e      	b.n	80031a4 <HAL_GPIO_Init+0x228>
 8003186:	2308      	movs	r3, #8
 8003188:	e00c      	b.n	80031a4 <HAL_GPIO_Init+0x228>
 800318a:	2306      	movs	r3, #6
 800318c:	e00a      	b.n	80031a4 <HAL_GPIO_Init+0x228>
 800318e:	2305      	movs	r3, #5
 8003190:	e008      	b.n	80031a4 <HAL_GPIO_Init+0x228>
 8003192:	2304      	movs	r3, #4
 8003194:	e006      	b.n	80031a4 <HAL_GPIO_Init+0x228>
 8003196:	2303      	movs	r3, #3
 8003198:	e004      	b.n	80031a4 <HAL_GPIO_Init+0x228>
 800319a:	2302      	movs	r3, #2
 800319c:	e002      	b.n	80031a4 <HAL_GPIO_Init+0x228>
 800319e:	2301      	movs	r3, #1
 80031a0:	e000      	b.n	80031a4 <HAL_GPIO_Init+0x228>
 80031a2:	2300      	movs	r3, #0
 80031a4:	69fa      	ldr	r2, [r7, #28]
 80031a6:	f002 0203 	and.w	r2, r2, #3
 80031aa:	0092      	lsls	r2, r2, #2
 80031ac:	4093      	lsls	r3, r2
 80031ae:	69ba      	ldr	r2, [r7, #24]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031b4:	4935      	ldr	r1, [pc, #212]	; (800328c <HAL_GPIO_Init+0x310>)
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	089b      	lsrs	r3, r3, #2
 80031ba:	3302      	adds	r3, #2
 80031bc:	69ba      	ldr	r2, [r7, #24]
 80031be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031c2:	4b3b      	ldr	r3, [pc, #236]	; (80032b0 <HAL_GPIO_Init+0x334>)
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	43db      	mvns	r3, r3
 80031cc:	69ba      	ldr	r2, [r7, #24]
 80031ce:	4013      	ands	r3, r2
 80031d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d003      	beq.n	80031e6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80031de:	69ba      	ldr	r2, [r7, #24]
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031e6:	4a32      	ldr	r2, [pc, #200]	; (80032b0 <HAL_GPIO_Init+0x334>)
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031ec:	4b30      	ldr	r3, [pc, #192]	; (80032b0 <HAL_GPIO_Init+0x334>)
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	43db      	mvns	r3, r3
 80031f6:	69ba      	ldr	r2, [r7, #24]
 80031f8:	4013      	ands	r3, r2
 80031fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003204:	2b00      	cmp	r3, #0
 8003206:	d003      	beq.n	8003210 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003208:	69ba      	ldr	r2, [r7, #24]
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	4313      	orrs	r3, r2
 800320e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003210:	4a27      	ldr	r2, [pc, #156]	; (80032b0 <HAL_GPIO_Init+0x334>)
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003216:	4b26      	ldr	r3, [pc, #152]	; (80032b0 <HAL_GPIO_Init+0x334>)
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	43db      	mvns	r3, r3
 8003220:	69ba      	ldr	r2, [r7, #24]
 8003222:	4013      	ands	r3, r2
 8003224:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d003      	beq.n	800323a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003232:	69ba      	ldr	r2, [r7, #24]
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	4313      	orrs	r3, r2
 8003238:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800323a:	4a1d      	ldr	r2, [pc, #116]	; (80032b0 <HAL_GPIO_Init+0x334>)
 800323c:	69bb      	ldr	r3, [r7, #24]
 800323e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003240:	4b1b      	ldr	r3, [pc, #108]	; (80032b0 <HAL_GPIO_Init+0x334>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	43db      	mvns	r3, r3
 800324a:	69ba      	ldr	r2, [r7, #24]
 800324c:	4013      	ands	r3, r2
 800324e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003258:	2b00      	cmp	r3, #0
 800325a:	d003      	beq.n	8003264 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800325c:	69ba      	ldr	r2, [r7, #24]
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	4313      	orrs	r3, r2
 8003262:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003264:	4a12      	ldr	r2, [pc, #72]	; (80032b0 <HAL_GPIO_Init+0x334>)
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	3301      	adds	r3, #1
 800326e:	61fb      	str	r3, [r7, #28]
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	2b0f      	cmp	r3, #15
 8003274:	f67f ae90 	bls.w	8002f98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003278:	bf00      	nop
 800327a:	bf00      	nop
 800327c:	3724      	adds	r7, #36	; 0x24
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop
 8003288:	40023800 	.word	0x40023800
 800328c:	40013800 	.word	0x40013800
 8003290:	40020000 	.word	0x40020000
 8003294:	40020400 	.word	0x40020400
 8003298:	40020800 	.word	0x40020800
 800329c:	40020c00 	.word	0x40020c00
 80032a0:	40021000 	.word	0x40021000
 80032a4:	40021400 	.word	0x40021400
 80032a8:	40021800 	.word	0x40021800
 80032ac:	40021c00 	.word	0x40021c00
 80032b0:	40013c00 	.word	0x40013c00

080032b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b085      	sub	sp, #20
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	460b      	mov	r3, r1
 80032be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	691a      	ldr	r2, [r3, #16]
 80032c4:	887b      	ldrh	r3, [r7, #2]
 80032c6:	4013      	ands	r3, r2
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d002      	beq.n	80032d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80032cc:	2301      	movs	r3, #1
 80032ce:	73fb      	strb	r3, [r7, #15]
 80032d0:	e001      	b.n	80032d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80032d2:	2300      	movs	r3, #0
 80032d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80032d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3714      	adds	r7, #20
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr

080032e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	460b      	mov	r3, r1
 80032ee:	807b      	strh	r3, [r7, #2]
 80032f0:	4613      	mov	r3, r2
 80032f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032f4:	787b      	ldrb	r3, [r7, #1]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d003      	beq.n	8003302 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032fa:	887a      	ldrh	r2, [r7, #2]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003300:	e003      	b.n	800330a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003302:	887b      	ldrh	r3, [r7, #2]
 8003304:	041a      	lsls	r2, r3, #16
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	619a      	str	r2, [r3, #24]
}
 800330a:	bf00      	nop
 800330c:	370c      	adds	r7, #12
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr
	...

08003318 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d101      	bne.n	800332a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e12b      	b.n	8003582 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003330:	b2db      	uxtb	r3, r3
 8003332:	2b00      	cmp	r3, #0
 8003334:	d106      	bne.n	8003344 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f7fe fe40 	bl	8001fc4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2224      	movs	r2, #36	; 0x24
 8003348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f022 0201 	bic.w	r2, r2, #1
 800335a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800336a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800337a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800337c:	f004 f9fe 	bl	800777c <HAL_RCC_GetPCLK1Freq>
 8003380:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	4a81      	ldr	r2, [pc, #516]	; (800358c <HAL_I2C_Init+0x274>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d807      	bhi.n	800339c <HAL_I2C_Init+0x84>
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	4a80      	ldr	r2, [pc, #512]	; (8003590 <HAL_I2C_Init+0x278>)
 8003390:	4293      	cmp	r3, r2
 8003392:	bf94      	ite	ls
 8003394:	2301      	movls	r3, #1
 8003396:	2300      	movhi	r3, #0
 8003398:	b2db      	uxtb	r3, r3
 800339a:	e006      	b.n	80033aa <HAL_I2C_Init+0x92>
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	4a7d      	ldr	r2, [pc, #500]	; (8003594 <HAL_I2C_Init+0x27c>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	bf94      	ite	ls
 80033a4:	2301      	movls	r3, #1
 80033a6:	2300      	movhi	r3, #0
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d001      	beq.n	80033b2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e0e7      	b.n	8003582 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	4a78      	ldr	r2, [pc, #480]	; (8003598 <HAL_I2C_Init+0x280>)
 80033b6:	fba2 2303 	umull	r2, r3, r2, r3
 80033ba:	0c9b      	lsrs	r3, r3, #18
 80033bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	68ba      	ldr	r2, [r7, #8]
 80033ce:	430a      	orrs	r2, r1
 80033d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	6a1b      	ldr	r3, [r3, #32]
 80033d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	4a6a      	ldr	r2, [pc, #424]	; (800358c <HAL_I2C_Init+0x274>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d802      	bhi.n	80033ec <HAL_I2C_Init+0xd4>
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	3301      	adds	r3, #1
 80033ea:	e009      	b.n	8003400 <HAL_I2C_Init+0xe8>
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80033f2:	fb02 f303 	mul.w	r3, r2, r3
 80033f6:	4a69      	ldr	r2, [pc, #420]	; (800359c <HAL_I2C_Init+0x284>)
 80033f8:	fba2 2303 	umull	r2, r3, r2, r3
 80033fc:	099b      	lsrs	r3, r3, #6
 80033fe:	3301      	adds	r3, #1
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	6812      	ldr	r2, [r2, #0]
 8003404:	430b      	orrs	r3, r1
 8003406:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	69db      	ldr	r3, [r3, #28]
 800340e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003412:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	495c      	ldr	r1, [pc, #368]	; (800358c <HAL_I2C_Init+0x274>)
 800341c:	428b      	cmp	r3, r1
 800341e:	d819      	bhi.n	8003454 <HAL_I2C_Init+0x13c>
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	1e59      	subs	r1, r3, #1
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	005b      	lsls	r3, r3, #1
 800342a:	fbb1 f3f3 	udiv	r3, r1, r3
 800342e:	1c59      	adds	r1, r3, #1
 8003430:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003434:	400b      	ands	r3, r1
 8003436:	2b00      	cmp	r3, #0
 8003438:	d00a      	beq.n	8003450 <HAL_I2C_Init+0x138>
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	1e59      	subs	r1, r3, #1
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	005b      	lsls	r3, r3, #1
 8003444:	fbb1 f3f3 	udiv	r3, r1, r3
 8003448:	3301      	adds	r3, #1
 800344a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800344e:	e051      	b.n	80034f4 <HAL_I2C_Init+0x1dc>
 8003450:	2304      	movs	r3, #4
 8003452:	e04f      	b.n	80034f4 <HAL_I2C_Init+0x1dc>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d111      	bne.n	8003480 <HAL_I2C_Init+0x168>
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	1e58      	subs	r0, r3, #1
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6859      	ldr	r1, [r3, #4]
 8003464:	460b      	mov	r3, r1
 8003466:	005b      	lsls	r3, r3, #1
 8003468:	440b      	add	r3, r1
 800346a:	fbb0 f3f3 	udiv	r3, r0, r3
 800346e:	3301      	adds	r3, #1
 8003470:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003474:	2b00      	cmp	r3, #0
 8003476:	bf0c      	ite	eq
 8003478:	2301      	moveq	r3, #1
 800347a:	2300      	movne	r3, #0
 800347c:	b2db      	uxtb	r3, r3
 800347e:	e012      	b.n	80034a6 <HAL_I2C_Init+0x18e>
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	1e58      	subs	r0, r3, #1
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6859      	ldr	r1, [r3, #4]
 8003488:	460b      	mov	r3, r1
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	440b      	add	r3, r1
 800348e:	0099      	lsls	r1, r3, #2
 8003490:	440b      	add	r3, r1
 8003492:	fbb0 f3f3 	udiv	r3, r0, r3
 8003496:	3301      	adds	r3, #1
 8003498:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800349c:	2b00      	cmp	r3, #0
 800349e:	bf0c      	ite	eq
 80034a0:	2301      	moveq	r3, #1
 80034a2:	2300      	movne	r3, #0
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d001      	beq.n	80034ae <HAL_I2C_Init+0x196>
 80034aa:	2301      	movs	r3, #1
 80034ac:	e022      	b.n	80034f4 <HAL_I2C_Init+0x1dc>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d10e      	bne.n	80034d4 <HAL_I2C_Init+0x1bc>
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	1e58      	subs	r0, r3, #1
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6859      	ldr	r1, [r3, #4]
 80034be:	460b      	mov	r3, r1
 80034c0:	005b      	lsls	r3, r3, #1
 80034c2:	440b      	add	r3, r1
 80034c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80034c8:	3301      	adds	r3, #1
 80034ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034d2:	e00f      	b.n	80034f4 <HAL_I2C_Init+0x1dc>
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	1e58      	subs	r0, r3, #1
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6859      	ldr	r1, [r3, #4]
 80034dc:	460b      	mov	r3, r1
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	440b      	add	r3, r1
 80034e2:	0099      	lsls	r1, r3, #2
 80034e4:	440b      	add	r3, r1
 80034e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80034ea:	3301      	adds	r3, #1
 80034ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034f4:	6879      	ldr	r1, [r7, #4]
 80034f6:	6809      	ldr	r1, [r1, #0]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	69da      	ldr	r2, [r3, #28]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a1b      	ldr	r3, [r3, #32]
 800350e:	431a      	orrs	r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	430a      	orrs	r2, r1
 8003516:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003522:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	6911      	ldr	r1, [r2, #16]
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	68d2      	ldr	r2, [r2, #12]
 800352e:	4311      	orrs	r1, r2
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	6812      	ldr	r2, [r2, #0]
 8003534:	430b      	orrs	r3, r1
 8003536:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	695a      	ldr	r2, [r3, #20]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	431a      	orrs	r2, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	430a      	orrs	r2, r1
 8003552:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f042 0201 	orr.w	r2, r2, #1
 8003562:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2220      	movs	r2, #32
 800356e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3710      	adds	r7, #16
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	000186a0 	.word	0x000186a0
 8003590:	001e847f 	.word	0x001e847f
 8003594:	003d08ff 	.word	0x003d08ff
 8003598:	431bde83 	.word	0x431bde83
 800359c:	10624dd3 	.word	0x10624dd3

080035a0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b088      	sub	sp, #32
 80035a4:	af02      	add	r7, sp, #8
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	607a      	str	r2, [r7, #4]
 80035aa:	461a      	mov	r2, r3
 80035ac:	460b      	mov	r3, r1
 80035ae:	817b      	strh	r3, [r7, #10]
 80035b0:	4613      	mov	r3, r2
 80035b2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80035b4:	f7ff f800 	bl	80025b8 <HAL_GetTick>
 80035b8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	2b20      	cmp	r3, #32
 80035c4:	f040 80e0 	bne.w	8003788 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	9300      	str	r3, [sp, #0]
 80035cc:	2319      	movs	r3, #25
 80035ce:	2201      	movs	r2, #1
 80035d0:	4970      	ldr	r1, [pc, #448]	; (8003794 <HAL_I2C_Master_Transmit+0x1f4>)
 80035d2:	68f8      	ldr	r0, [r7, #12]
 80035d4:	f001 ffd0 	bl	8005578 <I2C_WaitOnFlagUntilTimeout>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d001      	beq.n	80035e2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80035de:	2302      	movs	r3, #2
 80035e0:	e0d3      	b.n	800378a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d101      	bne.n	80035f0 <HAL_I2C_Master_Transmit+0x50>
 80035ec:	2302      	movs	r3, #2
 80035ee:	e0cc      	b.n	800378a <HAL_I2C_Master_Transmit+0x1ea>
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0301 	and.w	r3, r3, #1
 8003602:	2b01      	cmp	r3, #1
 8003604:	d007      	beq.n	8003616 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f042 0201 	orr.w	r2, r2, #1
 8003614:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003624:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2221      	movs	r2, #33	; 0x21
 800362a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2210      	movs	r2, #16
 8003632:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2200      	movs	r2, #0
 800363a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	893a      	ldrh	r2, [r7, #8]
 8003646:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800364c:	b29a      	uxth	r2, r3
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	4a50      	ldr	r2, [pc, #320]	; (8003798 <HAL_I2C_Master_Transmit+0x1f8>)
 8003656:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003658:	8979      	ldrh	r1, [r7, #10]
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	6a3a      	ldr	r2, [r7, #32]
 800365e:	68f8      	ldr	r0, [r7, #12]
 8003660:	f001 fd92 	bl	8005188 <I2C_MasterRequestWrite>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d001      	beq.n	800366e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e08d      	b.n	800378a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800366e:	2300      	movs	r3, #0
 8003670:	613b      	str	r3, [r7, #16]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	695b      	ldr	r3, [r3, #20]
 8003678:	613b      	str	r3, [r7, #16]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	699b      	ldr	r3, [r3, #24]
 8003680:	613b      	str	r3, [r7, #16]
 8003682:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003684:	e066      	b.n	8003754 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003686:	697a      	ldr	r2, [r7, #20]
 8003688:	6a39      	ldr	r1, [r7, #32]
 800368a:	68f8      	ldr	r0, [r7, #12]
 800368c:	f002 f84a 	bl	8005724 <I2C_WaitOnTXEFlagUntilTimeout>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d00d      	beq.n	80036b2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369a:	2b04      	cmp	r3, #4
 800369c:	d107      	bne.n	80036ae <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036ac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e06b      	b.n	800378a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b6:	781a      	ldrb	r2, [r3, #0]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c2:	1c5a      	adds	r2, r3, #1
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	3b01      	subs	r3, #1
 80036d0:	b29a      	uxth	r2, r3
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036da:	3b01      	subs	r3, #1
 80036dc:	b29a      	uxth	r2, r3
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	695b      	ldr	r3, [r3, #20]
 80036e8:	f003 0304 	and.w	r3, r3, #4
 80036ec:	2b04      	cmp	r3, #4
 80036ee:	d11b      	bne.n	8003728 <HAL_I2C_Master_Transmit+0x188>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d017      	beq.n	8003728 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fc:	781a      	ldrb	r2, [r3, #0]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003708:	1c5a      	adds	r2, r3, #1
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003712:	b29b      	uxth	r3, r3
 8003714:	3b01      	subs	r3, #1
 8003716:	b29a      	uxth	r2, r3
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003720:	3b01      	subs	r3, #1
 8003722:	b29a      	uxth	r2, r3
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003728:	697a      	ldr	r2, [r7, #20]
 800372a:	6a39      	ldr	r1, [r7, #32]
 800372c:	68f8      	ldr	r0, [r7, #12]
 800372e:	f002 f83a 	bl	80057a6 <I2C_WaitOnBTFFlagUntilTimeout>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d00d      	beq.n	8003754 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373c:	2b04      	cmp	r3, #4
 800373e:	d107      	bne.n	8003750 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800374e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e01a      	b.n	800378a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003758:	2b00      	cmp	r3, #0
 800375a:	d194      	bne.n	8003686 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800376a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2220      	movs	r2, #32
 8003770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2200      	movs	r2, #0
 8003778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2200      	movs	r2, #0
 8003780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003784:	2300      	movs	r3, #0
 8003786:	e000      	b.n	800378a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003788:	2302      	movs	r3, #2
  }
}
 800378a:	4618      	mov	r0, r3
 800378c:	3718      	adds	r7, #24
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	00100002 	.word	0x00100002
 8003798:	ffff0000 	.word	0xffff0000

0800379c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b08c      	sub	sp, #48	; 0x30
 80037a0:	af02      	add	r7, sp, #8
 80037a2:	60f8      	str	r0, [r7, #12]
 80037a4:	607a      	str	r2, [r7, #4]
 80037a6:	461a      	mov	r2, r3
 80037a8:	460b      	mov	r3, r1
 80037aa:	817b      	strh	r3, [r7, #10]
 80037ac:	4613      	mov	r3, r2
 80037ae:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80037b0:	f7fe ff02 	bl	80025b8 <HAL_GetTick>
 80037b4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	2b20      	cmp	r3, #32
 80037c0:	f040 820b 	bne.w	8003bda <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80037c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c6:	9300      	str	r3, [sp, #0]
 80037c8:	2319      	movs	r3, #25
 80037ca:	2201      	movs	r2, #1
 80037cc:	497c      	ldr	r1, [pc, #496]	; (80039c0 <HAL_I2C_Master_Receive+0x224>)
 80037ce:	68f8      	ldr	r0, [r7, #12]
 80037d0:	f001 fed2 	bl	8005578 <I2C_WaitOnFlagUntilTimeout>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d001      	beq.n	80037de <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80037da:	2302      	movs	r3, #2
 80037dc:	e1fe      	b.n	8003bdc <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d101      	bne.n	80037ec <HAL_I2C_Master_Receive+0x50>
 80037e8:	2302      	movs	r3, #2
 80037ea:	e1f7      	b.n	8003bdc <HAL_I2C_Master_Receive+0x440>
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0301 	and.w	r3, r3, #1
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d007      	beq.n	8003812 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f042 0201 	orr.w	r2, r2, #1
 8003810:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003820:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2222      	movs	r2, #34	; 0x22
 8003826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2210      	movs	r2, #16
 800382e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2200      	movs	r2, #0
 8003836:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	893a      	ldrh	r2, [r7, #8]
 8003842:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003848:	b29a      	uxth	r2, r3
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	4a5c      	ldr	r2, [pc, #368]	; (80039c4 <HAL_I2C_Master_Receive+0x228>)
 8003852:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003854:	8979      	ldrh	r1, [r7, #10]
 8003856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003858:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800385a:	68f8      	ldr	r0, [r7, #12]
 800385c:	f001 fd16 	bl	800528c <I2C_MasterRequestRead>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d001      	beq.n	800386a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e1b8      	b.n	8003bdc <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800386e:	2b00      	cmp	r3, #0
 8003870:	d113      	bne.n	800389a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003872:	2300      	movs	r3, #0
 8003874:	623b      	str	r3, [r7, #32]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	695b      	ldr	r3, [r3, #20]
 800387c:	623b      	str	r3, [r7, #32]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	699b      	ldr	r3, [r3, #24]
 8003884:	623b      	str	r3, [r7, #32]
 8003886:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003896:	601a      	str	r2, [r3, #0]
 8003898:	e18c      	b.n	8003bb4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d11b      	bne.n	80038da <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038b2:	2300      	movs	r3, #0
 80038b4:	61fb      	str	r3, [r7, #28]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	695b      	ldr	r3, [r3, #20]
 80038bc:	61fb      	str	r3, [r7, #28]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	699b      	ldr	r3, [r3, #24]
 80038c4:	61fb      	str	r3, [r7, #28]
 80038c6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038d6:	601a      	str	r2, [r3, #0]
 80038d8:	e16c      	b.n	8003bb4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d11b      	bne.n	800391a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038f0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003900:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003902:	2300      	movs	r3, #0
 8003904:	61bb      	str	r3, [r7, #24]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	695b      	ldr	r3, [r3, #20]
 800390c:	61bb      	str	r3, [r7, #24]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	699b      	ldr	r3, [r3, #24]
 8003914:	61bb      	str	r3, [r7, #24]
 8003916:	69bb      	ldr	r3, [r7, #24]
 8003918:	e14c      	b.n	8003bb4 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003928:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800392a:	2300      	movs	r3, #0
 800392c:	617b      	str	r3, [r7, #20]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	695b      	ldr	r3, [r3, #20]
 8003934:	617b      	str	r3, [r7, #20]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	699b      	ldr	r3, [r3, #24]
 800393c:	617b      	str	r3, [r7, #20]
 800393e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003940:	e138      	b.n	8003bb4 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003946:	2b03      	cmp	r3, #3
 8003948:	f200 80f1 	bhi.w	8003b2e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003950:	2b01      	cmp	r3, #1
 8003952:	d123      	bne.n	800399c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003954:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003956:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003958:	68f8      	ldr	r0, [r7, #12]
 800395a:	f001 ff97 	bl	800588c <I2C_WaitOnRXNEFlagUntilTimeout>
 800395e:	4603      	mov	r3, r0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d001      	beq.n	8003968 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e139      	b.n	8003bdc <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	691a      	ldr	r2, [r3, #16]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003972:	b2d2      	uxtb	r2, r2
 8003974:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397a:	1c5a      	adds	r2, r3, #1
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003984:	3b01      	subs	r3, #1
 8003986:	b29a      	uxth	r2, r3
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003990:	b29b      	uxth	r3, r3
 8003992:	3b01      	subs	r3, #1
 8003994:	b29a      	uxth	r2, r3
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	855a      	strh	r2, [r3, #42]	; 0x2a
 800399a:	e10b      	b.n	8003bb4 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d14e      	bne.n	8003a42 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80039a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a6:	9300      	str	r3, [sp, #0]
 80039a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039aa:	2200      	movs	r2, #0
 80039ac:	4906      	ldr	r1, [pc, #24]	; (80039c8 <HAL_I2C_Master_Receive+0x22c>)
 80039ae:	68f8      	ldr	r0, [r7, #12]
 80039b0:	f001 fde2 	bl	8005578 <I2C_WaitOnFlagUntilTimeout>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d008      	beq.n	80039cc <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e10e      	b.n	8003bdc <HAL_I2C_Master_Receive+0x440>
 80039be:	bf00      	nop
 80039c0:	00100002 	.word	0x00100002
 80039c4:	ffff0000 	.word	0xffff0000
 80039c8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	691a      	ldr	r2, [r3, #16]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e6:	b2d2      	uxtb	r2, r2
 80039e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ee:	1c5a      	adds	r2, r3, #1
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039f8:	3b01      	subs	r3, #1
 80039fa:	b29a      	uxth	r2, r3
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	3b01      	subs	r3, #1
 8003a08:	b29a      	uxth	r2, r3
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	691a      	ldr	r2, [r3, #16]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a18:	b2d2      	uxtb	r2, r2
 8003a1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a20:	1c5a      	adds	r2, r3, #1
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a2a:	3b01      	subs	r3, #1
 8003a2c:	b29a      	uxth	r2, r3
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	3b01      	subs	r3, #1
 8003a3a:	b29a      	uxth	r2, r3
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a40:	e0b8      	b.n	8003bb4 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a44:	9300      	str	r3, [sp, #0]
 8003a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a48:	2200      	movs	r2, #0
 8003a4a:	4966      	ldr	r1, [pc, #408]	; (8003be4 <HAL_I2C_Master_Receive+0x448>)
 8003a4c:	68f8      	ldr	r0, [r7, #12]
 8003a4e:	f001 fd93 	bl	8005578 <I2C_WaitOnFlagUntilTimeout>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d001      	beq.n	8003a5c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e0bf      	b.n	8003bdc <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	691a      	ldr	r2, [r3, #16]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a76:	b2d2      	uxtb	r2, r2
 8003a78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7e:	1c5a      	adds	r2, r3, #1
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a88:	3b01      	subs	r3, #1
 8003a8a:	b29a      	uxth	r2, r3
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	3b01      	subs	r3, #1
 8003a98:	b29a      	uxth	r2, r3
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa0:	9300      	str	r3, [sp, #0]
 8003aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	494f      	ldr	r1, [pc, #316]	; (8003be4 <HAL_I2C_Master_Receive+0x448>)
 8003aa8:	68f8      	ldr	r0, [r7, #12]
 8003aaa:	f001 fd65 	bl	8005578 <I2C_WaitOnFlagUntilTimeout>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d001      	beq.n	8003ab8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e091      	b.n	8003bdc <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ac6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	691a      	ldr	r2, [r3, #16]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad2:	b2d2      	uxtb	r2, r2
 8003ad4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ada:	1c5a      	adds	r2, r3, #1
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ae4:	3b01      	subs	r3, #1
 8003ae6:	b29a      	uxth	r2, r3
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	3b01      	subs	r3, #1
 8003af4:	b29a      	uxth	r2, r3
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	691a      	ldr	r2, [r3, #16]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b04:	b2d2      	uxtb	r2, r2
 8003b06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0c:	1c5a      	adds	r2, r3, #1
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b16:	3b01      	subs	r3, #1
 8003b18:	b29a      	uxth	r2, r3
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	3b01      	subs	r3, #1
 8003b26:	b29a      	uxth	r2, r3
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b2c:	e042      	b.n	8003bb4 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b30:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b32:	68f8      	ldr	r0, [r7, #12]
 8003b34:	f001 feaa 	bl	800588c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d001      	beq.n	8003b42 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e04c      	b.n	8003bdc <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	691a      	ldr	r2, [r3, #16]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4c:	b2d2      	uxtb	r2, r2
 8003b4e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b54:	1c5a      	adds	r2, r3, #1
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b5e:	3b01      	subs	r3, #1
 8003b60:	b29a      	uxth	r2, r3
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	3b01      	subs	r3, #1
 8003b6e:	b29a      	uxth	r2, r3
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	695b      	ldr	r3, [r3, #20]
 8003b7a:	f003 0304 	and.w	r3, r3, #4
 8003b7e:	2b04      	cmp	r3, #4
 8003b80:	d118      	bne.n	8003bb4 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	691a      	ldr	r2, [r3, #16]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8c:	b2d2      	uxtb	r2, r2
 8003b8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b94:	1c5a      	adds	r2, r3, #1
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b9e:	3b01      	subs	r3, #1
 8003ba0:	b29a      	uxth	r2, r3
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	3b01      	subs	r3, #1
 8003bae:	b29a      	uxth	r2, r3
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	f47f aec2 	bne.w	8003942 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2220      	movs	r2, #32
 8003bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	e000      	b.n	8003bdc <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003bda:	2302      	movs	r3, #2
  }
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3728      	adds	r7, #40	; 0x28
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	00010004 	.word	0x00010004

08003be8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b088      	sub	sp, #32
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c00:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c08:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c10:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003c12:	7bfb      	ldrb	r3, [r7, #15]
 8003c14:	2b10      	cmp	r3, #16
 8003c16:	d003      	beq.n	8003c20 <HAL_I2C_EV_IRQHandler+0x38>
 8003c18:	7bfb      	ldrb	r3, [r7, #15]
 8003c1a:	2b40      	cmp	r3, #64	; 0x40
 8003c1c:	f040 80c1 	bne.w	8003da2 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	699b      	ldr	r3, [r3, #24]
 8003c26:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	695b      	ldr	r3, [r3, #20]
 8003c2e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	f003 0301 	and.w	r3, r3, #1
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d10d      	bne.n	8003c56 <HAL_I2C_EV_IRQHandler+0x6e>
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003c40:	d003      	beq.n	8003c4a <HAL_I2C_EV_IRQHandler+0x62>
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003c48:	d101      	bne.n	8003c4e <HAL_I2C_EV_IRQHandler+0x66>
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e000      	b.n	8003c50 <HAL_I2C_EV_IRQHandler+0x68>
 8003c4e:	2300      	movs	r3, #0
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	f000 8132 	beq.w	8003eba <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	f003 0301 	and.w	r3, r3, #1
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d00c      	beq.n	8003c7a <HAL_I2C_EV_IRQHandler+0x92>
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	0a5b      	lsrs	r3, r3, #9
 8003c64:	f003 0301 	and.w	r3, r3, #1
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d006      	beq.n	8003c7a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f001 fe92 	bl	8005996 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f000 fcdc 	bl	8004630 <I2C_Master_SB>
 8003c78:	e092      	b.n	8003da0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	08db      	lsrs	r3, r3, #3
 8003c7e:	f003 0301 	and.w	r3, r3, #1
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d009      	beq.n	8003c9a <HAL_I2C_EV_IRQHandler+0xb2>
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	0a5b      	lsrs	r3, r3, #9
 8003c8a:	f003 0301 	and.w	r3, r3, #1
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d003      	beq.n	8003c9a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f000 fd52 	bl	800473c <I2C_Master_ADD10>
 8003c98:	e082      	b.n	8003da0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	085b      	lsrs	r3, r3, #1
 8003c9e:	f003 0301 	and.w	r3, r3, #1
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d009      	beq.n	8003cba <HAL_I2C_EV_IRQHandler+0xd2>
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	0a5b      	lsrs	r3, r3, #9
 8003caa:	f003 0301 	and.w	r3, r3, #1
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d003      	beq.n	8003cba <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f000 fd6c 	bl	8004790 <I2C_Master_ADDR>
 8003cb8:	e072      	b.n	8003da0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003cba:	69bb      	ldr	r3, [r7, #24]
 8003cbc:	089b      	lsrs	r3, r3, #2
 8003cbe:	f003 0301 	and.w	r3, r3, #1
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d03b      	beq.n	8003d3e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cd4:	f000 80f3 	beq.w	8003ebe <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003cd8:	69fb      	ldr	r3, [r7, #28]
 8003cda:	09db      	lsrs	r3, r3, #7
 8003cdc:	f003 0301 	and.w	r3, r3, #1
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d00f      	beq.n	8003d04 <HAL_I2C_EV_IRQHandler+0x11c>
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	0a9b      	lsrs	r3, r3, #10
 8003ce8:	f003 0301 	and.w	r3, r3, #1
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d009      	beq.n	8003d04 <HAL_I2C_EV_IRQHandler+0x11c>
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	089b      	lsrs	r3, r3, #2
 8003cf4:	f003 0301 	and.w	r3, r3, #1
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d103      	bne.n	8003d04 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f000 f94c 	bl	8003f9a <I2C_MasterTransmit_TXE>
 8003d02:	e04d      	b.n	8003da0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	089b      	lsrs	r3, r3, #2
 8003d08:	f003 0301 	and.w	r3, r3, #1
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	f000 80d6 	beq.w	8003ebe <HAL_I2C_EV_IRQHandler+0x2d6>
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	0a5b      	lsrs	r3, r3, #9
 8003d16:	f003 0301 	and.w	r3, r3, #1
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	f000 80cf 	beq.w	8003ebe <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003d20:	7bbb      	ldrb	r3, [r7, #14]
 8003d22:	2b21      	cmp	r3, #33	; 0x21
 8003d24:	d103      	bne.n	8003d2e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 f9d3 	bl	80040d2 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d2c:	e0c7      	b.n	8003ebe <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003d2e:	7bfb      	ldrb	r3, [r7, #15]
 8003d30:	2b40      	cmp	r3, #64	; 0x40
 8003d32:	f040 80c4 	bne.w	8003ebe <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f000 fa41 	bl	80041be <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d3c:	e0bf      	b.n	8003ebe <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d4c:	f000 80b7 	beq.w	8003ebe <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	099b      	lsrs	r3, r3, #6
 8003d54:	f003 0301 	and.w	r3, r3, #1
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d00f      	beq.n	8003d7c <HAL_I2C_EV_IRQHandler+0x194>
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	0a9b      	lsrs	r3, r3, #10
 8003d60:	f003 0301 	and.w	r3, r3, #1
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d009      	beq.n	8003d7c <HAL_I2C_EV_IRQHandler+0x194>
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	089b      	lsrs	r3, r3, #2
 8003d6c:	f003 0301 	and.w	r3, r3, #1
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d103      	bne.n	8003d7c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f000 fab6 	bl	80042e6 <I2C_MasterReceive_RXNE>
 8003d7a:	e011      	b.n	8003da0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	089b      	lsrs	r3, r3, #2
 8003d80:	f003 0301 	and.w	r3, r3, #1
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	f000 809a 	beq.w	8003ebe <HAL_I2C_EV_IRQHandler+0x2d6>
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	0a5b      	lsrs	r3, r3, #9
 8003d8e:	f003 0301 	and.w	r3, r3, #1
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	f000 8093 	beq.w	8003ebe <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f000 fb5f 	bl	800445c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d9e:	e08e      	b.n	8003ebe <HAL_I2C_EV_IRQHandler+0x2d6>
 8003da0:	e08d      	b.n	8003ebe <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d004      	beq.n	8003db4 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	695b      	ldr	r3, [r3, #20]
 8003db0:	61fb      	str	r3, [r7, #28]
 8003db2:	e007      	b.n	8003dc4 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	699b      	ldr	r3, [r3, #24]
 8003dba:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	695b      	ldr	r3, [r3, #20]
 8003dc2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003dc4:	69fb      	ldr	r3, [r7, #28]
 8003dc6:	085b      	lsrs	r3, r3, #1
 8003dc8:	f003 0301 	and.w	r3, r3, #1
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d012      	beq.n	8003df6 <HAL_I2C_EV_IRQHandler+0x20e>
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	0a5b      	lsrs	r3, r3, #9
 8003dd4:	f003 0301 	and.w	r3, r3, #1
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d00c      	beq.n	8003df6 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d003      	beq.n	8003dec <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	699b      	ldr	r3, [r3, #24]
 8003dea:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003dec:	69b9      	ldr	r1, [r7, #24]
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f000 ff1d 	bl	8004c2e <I2C_Slave_ADDR>
 8003df4:	e066      	b.n	8003ec4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	091b      	lsrs	r3, r3, #4
 8003dfa:	f003 0301 	and.w	r3, r3, #1
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d009      	beq.n	8003e16 <HAL_I2C_EV_IRQHandler+0x22e>
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	0a5b      	lsrs	r3, r3, #9
 8003e06:	f003 0301 	and.w	r3, r3, #1
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d003      	beq.n	8003e16 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 ff58 	bl	8004cc4 <I2C_Slave_STOPF>
 8003e14:	e056      	b.n	8003ec4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003e16:	7bbb      	ldrb	r3, [r7, #14]
 8003e18:	2b21      	cmp	r3, #33	; 0x21
 8003e1a:	d002      	beq.n	8003e22 <HAL_I2C_EV_IRQHandler+0x23a>
 8003e1c:	7bbb      	ldrb	r3, [r7, #14]
 8003e1e:	2b29      	cmp	r3, #41	; 0x29
 8003e20:	d125      	bne.n	8003e6e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	09db      	lsrs	r3, r3, #7
 8003e26:	f003 0301 	and.w	r3, r3, #1
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d00f      	beq.n	8003e4e <HAL_I2C_EV_IRQHandler+0x266>
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	0a9b      	lsrs	r3, r3, #10
 8003e32:	f003 0301 	and.w	r3, r3, #1
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d009      	beq.n	8003e4e <HAL_I2C_EV_IRQHandler+0x266>
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	089b      	lsrs	r3, r3, #2
 8003e3e:	f003 0301 	and.w	r3, r3, #1
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d103      	bne.n	8003e4e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f000 fe33 	bl	8004ab2 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e4c:	e039      	b.n	8003ec2 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	089b      	lsrs	r3, r3, #2
 8003e52:	f003 0301 	and.w	r3, r3, #1
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d033      	beq.n	8003ec2 <HAL_I2C_EV_IRQHandler+0x2da>
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	0a5b      	lsrs	r3, r3, #9
 8003e5e:	f003 0301 	and.w	r3, r3, #1
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d02d      	beq.n	8003ec2 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f000 fe60 	bl	8004b2c <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e6c:	e029      	b.n	8003ec2 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	099b      	lsrs	r3, r3, #6
 8003e72:	f003 0301 	and.w	r3, r3, #1
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d00f      	beq.n	8003e9a <HAL_I2C_EV_IRQHandler+0x2b2>
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	0a9b      	lsrs	r3, r3, #10
 8003e7e:	f003 0301 	and.w	r3, r3, #1
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d009      	beq.n	8003e9a <HAL_I2C_EV_IRQHandler+0x2b2>
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	089b      	lsrs	r3, r3, #2
 8003e8a:	f003 0301 	and.w	r3, r3, #1
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d103      	bne.n	8003e9a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f000 fe6b 	bl	8004b6e <I2C_SlaveReceive_RXNE>
 8003e98:	e014      	b.n	8003ec4 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	089b      	lsrs	r3, r3, #2
 8003e9e:	f003 0301 	and.w	r3, r3, #1
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d00e      	beq.n	8003ec4 <HAL_I2C_EV_IRQHandler+0x2dc>
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	0a5b      	lsrs	r3, r3, #9
 8003eaa:	f003 0301 	and.w	r3, r3, #1
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d008      	beq.n	8003ec4 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 fe99 	bl	8004bea <I2C_SlaveReceive_BTF>
 8003eb8:	e004      	b.n	8003ec4 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003eba:	bf00      	nop
 8003ebc:	e002      	b.n	8003ec4 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ebe:	bf00      	nop
 8003ec0:	e000      	b.n	8003ec4 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003ec2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003ec4:	3720      	adds	r7, #32
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}

08003eca <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003eca:	b480      	push	{r7}
 8003ecc:	b083      	sub	sp, #12
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003ed2:	bf00      	nop
 8003ed4:	370c      	adds	r7, #12
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr

08003ede <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ede:	b480      	push	{r7}
 8003ee0:	b083      	sub	sp, #12
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003ee6:	bf00      	nop
 8003ee8:	370c      	adds	r7, #12
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr

08003ef2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ef2:	b480      	push	{r7}
 8003ef4:	b083      	sub	sp, #12
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003efa:	bf00      	nop
 8003efc:	370c      	adds	r7, #12
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr

08003f06 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f06:	b480      	push	{r7}
 8003f08:	b083      	sub	sp, #12
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003f0e:	bf00      	nop
 8003f10:	370c      	adds	r7, #12
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr

08003f1a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003f1a:	b480      	push	{r7}
 8003f1c:	b083      	sub	sp, #12
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
 8003f22:	460b      	mov	r3, r1
 8003f24:	70fb      	strb	r3, [r7, #3]
 8003f26:	4613      	mov	r3, r2
 8003f28:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003f2a:	bf00      	nop
 8003f2c:	370c      	adds	r7, #12
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr

08003f36 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f36:	b480      	push	{r7}
 8003f38:	b083      	sub	sp, #12
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003f3e:	bf00      	nop
 8003f40:	370c      	adds	r7, #12
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr

08003f4a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f4a:	b480      	push	{r7}
 8003f4c:	b083      	sub	sp, #12
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003f52:	bf00      	nop
 8003f54:	370c      	adds	r7, #12
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr

08003f5e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f5e:	b480      	push	{r7}
 8003f60:	b083      	sub	sp, #12
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003f66:	bf00      	nop
 8003f68:	370c      	adds	r7, #12
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr

08003f72 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003f72:	b480      	push	{r7}
 8003f74:	b083      	sub	sp, #12
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003f7a:	bf00      	nop
 8003f7c:	370c      	adds	r7, #12
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr

08003f86 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f86:	b480      	push	{r7}
 8003f88:	b083      	sub	sp, #12
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003f8e:	bf00      	nop
 8003f90:	370c      	adds	r7, #12
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr

08003f9a <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003f9a:	b580      	push	{r7, lr}
 8003f9c:	b084      	sub	sp, #16
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fa8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fb0:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d150      	bne.n	8004062 <I2C_MasterTransmit_TXE+0xc8>
 8003fc0:	7bfb      	ldrb	r3, [r7, #15]
 8003fc2:	2b21      	cmp	r3, #33	; 0x21
 8003fc4:	d14d      	bne.n	8004062 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	2b08      	cmp	r3, #8
 8003fca:	d01d      	beq.n	8004008 <I2C_MasterTransmit_TXE+0x6e>
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	2b20      	cmp	r3, #32
 8003fd0:	d01a      	beq.n	8004008 <I2C_MasterTransmit_TXE+0x6e>
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003fd8:	d016      	beq.n	8004008 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	685a      	ldr	r2, [r3, #4]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003fe8:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2211      	movs	r2, #17
 8003fee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2220      	movs	r2, #32
 8003ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f7ff ff62 	bl	8003eca <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004006:	e060      	b.n	80040ca <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	685a      	ldr	r2, [r3, #4]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004016:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004026:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2220      	movs	r2, #32
 8004032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800403c:	b2db      	uxtb	r3, r3
 800403e:	2b40      	cmp	r3, #64	; 0x40
 8004040:	d107      	bne.n	8004052 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f7ff ff7d 	bl	8003f4a <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004050:	e03b      	b.n	80040ca <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f7ff ff35 	bl	8003eca <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004060:	e033      	b.n	80040ca <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004062:	7bfb      	ldrb	r3, [r7, #15]
 8004064:	2b21      	cmp	r3, #33	; 0x21
 8004066:	d005      	beq.n	8004074 <I2C_MasterTransmit_TXE+0xda>
 8004068:	7bbb      	ldrb	r3, [r7, #14]
 800406a:	2b40      	cmp	r3, #64	; 0x40
 800406c:	d12d      	bne.n	80040ca <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800406e:	7bfb      	ldrb	r3, [r7, #15]
 8004070:	2b22      	cmp	r3, #34	; 0x22
 8004072:	d12a      	bne.n	80040ca <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004078:	b29b      	uxth	r3, r3
 800407a:	2b00      	cmp	r3, #0
 800407c:	d108      	bne.n	8004090 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	685a      	ldr	r2, [r3, #4]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800408c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800408e:	e01c      	b.n	80040ca <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004096:	b2db      	uxtb	r3, r3
 8004098:	2b40      	cmp	r3, #64	; 0x40
 800409a:	d103      	bne.n	80040a4 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f000 f88e 	bl	80041be <I2C_MemoryTransmit_TXE_BTF>
}
 80040a2:	e012      	b.n	80040ca <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a8:	781a      	ldrb	r2, [r3, #0]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b4:	1c5a      	adds	r2, r3, #1
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040be:	b29b      	uxth	r3, r3
 80040c0:	3b01      	subs	r3, #1
 80040c2:	b29a      	uxth	r2, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80040c8:	e7ff      	b.n	80040ca <I2C_MasterTransmit_TXE+0x130>
 80040ca:	bf00      	nop
 80040cc:	3710      	adds	r7, #16
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}

080040d2 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80040d2:	b580      	push	{r7, lr}
 80040d4:	b084      	sub	sp, #16
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040de:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	2b21      	cmp	r3, #33	; 0x21
 80040ea:	d164      	bne.n	80041b6 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d012      	beq.n	800411c <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fa:	781a      	ldrb	r2, [r3, #0]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004106:	1c5a      	adds	r2, r3, #1
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004110:	b29b      	uxth	r3, r3
 8004112:	3b01      	subs	r3, #1
 8004114:	b29a      	uxth	r2, r3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800411a:	e04c      	b.n	80041b6 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2b08      	cmp	r3, #8
 8004120:	d01d      	beq.n	800415e <I2C_MasterTransmit_BTF+0x8c>
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2b20      	cmp	r3, #32
 8004126:	d01a      	beq.n	800415e <I2C_MasterTransmit_BTF+0x8c>
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800412e:	d016      	beq.n	800415e <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	685a      	ldr	r2, [r3, #4]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800413e:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2211      	movs	r2, #17
 8004144:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2220      	movs	r2, #32
 8004152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f7ff feb7 	bl	8003eca <HAL_I2C_MasterTxCpltCallback>
}
 800415c:	e02b      	b.n	80041b6 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	685a      	ldr	r2, [r3, #4]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800416c:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800417c:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2220      	movs	r2, #32
 8004188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004192:	b2db      	uxtb	r3, r3
 8004194:	2b40      	cmp	r3, #64	; 0x40
 8004196:	d107      	bne.n	80041a8 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f7ff fed2 	bl	8003f4a <HAL_I2C_MemTxCpltCallback>
}
 80041a6:	e006      	b.n	80041b6 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f7ff fe8a 	bl	8003eca <HAL_I2C_MasterTxCpltCallback>
}
 80041b6:	bf00      	nop
 80041b8:	3710      	adds	r7, #16
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}

080041be <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80041be:	b580      	push	{r7, lr}
 80041c0:	b084      	sub	sp, #16
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041cc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d11d      	bne.n	8004212 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d10b      	bne.n	80041f6 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041e2:	b2da      	uxtb	r2, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041ee:	1c9a      	adds	r2, r3, #2
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80041f4:	e073      	b.n	80042de <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	121b      	asrs	r3, r3, #8
 80041fe:	b2da      	uxtb	r2, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800420a:	1c5a      	adds	r2, r3, #1
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004210:	e065      	b.n	80042de <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004216:	2b01      	cmp	r3, #1
 8004218:	d10b      	bne.n	8004232 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800421e:	b2da      	uxtb	r2, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800422a:	1c5a      	adds	r2, r3, #1
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004230:	e055      	b.n	80042de <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004236:	2b02      	cmp	r3, #2
 8004238:	d151      	bne.n	80042de <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800423a:	7bfb      	ldrb	r3, [r7, #15]
 800423c:	2b22      	cmp	r3, #34	; 0x22
 800423e:	d10d      	bne.n	800425c <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800424e:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004254:	1c5a      	adds	r2, r3, #1
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	651a      	str	r2, [r3, #80]	; 0x50
}
 800425a:	e040      	b.n	80042de <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004260:	b29b      	uxth	r3, r3
 8004262:	2b00      	cmp	r3, #0
 8004264:	d015      	beq.n	8004292 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004266:	7bfb      	ldrb	r3, [r7, #15]
 8004268:	2b21      	cmp	r3, #33	; 0x21
 800426a:	d112      	bne.n	8004292 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004270:	781a      	ldrb	r2, [r3, #0]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427c:	1c5a      	adds	r2, r3, #1
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004286:	b29b      	uxth	r3, r3
 8004288:	3b01      	subs	r3, #1
 800428a:	b29a      	uxth	r2, r3
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004290:	e025      	b.n	80042de <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004296:	b29b      	uxth	r3, r3
 8004298:	2b00      	cmp	r3, #0
 800429a:	d120      	bne.n	80042de <I2C_MemoryTransmit_TXE_BTF+0x120>
 800429c:	7bfb      	ldrb	r3, [r7, #15]
 800429e:	2b21      	cmp	r3, #33	; 0x21
 80042a0:	d11d      	bne.n	80042de <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	685a      	ldr	r2, [r3, #4]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80042b0:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042c0:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2220      	movs	r2, #32
 80042cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f7ff fe36 	bl	8003f4a <HAL_I2C_MemTxCpltCallback>
}
 80042de:	bf00      	nop
 80042e0:	3710      	adds	r7, #16
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}

080042e6 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80042e6:	b580      	push	{r7, lr}
 80042e8:	b084      	sub	sp, #16
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	2b22      	cmp	r3, #34	; 0x22
 80042f8:	f040 80ac 	bne.w	8004454 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004300:	b29b      	uxth	r3, r3
 8004302:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2b03      	cmp	r3, #3
 8004308:	d921      	bls.n	800434e <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	691a      	ldr	r2, [r3, #16]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004314:	b2d2      	uxtb	r2, r2
 8004316:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431c:	1c5a      	adds	r2, r3, #1
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004326:	b29b      	uxth	r3, r3
 8004328:	3b01      	subs	r3, #1
 800432a:	b29a      	uxth	r2, r3
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004334:	b29b      	uxth	r3, r3
 8004336:	2b03      	cmp	r3, #3
 8004338:	f040 808c 	bne.w	8004454 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	685a      	ldr	r2, [r3, #4]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800434a:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800434c:	e082      	b.n	8004454 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004352:	2b02      	cmp	r3, #2
 8004354:	d075      	beq.n	8004442 <I2C_MasterReceive_RXNE+0x15c>
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2b01      	cmp	r3, #1
 800435a:	d002      	beq.n	8004362 <I2C_MasterReceive_RXNE+0x7c>
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d16f      	bne.n	8004442 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f001 fa60 	bl	8005828 <I2C_WaitOnSTOPRequestThroughIT>
 8004368:	4603      	mov	r3, r0
 800436a:	2b00      	cmp	r3, #0
 800436c:	d142      	bne.n	80043f4 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800437c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	685a      	ldr	r2, [r3, #4]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800438c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	691a      	ldr	r2, [r3, #16]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004398:	b2d2      	uxtb	r2, r2
 800439a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a0:	1c5a      	adds	r2, r3, #1
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	3b01      	subs	r3, #1
 80043ae:	b29a      	uxth	r2, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2220      	movs	r2, #32
 80043b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	2b40      	cmp	r3, #64	; 0x40
 80043c6:	d10a      	bne.n	80043de <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f7ff fdc1 	bl	8003f5e <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80043dc:	e03a      	b.n	8004454 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2212      	movs	r2, #18
 80043ea:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f7ff fd76 	bl	8003ede <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80043f2:	e02f      	b.n	8004454 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	685a      	ldr	r2, [r3, #4]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004402:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	691a      	ldr	r2, [r3, #16]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440e:	b2d2      	uxtb	r2, r2
 8004410:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004416:	1c5a      	adds	r2, r3, #1
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004420:	b29b      	uxth	r3, r3
 8004422:	3b01      	subs	r3, #1
 8004424:	b29a      	uxth	r2, r3
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2220      	movs	r2, #32
 800442e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f7ff fd99 	bl	8003f72 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004440:	e008      	b.n	8004454 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	685a      	ldr	r2, [r3, #4]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004450:	605a      	str	r2, [r3, #4]
}
 8004452:	e7ff      	b.n	8004454 <I2C_MasterReceive_RXNE+0x16e>
 8004454:	bf00      	nop
 8004456:	3710      	adds	r7, #16
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}

0800445c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004468:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800446e:	b29b      	uxth	r3, r3
 8004470:	2b04      	cmp	r3, #4
 8004472:	d11b      	bne.n	80044ac <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	685a      	ldr	r2, [r3, #4]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004482:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	691a      	ldr	r2, [r3, #16]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448e:	b2d2      	uxtb	r2, r2
 8004490:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004496:	1c5a      	adds	r2, r3, #1
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	3b01      	subs	r3, #1
 80044a4:	b29a      	uxth	r2, r3
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80044aa:	e0bd      	b.n	8004628 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	2b03      	cmp	r3, #3
 80044b4:	d129      	bne.n	800450a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	685a      	ldr	r2, [r3, #4]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044c4:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2b04      	cmp	r3, #4
 80044ca:	d00a      	beq.n	80044e2 <I2C_MasterReceive_BTF+0x86>
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	d007      	beq.n	80044e2 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044e0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	691a      	ldr	r2, [r3, #16]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ec:	b2d2      	uxtb	r2, r2
 80044ee:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f4:	1c5a      	adds	r2, r3, #1
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044fe:	b29b      	uxth	r3, r3
 8004500:	3b01      	subs	r3, #1
 8004502:	b29a      	uxth	r2, r3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004508:	e08e      	b.n	8004628 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800450e:	b29b      	uxth	r3, r3
 8004510:	2b02      	cmp	r3, #2
 8004512:	d176      	bne.n	8004602 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2b01      	cmp	r3, #1
 8004518:	d002      	beq.n	8004520 <I2C_MasterReceive_BTF+0xc4>
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2b10      	cmp	r3, #16
 800451e:	d108      	bne.n	8004532 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800452e:	601a      	str	r2, [r3, #0]
 8004530:	e019      	b.n	8004566 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2b04      	cmp	r3, #4
 8004536:	d002      	beq.n	800453e <I2C_MasterReceive_BTF+0xe2>
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2b02      	cmp	r3, #2
 800453c:	d108      	bne.n	8004550 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800454c:	601a      	str	r2, [r3, #0]
 800454e:	e00a      	b.n	8004566 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2b10      	cmp	r3, #16
 8004554:	d007      	beq.n	8004566 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004564:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	691a      	ldr	r2, [r3, #16]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004570:	b2d2      	uxtb	r2, r2
 8004572:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004578:	1c5a      	adds	r2, r3, #1
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004582:	b29b      	uxth	r3, r3
 8004584:	3b01      	subs	r3, #1
 8004586:	b29a      	uxth	r2, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	691a      	ldr	r2, [r3, #16]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004596:	b2d2      	uxtb	r2, r2
 8004598:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459e:	1c5a      	adds	r2, r3, #1
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	3b01      	subs	r3, #1
 80045ac:	b29a      	uxth	r2, r3
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	685a      	ldr	r2, [r3, #4]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80045c0:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2220      	movs	r2, #32
 80045c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	2b40      	cmp	r3, #64	; 0x40
 80045d4:	d10a      	bne.n	80045ec <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f7ff fcba 	bl	8003f5e <HAL_I2C_MemRxCpltCallback>
}
 80045ea:	e01d      	b.n	8004628 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2212      	movs	r2, #18
 80045f8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f7ff fc6f 	bl	8003ede <HAL_I2C_MasterRxCpltCallback>
}
 8004600:	e012      	b.n	8004628 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	691a      	ldr	r2, [r3, #16]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460c:	b2d2      	uxtb	r2, r2
 800460e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004614:	1c5a      	adds	r2, r3, #1
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800461e:	b29b      	uxth	r3, r3
 8004620:	3b01      	subs	r3, #1
 8004622:	b29a      	uxth	r2, r3
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004628:	bf00      	nop
 800462a:	3710      	adds	r7, #16
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}

08004630 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004630:	b480      	push	{r7}
 8004632:	b083      	sub	sp, #12
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800463e:	b2db      	uxtb	r3, r3
 8004640:	2b40      	cmp	r3, #64	; 0x40
 8004642:	d117      	bne.n	8004674 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004648:	2b00      	cmp	r3, #0
 800464a:	d109      	bne.n	8004660 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004650:	b2db      	uxtb	r3, r3
 8004652:	461a      	mov	r2, r3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800465c:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800465e:	e067      	b.n	8004730 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004664:	b2db      	uxtb	r3, r3
 8004666:	f043 0301 	orr.w	r3, r3, #1
 800466a:	b2da      	uxtb	r2, r3
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	611a      	str	r2, [r3, #16]
}
 8004672:	e05d      	b.n	8004730 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	691b      	ldr	r3, [r3, #16]
 8004678:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800467c:	d133      	bne.n	80046e6 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004684:	b2db      	uxtb	r3, r3
 8004686:	2b21      	cmp	r3, #33	; 0x21
 8004688:	d109      	bne.n	800469e <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800468e:	b2db      	uxtb	r3, r3
 8004690:	461a      	mov	r2, r3
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800469a:	611a      	str	r2, [r3, #16]
 800469c:	e008      	b.n	80046b0 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	f043 0301 	orr.w	r3, r3, #1
 80046a8:	b2da      	uxtb	r2, r3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d004      	beq.n	80046c2 <I2C_Master_SB+0x92>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d108      	bne.n	80046d4 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d032      	beq.n	8004730 <I2C_Master_SB+0x100>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d02d      	beq.n	8004730 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	685a      	ldr	r2, [r3, #4]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046e2:	605a      	str	r2, [r3, #4]
}
 80046e4:	e024      	b.n	8004730 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d10e      	bne.n	800470c <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	11db      	asrs	r3, r3, #7
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	f003 0306 	and.w	r3, r3, #6
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	f063 030f 	orn	r3, r3, #15
 8004702:	b2da      	uxtb	r2, r3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	611a      	str	r2, [r3, #16]
}
 800470a:	e011      	b.n	8004730 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004710:	2b01      	cmp	r3, #1
 8004712:	d10d      	bne.n	8004730 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004718:	b29b      	uxth	r3, r3
 800471a:	11db      	asrs	r3, r3, #7
 800471c:	b2db      	uxtb	r3, r3
 800471e:	f003 0306 	and.w	r3, r3, #6
 8004722:	b2db      	uxtb	r3, r3
 8004724:	f063 030e 	orn	r3, r3, #14
 8004728:	b2da      	uxtb	r2, r3
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	611a      	str	r2, [r3, #16]
}
 8004730:	bf00      	nop
 8004732:	370c      	adds	r7, #12
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr

0800473c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800473c:	b480      	push	{r7}
 800473e:	b083      	sub	sp, #12
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004748:	b2da      	uxtb	r2, r3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004754:	2b00      	cmp	r3, #0
 8004756:	d004      	beq.n	8004762 <I2C_Master_ADD10+0x26>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800475c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800475e:	2b00      	cmp	r3, #0
 8004760:	d108      	bne.n	8004774 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004766:	2b00      	cmp	r3, #0
 8004768:	d00c      	beq.n	8004784 <I2C_Master_ADD10+0x48>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800476e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004770:	2b00      	cmp	r3, #0
 8004772:	d007      	beq.n	8004784 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	685a      	ldr	r2, [r3, #4]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004782:	605a      	str	r2, [r3, #4]
  }
}
 8004784:	bf00      	nop
 8004786:	370c      	adds	r7, #12
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr

08004790 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004790:	b480      	push	{r7}
 8004792:	b091      	sub	sp, #68	; 0x44
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800479e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ac:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	2b22      	cmp	r3, #34	; 0x22
 80047b8:	f040 8169 	bne.w	8004a8e <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d10f      	bne.n	80047e4 <I2C_Master_ADDR+0x54>
 80047c4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80047c8:	2b40      	cmp	r3, #64	; 0x40
 80047ca:	d10b      	bne.n	80047e4 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047cc:	2300      	movs	r3, #0
 80047ce:	633b      	str	r3, [r7, #48]	; 0x30
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	695b      	ldr	r3, [r3, #20]
 80047d6:	633b      	str	r3, [r7, #48]	; 0x30
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	699b      	ldr	r3, [r3, #24]
 80047de:	633b      	str	r3, [r7, #48]	; 0x30
 80047e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e2:	e160      	b.n	8004aa6 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d11d      	bne.n	8004828 <I2C_Master_ADDR+0x98>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	691b      	ldr	r3, [r3, #16]
 80047f0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80047f4:	d118      	bne.n	8004828 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047f6:	2300      	movs	r3, #0
 80047f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	695b      	ldr	r3, [r3, #20]
 8004800:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	699b      	ldr	r3, [r3, #24]
 8004808:	62fb      	str	r3, [r7, #44]	; 0x2c
 800480a:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800481a:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004820:	1c5a      	adds	r2, r3, #1
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	651a      	str	r2, [r3, #80]	; 0x50
 8004826:	e13e      	b.n	8004aa6 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800482c:	b29b      	uxth	r3, r3
 800482e:	2b00      	cmp	r3, #0
 8004830:	d113      	bne.n	800485a <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004832:	2300      	movs	r3, #0
 8004834:	62bb      	str	r3, [r7, #40]	; 0x28
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	695b      	ldr	r3, [r3, #20]
 800483c:	62bb      	str	r3, [r7, #40]	; 0x28
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	699b      	ldr	r3, [r3, #24]
 8004844:	62bb      	str	r3, [r7, #40]	; 0x28
 8004846:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004856:	601a      	str	r2, [r3, #0]
 8004858:	e115      	b.n	8004a86 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800485e:	b29b      	uxth	r3, r3
 8004860:	2b01      	cmp	r3, #1
 8004862:	f040 808a 	bne.w	800497a <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004868:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800486c:	d137      	bne.n	80048de <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800487c:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004888:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800488c:	d113      	bne.n	80048b6 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800489c:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800489e:	2300      	movs	r3, #0
 80048a0:	627b      	str	r3, [r7, #36]	; 0x24
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	695b      	ldr	r3, [r3, #20]
 80048a8:	627b      	str	r3, [r7, #36]	; 0x24
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	699b      	ldr	r3, [r3, #24]
 80048b0:	627b      	str	r3, [r7, #36]	; 0x24
 80048b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b4:	e0e7      	b.n	8004a86 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048b6:	2300      	movs	r3, #0
 80048b8:	623b      	str	r3, [r7, #32]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	695b      	ldr	r3, [r3, #20]
 80048c0:	623b      	str	r3, [r7, #32]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	699b      	ldr	r3, [r3, #24]
 80048c8:	623b      	str	r3, [r7, #32]
 80048ca:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048da:	601a      	str	r2, [r3, #0]
 80048dc:	e0d3      	b.n	8004a86 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80048de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048e0:	2b08      	cmp	r3, #8
 80048e2:	d02e      	beq.n	8004942 <I2C_Master_ADDR+0x1b2>
 80048e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048e6:	2b20      	cmp	r3, #32
 80048e8:	d02b      	beq.n	8004942 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80048ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048ec:	2b12      	cmp	r3, #18
 80048ee:	d102      	bne.n	80048f6 <I2C_Master_ADDR+0x166>
 80048f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d125      	bne.n	8004942 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80048f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048f8:	2b04      	cmp	r3, #4
 80048fa:	d00e      	beq.n	800491a <I2C_Master_ADDR+0x18a>
 80048fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048fe:	2b02      	cmp	r3, #2
 8004900:	d00b      	beq.n	800491a <I2C_Master_ADDR+0x18a>
 8004902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004904:	2b10      	cmp	r3, #16
 8004906:	d008      	beq.n	800491a <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004916:	601a      	str	r2, [r3, #0]
 8004918:	e007      	b.n	800492a <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004928:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800492a:	2300      	movs	r3, #0
 800492c:	61fb      	str	r3, [r7, #28]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	695b      	ldr	r3, [r3, #20]
 8004934:	61fb      	str	r3, [r7, #28]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	699b      	ldr	r3, [r3, #24]
 800493c:	61fb      	str	r3, [r7, #28]
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	e0a1      	b.n	8004a86 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004950:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004952:	2300      	movs	r3, #0
 8004954:	61bb      	str	r3, [r7, #24]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	695b      	ldr	r3, [r3, #20]
 800495c:	61bb      	str	r3, [r7, #24]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	699b      	ldr	r3, [r3, #24]
 8004964:	61bb      	str	r3, [r7, #24]
 8004966:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004976:	601a      	str	r2, [r3, #0]
 8004978:	e085      	b.n	8004a86 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800497e:	b29b      	uxth	r3, r3
 8004980:	2b02      	cmp	r3, #2
 8004982:	d14d      	bne.n	8004a20 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004986:	2b04      	cmp	r3, #4
 8004988:	d016      	beq.n	80049b8 <I2C_Master_ADDR+0x228>
 800498a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800498c:	2b02      	cmp	r3, #2
 800498e:	d013      	beq.n	80049b8 <I2C_Master_ADDR+0x228>
 8004990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004992:	2b10      	cmp	r3, #16
 8004994:	d010      	beq.n	80049b8 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049a4:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049b4:	601a      	str	r2, [r3, #0]
 80049b6:	e007      	b.n	80049c8 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80049c6:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049d6:	d117      	bne.n	8004a08 <I2C_Master_ADDR+0x278>
 80049d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049da:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80049de:	d00b      	beq.n	80049f8 <I2C_Master_ADDR+0x268>
 80049e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d008      	beq.n	80049f8 <I2C_Master_ADDR+0x268>
 80049e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049e8:	2b08      	cmp	r3, #8
 80049ea:	d005      	beq.n	80049f8 <I2C_Master_ADDR+0x268>
 80049ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ee:	2b10      	cmp	r3, #16
 80049f0:	d002      	beq.n	80049f8 <I2C_Master_ADDR+0x268>
 80049f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049f4:	2b20      	cmp	r3, #32
 80049f6:	d107      	bne.n	8004a08 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	685a      	ldr	r2, [r3, #4]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004a06:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a08:	2300      	movs	r3, #0
 8004a0a:	617b      	str	r3, [r7, #20]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	695b      	ldr	r3, [r3, #20]
 8004a12:	617b      	str	r3, [r7, #20]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	699b      	ldr	r3, [r3, #24]
 8004a1a:	617b      	str	r3, [r7, #20]
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	e032      	b.n	8004a86 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a2e:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a3e:	d117      	bne.n	8004a70 <I2C_Master_ADDR+0x2e0>
 8004a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a42:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a46:	d00b      	beq.n	8004a60 <I2C_Master_ADDR+0x2d0>
 8004a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d008      	beq.n	8004a60 <I2C_Master_ADDR+0x2d0>
 8004a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a50:	2b08      	cmp	r3, #8
 8004a52:	d005      	beq.n	8004a60 <I2C_Master_ADDR+0x2d0>
 8004a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a56:	2b10      	cmp	r3, #16
 8004a58:	d002      	beq.n	8004a60 <I2C_Master_ADDR+0x2d0>
 8004a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a5c:	2b20      	cmp	r3, #32
 8004a5e:	d107      	bne.n	8004a70 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	685a      	ldr	r2, [r3, #4]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004a6e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a70:	2300      	movs	r3, #0
 8004a72:	613b      	str	r3, [r7, #16]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	695b      	ldr	r3, [r3, #20]
 8004a7a:	613b      	str	r3, [r7, #16]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	699b      	ldr	r3, [r3, #24]
 8004a82:	613b      	str	r3, [r7, #16]
 8004a84:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004a8c:	e00b      	b.n	8004aa6 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a8e:	2300      	movs	r3, #0
 8004a90:	60fb      	str	r3, [r7, #12]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	695b      	ldr	r3, [r3, #20]
 8004a98:	60fb      	str	r3, [r7, #12]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	699b      	ldr	r3, [r3, #24]
 8004aa0:	60fb      	str	r3, [r7, #12]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
}
 8004aa4:	e7ff      	b.n	8004aa6 <I2C_Master_ADDR+0x316>
 8004aa6:	bf00      	nop
 8004aa8:	3744      	adds	r7, #68	; 0x44
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr

08004ab2 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004ab2:	b580      	push	{r7, lr}
 8004ab4:	b084      	sub	sp, #16
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ac0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d02b      	beq.n	8004b24 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad0:	781a      	ldrb	r2, [r3, #0]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004adc:	1c5a      	adds	r2, r3, #1
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	3b01      	subs	r3, #1
 8004aea:	b29a      	uxth	r2, r3
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d114      	bne.n	8004b24 <I2C_SlaveTransmit_TXE+0x72>
 8004afa:	7bfb      	ldrb	r3, [r7, #15]
 8004afc:	2b29      	cmp	r3, #41	; 0x29
 8004afe:	d111      	bne.n	8004b24 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	685a      	ldr	r2, [r3, #4]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b0e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2221      	movs	r2, #33	; 0x21
 8004b14:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2228      	movs	r2, #40	; 0x28
 8004b1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f7ff f9e7 	bl	8003ef2 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004b24:	bf00      	nop
 8004b26:	3710      	adds	r7, #16
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b083      	sub	sp, #12
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d011      	beq.n	8004b62 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b42:	781a      	ldrb	r2, [r3, #0]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4e:	1c5a      	adds	r2, r3, #1
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	3b01      	subs	r3, #1
 8004b5c:	b29a      	uxth	r2, r3
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004b62:	bf00      	nop
 8004b64:	370c      	adds	r7, #12
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr

08004b6e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004b6e:	b580      	push	{r7, lr}
 8004b70:	b084      	sub	sp, #16
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b7c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d02c      	beq.n	8004be2 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	691a      	ldr	r2, [r3, #16]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b92:	b2d2      	uxtb	r2, r2
 8004b94:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9a:	1c5a      	adds	r2, r3, #1
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	3b01      	subs	r3, #1
 8004ba8:	b29a      	uxth	r2, r3
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d114      	bne.n	8004be2 <I2C_SlaveReceive_RXNE+0x74>
 8004bb8:	7bfb      	ldrb	r3, [r7, #15]
 8004bba:	2b2a      	cmp	r3, #42	; 0x2a
 8004bbc:	d111      	bne.n	8004be2 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	685a      	ldr	r2, [r3, #4]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bcc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2222      	movs	r2, #34	; 0x22
 8004bd2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2228      	movs	r2, #40	; 0x28
 8004bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f7ff f992 	bl	8003f06 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004be2:	bf00      	nop
 8004be4:	3710      	adds	r7, #16
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}

08004bea <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004bea:	b480      	push	{r7}
 8004bec:	b083      	sub	sp, #12
 8004bee:	af00      	add	r7, sp, #0
 8004bf0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d012      	beq.n	8004c22 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	691a      	ldr	r2, [r3, #16]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c06:	b2d2      	uxtb	r2, r2
 8004c08:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0e:	1c5a      	adds	r2, r3, #1
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	3b01      	subs	r3, #1
 8004c1c:	b29a      	uxth	r2, r3
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004c22:	bf00      	nop
 8004c24:	370c      	adds	r7, #12
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr

08004c2e <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004c2e:	b580      	push	{r7, lr}
 8004c30:	b084      	sub	sp, #16
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	6078      	str	r0, [r7, #4]
 8004c36:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004c48:	2b28      	cmp	r3, #40	; 0x28
 8004c4a:	d127      	bne.n	8004c9c <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	685a      	ldr	r2, [r3, #4]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c5a:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	089b      	lsrs	r3, r3, #2
 8004c60:	f003 0301 	and.w	r3, r3, #1
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d101      	bne.n	8004c6c <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	09db      	lsrs	r3, r3, #7
 8004c70:	f003 0301 	and.w	r3, r3, #1
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d103      	bne.n	8004c80 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	81bb      	strh	r3, [r7, #12]
 8004c7e:	e002      	b.n	8004c86 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	699b      	ldr	r3, [r3, #24]
 8004c84:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004c8e:	89ba      	ldrh	r2, [r7, #12]
 8004c90:	7bfb      	ldrb	r3, [r7, #15]
 8004c92:	4619      	mov	r1, r3
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f7ff f940 	bl	8003f1a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004c9a:	e00e      	b.n	8004cba <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	60bb      	str	r3, [r7, #8]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	695b      	ldr	r3, [r3, #20]
 8004ca6:	60bb      	str	r3, [r7, #8]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	699b      	ldr	r3, [r3, #24]
 8004cae:	60bb      	str	r3, [r7, #8]
 8004cb0:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004cba:	bf00      	nop
 8004cbc:	3710      	adds	r7, #16
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}
	...

08004cc4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b084      	sub	sp, #16
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cd2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	685a      	ldr	r2, [r3, #4]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004ce2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	60bb      	str	r3, [r7, #8]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	695b      	ldr	r3, [r3, #20]
 8004cee:	60bb      	str	r3, [r7, #8]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f042 0201 	orr.w	r2, r2, #1
 8004cfe:	601a      	str	r2, [r3, #0]
 8004d00:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d10:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d20:	d172      	bne.n	8004e08 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004d22:	7bfb      	ldrb	r3, [r7, #15]
 8004d24:	2b22      	cmp	r3, #34	; 0x22
 8004d26:	d002      	beq.n	8004d2e <I2C_Slave_STOPF+0x6a>
 8004d28:	7bfb      	ldrb	r3, [r7, #15]
 8004d2a:	2b2a      	cmp	r3, #42	; 0x2a
 8004d2c:	d135      	bne.n	8004d9a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	b29a      	uxth	r2, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d005      	beq.n	8004d52 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4a:	f043 0204 	orr.w	r2, r3, #4
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	685a      	ldr	r2, [r3, #4]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d60:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d66:	4618      	mov	r0, r3
 8004d68:	f7fe f81a 	bl	8002da0 <HAL_DMA_GetState>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d049      	beq.n	8004e06 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d76:	4a69      	ldr	r2, [pc, #420]	; (8004f1c <I2C_Slave_STOPF+0x258>)
 8004d78:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f7fd fe62 	bl	8002a48 <HAL_DMA_Abort_IT>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d03d      	beq.n	8004e06 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d90:	687a      	ldr	r2, [r7, #4]
 8004d92:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004d94:	4610      	mov	r0, r2
 8004d96:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004d98:	e035      	b.n	8004e06 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	b29a      	uxth	r2, r3
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d005      	beq.n	8004dbe <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db6:	f043 0204 	orr.w	r2, r3, #4
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	685a      	ldr	r2, [r3, #4]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004dcc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f7fd ffe4 	bl	8002da0 <HAL_DMA_GetState>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d014      	beq.n	8004e08 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004de2:	4a4e      	ldr	r2, [pc, #312]	; (8004f1c <I2C_Slave_STOPF+0x258>)
 8004de4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dea:	4618      	mov	r0, r3
 8004dec:	f7fd fe2c 	bl	8002a48 <HAL_DMA_Abort_IT>
 8004df0:	4603      	mov	r3, r0
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d008      	beq.n	8004e08 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dfc:	687a      	ldr	r2, [r7, #4]
 8004dfe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004e00:	4610      	mov	r0, r2
 8004e02:	4798      	blx	r3
 8004e04:	e000      	b.n	8004e08 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004e06:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d03e      	beq.n	8004e90 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	695b      	ldr	r3, [r3, #20]
 8004e18:	f003 0304 	and.w	r3, r3, #4
 8004e1c:	2b04      	cmp	r3, #4
 8004e1e:	d112      	bne.n	8004e46 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	691a      	ldr	r2, [r3, #16]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2a:	b2d2      	uxtb	r2, r2
 8004e2c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e32:	1c5a      	adds	r2, r3, #1
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	3b01      	subs	r3, #1
 8004e40:	b29a      	uxth	r2, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	695b      	ldr	r3, [r3, #20]
 8004e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e50:	2b40      	cmp	r3, #64	; 0x40
 8004e52:	d112      	bne.n	8004e7a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	691a      	ldr	r2, [r3, #16]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5e:	b2d2      	uxtb	r2, r2
 8004e60:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e66:	1c5a      	adds	r2, r3, #1
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	3b01      	subs	r3, #1
 8004e74:	b29a      	uxth	r2, r3
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d005      	beq.n	8004e90 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e88:	f043 0204 	orr.w	r2, r3, #4
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d003      	beq.n	8004ea0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f000 f843 	bl	8004f24 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004e9e:	e039      	b.n	8004f14 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004ea0:	7bfb      	ldrb	r3, [r7, #15]
 8004ea2:	2b2a      	cmp	r3, #42	; 0x2a
 8004ea4:	d109      	bne.n	8004eba <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2228      	movs	r2, #40	; 0x28
 8004eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f7ff f826 	bl	8003f06 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	2b28      	cmp	r3, #40	; 0x28
 8004ec4:	d111      	bne.n	8004eea <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a15      	ldr	r2, [pc, #84]	; (8004f20 <I2C_Slave_STOPF+0x25c>)
 8004eca:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2220      	movs	r2, #32
 8004ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2200      	movs	r2, #0
 8004ede:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f7ff f827 	bl	8003f36 <HAL_I2C_ListenCpltCallback>
}
 8004ee8:	e014      	b.n	8004f14 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eee:	2b22      	cmp	r3, #34	; 0x22
 8004ef0:	d002      	beq.n	8004ef8 <I2C_Slave_STOPF+0x234>
 8004ef2:	7bfb      	ldrb	r3, [r7, #15]
 8004ef4:	2b22      	cmp	r3, #34	; 0x22
 8004ef6:	d10d      	bne.n	8004f14 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2200      	movs	r2, #0
 8004efc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2220      	movs	r2, #32
 8004f02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f7fe fff9 	bl	8003f06 <HAL_I2C_SlaveRxCpltCallback>
}
 8004f14:	bf00      	nop
 8004f16:	3710      	adds	r7, #16
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}
 8004f1c:	08005429 	.word	0x08005429
 8004f20:	ffff0000 	.word	0xffff0000

08004f24 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b084      	sub	sp, #16
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f32:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f3a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004f3c:	7bbb      	ldrb	r3, [r7, #14]
 8004f3e:	2b10      	cmp	r3, #16
 8004f40:	d002      	beq.n	8004f48 <I2C_ITError+0x24>
 8004f42:	7bbb      	ldrb	r3, [r7, #14]
 8004f44:	2b40      	cmp	r3, #64	; 0x40
 8004f46:	d10a      	bne.n	8004f5e <I2C_ITError+0x3a>
 8004f48:	7bfb      	ldrb	r3, [r7, #15]
 8004f4a:	2b22      	cmp	r3, #34	; 0x22
 8004f4c:	d107      	bne.n	8004f5e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f5c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004f5e:	7bfb      	ldrb	r3, [r7, #15]
 8004f60:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004f64:	2b28      	cmp	r3, #40	; 0x28
 8004f66:	d107      	bne.n	8004f78 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2228      	movs	r2, #40	; 0x28
 8004f72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004f76:	e015      	b.n	8004fa4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f86:	d00a      	beq.n	8004f9e <I2C_ITError+0x7a>
 8004f88:	7bfb      	ldrb	r3, [r7, #15]
 8004f8a:	2b60      	cmp	r3, #96	; 0x60
 8004f8c:	d007      	beq.n	8004f9e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2220      	movs	r2, #32
 8004f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fb2:	d162      	bne.n	800507a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	685a      	ldr	r2, [r3, #4]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fc2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d020      	beq.n	8005014 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fd6:	4a6a      	ldr	r2, [pc, #424]	; (8005180 <I2C_ITError+0x25c>)
 8004fd8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f7fd fd32 	bl	8002a48 <HAL_DMA_Abort_IT>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	f000 8089 	beq.w	80050fe <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f022 0201 	bic.w	r2, r2, #1
 8004ffa:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2220      	movs	r2, #32
 8005000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005008:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800500e:	4610      	mov	r0, r2
 8005010:	4798      	blx	r3
 8005012:	e074      	b.n	80050fe <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005018:	4a59      	ldr	r2, [pc, #356]	; (8005180 <I2C_ITError+0x25c>)
 800501a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005020:	4618      	mov	r0, r3
 8005022:	f7fd fd11 	bl	8002a48 <HAL_DMA_Abort_IT>
 8005026:	4603      	mov	r3, r0
 8005028:	2b00      	cmp	r3, #0
 800502a:	d068      	beq.n	80050fe <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	695b      	ldr	r3, [r3, #20]
 8005032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005036:	2b40      	cmp	r3, #64	; 0x40
 8005038:	d10b      	bne.n	8005052 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	691a      	ldr	r2, [r3, #16]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005044:	b2d2      	uxtb	r2, r2
 8005046:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504c:	1c5a      	adds	r2, r3, #1
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f022 0201 	bic.w	r2, r2, #1
 8005060:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2220      	movs	r2, #32
 8005066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800506e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005074:	4610      	mov	r0, r2
 8005076:	4798      	blx	r3
 8005078:	e041      	b.n	80050fe <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005080:	b2db      	uxtb	r3, r3
 8005082:	2b60      	cmp	r3, #96	; 0x60
 8005084:	d125      	bne.n	80050d2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2220      	movs	r2, #32
 800508a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	695b      	ldr	r3, [r3, #20]
 800509a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800509e:	2b40      	cmp	r3, #64	; 0x40
 80050a0:	d10b      	bne.n	80050ba <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	691a      	ldr	r2, [r3, #16]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ac:	b2d2      	uxtb	r2, r2
 80050ae:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b4:	1c5a      	adds	r2, r3, #1
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f022 0201 	bic.w	r2, r2, #1
 80050c8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f7fe ff5b 	bl	8003f86 <HAL_I2C_AbortCpltCallback>
 80050d0:	e015      	b.n	80050fe <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	695b      	ldr	r3, [r3, #20]
 80050d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050dc:	2b40      	cmp	r3, #64	; 0x40
 80050de:	d10b      	bne.n	80050f8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	691a      	ldr	r2, [r3, #16]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ea:	b2d2      	uxtb	r2, r2
 80050ec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f2:	1c5a      	adds	r2, r3, #1
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f7fe ff3a 	bl	8003f72 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005102:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	f003 0301 	and.w	r3, r3, #1
 800510a:	2b00      	cmp	r3, #0
 800510c:	d10e      	bne.n	800512c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005114:	2b00      	cmp	r3, #0
 8005116:	d109      	bne.n	800512c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800511e:	2b00      	cmp	r3, #0
 8005120:	d104      	bne.n	800512c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005128:	2b00      	cmp	r3, #0
 800512a:	d007      	beq.n	800513c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	685a      	ldr	r2, [r3, #4]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800513a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005142:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005148:	f003 0304 	and.w	r3, r3, #4
 800514c:	2b04      	cmp	r3, #4
 800514e:	d113      	bne.n	8005178 <I2C_ITError+0x254>
 8005150:	7bfb      	ldrb	r3, [r7, #15]
 8005152:	2b28      	cmp	r3, #40	; 0x28
 8005154:	d110      	bne.n	8005178 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a0a      	ldr	r2, [pc, #40]	; (8005184 <I2C_ITError+0x260>)
 800515a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2200      	movs	r2, #0
 8005160:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2220      	movs	r2, #32
 8005166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f7fe fedf 	bl	8003f36 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005178:	bf00      	nop
 800517a:	3710      	adds	r7, #16
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}
 8005180:	08005429 	.word	0x08005429
 8005184:	ffff0000 	.word	0xffff0000

08005188 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b088      	sub	sp, #32
 800518c:	af02      	add	r7, sp, #8
 800518e:	60f8      	str	r0, [r7, #12]
 8005190:	607a      	str	r2, [r7, #4]
 8005192:	603b      	str	r3, [r7, #0]
 8005194:	460b      	mov	r3, r1
 8005196:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800519c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	2b08      	cmp	r3, #8
 80051a2:	d006      	beq.n	80051b2 <I2C_MasterRequestWrite+0x2a>
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d003      	beq.n	80051b2 <I2C_MasterRequestWrite+0x2a>
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80051b0:	d108      	bne.n	80051c4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051c0:	601a      	str	r2, [r3, #0]
 80051c2:	e00b      	b.n	80051dc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051c8:	2b12      	cmp	r3, #18
 80051ca:	d107      	bne.n	80051dc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051da:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	9300      	str	r3, [sp, #0]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2200      	movs	r2, #0
 80051e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80051e8:	68f8      	ldr	r0, [r7, #12]
 80051ea:	f000 f9c5 	bl	8005578 <I2C_WaitOnFlagUntilTimeout>
 80051ee:	4603      	mov	r3, r0
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d00d      	beq.n	8005210 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005202:	d103      	bne.n	800520c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f44f 7200 	mov.w	r2, #512	; 0x200
 800520a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800520c:	2303      	movs	r3, #3
 800520e:	e035      	b.n	800527c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	691b      	ldr	r3, [r3, #16]
 8005214:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005218:	d108      	bne.n	800522c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800521a:	897b      	ldrh	r3, [r7, #10]
 800521c:	b2db      	uxtb	r3, r3
 800521e:	461a      	mov	r2, r3
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005228:	611a      	str	r2, [r3, #16]
 800522a:	e01b      	b.n	8005264 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800522c:	897b      	ldrh	r3, [r7, #10]
 800522e:	11db      	asrs	r3, r3, #7
 8005230:	b2db      	uxtb	r3, r3
 8005232:	f003 0306 	and.w	r3, r3, #6
 8005236:	b2db      	uxtb	r3, r3
 8005238:	f063 030f 	orn	r3, r3, #15
 800523c:	b2da      	uxtb	r2, r3
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	490e      	ldr	r1, [pc, #56]	; (8005284 <I2C_MasterRequestWrite+0xfc>)
 800524a:	68f8      	ldr	r0, [r7, #12]
 800524c:	f000 f9eb 	bl	8005626 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005250:	4603      	mov	r3, r0
 8005252:	2b00      	cmp	r3, #0
 8005254:	d001      	beq.n	800525a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e010      	b.n	800527c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800525a:	897b      	ldrh	r3, [r7, #10]
 800525c:	b2da      	uxtb	r2, r3
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	4907      	ldr	r1, [pc, #28]	; (8005288 <I2C_MasterRequestWrite+0x100>)
 800526a:	68f8      	ldr	r0, [r7, #12]
 800526c:	f000 f9db 	bl	8005626 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005270:	4603      	mov	r3, r0
 8005272:	2b00      	cmp	r3, #0
 8005274:	d001      	beq.n	800527a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e000      	b.n	800527c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800527a:	2300      	movs	r3, #0
}
 800527c:	4618      	mov	r0, r3
 800527e:	3718      	adds	r7, #24
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}
 8005284:	00010008 	.word	0x00010008
 8005288:	00010002 	.word	0x00010002

0800528c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b088      	sub	sp, #32
 8005290:	af02      	add	r7, sp, #8
 8005292:	60f8      	str	r0, [r7, #12]
 8005294:	607a      	str	r2, [r7, #4]
 8005296:	603b      	str	r3, [r7, #0]
 8005298:	460b      	mov	r3, r1
 800529a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80052b0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	2b08      	cmp	r3, #8
 80052b6:	d006      	beq.n	80052c6 <I2C_MasterRequestRead+0x3a>
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d003      	beq.n	80052c6 <I2C_MasterRequestRead+0x3a>
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80052c4:	d108      	bne.n	80052d8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052d4:	601a      	str	r2, [r3, #0]
 80052d6:	e00b      	b.n	80052f0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052dc:	2b11      	cmp	r3, #17
 80052de:	d107      	bne.n	80052f0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052ee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	9300      	str	r3, [sp, #0]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2200      	movs	r2, #0
 80052f8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80052fc:	68f8      	ldr	r0, [r7, #12]
 80052fe:	f000 f93b 	bl	8005578 <I2C_WaitOnFlagUntilTimeout>
 8005302:	4603      	mov	r3, r0
 8005304:	2b00      	cmp	r3, #0
 8005306:	d00d      	beq.n	8005324 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005312:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005316:	d103      	bne.n	8005320 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800531e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005320:	2303      	movs	r3, #3
 8005322:	e079      	b.n	8005418 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	691b      	ldr	r3, [r3, #16]
 8005328:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800532c:	d108      	bne.n	8005340 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800532e:	897b      	ldrh	r3, [r7, #10]
 8005330:	b2db      	uxtb	r3, r3
 8005332:	f043 0301 	orr.w	r3, r3, #1
 8005336:	b2da      	uxtb	r2, r3
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	611a      	str	r2, [r3, #16]
 800533e:	e05f      	b.n	8005400 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005340:	897b      	ldrh	r3, [r7, #10]
 8005342:	11db      	asrs	r3, r3, #7
 8005344:	b2db      	uxtb	r3, r3
 8005346:	f003 0306 	and.w	r3, r3, #6
 800534a:	b2db      	uxtb	r3, r3
 800534c:	f063 030f 	orn	r3, r3, #15
 8005350:	b2da      	uxtb	r2, r3
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	4930      	ldr	r1, [pc, #192]	; (8005420 <I2C_MasterRequestRead+0x194>)
 800535e:	68f8      	ldr	r0, [r7, #12]
 8005360:	f000 f961 	bl	8005626 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005364:	4603      	mov	r3, r0
 8005366:	2b00      	cmp	r3, #0
 8005368:	d001      	beq.n	800536e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	e054      	b.n	8005418 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800536e:	897b      	ldrh	r3, [r7, #10]
 8005370:	b2da      	uxtb	r2, r3
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	4929      	ldr	r1, [pc, #164]	; (8005424 <I2C_MasterRequestRead+0x198>)
 800537e:	68f8      	ldr	r0, [r7, #12]
 8005380:	f000 f951 	bl	8005626 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005384:	4603      	mov	r3, r0
 8005386:	2b00      	cmp	r3, #0
 8005388:	d001      	beq.n	800538e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	e044      	b.n	8005418 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800538e:	2300      	movs	r3, #0
 8005390:	613b      	str	r3, [r7, #16]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	695b      	ldr	r3, [r3, #20]
 8005398:	613b      	str	r3, [r7, #16]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	699b      	ldr	r3, [r3, #24]
 80053a0:	613b      	str	r3, [r7, #16]
 80053a2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053b2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	9300      	str	r3, [sp, #0]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2200      	movs	r2, #0
 80053bc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80053c0:	68f8      	ldr	r0, [r7, #12]
 80053c2:	f000 f8d9 	bl	8005578 <I2C_WaitOnFlagUntilTimeout>
 80053c6:	4603      	mov	r3, r0
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d00d      	beq.n	80053e8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053da:	d103      	bne.n	80053e4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053e2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80053e4:	2303      	movs	r3, #3
 80053e6:	e017      	b.n	8005418 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80053e8:	897b      	ldrh	r3, [r7, #10]
 80053ea:	11db      	asrs	r3, r3, #7
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	f003 0306 	and.w	r3, r3, #6
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	f063 030e 	orn	r3, r3, #14
 80053f8:	b2da      	uxtb	r2, r3
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	4907      	ldr	r1, [pc, #28]	; (8005424 <I2C_MasterRequestRead+0x198>)
 8005406:	68f8      	ldr	r0, [r7, #12]
 8005408:	f000 f90d 	bl	8005626 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800540c:	4603      	mov	r3, r0
 800540e:	2b00      	cmp	r3, #0
 8005410:	d001      	beq.n	8005416 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	e000      	b.n	8005418 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005416:	2300      	movs	r3, #0
}
 8005418:	4618      	mov	r0, r3
 800541a:	3718      	adds	r7, #24
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}
 8005420:	00010008 	.word	0x00010008
 8005424:	00010002 	.word	0x00010002

08005428 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b086      	sub	sp, #24
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005430:	2300      	movs	r3, #0
 8005432:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005438:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005440:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005442:	4b4b      	ldr	r3, [pc, #300]	; (8005570 <I2C_DMAAbort+0x148>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	08db      	lsrs	r3, r3, #3
 8005448:	4a4a      	ldr	r2, [pc, #296]	; (8005574 <I2C_DMAAbort+0x14c>)
 800544a:	fba2 2303 	umull	r2, r3, r2, r3
 800544e:	0a1a      	lsrs	r2, r3, #8
 8005450:	4613      	mov	r3, r2
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	4413      	add	r3, r2
 8005456:	00da      	lsls	r2, r3, #3
 8005458:	1ad3      	subs	r3, r2, r3
 800545a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d106      	bne.n	8005470 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005466:	f043 0220 	orr.w	r2, r3, #32
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800546e:	e00a      	b.n	8005486 <I2C_DMAAbort+0x5e>
    }
    count--;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	3b01      	subs	r3, #1
 8005474:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005480:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005484:	d0ea      	beq.n	800545c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800548a:	2b00      	cmp	r3, #0
 800548c:	d003      	beq.n	8005496 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005492:	2200      	movs	r2, #0
 8005494:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800549a:	2b00      	cmp	r3, #0
 800549c:	d003      	beq.n	80054a6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a2:	2200      	movs	r2, #0
 80054a4:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054b4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	2200      	movs	r2, #0
 80054ba:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d003      	beq.n	80054cc <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054c8:	2200      	movs	r2, #0
 80054ca:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d003      	beq.n	80054dc <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054d8:	2200      	movs	r2, #0
 80054da:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f022 0201 	bic.w	r2, r2, #1
 80054ea:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	2b60      	cmp	r3, #96	; 0x60
 80054f6:	d10e      	bne.n	8005516 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	2220      	movs	r2, #32
 80054fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	2200      	movs	r2, #0
 8005504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	2200      	movs	r2, #0
 800550c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800550e:	6978      	ldr	r0, [r7, #20]
 8005510:	f7fe fd39 	bl	8003f86 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005514:	e027      	b.n	8005566 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005516:	7cfb      	ldrb	r3, [r7, #19]
 8005518:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800551c:	2b28      	cmp	r3, #40	; 0x28
 800551e:	d117      	bne.n	8005550 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f042 0201 	orr.w	r2, r2, #1
 800552e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800553e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	2200      	movs	r2, #0
 8005544:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	2228      	movs	r2, #40	; 0x28
 800554a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800554e:	e007      	b.n	8005560 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	2220      	movs	r2, #32
 8005554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	2200      	movs	r2, #0
 800555c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005560:	6978      	ldr	r0, [r7, #20]
 8005562:	f7fe fd06 	bl	8003f72 <HAL_I2C_ErrorCallback>
}
 8005566:	bf00      	nop
 8005568:	3718      	adds	r7, #24
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}
 800556e:	bf00      	nop
 8005570:	20000034 	.word	0x20000034
 8005574:	14f8b589 	.word	0x14f8b589

08005578 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b084      	sub	sp, #16
 800557c:	af00      	add	r7, sp, #0
 800557e:	60f8      	str	r0, [r7, #12]
 8005580:	60b9      	str	r1, [r7, #8]
 8005582:	603b      	str	r3, [r7, #0]
 8005584:	4613      	mov	r3, r2
 8005586:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005588:	e025      	b.n	80055d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005590:	d021      	beq.n	80055d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005592:	f7fd f811 	bl	80025b8 <HAL_GetTick>
 8005596:	4602      	mov	r2, r0
 8005598:	69bb      	ldr	r3, [r7, #24]
 800559a:	1ad3      	subs	r3, r2, r3
 800559c:	683a      	ldr	r2, [r7, #0]
 800559e:	429a      	cmp	r2, r3
 80055a0:	d302      	bcc.n	80055a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d116      	bne.n	80055d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2200      	movs	r2, #0
 80055ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2220      	movs	r2, #32
 80055b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2200      	movs	r2, #0
 80055ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c2:	f043 0220 	orr.w	r2, r3, #32
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2200      	movs	r2, #0
 80055ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	e023      	b.n	800561e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	0c1b      	lsrs	r3, r3, #16
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d10d      	bne.n	80055fc <I2C_WaitOnFlagUntilTimeout+0x84>
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	695b      	ldr	r3, [r3, #20]
 80055e6:	43da      	mvns	r2, r3
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	4013      	ands	r3, r2
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	bf0c      	ite	eq
 80055f2:	2301      	moveq	r3, #1
 80055f4:	2300      	movne	r3, #0
 80055f6:	b2db      	uxtb	r3, r3
 80055f8:	461a      	mov	r2, r3
 80055fa:	e00c      	b.n	8005616 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	699b      	ldr	r3, [r3, #24]
 8005602:	43da      	mvns	r2, r3
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	4013      	ands	r3, r2
 8005608:	b29b      	uxth	r3, r3
 800560a:	2b00      	cmp	r3, #0
 800560c:	bf0c      	ite	eq
 800560e:	2301      	moveq	r3, #1
 8005610:	2300      	movne	r3, #0
 8005612:	b2db      	uxtb	r3, r3
 8005614:	461a      	mov	r2, r3
 8005616:	79fb      	ldrb	r3, [r7, #7]
 8005618:	429a      	cmp	r2, r3
 800561a:	d0b6      	beq.n	800558a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800561c:	2300      	movs	r3, #0
}
 800561e:	4618      	mov	r0, r3
 8005620:	3710      	adds	r7, #16
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}

08005626 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005626:	b580      	push	{r7, lr}
 8005628:	b084      	sub	sp, #16
 800562a:	af00      	add	r7, sp, #0
 800562c:	60f8      	str	r0, [r7, #12]
 800562e:	60b9      	str	r1, [r7, #8]
 8005630:	607a      	str	r2, [r7, #4]
 8005632:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005634:	e051      	b.n	80056da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	695b      	ldr	r3, [r3, #20]
 800563c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005640:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005644:	d123      	bne.n	800568e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005654:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800565e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2200      	movs	r2, #0
 8005664:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2220      	movs	r2, #32
 800566a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2200      	movs	r2, #0
 8005672:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800567a:	f043 0204 	orr.w	r2, r3, #4
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2200      	movs	r2, #0
 8005686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	e046      	b.n	800571c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005694:	d021      	beq.n	80056da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005696:	f7fc ff8f 	bl	80025b8 <HAL_GetTick>
 800569a:	4602      	mov	r2, r0
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	1ad3      	subs	r3, r2, r3
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	429a      	cmp	r2, r3
 80056a4:	d302      	bcc.n	80056ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d116      	bne.n	80056da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2200      	movs	r2, #0
 80056b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2220      	movs	r2, #32
 80056b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2200      	movs	r2, #0
 80056be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c6:	f043 0220 	orr.w	r2, r3, #32
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2200      	movs	r2, #0
 80056d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	e020      	b.n	800571c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	0c1b      	lsrs	r3, r3, #16
 80056de:	b2db      	uxtb	r3, r3
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d10c      	bne.n	80056fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	695b      	ldr	r3, [r3, #20]
 80056ea:	43da      	mvns	r2, r3
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	4013      	ands	r3, r2
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	bf14      	ite	ne
 80056f6:	2301      	movne	r3, #1
 80056f8:	2300      	moveq	r3, #0
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	e00b      	b.n	8005716 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	699b      	ldr	r3, [r3, #24]
 8005704:	43da      	mvns	r2, r3
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	4013      	ands	r3, r2
 800570a:	b29b      	uxth	r3, r3
 800570c:	2b00      	cmp	r3, #0
 800570e:	bf14      	ite	ne
 8005710:	2301      	movne	r3, #1
 8005712:	2300      	moveq	r3, #0
 8005714:	b2db      	uxtb	r3, r3
 8005716:	2b00      	cmp	r3, #0
 8005718:	d18d      	bne.n	8005636 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800571a:	2300      	movs	r3, #0
}
 800571c:	4618      	mov	r0, r3
 800571e:	3710      	adds	r7, #16
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}

08005724 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b084      	sub	sp, #16
 8005728:	af00      	add	r7, sp, #0
 800572a:	60f8      	str	r0, [r7, #12]
 800572c:	60b9      	str	r1, [r7, #8]
 800572e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005730:	e02d      	b.n	800578e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005732:	68f8      	ldr	r0, [r7, #12]
 8005734:	f000 f900 	bl	8005938 <I2C_IsAcknowledgeFailed>
 8005738:	4603      	mov	r3, r0
 800573a:	2b00      	cmp	r3, #0
 800573c:	d001      	beq.n	8005742 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	e02d      	b.n	800579e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005748:	d021      	beq.n	800578e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800574a:	f7fc ff35 	bl	80025b8 <HAL_GetTick>
 800574e:	4602      	mov	r2, r0
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	1ad3      	subs	r3, r2, r3
 8005754:	68ba      	ldr	r2, [r7, #8]
 8005756:	429a      	cmp	r2, r3
 8005758:	d302      	bcc.n	8005760 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d116      	bne.n	800578e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2200      	movs	r2, #0
 8005764:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2220      	movs	r2, #32
 800576a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2200      	movs	r2, #0
 8005772:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800577a:	f043 0220 	orr.w	r2, r3, #32
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2200      	movs	r2, #0
 8005786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	e007      	b.n	800579e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	695b      	ldr	r3, [r3, #20]
 8005794:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005798:	2b80      	cmp	r3, #128	; 0x80
 800579a:	d1ca      	bne.n	8005732 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800579c:	2300      	movs	r3, #0
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3710      	adds	r7, #16
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}

080057a6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80057a6:	b580      	push	{r7, lr}
 80057a8:	b084      	sub	sp, #16
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	60f8      	str	r0, [r7, #12]
 80057ae:	60b9      	str	r1, [r7, #8]
 80057b0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80057b2:	e02d      	b.n	8005810 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80057b4:	68f8      	ldr	r0, [r7, #12]
 80057b6:	f000 f8bf 	bl	8005938 <I2C_IsAcknowledgeFailed>
 80057ba:	4603      	mov	r3, r0
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d001      	beq.n	80057c4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
 80057c2:	e02d      	b.n	8005820 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057ca:	d021      	beq.n	8005810 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057cc:	f7fc fef4 	bl	80025b8 <HAL_GetTick>
 80057d0:	4602      	mov	r2, r0
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	1ad3      	subs	r3, r2, r3
 80057d6:	68ba      	ldr	r2, [r7, #8]
 80057d8:	429a      	cmp	r2, r3
 80057da:	d302      	bcc.n	80057e2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d116      	bne.n	8005810 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2200      	movs	r2, #0
 80057e6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2220      	movs	r2, #32
 80057ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2200      	movs	r2, #0
 80057f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057fc:	f043 0220 	orr.w	r2, r3, #32
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2200      	movs	r2, #0
 8005808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	e007      	b.n	8005820 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	695b      	ldr	r3, [r3, #20]
 8005816:	f003 0304 	and.w	r3, r3, #4
 800581a:	2b04      	cmp	r3, #4
 800581c:	d1ca      	bne.n	80057b4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800581e:	2300      	movs	r3, #0
}
 8005820:	4618      	mov	r0, r3
 8005822:	3710      	adds	r7, #16
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}

08005828 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005828:	b480      	push	{r7}
 800582a:	b085      	sub	sp, #20
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005830:	2300      	movs	r3, #0
 8005832:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005834:	4b13      	ldr	r3, [pc, #76]	; (8005884 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	08db      	lsrs	r3, r3, #3
 800583a:	4a13      	ldr	r2, [pc, #76]	; (8005888 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800583c:	fba2 2303 	umull	r2, r3, r2, r3
 8005840:	0a1a      	lsrs	r2, r3, #8
 8005842:	4613      	mov	r3, r2
 8005844:	009b      	lsls	r3, r3, #2
 8005846:	4413      	add	r3, r2
 8005848:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	3b01      	subs	r3, #1
 800584e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d107      	bne.n	8005866 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800585a:	f043 0220 	orr.w	r2, r3, #32
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	e008      	b.n	8005878 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005870:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005874:	d0e9      	beq.n	800584a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005876:	2300      	movs	r3, #0
}
 8005878:	4618      	mov	r0, r3
 800587a:	3714      	adds	r7, #20
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr
 8005884:	20000034 	.word	0x20000034
 8005888:	14f8b589 	.word	0x14f8b589

0800588c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b084      	sub	sp, #16
 8005890:	af00      	add	r7, sp, #0
 8005892:	60f8      	str	r0, [r7, #12]
 8005894:	60b9      	str	r1, [r7, #8]
 8005896:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005898:	e042      	b.n	8005920 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	695b      	ldr	r3, [r3, #20]
 80058a0:	f003 0310 	and.w	r3, r3, #16
 80058a4:	2b10      	cmp	r3, #16
 80058a6:	d119      	bne.n	80058dc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f06f 0210 	mvn.w	r2, #16
 80058b0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2200      	movs	r2, #0
 80058b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2220      	movs	r2, #32
 80058bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2200      	movs	r2, #0
 80058c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2200      	movs	r2, #0
 80058d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80058d8:	2301      	movs	r3, #1
 80058da:	e029      	b.n	8005930 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058dc:	f7fc fe6c 	bl	80025b8 <HAL_GetTick>
 80058e0:	4602      	mov	r2, r0
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	1ad3      	subs	r3, r2, r3
 80058e6:	68ba      	ldr	r2, [r7, #8]
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d302      	bcc.n	80058f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d116      	bne.n	8005920 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2200      	movs	r2, #0
 80058f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2220      	movs	r2, #32
 80058fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2200      	movs	r2, #0
 8005904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800590c:	f043 0220 	orr.w	r2, r3, #32
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2200      	movs	r2, #0
 8005918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	e007      	b.n	8005930 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	695b      	ldr	r3, [r3, #20]
 8005926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800592a:	2b40      	cmp	r3, #64	; 0x40
 800592c:	d1b5      	bne.n	800589a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800592e:	2300      	movs	r3, #0
}
 8005930:	4618      	mov	r0, r3
 8005932:	3710      	adds	r7, #16
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}

08005938 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005938:	b480      	push	{r7}
 800593a:	b083      	sub	sp, #12
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	695b      	ldr	r3, [r3, #20]
 8005946:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800594a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800594e:	d11b      	bne.n	8005988 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005958:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2220      	movs	r2, #32
 8005964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2200      	movs	r2, #0
 800596c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005974:	f043 0204 	orr.w	r2, r3, #4
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	e000      	b.n	800598a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005988:	2300      	movs	r3, #0
}
 800598a:	4618      	mov	r0, r3
 800598c:	370c      	adds	r7, #12
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr

08005996 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005996:	b480      	push	{r7}
 8005998:	b083      	sub	sp, #12
 800599a:	af00      	add	r7, sp, #0
 800599c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a2:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80059a6:	d103      	bne.n	80059b0 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2201      	movs	r2, #1
 80059ac:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80059ae:	e007      	b.n	80059c0 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80059b8:	d102      	bne.n	80059c0 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2208      	movs	r2, #8
 80059be:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80059c0:	bf00      	nop
 80059c2:	370c      	adds	r7, #12
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr

080059cc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80059cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059ce:	b08f      	sub	sp, #60	; 0x3c
 80059d0:	af0a      	add	r7, sp, #40	; 0x28
 80059d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d101      	bne.n	80059de <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80059da:	2301      	movs	r3, #1
 80059dc:	e10f      	b.n	8005bfe <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80059ea:	b2db      	uxtb	r3, r3
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d106      	bne.n	80059fe <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f006 fa2f 	bl	800be5c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2203      	movs	r2, #3
 8005a02:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d102      	bne.n	8005a18 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2200      	movs	r2, #0
 8005a16:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f003 f862 	bl	8008ae6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	603b      	str	r3, [r7, #0]
 8005a28:	687e      	ldr	r6, [r7, #4]
 8005a2a:	466d      	mov	r5, sp
 8005a2c:	f106 0410 	add.w	r4, r6, #16
 8005a30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005a32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005a34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005a36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005a38:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005a3c:	e885 0003 	stmia.w	r5, {r0, r1}
 8005a40:	1d33      	adds	r3, r6, #4
 8005a42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005a44:	6838      	ldr	r0, [r7, #0]
 8005a46:	f002 ff39 	bl	80088bc <USB_CoreInit>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d005      	beq.n	8005a5c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2202      	movs	r2, #2
 8005a54:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	e0d0      	b.n	8005bfe <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	2100      	movs	r1, #0
 8005a62:	4618      	mov	r0, r3
 8005a64:	f003 f850 	bl	8008b08 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a68:	2300      	movs	r3, #0
 8005a6a:	73fb      	strb	r3, [r7, #15]
 8005a6c:	e04a      	b.n	8005b04 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005a6e:	7bfa      	ldrb	r2, [r7, #15]
 8005a70:	6879      	ldr	r1, [r7, #4]
 8005a72:	4613      	mov	r3, r2
 8005a74:	00db      	lsls	r3, r3, #3
 8005a76:	4413      	add	r3, r2
 8005a78:	009b      	lsls	r3, r3, #2
 8005a7a:	440b      	add	r3, r1
 8005a7c:	333d      	adds	r3, #61	; 0x3d
 8005a7e:	2201      	movs	r2, #1
 8005a80:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005a82:	7bfa      	ldrb	r2, [r7, #15]
 8005a84:	6879      	ldr	r1, [r7, #4]
 8005a86:	4613      	mov	r3, r2
 8005a88:	00db      	lsls	r3, r3, #3
 8005a8a:	4413      	add	r3, r2
 8005a8c:	009b      	lsls	r3, r3, #2
 8005a8e:	440b      	add	r3, r1
 8005a90:	333c      	adds	r3, #60	; 0x3c
 8005a92:	7bfa      	ldrb	r2, [r7, #15]
 8005a94:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005a96:	7bfa      	ldrb	r2, [r7, #15]
 8005a98:	7bfb      	ldrb	r3, [r7, #15]
 8005a9a:	b298      	uxth	r0, r3
 8005a9c:	6879      	ldr	r1, [r7, #4]
 8005a9e:	4613      	mov	r3, r2
 8005aa0:	00db      	lsls	r3, r3, #3
 8005aa2:	4413      	add	r3, r2
 8005aa4:	009b      	lsls	r3, r3, #2
 8005aa6:	440b      	add	r3, r1
 8005aa8:	3344      	adds	r3, #68	; 0x44
 8005aaa:	4602      	mov	r2, r0
 8005aac:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005aae:	7bfa      	ldrb	r2, [r7, #15]
 8005ab0:	6879      	ldr	r1, [r7, #4]
 8005ab2:	4613      	mov	r3, r2
 8005ab4:	00db      	lsls	r3, r3, #3
 8005ab6:	4413      	add	r3, r2
 8005ab8:	009b      	lsls	r3, r3, #2
 8005aba:	440b      	add	r3, r1
 8005abc:	3340      	adds	r3, #64	; 0x40
 8005abe:	2200      	movs	r2, #0
 8005ac0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005ac2:	7bfa      	ldrb	r2, [r7, #15]
 8005ac4:	6879      	ldr	r1, [r7, #4]
 8005ac6:	4613      	mov	r3, r2
 8005ac8:	00db      	lsls	r3, r3, #3
 8005aca:	4413      	add	r3, r2
 8005acc:	009b      	lsls	r3, r3, #2
 8005ace:	440b      	add	r3, r1
 8005ad0:	3348      	adds	r3, #72	; 0x48
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005ad6:	7bfa      	ldrb	r2, [r7, #15]
 8005ad8:	6879      	ldr	r1, [r7, #4]
 8005ada:	4613      	mov	r3, r2
 8005adc:	00db      	lsls	r3, r3, #3
 8005ade:	4413      	add	r3, r2
 8005ae0:	009b      	lsls	r3, r3, #2
 8005ae2:	440b      	add	r3, r1
 8005ae4:	334c      	adds	r3, #76	; 0x4c
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005aea:	7bfa      	ldrb	r2, [r7, #15]
 8005aec:	6879      	ldr	r1, [r7, #4]
 8005aee:	4613      	mov	r3, r2
 8005af0:	00db      	lsls	r3, r3, #3
 8005af2:	4413      	add	r3, r2
 8005af4:	009b      	lsls	r3, r3, #2
 8005af6:	440b      	add	r3, r1
 8005af8:	3354      	adds	r3, #84	; 0x54
 8005afa:	2200      	movs	r2, #0
 8005afc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005afe:	7bfb      	ldrb	r3, [r7, #15]
 8005b00:	3301      	adds	r3, #1
 8005b02:	73fb      	strb	r3, [r7, #15]
 8005b04:	7bfa      	ldrb	r2, [r7, #15]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d3af      	bcc.n	8005a6e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b0e:	2300      	movs	r3, #0
 8005b10:	73fb      	strb	r3, [r7, #15]
 8005b12:	e044      	b.n	8005b9e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005b14:	7bfa      	ldrb	r2, [r7, #15]
 8005b16:	6879      	ldr	r1, [r7, #4]
 8005b18:	4613      	mov	r3, r2
 8005b1a:	00db      	lsls	r3, r3, #3
 8005b1c:	4413      	add	r3, r2
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	440b      	add	r3, r1
 8005b22:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005b26:	2200      	movs	r2, #0
 8005b28:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005b2a:	7bfa      	ldrb	r2, [r7, #15]
 8005b2c:	6879      	ldr	r1, [r7, #4]
 8005b2e:	4613      	mov	r3, r2
 8005b30:	00db      	lsls	r3, r3, #3
 8005b32:	4413      	add	r3, r2
 8005b34:	009b      	lsls	r3, r3, #2
 8005b36:	440b      	add	r3, r1
 8005b38:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005b3c:	7bfa      	ldrb	r2, [r7, #15]
 8005b3e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005b40:	7bfa      	ldrb	r2, [r7, #15]
 8005b42:	6879      	ldr	r1, [r7, #4]
 8005b44:	4613      	mov	r3, r2
 8005b46:	00db      	lsls	r3, r3, #3
 8005b48:	4413      	add	r3, r2
 8005b4a:	009b      	lsls	r3, r3, #2
 8005b4c:	440b      	add	r3, r1
 8005b4e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005b52:	2200      	movs	r2, #0
 8005b54:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005b56:	7bfa      	ldrb	r2, [r7, #15]
 8005b58:	6879      	ldr	r1, [r7, #4]
 8005b5a:	4613      	mov	r3, r2
 8005b5c:	00db      	lsls	r3, r3, #3
 8005b5e:	4413      	add	r3, r2
 8005b60:	009b      	lsls	r3, r3, #2
 8005b62:	440b      	add	r3, r1
 8005b64:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005b68:	2200      	movs	r2, #0
 8005b6a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005b6c:	7bfa      	ldrb	r2, [r7, #15]
 8005b6e:	6879      	ldr	r1, [r7, #4]
 8005b70:	4613      	mov	r3, r2
 8005b72:	00db      	lsls	r3, r3, #3
 8005b74:	4413      	add	r3, r2
 8005b76:	009b      	lsls	r3, r3, #2
 8005b78:	440b      	add	r3, r1
 8005b7a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005b7e:	2200      	movs	r2, #0
 8005b80:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005b82:	7bfa      	ldrb	r2, [r7, #15]
 8005b84:	6879      	ldr	r1, [r7, #4]
 8005b86:	4613      	mov	r3, r2
 8005b88:	00db      	lsls	r3, r3, #3
 8005b8a:	4413      	add	r3, r2
 8005b8c:	009b      	lsls	r3, r3, #2
 8005b8e:	440b      	add	r3, r1
 8005b90:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005b94:	2200      	movs	r2, #0
 8005b96:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b98:	7bfb      	ldrb	r3, [r7, #15]
 8005b9a:	3301      	adds	r3, #1
 8005b9c:	73fb      	strb	r3, [r7, #15]
 8005b9e:	7bfa      	ldrb	r2, [r7, #15]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d3b5      	bcc.n	8005b14 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	603b      	str	r3, [r7, #0]
 8005bae:	687e      	ldr	r6, [r7, #4]
 8005bb0:	466d      	mov	r5, sp
 8005bb2:	f106 0410 	add.w	r4, r6, #16
 8005bb6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005bb8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005bba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005bbc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005bbe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005bc2:	e885 0003 	stmia.w	r5, {r0, r1}
 8005bc6:	1d33      	adds	r3, r6, #4
 8005bc8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005bca:	6838      	ldr	r0, [r7, #0]
 8005bcc:	f002 ffe8 	bl	8008ba0 <USB_DevInit>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d005      	beq.n	8005be2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2202      	movs	r2, #2
 8005bda:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	e00d      	b.n	8005bfe <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2200      	movs	r2, #0
 8005be6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2201      	movs	r2, #1
 8005bee:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f004 f937 	bl	8009e6a <USB_DevDisconnect>

  return HAL_OK;
 8005bfc:	2300      	movs	r3, #0
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3714      	adds	r7, #20
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005c06 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005c06:	b580      	push	{r7, lr}
 8005c08:	b084      	sub	sp, #16
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	d101      	bne.n	8005c22 <HAL_PCD_Start+0x1c>
 8005c1e:	2302      	movs	r3, #2
 8005c20:	e020      	b.n	8005c64 <HAL_PCD_Start+0x5e>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2201      	movs	r2, #1
 8005c26:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c2e:	2b01      	cmp	r3, #1
 8005c30:	d109      	bne.n	8005c46 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005c36:	2b01      	cmp	r3, #1
 8005c38:	d005      	beq.n	8005c46 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c3e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f002 ff3a 	bl	8008ac4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4618      	mov	r0, r3
 8005c56:	f004 f8e7 	bl	8009e28 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005c62:	2300      	movs	r3, #0
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3710      	adds	r7, #16
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}

08005c6c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005c6c:	b590      	push	{r4, r7, lr}
 8005c6e:	b08d      	sub	sp, #52	; 0x34
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c7a:	6a3b      	ldr	r3, [r7, #32]
 8005c7c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4618      	mov	r0, r3
 8005c84:	f004 f9a5 	bl	8009fd2 <USB_GetMode>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	f040 848a 	bne.w	80065a4 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4618      	mov	r0, r3
 8005c96:	f004 f909 	bl	8009eac <USB_ReadInterrupts>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	f000 8480 	beq.w	80065a2 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005ca2:	69fb      	ldr	r3, [r7, #28]
 8005ca4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	0a1b      	lsrs	r3, r3, #8
 8005cac:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f004 f8f6 	bl	8009eac <USB_ReadInterrupts>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	f003 0302 	and.w	r3, r3, #2
 8005cc6:	2b02      	cmp	r3, #2
 8005cc8:	d107      	bne.n	8005cda <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	695a      	ldr	r2, [r3, #20]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f002 0202 	and.w	r2, r2, #2
 8005cd8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f004 f8e4 	bl	8009eac <USB_ReadInterrupts>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	f003 0310 	and.w	r3, r3, #16
 8005cea:	2b10      	cmp	r3, #16
 8005cec:	d161      	bne.n	8005db2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	699a      	ldr	r2, [r3, #24]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f022 0210 	bic.w	r2, r2, #16
 8005cfc:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005cfe:	6a3b      	ldr	r3, [r7, #32]
 8005d00:	6a1b      	ldr	r3, [r3, #32]
 8005d02:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005d04:	69bb      	ldr	r3, [r7, #24]
 8005d06:	f003 020f 	and.w	r2, r3, #15
 8005d0a:	4613      	mov	r3, r2
 8005d0c:	00db      	lsls	r3, r3, #3
 8005d0e:	4413      	add	r3, r2
 8005d10:	009b      	lsls	r3, r3, #2
 8005d12:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005d16:	687a      	ldr	r2, [r7, #4]
 8005d18:	4413      	add	r3, r2
 8005d1a:	3304      	adds	r3, #4
 8005d1c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005d1e:	69bb      	ldr	r3, [r7, #24]
 8005d20:	0c5b      	lsrs	r3, r3, #17
 8005d22:	f003 030f 	and.w	r3, r3, #15
 8005d26:	2b02      	cmp	r3, #2
 8005d28:	d124      	bne.n	8005d74 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005d2a:	69ba      	ldr	r2, [r7, #24]
 8005d2c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005d30:	4013      	ands	r3, r2
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d035      	beq.n	8005da2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005d3a:	69bb      	ldr	r3, [r7, #24]
 8005d3c:	091b      	lsrs	r3, r3, #4
 8005d3e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005d40:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	461a      	mov	r2, r3
 8005d48:	6a38      	ldr	r0, [r7, #32]
 8005d4a:	f003 ff1b 	bl	8009b84 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	691a      	ldr	r2, [r3, #16]
 8005d52:	69bb      	ldr	r3, [r7, #24]
 8005d54:	091b      	lsrs	r3, r3, #4
 8005d56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005d5a:	441a      	add	r2, r3
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	6a1a      	ldr	r2, [r3, #32]
 8005d64:	69bb      	ldr	r3, [r7, #24]
 8005d66:	091b      	lsrs	r3, r3, #4
 8005d68:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005d6c:	441a      	add	r2, r3
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	621a      	str	r2, [r3, #32]
 8005d72:	e016      	b.n	8005da2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005d74:	69bb      	ldr	r3, [r7, #24]
 8005d76:	0c5b      	lsrs	r3, r3, #17
 8005d78:	f003 030f 	and.w	r3, r3, #15
 8005d7c:	2b06      	cmp	r3, #6
 8005d7e:	d110      	bne.n	8005da2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005d86:	2208      	movs	r2, #8
 8005d88:	4619      	mov	r1, r3
 8005d8a:	6a38      	ldr	r0, [r7, #32]
 8005d8c:	f003 fefa 	bl	8009b84 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	6a1a      	ldr	r2, [r3, #32]
 8005d94:	69bb      	ldr	r3, [r7, #24]
 8005d96:	091b      	lsrs	r3, r3, #4
 8005d98:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005d9c:	441a      	add	r2, r3
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	699a      	ldr	r2, [r3, #24]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f042 0210 	orr.w	r2, r2, #16
 8005db0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4618      	mov	r0, r3
 8005db8:	f004 f878 	bl	8009eac <USB_ReadInterrupts>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005dc2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005dc6:	f040 80a7 	bne.w	8005f18 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f004 f87d 	bl	8009ed2 <USB_ReadDevAllOutEpInterrupt>
 8005dd8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005dda:	e099      	b.n	8005f10 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dde:	f003 0301 	and.w	r3, r3, #1
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	f000 808e 	beq.w	8005f04 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dee:	b2d2      	uxtb	r2, r2
 8005df0:	4611      	mov	r1, r2
 8005df2:	4618      	mov	r0, r3
 8005df4:	f004 f8a1 	bl	8009f3a <USB_ReadDevOutEPInterrupt>
 8005df8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	f003 0301 	and.w	r3, r3, #1
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d00c      	beq.n	8005e1e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e06:	015a      	lsls	r2, r3, #5
 8005e08:	69fb      	ldr	r3, [r7, #28]
 8005e0a:	4413      	add	r3, r2
 8005e0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e10:	461a      	mov	r2, r3
 8005e12:	2301      	movs	r3, #1
 8005e14:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005e16:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f000 feab 	bl	8006b74 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	f003 0308 	and.w	r3, r3, #8
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d00c      	beq.n	8005e42 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2a:	015a      	lsls	r2, r3, #5
 8005e2c:	69fb      	ldr	r3, [r7, #28]
 8005e2e:	4413      	add	r3, r2
 8005e30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e34:	461a      	mov	r2, r3
 8005e36:	2308      	movs	r3, #8
 8005e38:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005e3a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f000 ff81 	bl	8006d44 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	f003 0310 	and.w	r3, r3, #16
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d008      	beq.n	8005e5e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4e:	015a      	lsls	r2, r3, #5
 8005e50:	69fb      	ldr	r3, [r7, #28]
 8005e52:	4413      	add	r3, r2
 8005e54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e58:	461a      	mov	r2, r3
 8005e5a:	2310      	movs	r3, #16
 8005e5c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	f003 0302 	and.w	r3, r3, #2
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d030      	beq.n	8005eca <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005e68:	6a3b      	ldr	r3, [r7, #32]
 8005e6a:	695b      	ldr	r3, [r3, #20]
 8005e6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e70:	2b80      	cmp	r3, #128	; 0x80
 8005e72:	d109      	bne.n	8005e88 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005e74:	69fb      	ldr	r3, [r7, #28]
 8005e76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	69fa      	ldr	r2, [r7, #28]
 8005e7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005e86:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005e88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e8a:	4613      	mov	r3, r2
 8005e8c:	00db      	lsls	r3, r3, #3
 8005e8e:	4413      	add	r3, r2
 8005e90:	009b      	lsls	r3, r3, #2
 8005e92:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005e96:	687a      	ldr	r2, [r7, #4]
 8005e98:	4413      	add	r3, r2
 8005e9a:	3304      	adds	r3, #4
 8005e9c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	78db      	ldrb	r3, [r3, #3]
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d108      	bne.n	8005eb8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eae:	b2db      	uxtb	r3, r3
 8005eb0:	4619      	mov	r1, r3
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f006 f8d8 	bl	800c068 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eba:	015a      	lsls	r2, r3, #5
 8005ebc:	69fb      	ldr	r3, [r7, #28]
 8005ebe:	4413      	add	r3, r2
 8005ec0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	2302      	movs	r3, #2
 8005ec8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	f003 0320 	and.w	r3, r3, #32
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d008      	beq.n	8005ee6 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed6:	015a      	lsls	r2, r3, #5
 8005ed8:	69fb      	ldr	r3, [r7, #28]
 8005eda:	4413      	add	r3, r2
 8005edc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ee0:	461a      	mov	r2, r3
 8005ee2:	2320      	movs	r3, #32
 8005ee4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d009      	beq.n	8005f04 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef2:	015a      	lsls	r2, r3, #5
 8005ef4:	69fb      	ldr	r3, [r7, #28]
 8005ef6:	4413      	add	r3, r2
 8005ef8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005efc:	461a      	mov	r2, r3
 8005efe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005f02:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f06:	3301      	adds	r3, #1
 8005f08:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f0c:	085b      	lsrs	r3, r3, #1
 8005f0e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	f47f af62 	bne.w	8005ddc <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f003 ffc5 	bl	8009eac <USB_ReadInterrupts>
 8005f22:	4603      	mov	r3, r0
 8005f24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f28:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005f2c:	f040 80db 	bne.w	80060e6 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4618      	mov	r0, r3
 8005f36:	f003 ffe6 	bl	8009f06 <USB_ReadDevAllInEpInterrupt>
 8005f3a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005f40:	e0cd      	b.n	80060de <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f44:	f003 0301 	and.w	r3, r3, #1
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	f000 80c2 	beq.w	80060d2 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f54:	b2d2      	uxtb	r2, r2
 8005f56:	4611      	mov	r1, r2
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f004 f80c 	bl	8009f76 <USB_ReadDevInEPInterrupt>
 8005f5e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	f003 0301 	and.w	r3, r3, #1
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d057      	beq.n	800601a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f6c:	f003 030f 	and.w	r3, r3, #15
 8005f70:	2201      	movs	r2, #1
 8005f72:	fa02 f303 	lsl.w	r3, r2, r3
 8005f76:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005f78:	69fb      	ldr	r3, [r7, #28]
 8005f7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	43db      	mvns	r3, r3
 8005f84:	69f9      	ldr	r1, [r7, #28]
 8005f86:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f8a:	4013      	ands	r3, r2
 8005f8c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f90:	015a      	lsls	r2, r3, #5
 8005f92:	69fb      	ldr	r3, [r7, #28]
 8005f94:	4413      	add	r3, r2
 8005f96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	691b      	ldr	r3, [r3, #16]
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	d132      	bne.n	800600e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005fa8:	6879      	ldr	r1, [r7, #4]
 8005faa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fac:	4613      	mov	r3, r2
 8005fae:	00db      	lsls	r3, r3, #3
 8005fb0:	4413      	add	r3, r2
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	440b      	add	r3, r1
 8005fb6:	334c      	adds	r3, #76	; 0x4c
 8005fb8:	6819      	ldr	r1, [r3, #0]
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fbe:	4613      	mov	r3, r2
 8005fc0:	00db      	lsls	r3, r3, #3
 8005fc2:	4413      	add	r3, r2
 8005fc4:	009b      	lsls	r3, r3, #2
 8005fc6:	4403      	add	r3, r0
 8005fc8:	3348      	adds	r3, #72	; 0x48
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4419      	add	r1, r3
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fd2:	4613      	mov	r3, r2
 8005fd4:	00db      	lsls	r3, r3, #3
 8005fd6:	4413      	add	r3, r2
 8005fd8:	009b      	lsls	r3, r3, #2
 8005fda:	4403      	add	r3, r0
 8005fdc:	334c      	adds	r3, #76	; 0x4c
 8005fde:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d113      	bne.n	800600e <HAL_PCD_IRQHandler+0x3a2>
 8005fe6:	6879      	ldr	r1, [r7, #4]
 8005fe8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fea:	4613      	mov	r3, r2
 8005fec:	00db      	lsls	r3, r3, #3
 8005fee:	4413      	add	r3, r2
 8005ff0:	009b      	lsls	r3, r3, #2
 8005ff2:	440b      	add	r3, r1
 8005ff4:	3354      	adds	r3, #84	; 0x54
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d108      	bne.n	800600e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6818      	ldr	r0, [r3, #0]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006006:	461a      	mov	r2, r3
 8006008:	2101      	movs	r1, #1
 800600a:	f004 f813 	bl	800a034 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800600e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006010:	b2db      	uxtb	r3, r3
 8006012:	4619      	mov	r1, r3
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f005 ffa2 	bl	800bf5e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	f003 0308 	and.w	r3, r3, #8
 8006020:	2b00      	cmp	r3, #0
 8006022:	d008      	beq.n	8006036 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006026:	015a      	lsls	r2, r3, #5
 8006028:	69fb      	ldr	r3, [r7, #28]
 800602a:	4413      	add	r3, r2
 800602c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006030:	461a      	mov	r2, r3
 8006032:	2308      	movs	r3, #8
 8006034:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	f003 0310 	and.w	r3, r3, #16
 800603c:	2b00      	cmp	r3, #0
 800603e:	d008      	beq.n	8006052 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006042:	015a      	lsls	r2, r3, #5
 8006044:	69fb      	ldr	r3, [r7, #28]
 8006046:	4413      	add	r3, r2
 8006048:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800604c:	461a      	mov	r2, r3
 800604e:	2310      	movs	r3, #16
 8006050:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006058:	2b00      	cmp	r3, #0
 800605a:	d008      	beq.n	800606e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800605c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800605e:	015a      	lsls	r2, r3, #5
 8006060:	69fb      	ldr	r3, [r7, #28]
 8006062:	4413      	add	r3, r2
 8006064:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006068:	461a      	mov	r2, r3
 800606a:	2340      	movs	r3, #64	; 0x40
 800606c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	f003 0302 	and.w	r3, r3, #2
 8006074:	2b00      	cmp	r3, #0
 8006076:	d023      	beq.n	80060c0 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8006078:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800607a:	6a38      	ldr	r0, [r7, #32]
 800607c:	f002 fef4 	bl	8008e68 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8006080:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006082:	4613      	mov	r3, r2
 8006084:	00db      	lsls	r3, r3, #3
 8006086:	4413      	add	r3, r2
 8006088:	009b      	lsls	r3, r3, #2
 800608a:	3338      	adds	r3, #56	; 0x38
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	4413      	add	r3, r2
 8006090:	3304      	adds	r3, #4
 8006092:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	78db      	ldrb	r3, [r3, #3]
 8006098:	2b01      	cmp	r3, #1
 800609a:	d108      	bne.n	80060ae <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	2200      	movs	r2, #0
 80060a0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80060a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	4619      	mov	r1, r3
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f005 ffef 	bl	800c08c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80060ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b0:	015a      	lsls	r2, r3, #5
 80060b2:	69fb      	ldr	r3, [r7, #28]
 80060b4:	4413      	add	r3, r2
 80060b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060ba:	461a      	mov	r2, r3
 80060bc:	2302      	movs	r3, #2
 80060be:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d003      	beq.n	80060d2 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80060ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f000 fcc3 	bl	8006a58 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80060d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d4:	3301      	adds	r3, #1
 80060d6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80060d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060da:	085b      	lsrs	r3, r3, #1
 80060dc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80060de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	f47f af2e 	bne.w	8005f42 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4618      	mov	r0, r3
 80060ec:	f003 fede 	bl	8009eac <USB_ReadInterrupts>
 80060f0:	4603      	mov	r3, r0
 80060f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80060f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060fa:	d122      	bne.n	8006142 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80060fc:	69fb      	ldr	r3, [r7, #28]
 80060fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	69fa      	ldr	r2, [r7, #28]
 8006106:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800610a:	f023 0301 	bic.w	r3, r3, #1
 800610e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8006116:	2b01      	cmp	r3, #1
 8006118:	d108      	bne.n	800612c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2200      	movs	r2, #0
 800611e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006122:	2100      	movs	r1, #0
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f000 feab 	bl	8006e80 <HAL_PCDEx_LPM_Callback>
 800612a:	e002      	b.n	8006132 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f005 ff8d 	bl	800c04c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	695a      	ldr	r2, [r3, #20]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8006140:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4618      	mov	r0, r3
 8006148:	f003 feb0 	bl	8009eac <USB_ReadInterrupts>
 800614c:	4603      	mov	r3, r0
 800614e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006152:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006156:	d112      	bne.n	800617e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006158:	69fb      	ldr	r3, [r7, #28]
 800615a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	f003 0301 	and.w	r3, r3, #1
 8006164:	2b01      	cmp	r3, #1
 8006166:	d102      	bne.n	800616e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f005 ff49 	bl	800c000 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	695a      	ldr	r2, [r3, #20]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800617c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4618      	mov	r0, r3
 8006184:	f003 fe92 	bl	8009eac <USB_ReadInterrupts>
 8006188:	4603      	mov	r3, r0
 800618a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800618e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006192:	f040 80b7 	bne.w	8006304 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006196:	69fb      	ldr	r3, [r7, #28]
 8006198:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	69fa      	ldr	r2, [r7, #28]
 80061a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061a4:	f023 0301 	bic.w	r3, r3, #1
 80061a8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	2110      	movs	r1, #16
 80061b0:	4618      	mov	r0, r3
 80061b2:	f002 fe59 	bl	8008e68 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80061b6:	2300      	movs	r3, #0
 80061b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061ba:	e046      	b.n	800624a <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80061bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061be:	015a      	lsls	r2, r3, #5
 80061c0:	69fb      	ldr	r3, [r7, #28]
 80061c2:	4413      	add	r3, r2
 80061c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061c8:	461a      	mov	r2, r3
 80061ca:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80061ce:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80061d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d2:	015a      	lsls	r2, r3, #5
 80061d4:	69fb      	ldr	r3, [r7, #28]
 80061d6:	4413      	add	r3, r2
 80061d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061e0:	0151      	lsls	r1, r2, #5
 80061e2:	69fa      	ldr	r2, [r7, #28]
 80061e4:	440a      	add	r2, r1
 80061e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80061ee:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80061f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061f2:	015a      	lsls	r2, r3, #5
 80061f4:	69fb      	ldr	r3, [r7, #28]
 80061f6:	4413      	add	r3, r2
 80061f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061fc:	461a      	mov	r2, r3
 80061fe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006202:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006206:	015a      	lsls	r2, r3, #5
 8006208:	69fb      	ldr	r3, [r7, #28]
 800620a:	4413      	add	r3, r2
 800620c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006214:	0151      	lsls	r1, r2, #5
 8006216:	69fa      	ldr	r2, [r7, #28]
 8006218:	440a      	add	r2, r1
 800621a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800621e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006222:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006226:	015a      	lsls	r2, r3, #5
 8006228:	69fb      	ldr	r3, [r7, #28]
 800622a:	4413      	add	r3, r2
 800622c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006234:	0151      	lsls	r1, r2, #5
 8006236:	69fa      	ldr	r2, [r7, #28]
 8006238:	440a      	add	r2, r1
 800623a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800623e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006242:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006246:	3301      	adds	r3, #1
 8006248:	62fb      	str	r3, [r7, #44]	; 0x2c
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006250:	429a      	cmp	r2, r3
 8006252:	d3b3      	bcc.n	80061bc <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006254:	69fb      	ldr	r3, [r7, #28]
 8006256:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800625a:	69db      	ldr	r3, [r3, #28]
 800625c:	69fa      	ldr	r2, [r7, #28]
 800625e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006262:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8006266:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800626c:	2b00      	cmp	r3, #0
 800626e:	d016      	beq.n	800629e <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006270:	69fb      	ldr	r3, [r7, #28]
 8006272:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006276:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800627a:	69fa      	ldr	r2, [r7, #28]
 800627c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006280:	f043 030b 	orr.w	r3, r3, #11
 8006284:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006288:	69fb      	ldr	r3, [r7, #28]
 800628a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800628e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006290:	69fa      	ldr	r2, [r7, #28]
 8006292:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006296:	f043 030b 	orr.w	r3, r3, #11
 800629a:	6453      	str	r3, [r2, #68]	; 0x44
 800629c:	e015      	b.n	80062ca <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800629e:	69fb      	ldr	r3, [r7, #28]
 80062a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062a4:	695b      	ldr	r3, [r3, #20]
 80062a6:	69fa      	ldr	r2, [r7, #28]
 80062a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80062b0:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80062b4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80062b6:	69fb      	ldr	r3, [r7, #28]
 80062b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062bc:	691b      	ldr	r3, [r3, #16]
 80062be:	69fa      	ldr	r2, [r7, #28]
 80062c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062c4:	f043 030b 	orr.w	r3, r3, #11
 80062c8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80062ca:	69fb      	ldr	r3, [r7, #28]
 80062cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	69fa      	ldr	r2, [r7, #28]
 80062d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062d8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80062dc:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6818      	ldr	r0, [r3, #0]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	691b      	ldr	r3, [r3, #16]
 80062e6:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80062ee:	461a      	mov	r2, r3
 80062f0:	f003 fea0 	bl	800a034 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	695a      	ldr	r2, [r3, #20]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8006302:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4618      	mov	r0, r3
 800630a:	f003 fdcf 	bl	8009eac <USB_ReadInterrupts>
 800630e:	4603      	mov	r3, r0
 8006310:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006314:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006318:	d124      	bne.n	8006364 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4618      	mov	r0, r3
 8006320:	f003 fe65 	bl	8009fee <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4618      	mov	r0, r3
 800632a:	f002 fe1a 	bl	8008f62 <USB_GetDevSpeed>
 800632e:	4603      	mov	r3, r0
 8006330:	461a      	mov	r2, r3
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681c      	ldr	r4, [r3, #0]
 800633a:	f001 fa13 	bl	8007764 <HAL_RCC_GetHCLKFreq>
 800633e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006344:	b2db      	uxtb	r3, r3
 8006346:	461a      	mov	r2, r3
 8006348:	4620      	mov	r0, r4
 800634a:	f002 fb19 	bl	8008980 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f005 fe2d 	bl	800bfae <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	695a      	ldr	r2, [r3, #20]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8006362:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4618      	mov	r0, r3
 800636a:	f003 fd9f 	bl	8009eac <USB_ReadInterrupts>
 800636e:	4603      	mov	r3, r0
 8006370:	f003 0308 	and.w	r3, r3, #8
 8006374:	2b08      	cmp	r3, #8
 8006376:	d10a      	bne.n	800638e <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f005 fe0a 	bl	800bf92 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	695a      	ldr	r2, [r3, #20]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f002 0208 	and.w	r2, r2, #8
 800638c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4618      	mov	r0, r3
 8006394:	f003 fd8a 	bl	8009eac <USB_ReadInterrupts>
 8006398:	4603      	mov	r3, r0
 800639a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800639e:	2b80      	cmp	r3, #128	; 0x80
 80063a0:	d122      	bne.n	80063e8 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80063a2:	6a3b      	ldr	r3, [r7, #32]
 80063a4:	699b      	ldr	r3, [r3, #24]
 80063a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80063aa:	6a3b      	ldr	r3, [r7, #32]
 80063ac:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80063ae:	2301      	movs	r3, #1
 80063b0:	627b      	str	r3, [r7, #36]	; 0x24
 80063b2:	e014      	b.n	80063de <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80063b4:	6879      	ldr	r1, [r7, #4]
 80063b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063b8:	4613      	mov	r3, r2
 80063ba:	00db      	lsls	r3, r3, #3
 80063bc:	4413      	add	r3, r2
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	440b      	add	r3, r1
 80063c2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80063c6:	781b      	ldrb	r3, [r3, #0]
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d105      	bne.n	80063d8 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80063cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ce:	b2db      	uxtb	r3, r3
 80063d0:	4619      	mov	r1, r3
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f000 fb0f 	bl	80069f6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80063d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063da:	3301      	adds	r3, #1
 80063dc:	627b      	str	r3, [r7, #36]	; 0x24
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063e4:	429a      	cmp	r2, r3
 80063e6:	d3e5      	bcc.n	80063b4 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4618      	mov	r0, r3
 80063ee:	f003 fd5d 	bl	8009eac <USB_ReadInterrupts>
 80063f2:	4603      	mov	r3, r0
 80063f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80063f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063fc:	d13b      	bne.n	8006476 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80063fe:	2301      	movs	r3, #1
 8006400:	627b      	str	r3, [r7, #36]	; 0x24
 8006402:	e02b      	b.n	800645c <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8006404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006406:	015a      	lsls	r2, r3, #5
 8006408:	69fb      	ldr	r3, [r7, #28]
 800640a:	4413      	add	r3, r2
 800640c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006414:	6879      	ldr	r1, [r7, #4]
 8006416:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006418:	4613      	mov	r3, r2
 800641a:	00db      	lsls	r3, r3, #3
 800641c:	4413      	add	r3, r2
 800641e:	009b      	lsls	r3, r3, #2
 8006420:	440b      	add	r3, r1
 8006422:	3340      	adds	r3, #64	; 0x40
 8006424:	781b      	ldrb	r3, [r3, #0]
 8006426:	2b01      	cmp	r3, #1
 8006428:	d115      	bne.n	8006456 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800642a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800642c:	2b00      	cmp	r3, #0
 800642e:	da12      	bge.n	8006456 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8006430:	6879      	ldr	r1, [r7, #4]
 8006432:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006434:	4613      	mov	r3, r2
 8006436:	00db      	lsls	r3, r3, #3
 8006438:	4413      	add	r3, r2
 800643a:	009b      	lsls	r3, r3, #2
 800643c:	440b      	add	r3, r1
 800643e:	333f      	adds	r3, #63	; 0x3f
 8006440:	2201      	movs	r2, #1
 8006442:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8006444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006446:	b2db      	uxtb	r3, r3
 8006448:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800644c:	b2db      	uxtb	r3, r3
 800644e:	4619      	mov	r1, r3
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f000 fad0 	bl	80069f6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006458:	3301      	adds	r3, #1
 800645a:	627b      	str	r3, [r7, #36]	; 0x24
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006462:	429a      	cmp	r2, r3
 8006464:	d3ce      	bcc.n	8006404 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	695a      	ldr	r2, [r3, #20]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8006474:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4618      	mov	r0, r3
 800647c:	f003 fd16 	bl	8009eac <USB_ReadInterrupts>
 8006480:	4603      	mov	r3, r0
 8006482:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006486:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800648a:	d155      	bne.n	8006538 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800648c:	2301      	movs	r3, #1
 800648e:	627b      	str	r3, [r7, #36]	; 0x24
 8006490:	e045      	b.n	800651e <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8006492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006494:	015a      	lsls	r2, r3, #5
 8006496:	69fb      	ldr	r3, [r7, #28]
 8006498:	4413      	add	r3, r2
 800649a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80064a2:	6879      	ldr	r1, [r7, #4]
 80064a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064a6:	4613      	mov	r3, r2
 80064a8:	00db      	lsls	r3, r3, #3
 80064aa:	4413      	add	r3, r2
 80064ac:	009b      	lsls	r3, r3, #2
 80064ae:	440b      	add	r3, r1
 80064b0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80064b4:	781b      	ldrb	r3, [r3, #0]
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	d12e      	bne.n	8006518 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80064ba:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80064bc:	2b00      	cmp	r3, #0
 80064be:	da2b      	bge.n	8006518 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80064c0:	69bb      	ldr	r3, [r7, #24]
 80064c2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80064cc:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d121      	bne.n	8006518 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80064d4:	6879      	ldr	r1, [r7, #4]
 80064d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064d8:	4613      	mov	r3, r2
 80064da:	00db      	lsls	r3, r3, #3
 80064dc:	4413      	add	r3, r2
 80064de:	009b      	lsls	r3, r3, #2
 80064e0:	440b      	add	r3, r1
 80064e2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80064e6:	2201      	movs	r2, #1
 80064e8:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80064ea:	6a3b      	ldr	r3, [r7, #32]
 80064ec:	699b      	ldr	r3, [r3, #24]
 80064ee:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80064f2:	6a3b      	ldr	r3, [r7, #32]
 80064f4:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80064f6:	6a3b      	ldr	r3, [r7, #32]
 80064f8:	695b      	ldr	r3, [r3, #20]
 80064fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d10a      	bne.n	8006518 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8006502:	69fb      	ldr	r3, [r7, #28]
 8006504:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	69fa      	ldr	r2, [r7, #28]
 800650c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006510:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006514:	6053      	str	r3, [r2, #4]
            break;
 8006516:	e007      	b.n	8006528 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651a:	3301      	adds	r3, #1
 800651c:	627b      	str	r3, [r7, #36]	; 0x24
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006524:	429a      	cmp	r2, r3
 8006526:	d3b4      	bcc.n	8006492 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	695a      	ldr	r2, [r3, #20]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8006536:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4618      	mov	r0, r3
 800653e:	f003 fcb5 	bl	8009eac <USB_ReadInterrupts>
 8006542:	4603      	mov	r3, r0
 8006544:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006548:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800654c:	d10a      	bne.n	8006564 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f005 fdae 	bl	800c0b0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	695a      	ldr	r2, [r3, #20]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006562:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4618      	mov	r0, r3
 800656a:	f003 fc9f 	bl	8009eac <USB_ReadInterrupts>
 800656e:	4603      	mov	r3, r0
 8006570:	f003 0304 	and.w	r3, r3, #4
 8006574:	2b04      	cmp	r3, #4
 8006576:	d115      	bne.n	80065a4 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006580:	69bb      	ldr	r3, [r7, #24]
 8006582:	f003 0304 	and.w	r3, r3, #4
 8006586:	2b00      	cmp	r3, #0
 8006588:	d002      	beq.n	8006590 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f005 fd9e 	bl	800c0cc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	6859      	ldr	r1, [r3, #4]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	69ba      	ldr	r2, [r7, #24]
 800659c:	430a      	orrs	r2, r1
 800659e:	605a      	str	r2, [r3, #4]
 80065a0:	e000      	b.n	80065a4 <HAL_PCD_IRQHandler+0x938>
      return;
 80065a2:	bf00      	nop
    }
  }
}
 80065a4:	3734      	adds	r7, #52	; 0x34
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd90      	pop	{r4, r7, pc}

080065aa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80065aa:	b580      	push	{r7, lr}
 80065ac:	b082      	sub	sp, #8
 80065ae:	af00      	add	r7, sp, #0
 80065b0:	6078      	str	r0, [r7, #4]
 80065b2:	460b      	mov	r3, r1
 80065b4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80065bc:	2b01      	cmp	r3, #1
 80065be:	d101      	bne.n	80065c4 <HAL_PCD_SetAddress+0x1a>
 80065c0:	2302      	movs	r3, #2
 80065c2:	e013      	b.n	80065ec <HAL_PCD_SetAddress+0x42>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2201      	movs	r2, #1
 80065c8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	78fa      	ldrb	r2, [r7, #3]
 80065d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	78fa      	ldrb	r2, [r7, #3]
 80065da:	4611      	mov	r1, r2
 80065dc:	4618      	mov	r0, r3
 80065de:	f003 fbfd 	bl	8009ddc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2200      	movs	r2, #0
 80065e6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80065ea:	2300      	movs	r3, #0
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	3708      	adds	r7, #8
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}

080065f4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b084      	sub	sp, #16
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
 80065fc:	4608      	mov	r0, r1
 80065fe:	4611      	mov	r1, r2
 8006600:	461a      	mov	r2, r3
 8006602:	4603      	mov	r3, r0
 8006604:	70fb      	strb	r3, [r7, #3]
 8006606:	460b      	mov	r3, r1
 8006608:	803b      	strh	r3, [r7, #0]
 800660a:	4613      	mov	r3, r2
 800660c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800660e:	2300      	movs	r3, #0
 8006610:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006612:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006616:	2b00      	cmp	r3, #0
 8006618:	da0f      	bge.n	800663a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800661a:	78fb      	ldrb	r3, [r7, #3]
 800661c:	f003 020f 	and.w	r2, r3, #15
 8006620:	4613      	mov	r3, r2
 8006622:	00db      	lsls	r3, r3, #3
 8006624:	4413      	add	r3, r2
 8006626:	009b      	lsls	r3, r3, #2
 8006628:	3338      	adds	r3, #56	; 0x38
 800662a:	687a      	ldr	r2, [r7, #4]
 800662c:	4413      	add	r3, r2
 800662e:	3304      	adds	r3, #4
 8006630:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2201      	movs	r2, #1
 8006636:	705a      	strb	r2, [r3, #1]
 8006638:	e00f      	b.n	800665a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800663a:	78fb      	ldrb	r3, [r7, #3]
 800663c:	f003 020f 	and.w	r2, r3, #15
 8006640:	4613      	mov	r3, r2
 8006642:	00db      	lsls	r3, r3, #3
 8006644:	4413      	add	r3, r2
 8006646:	009b      	lsls	r3, r3, #2
 8006648:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800664c:	687a      	ldr	r2, [r7, #4]
 800664e:	4413      	add	r3, r2
 8006650:	3304      	adds	r3, #4
 8006652:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2200      	movs	r2, #0
 8006658:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800665a:	78fb      	ldrb	r3, [r7, #3]
 800665c:	f003 030f 	and.w	r3, r3, #15
 8006660:	b2da      	uxtb	r2, r3
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006666:	883a      	ldrh	r2, [r7, #0]
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	78ba      	ldrb	r2, [r7, #2]
 8006670:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	785b      	ldrb	r3, [r3, #1]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d004      	beq.n	8006684 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	b29a      	uxth	r2, r3
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006684:	78bb      	ldrb	r3, [r7, #2]
 8006686:	2b02      	cmp	r3, #2
 8006688:	d102      	bne.n	8006690 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2200      	movs	r2, #0
 800668e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006696:	2b01      	cmp	r3, #1
 8006698:	d101      	bne.n	800669e <HAL_PCD_EP_Open+0xaa>
 800669a:	2302      	movs	r3, #2
 800669c:	e00e      	b.n	80066bc <HAL_PCD_EP_Open+0xc8>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2201      	movs	r2, #1
 80066a2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	68f9      	ldr	r1, [r7, #12]
 80066ac:	4618      	mov	r0, r3
 80066ae:	f002 fc7d 	bl	8008fac <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2200      	movs	r2, #0
 80066b6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80066ba:	7afb      	ldrb	r3, [r7, #11]
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3710      	adds	r7, #16
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}

080066c4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b084      	sub	sp, #16
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
 80066cc:	460b      	mov	r3, r1
 80066ce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80066d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	da0f      	bge.n	80066f8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80066d8:	78fb      	ldrb	r3, [r7, #3]
 80066da:	f003 020f 	and.w	r2, r3, #15
 80066de:	4613      	mov	r3, r2
 80066e0:	00db      	lsls	r3, r3, #3
 80066e2:	4413      	add	r3, r2
 80066e4:	009b      	lsls	r3, r3, #2
 80066e6:	3338      	adds	r3, #56	; 0x38
 80066e8:	687a      	ldr	r2, [r7, #4]
 80066ea:	4413      	add	r3, r2
 80066ec:	3304      	adds	r3, #4
 80066ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2201      	movs	r2, #1
 80066f4:	705a      	strb	r2, [r3, #1]
 80066f6:	e00f      	b.n	8006718 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80066f8:	78fb      	ldrb	r3, [r7, #3]
 80066fa:	f003 020f 	and.w	r2, r3, #15
 80066fe:	4613      	mov	r3, r2
 8006700:	00db      	lsls	r3, r3, #3
 8006702:	4413      	add	r3, r2
 8006704:	009b      	lsls	r3, r3, #2
 8006706:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800670a:	687a      	ldr	r2, [r7, #4]
 800670c:	4413      	add	r3, r2
 800670e:	3304      	adds	r3, #4
 8006710:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2200      	movs	r2, #0
 8006716:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006718:	78fb      	ldrb	r3, [r7, #3]
 800671a:	f003 030f 	and.w	r3, r3, #15
 800671e:	b2da      	uxtb	r2, r3
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800672a:	2b01      	cmp	r3, #1
 800672c:	d101      	bne.n	8006732 <HAL_PCD_EP_Close+0x6e>
 800672e:	2302      	movs	r3, #2
 8006730:	e00e      	b.n	8006750 <HAL_PCD_EP_Close+0x8c>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2201      	movs	r2, #1
 8006736:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	68f9      	ldr	r1, [r7, #12]
 8006740:	4618      	mov	r0, r3
 8006742:	f002 fcbb 	bl	80090bc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2200      	movs	r2, #0
 800674a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800674e:	2300      	movs	r3, #0
}
 8006750:	4618      	mov	r0, r3
 8006752:	3710      	adds	r7, #16
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}

08006758 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b086      	sub	sp, #24
 800675c:	af00      	add	r7, sp, #0
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	607a      	str	r2, [r7, #4]
 8006762:	603b      	str	r3, [r7, #0]
 8006764:	460b      	mov	r3, r1
 8006766:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006768:	7afb      	ldrb	r3, [r7, #11]
 800676a:	f003 020f 	and.w	r2, r3, #15
 800676e:	4613      	mov	r3, r2
 8006770:	00db      	lsls	r3, r3, #3
 8006772:	4413      	add	r3, r2
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800677a:	68fa      	ldr	r2, [r7, #12]
 800677c:	4413      	add	r3, r2
 800677e:	3304      	adds	r3, #4
 8006780:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	687a      	ldr	r2, [r7, #4]
 8006786:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	683a      	ldr	r2, [r7, #0]
 800678c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	2200      	movs	r2, #0
 8006792:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	2200      	movs	r2, #0
 8006798:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800679a:	7afb      	ldrb	r3, [r7, #11]
 800679c:	f003 030f 	and.w	r3, r3, #15
 80067a0:	b2da      	uxtb	r2, r3
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	691b      	ldr	r3, [r3, #16]
 80067aa:	2b01      	cmp	r3, #1
 80067ac:	d102      	bne.n	80067b4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80067ae:	687a      	ldr	r2, [r7, #4]
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80067b4:	7afb      	ldrb	r3, [r7, #11]
 80067b6:	f003 030f 	and.w	r3, r3, #15
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d109      	bne.n	80067d2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	6818      	ldr	r0, [r3, #0]
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	691b      	ldr	r3, [r3, #16]
 80067c6:	b2db      	uxtb	r3, r3
 80067c8:	461a      	mov	r2, r3
 80067ca:	6979      	ldr	r1, [r7, #20]
 80067cc:	f002 ff9a 	bl	8009704 <USB_EP0StartXfer>
 80067d0:	e008      	b.n	80067e4 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	6818      	ldr	r0, [r3, #0]
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	691b      	ldr	r3, [r3, #16]
 80067da:	b2db      	uxtb	r3, r3
 80067dc:	461a      	mov	r2, r3
 80067de:	6979      	ldr	r1, [r7, #20]
 80067e0:	f002 fd48 	bl	8009274 <USB_EPStartXfer>
  }

  return HAL_OK;
 80067e4:	2300      	movs	r3, #0
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3718      	adds	r7, #24
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}

080067ee <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80067ee:	b580      	push	{r7, lr}
 80067f0:	b086      	sub	sp, #24
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	60f8      	str	r0, [r7, #12]
 80067f6:	607a      	str	r2, [r7, #4]
 80067f8:	603b      	str	r3, [r7, #0]
 80067fa:	460b      	mov	r3, r1
 80067fc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80067fe:	7afb      	ldrb	r3, [r7, #11]
 8006800:	f003 020f 	and.w	r2, r3, #15
 8006804:	4613      	mov	r3, r2
 8006806:	00db      	lsls	r3, r3, #3
 8006808:	4413      	add	r3, r2
 800680a:	009b      	lsls	r3, r3, #2
 800680c:	3338      	adds	r3, #56	; 0x38
 800680e:	68fa      	ldr	r2, [r7, #12]
 8006810:	4413      	add	r3, r2
 8006812:	3304      	adds	r3, #4
 8006814:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	687a      	ldr	r2, [r7, #4]
 800681a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	683a      	ldr	r2, [r7, #0]
 8006820:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	2200      	movs	r2, #0
 8006826:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	2201      	movs	r2, #1
 800682c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800682e:	7afb      	ldrb	r3, [r7, #11]
 8006830:	f003 030f 	and.w	r3, r3, #15
 8006834:	b2da      	uxtb	r2, r3
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	691b      	ldr	r3, [r3, #16]
 800683e:	2b01      	cmp	r3, #1
 8006840:	d102      	bne.n	8006848 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006842:	687a      	ldr	r2, [r7, #4]
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006848:	7afb      	ldrb	r3, [r7, #11]
 800684a:	f003 030f 	and.w	r3, r3, #15
 800684e:	2b00      	cmp	r3, #0
 8006850:	d109      	bne.n	8006866 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	6818      	ldr	r0, [r3, #0]
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	691b      	ldr	r3, [r3, #16]
 800685a:	b2db      	uxtb	r3, r3
 800685c:	461a      	mov	r2, r3
 800685e:	6979      	ldr	r1, [r7, #20]
 8006860:	f002 ff50 	bl	8009704 <USB_EP0StartXfer>
 8006864:	e008      	b.n	8006878 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	6818      	ldr	r0, [r3, #0]
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	691b      	ldr	r3, [r3, #16]
 800686e:	b2db      	uxtb	r3, r3
 8006870:	461a      	mov	r2, r3
 8006872:	6979      	ldr	r1, [r7, #20]
 8006874:	f002 fcfe 	bl	8009274 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006878:	2300      	movs	r3, #0
}
 800687a:	4618      	mov	r0, r3
 800687c:	3718      	adds	r7, #24
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}

08006882 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006882:	b580      	push	{r7, lr}
 8006884:	b084      	sub	sp, #16
 8006886:	af00      	add	r7, sp, #0
 8006888:	6078      	str	r0, [r7, #4]
 800688a:	460b      	mov	r3, r1
 800688c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800688e:	78fb      	ldrb	r3, [r7, #3]
 8006890:	f003 020f 	and.w	r2, r3, #15
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	429a      	cmp	r2, r3
 800689a:	d901      	bls.n	80068a0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800689c:	2301      	movs	r3, #1
 800689e:	e050      	b.n	8006942 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80068a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	da0f      	bge.n	80068c8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80068a8:	78fb      	ldrb	r3, [r7, #3]
 80068aa:	f003 020f 	and.w	r2, r3, #15
 80068ae:	4613      	mov	r3, r2
 80068b0:	00db      	lsls	r3, r3, #3
 80068b2:	4413      	add	r3, r2
 80068b4:	009b      	lsls	r3, r3, #2
 80068b6:	3338      	adds	r3, #56	; 0x38
 80068b8:	687a      	ldr	r2, [r7, #4]
 80068ba:	4413      	add	r3, r2
 80068bc:	3304      	adds	r3, #4
 80068be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	2201      	movs	r2, #1
 80068c4:	705a      	strb	r2, [r3, #1]
 80068c6:	e00d      	b.n	80068e4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80068c8:	78fa      	ldrb	r2, [r7, #3]
 80068ca:	4613      	mov	r3, r2
 80068cc:	00db      	lsls	r3, r3, #3
 80068ce:	4413      	add	r3, r2
 80068d0:	009b      	lsls	r3, r3, #2
 80068d2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80068d6:	687a      	ldr	r2, [r7, #4]
 80068d8:	4413      	add	r3, r2
 80068da:	3304      	adds	r3, #4
 80068dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2200      	movs	r2, #0
 80068e2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2201      	movs	r2, #1
 80068e8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80068ea:	78fb      	ldrb	r3, [r7, #3]
 80068ec:	f003 030f 	and.w	r3, r3, #15
 80068f0:	b2da      	uxtb	r2, r3
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d101      	bne.n	8006904 <HAL_PCD_EP_SetStall+0x82>
 8006900:	2302      	movs	r3, #2
 8006902:	e01e      	b.n	8006942 <HAL_PCD_EP_SetStall+0xc0>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2201      	movs	r2, #1
 8006908:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	68f9      	ldr	r1, [r7, #12]
 8006912:	4618      	mov	r0, r3
 8006914:	f003 f98e 	bl	8009c34 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006918:	78fb      	ldrb	r3, [r7, #3]
 800691a:	f003 030f 	and.w	r3, r3, #15
 800691e:	2b00      	cmp	r3, #0
 8006920:	d10a      	bne.n	8006938 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6818      	ldr	r0, [r3, #0]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	691b      	ldr	r3, [r3, #16]
 800692a:	b2d9      	uxtb	r1, r3
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006932:	461a      	mov	r2, r3
 8006934:	f003 fb7e 	bl	800a034 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2200      	movs	r2, #0
 800693c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006940:	2300      	movs	r3, #0
}
 8006942:	4618      	mov	r0, r3
 8006944:	3710      	adds	r7, #16
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}

0800694a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800694a:	b580      	push	{r7, lr}
 800694c:	b084      	sub	sp, #16
 800694e:	af00      	add	r7, sp, #0
 8006950:	6078      	str	r0, [r7, #4]
 8006952:	460b      	mov	r3, r1
 8006954:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006956:	78fb      	ldrb	r3, [r7, #3]
 8006958:	f003 020f 	and.w	r2, r3, #15
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	429a      	cmp	r2, r3
 8006962:	d901      	bls.n	8006968 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006964:	2301      	movs	r3, #1
 8006966:	e042      	b.n	80069ee <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006968:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800696c:	2b00      	cmp	r3, #0
 800696e:	da0f      	bge.n	8006990 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006970:	78fb      	ldrb	r3, [r7, #3]
 8006972:	f003 020f 	and.w	r2, r3, #15
 8006976:	4613      	mov	r3, r2
 8006978:	00db      	lsls	r3, r3, #3
 800697a:	4413      	add	r3, r2
 800697c:	009b      	lsls	r3, r3, #2
 800697e:	3338      	adds	r3, #56	; 0x38
 8006980:	687a      	ldr	r2, [r7, #4]
 8006982:	4413      	add	r3, r2
 8006984:	3304      	adds	r3, #4
 8006986:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2201      	movs	r2, #1
 800698c:	705a      	strb	r2, [r3, #1]
 800698e:	e00f      	b.n	80069b0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006990:	78fb      	ldrb	r3, [r7, #3]
 8006992:	f003 020f 	and.w	r2, r3, #15
 8006996:	4613      	mov	r3, r2
 8006998:	00db      	lsls	r3, r3, #3
 800699a:	4413      	add	r3, r2
 800699c:	009b      	lsls	r3, r3, #2
 800699e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	4413      	add	r3, r2
 80069a6:	3304      	adds	r3, #4
 80069a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	2200      	movs	r2, #0
 80069ae:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2200      	movs	r2, #0
 80069b4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80069b6:	78fb      	ldrb	r3, [r7, #3]
 80069b8:	f003 030f 	and.w	r3, r3, #15
 80069bc:	b2da      	uxtb	r2, r3
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80069c8:	2b01      	cmp	r3, #1
 80069ca:	d101      	bne.n	80069d0 <HAL_PCD_EP_ClrStall+0x86>
 80069cc:	2302      	movs	r3, #2
 80069ce:	e00e      	b.n	80069ee <HAL_PCD_EP_ClrStall+0xa4>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2201      	movs	r2, #1
 80069d4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	68f9      	ldr	r1, [r7, #12]
 80069de:	4618      	mov	r0, r3
 80069e0:	f003 f996 	bl	8009d10 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2200      	movs	r2, #0
 80069e8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80069ec:	2300      	movs	r3, #0
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3710      	adds	r7, #16
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}

080069f6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80069f6:	b580      	push	{r7, lr}
 80069f8:	b084      	sub	sp, #16
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	6078      	str	r0, [r7, #4]
 80069fe:	460b      	mov	r3, r1
 8006a00:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006a02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	da0c      	bge.n	8006a24 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006a0a:	78fb      	ldrb	r3, [r7, #3]
 8006a0c:	f003 020f 	and.w	r2, r3, #15
 8006a10:	4613      	mov	r3, r2
 8006a12:	00db      	lsls	r3, r3, #3
 8006a14:	4413      	add	r3, r2
 8006a16:	009b      	lsls	r3, r3, #2
 8006a18:	3338      	adds	r3, #56	; 0x38
 8006a1a:	687a      	ldr	r2, [r7, #4]
 8006a1c:	4413      	add	r3, r2
 8006a1e:	3304      	adds	r3, #4
 8006a20:	60fb      	str	r3, [r7, #12]
 8006a22:	e00c      	b.n	8006a3e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006a24:	78fb      	ldrb	r3, [r7, #3]
 8006a26:	f003 020f 	and.w	r2, r3, #15
 8006a2a:	4613      	mov	r3, r2
 8006a2c:	00db      	lsls	r3, r3, #3
 8006a2e:	4413      	add	r3, r2
 8006a30:	009b      	lsls	r3, r3, #2
 8006a32:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006a36:	687a      	ldr	r2, [r7, #4]
 8006a38:	4413      	add	r3, r2
 8006a3a:	3304      	adds	r3, #4
 8006a3c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	68f9      	ldr	r1, [r7, #12]
 8006a44:	4618      	mov	r0, r3
 8006a46:	f002 ffb5 	bl	80099b4 <USB_EPStopXfer>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006a4e:	7afb      	ldrb	r3, [r7, #11]
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	3710      	adds	r7, #16
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}

08006a58 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b08a      	sub	sp, #40	; 0x28
 8006a5c:	af02      	add	r7, sp, #8
 8006a5e:	6078      	str	r0, [r7, #4]
 8006a60:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006a6c:	683a      	ldr	r2, [r7, #0]
 8006a6e:	4613      	mov	r3, r2
 8006a70:	00db      	lsls	r3, r3, #3
 8006a72:	4413      	add	r3, r2
 8006a74:	009b      	lsls	r3, r3, #2
 8006a76:	3338      	adds	r3, #56	; 0x38
 8006a78:	687a      	ldr	r2, [r7, #4]
 8006a7a:	4413      	add	r3, r2
 8006a7c:	3304      	adds	r3, #4
 8006a7e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	6a1a      	ldr	r2, [r3, #32]
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	699b      	ldr	r3, [r3, #24]
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d901      	bls.n	8006a90 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	e06c      	b.n	8006b6a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	699a      	ldr	r2, [r3, #24]
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	6a1b      	ldr	r3, [r3, #32]
 8006a98:	1ad3      	subs	r3, r2, r3
 8006a9a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	68db      	ldr	r3, [r3, #12]
 8006aa0:	69fa      	ldr	r2, [r7, #28]
 8006aa2:	429a      	cmp	r2, r3
 8006aa4:	d902      	bls.n	8006aac <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	68db      	ldr	r3, [r3, #12]
 8006aaa:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006aac:	69fb      	ldr	r3, [r7, #28]
 8006aae:	3303      	adds	r3, #3
 8006ab0:	089b      	lsrs	r3, r3, #2
 8006ab2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006ab4:	e02b      	b.n	8006b0e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	699a      	ldr	r2, [r3, #24]
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	6a1b      	ldr	r3, [r3, #32]
 8006abe:	1ad3      	subs	r3, r2, r3
 8006ac0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	68db      	ldr	r3, [r3, #12]
 8006ac6:	69fa      	ldr	r2, [r7, #28]
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	d902      	bls.n	8006ad2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	68db      	ldr	r3, [r3, #12]
 8006ad0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006ad2:	69fb      	ldr	r3, [r7, #28]
 8006ad4:	3303      	adds	r3, #3
 8006ad6:	089b      	lsrs	r3, r3, #2
 8006ad8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	6919      	ldr	r1, [r3, #16]
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	b2da      	uxtb	r2, r3
 8006ae2:	69fb      	ldr	r3, [r7, #28]
 8006ae4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006aea:	b2db      	uxtb	r3, r3
 8006aec:	9300      	str	r3, [sp, #0]
 8006aee:	4603      	mov	r3, r0
 8006af0:	6978      	ldr	r0, [r7, #20]
 8006af2:	f003 f809 	bl	8009b08 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	691a      	ldr	r2, [r3, #16]
 8006afa:	69fb      	ldr	r3, [r7, #28]
 8006afc:	441a      	add	r2, r3
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	6a1a      	ldr	r2, [r3, #32]
 8006b06:	69fb      	ldr	r3, [r7, #28]
 8006b08:	441a      	add	r2, r3
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	015a      	lsls	r2, r3, #5
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	4413      	add	r3, r2
 8006b16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b1a:	699b      	ldr	r3, [r3, #24]
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	69ba      	ldr	r2, [r7, #24]
 8006b20:	429a      	cmp	r2, r3
 8006b22:	d809      	bhi.n	8006b38 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	6a1a      	ldr	r2, [r3, #32]
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006b2c:	429a      	cmp	r2, r3
 8006b2e:	d203      	bcs.n	8006b38 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	699b      	ldr	r3, [r3, #24]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d1be      	bne.n	8006ab6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	699a      	ldr	r2, [r3, #24]
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	6a1b      	ldr	r3, [r3, #32]
 8006b40:	429a      	cmp	r2, r3
 8006b42:	d811      	bhi.n	8006b68 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	f003 030f 	and.w	r3, r3, #15
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b50:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	43db      	mvns	r3, r3
 8006b5e:	6939      	ldr	r1, [r7, #16]
 8006b60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b64:	4013      	ands	r3, r2
 8006b66:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006b68:	2300      	movs	r3, #0
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	3720      	adds	r7, #32
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}
	...

08006b74 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b088      	sub	sp, #32
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
 8006b7c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b84:	69fb      	ldr	r3, [r7, #28]
 8006b86:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006b88:	69fb      	ldr	r3, [r7, #28]
 8006b8a:	333c      	adds	r3, #60	; 0x3c
 8006b8c:	3304      	adds	r3, #4
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	015a      	lsls	r2, r3, #5
 8006b96:	69bb      	ldr	r3, [r7, #24]
 8006b98:	4413      	add	r3, r2
 8006b9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b9e:	689b      	ldr	r3, [r3, #8]
 8006ba0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	691b      	ldr	r3, [r3, #16]
 8006ba6:	2b01      	cmp	r3, #1
 8006ba8:	d17b      	bne.n	8006ca2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	f003 0308 	and.w	r3, r3, #8
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d015      	beq.n	8006be0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	4a61      	ldr	r2, [pc, #388]	; (8006d3c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	f240 80b9 	bls.w	8006d30 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	f000 80b3 	beq.w	8006d30 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	015a      	lsls	r2, r3, #5
 8006bce:	69bb      	ldr	r3, [r7, #24]
 8006bd0:	4413      	add	r3, r2
 8006bd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006bdc:	6093      	str	r3, [r2, #8]
 8006bde:	e0a7      	b.n	8006d30 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	f003 0320 	and.w	r3, r3, #32
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d009      	beq.n	8006bfe <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	015a      	lsls	r2, r3, #5
 8006bee:	69bb      	ldr	r3, [r7, #24]
 8006bf0:	4413      	add	r3, r2
 8006bf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bf6:	461a      	mov	r2, r3
 8006bf8:	2320      	movs	r3, #32
 8006bfa:	6093      	str	r3, [r2, #8]
 8006bfc:	e098      	b.n	8006d30 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	f040 8093 	bne.w	8006d30 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	4a4b      	ldr	r2, [pc, #300]	; (8006d3c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d90f      	bls.n	8006c32 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d00a      	beq.n	8006c32 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	015a      	lsls	r2, r3, #5
 8006c20:	69bb      	ldr	r3, [r7, #24]
 8006c22:	4413      	add	r3, r2
 8006c24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c28:	461a      	mov	r2, r3
 8006c2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c2e:	6093      	str	r3, [r2, #8]
 8006c30:	e07e      	b.n	8006d30 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006c32:	683a      	ldr	r2, [r7, #0]
 8006c34:	4613      	mov	r3, r2
 8006c36:	00db      	lsls	r3, r3, #3
 8006c38:	4413      	add	r3, r2
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006c40:	687a      	ldr	r2, [r7, #4]
 8006c42:	4413      	add	r3, r2
 8006c44:	3304      	adds	r3, #4
 8006c46:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	69da      	ldr	r2, [r3, #28]
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	0159      	lsls	r1, r3, #5
 8006c50:	69bb      	ldr	r3, [r7, #24]
 8006c52:	440b      	add	r3, r1
 8006c54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c58:	691b      	ldr	r3, [r3, #16]
 8006c5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c5e:	1ad2      	subs	r2, r2, r3
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d114      	bne.n	8006c94 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	699b      	ldr	r3, [r3, #24]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d109      	bne.n	8006c86 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6818      	ldr	r0, [r3, #0]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006c7c:	461a      	mov	r2, r3
 8006c7e:	2101      	movs	r1, #1
 8006c80:	f003 f9d8 	bl	800a034 <USB_EP0_OutStart>
 8006c84:	e006      	b.n	8006c94 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	691a      	ldr	r2, [r3, #16]
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	6a1b      	ldr	r3, [r3, #32]
 8006c8e:	441a      	add	r2, r3
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	b2db      	uxtb	r3, r3
 8006c98:	4619      	mov	r1, r3
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f005 f944 	bl	800bf28 <HAL_PCD_DataOutStageCallback>
 8006ca0:	e046      	b.n	8006d30 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	4a26      	ldr	r2, [pc, #152]	; (8006d40 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d124      	bne.n	8006cf4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d00a      	beq.n	8006cca <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	015a      	lsls	r2, r3, #5
 8006cb8:	69bb      	ldr	r3, [r7, #24]
 8006cba:	4413      	add	r3, r2
 8006cbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cc0:	461a      	mov	r2, r3
 8006cc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cc6:	6093      	str	r3, [r2, #8]
 8006cc8:	e032      	b.n	8006d30 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	f003 0320 	and.w	r3, r3, #32
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d008      	beq.n	8006ce6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	015a      	lsls	r2, r3, #5
 8006cd8:	69bb      	ldr	r3, [r7, #24]
 8006cda:	4413      	add	r3, r2
 8006cdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ce0:	461a      	mov	r2, r3
 8006ce2:	2320      	movs	r3, #32
 8006ce4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	b2db      	uxtb	r3, r3
 8006cea:	4619      	mov	r1, r3
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f005 f91b 	bl	800bf28 <HAL_PCD_DataOutStageCallback>
 8006cf2:	e01d      	b.n	8006d30 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d114      	bne.n	8006d24 <PCD_EP_OutXfrComplete_int+0x1b0>
 8006cfa:	6879      	ldr	r1, [r7, #4]
 8006cfc:	683a      	ldr	r2, [r7, #0]
 8006cfe:	4613      	mov	r3, r2
 8006d00:	00db      	lsls	r3, r3, #3
 8006d02:	4413      	add	r3, r2
 8006d04:	009b      	lsls	r3, r3, #2
 8006d06:	440b      	add	r3, r1
 8006d08:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d108      	bne.n	8006d24 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6818      	ldr	r0, [r3, #0]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006d1c:	461a      	mov	r2, r3
 8006d1e:	2100      	movs	r1, #0
 8006d20:	f003 f988 	bl	800a034 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	b2db      	uxtb	r3, r3
 8006d28:	4619      	mov	r1, r3
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f005 f8fc 	bl	800bf28 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006d30:	2300      	movs	r3, #0
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3720      	adds	r7, #32
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}
 8006d3a:	bf00      	nop
 8006d3c:	4f54300a 	.word	0x4f54300a
 8006d40:	4f54310a 	.word	0x4f54310a

08006d44 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b086      	sub	sp, #24
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	333c      	adds	r3, #60	; 0x3c
 8006d5c:	3304      	adds	r3, #4
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	015a      	lsls	r2, r3, #5
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	4413      	add	r3, r2
 8006d6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	4a15      	ldr	r2, [pc, #84]	; (8006dcc <PCD_EP_OutSetupPacket_int+0x88>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d90e      	bls.n	8006d98 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d009      	beq.n	8006d98 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	015a      	lsls	r2, r3, #5
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	4413      	add	r3, r2
 8006d8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d90:	461a      	mov	r2, r3
 8006d92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d96:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f005 f8b3 	bl	800bf04 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	4a0a      	ldr	r2, [pc, #40]	; (8006dcc <PCD_EP_OutSetupPacket_int+0x88>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d90c      	bls.n	8006dc0 <PCD_EP_OutSetupPacket_int+0x7c>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	691b      	ldr	r3, [r3, #16]
 8006daa:	2b01      	cmp	r3, #1
 8006dac:	d108      	bne.n	8006dc0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6818      	ldr	r0, [r3, #0]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006db8:	461a      	mov	r2, r3
 8006dba:	2101      	movs	r1, #1
 8006dbc:	f003 f93a 	bl	800a034 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006dc0:	2300      	movs	r3, #0
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3718      	adds	r7, #24
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}
 8006dca:	bf00      	nop
 8006dcc:	4f54300a 	.word	0x4f54300a

08006dd0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b085      	sub	sp, #20
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	460b      	mov	r3, r1
 8006dda:	70fb      	strb	r3, [r7, #3]
 8006ddc:	4613      	mov	r3, r2
 8006dde:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006de8:	78fb      	ldrb	r3, [r7, #3]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d107      	bne.n	8006dfe <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006dee:	883b      	ldrh	r3, [r7, #0]
 8006df0:	0419      	lsls	r1, r3, #16
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	68ba      	ldr	r2, [r7, #8]
 8006df8:	430a      	orrs	r2, r1
 8006dfa:	629a      	str	r2, [r3, #40]	; 0x28
 8006dfc:	e028      	b.n	8006e50 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e04:	0c1b      	lsrs	r3, r3, #16
 8006e06:	68ba      	ldr	r2, [r7, #8]
 8006e08:	4413      	add	r3, r2
 8006e0a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	73fb      	strb	r3, [r7, #15]
 8006e10:	e00d      	b.n	8006e2e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681a      	ldr	r2, [r3, #0]
 8006e16:	7bfb      	ldrb	r3, [r7, #15]
 8006e18:	3340      	adds	r3, #64	; 0x40
 8006e1a:	009b      	lsls	r3, r3, #2
 8006e1c:	4413      	add	r3, r2
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	0c1b      	lsrs	r3, r3, #16
 8006e22:	68ba      	ldr	r2, [r7, #8]
 8006e24:	4413      	add	r3, r2
 8006e26:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006e28:	7bfb      	ldrb	r3, [r7, #15]
 8006e2a:	3301      	adds	r3, #1
 8006e2c:	73fb      	strb	r3, [r7, #15]
 8006e2e:	7bfa      	ldrb	r2, [r7, #15]
 8006e30:	78fb      	ldrb	r3, [r7, #3]
 8006e32:	3b01      	subs	r3, #1
 8006e34:	429a      	cmp	r2, r3
 8006e36:	d3ec      	bcc.n	8006e12 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006e38:	883b      	ldrh	r3, [r7, #0]
 8006e3a:	0418      	lsls	r0, r3, #16
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6819      	ldr	r1, [r3, #0]
 8006e40:	78fb      	ldrb	r3, [r7, #3]
 8006e42:	3b01      	subs	r3, #1
 8006e44:	68ba      	ldr	r2, [r7, #8]
 8006e46:	4302      	orrs	r2, r0
 8006e48:	3340      	adds	r3, #64	; 0x40
 8006e4a:	009b      	lsls	r3, r3, #2
 8006e4c:	440b      	add	r3, r1
 8006e4e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006e50:	2300      	movs	r3, #0
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3714      	adds	r7, #20
 8006e56:	46bd      	mov	sp, r7
 8006e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5c:	4770      	bx	lr

08006e5e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006e5e:	b480      	push	{r7}
 8006e60:	b083      	sub	sp, #12
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	6078      	str	r0, [r7, #4]
 8006e66:	460b      	mov	r3, r1
 8006e68:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	887a      	ldrh	r2, [r7, #2]
 8006e70:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006e72:	2300      	movs	r3, #0
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	370c      	adds	r7, #12
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7e:	4770      	bx	lr

08006e80 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006e80:	b480      	push	{r7}
 8006e82:	b083      	sub	sp, #12
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
 8006e88:	460b      	mov	r3, r1
 8006e8a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006e8c:	bf00      	nop
 8006e8e:	370c      	adds	r7, #12
 8006e90:	46bd      	mov	sp, r7
 8006e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e96:	4770      	bx	lr

08006e98 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b086      	sub	sp, #24
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d101      	bne.n	8006eaa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	e269      	b.n	800737e <HAL_RCC_OscConfig+0x4e6>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f003 0301 	and.w	r3, r3, #1
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d077      	beq.n	8006fa6 <HAL_RCC_OscConfig+0x10e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006eb6:	4b89      	ldr	r3, [pc, #548]	; (80070dc <HAL_RCC_OscConfig+0x244>)
 8006eb8:	689b      	ldr	r3, [r3, #8]
 8006eba:	f003 030c 	and.w	r3, r3, #12
 8006ebe:	2b04      	cmp	r3, #4
 8006ec0:	d00c      	beq.n	8006edc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006ec2:	4b86      	ldr	r3, [pc, #536]	; (80070dc <HAL_RCC_OscConfig+0x244>)
 8006ec4:	689b      	ldr	r3, [r3, #8]
 8006ec6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006eca:	2b08      	cmp	r3, #8
 8006ecc:	d112      	bne.n	8006ef4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006ece:	4b83      	ldr	r3, [pc, #524]	; (80070dc <HAL_RCC_OscConfig+0x244>)
 8006ed0:	685b      	ldr	r3, [r3, #4]
 8006ed2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ed6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006eda:	d10b      	bne.n	8006ef4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006edc:	4b7f      	ldr	r3, [pc, #508]	; (80070dc <HAL_RCC_OscConfig+0x244>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d05d      	beq.n	8006fa4 <HAL_RCC_OscConfig+0x10c>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d159      	bne.n	8006fa4 <HAL_RCC_OscConfig+0x10c>
      {
        return HAL_ERROR;
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	e244      	b.n	800737e <HAL_RCC_OscConfig+0x4e6>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006efc:	d106      	bne.n	8006f0c <HAL_RCC_OscConfig+0x74>
 8006efe:	4b77      	ldr	r3, [pc, #476]	; (80070dc <HAL_RCC_OscConfig+0x244>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a76      	ldr	r2, [pc, #472]	; (80070dc <HAL_RCC_OscConfig+0x244>)
 8006f04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f08:	6013      	str	r3, [r2, #0]
 8006f0a:	e01d      	b.n	8006f48 <HAL_RCC_OscConfig+0xb0>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006f14:	d10c      	bne.n	8006f30 <HAL_RCC_OscConfig+0x98>
 8006f16:	4b71      	ldr	r3, [pc, #452]	; (80070dc <HAL_RCC_OscConfig+0x244>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a70      	ldr	r2, [pc, #448]	; (80070dc <HAL_RCC_OscConfig+0x244>)
 8006f1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006f20:	6013      	str	r3, [r2, #0]
 8006f22:	4b6e      	ldr	r3, [pc, #440]	; (80070dc <HAL_RCC_OscConfig+0x244>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a6d      	ldr	r2, [pc, #436]	; (80070dc <HAL_RCC_OscConfig+0x244>)
 8006f28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f2c:	6013      	str	r3, [r2, #0]
 8006f2e:	e00b      	b.n	8006f48 <HAL_RCC_OscConfig+0xb0>
 8006f30:	4b6a      	ldr	r3, [pc, #424]	; (80070dc <HAL_RCC_OscConfig+0x244>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a69      	ldr	r2, [pc, #420]	; (80070dc <HAL_RCC_OscConfig+0x244>)
 8006f36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f3a:	6013      	str	r3, [r2, #0]
 8006f3c:	4b67      	ldr	r3, [pc, #412]	; (80070dc <HAL_RCC_OscConfig+0x244>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a66      	ldr	r2, [pc, #408]	; (80070dc <HAL_RCC_OscConfig+0x244>)
 8006f42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d014      	beq.n	8006f7a <HAL_RCC_OscConfig+0xe2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f50:	f7fb fb32 	bl	80025b8 <HAL_GetTick>
 8006f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f56:	e009      	b.n	8006f6c <HAL_RCC_OscConfig+0xd4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006f58:	f7fb fb2e 	bl	80025b8 <HAL_GetTick>
 8006f5c:	4602      	mov	r2, r0
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	1ad3      	subs	r3, r2, r3
 8006f62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f66:	d901      	bls.n	8006f6c <HAL_RCC_OscConfig+0xd4>
          {
            return HAL_TIMEOUT;
 8006f68:	2303      	movs	r3, #3
 8006f6a:	e208      	b.n	800737e <HAL_RCC_OscConfig+0x4e6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f6c:	4b5b      	ldr	r3, [pc, #364]	; (80070dc <HAL_RCC_OscConfig+0x244>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d0ef      	beq.n	8006f58 <HAL_RCC_OscConfig+0xc0>
 8006f78:	e015      	b.n	8006fa6 <HAL_RCC_OscConfig+0x10e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f7a:	f7fb fb1d 	bl	80025b8 <HAL_GetTick>
 8006f7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f80:	e009      	b.n	8006f96 <HAL_RCC_OscConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006f82:	f7fb fb19 	bl	80025b8 <HAL_GetTick>
 8006f86:	4602      	mov	r2, r0
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	1ad3      	subs	r3, r2, r3
 8006f8c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f90:	d901      	bls.n	8006f96 <HAL_RCC_OscConfig+0xfe>
          {
            return HAL_TIMEOUT;
 8006f92:	2303      	movs	r3, #3
 8006f94:	e1f3      	b.n	800737e <HAL_RCC_OscConfig+0x4e6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f96:	4b51      	ldr	r3, [pc, #324]	; (80070dc <HAL_RCC_OscConfig+0x244>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d1ef      	bne.n	8006f82 <HAL_RCC_OscConfig+0xea>
 8006fa2:	e000      	b.n	8006fa6 <HAL_RCC_OscConfig+0x10e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006fa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f003 0302 	and.w	r3, r3, #2
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d063      	beq.n	800707a <HAL_RCC_OscConfig+0x1e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006fb2:	4b4a      	ldr	r3, [pc, #296]	; (80070dc <HAL_RCC_OscConfig+0x244>)
 8006fb4:	689b      	ldr	r3, [r3, #8]
 8006fb6:	f003 030c 	and.w	r3, r3, #12
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d00b      	beq.n	8006fd6 <HAL_RCC_OscConfig+0x13e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006fbe:	4b47      	ldr	r3, [pc, #284]	; (80070dc <HAL_RCC_OscConfig+0x244>)
 8006fc0:	689b      	ldr	r3, [r3, #8]
 8006fc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006fc6:	2b08      	cmp	r3, #8
 8006fc8:	d11c      	bne.n	8007004 <HAL_RCC_OscConfig+0x16c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006fca:	4b44      	ldr	r3, [pc, #272]	; (80070dc <HAL_RCC_OscConfig+0x244>)
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d116      	bne.n	8007004 <HAL_RCC_OscConfig+0x16c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006fd6:	4b41      	ldr	r3, [pc, #260]	; (80070dc <HAL_RCC_OscConfig+0x244>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f003 0302 	and.w	r3, r3, #2
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d005      	beq.n	8006fee <HAL_RCC_OscConfig+0x156>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	68db      	ldr	r3, [r3, #12]
 8006fe6:	2b01      	cmp	r3, #1
 8006fe8:	d001      	beq.n	8006fee <HAL_RCC_OscConfig+0x156>
      {
        return HAL_ERROR;
 8006fea:	2301      	movs	r3, #1
 8006fec:	e1c7      	b.n	800737e <HAL_RCC_OscConfig+0x4e6>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006fee:	4b3b      	ldr	r3, [pc, #236]	; (80070dc <HAL_RCC_OscConfig+0x244>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	691b      	ldr	r3, [r3, #16]
 8006ffa:	00db      	lsls	r3, r3, #3
 8006ffc:	4937      	ldr	r1, [pc, #220]	; (80070dc <HAL_RCC_OscConfig+0x244>)
 8006ffe:	4313      	orrs	r3, r2
 8007000:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007002:	e03a      	b.n	800707a <HAL_RCC_OscConfig+0x1e2>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	68db      	ldr	r3, [r3, #12]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d020      	beq.n	800704e <HAL_RCC_OscConfig+0x1b6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800700c:	4b34      	ldr	r3, [pc, #208]	; (80070e0 <HAL_RCC_OscConfig+0x248>)
 800700e:	2201      	movs	r2, #1
 8007010:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007012:	f7fb fad1 	bl	80025b8 <HAL_GetTick>
 8007016:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007018:	e008      	b.n	800702c <HAL_RCC_OscConfig+0x194>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800701a:	f7fb facd 	bl	80025b8 <HAL_GetTick>
 800701e:	4602      	mov	r2, r0
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	1ad3      	subs	r3, r2, r3
 8007024:	2b02      	cmp	r3, #2
 8007026:	d901      	bls.n	800702c <HAL_RCC_OscConfig+0x194>
          {
            return HAL_TIMEOUT;
 8007028:	2303      	movs	r3, #3
 800702a:	e1a8      	b.n	800737e <HAL_RCC_OscConfig+0x4e6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800702c:	4b2b      	ldr	r3, [pc, #172]	; (80070dc <HAL_RCC_OscConfig+0x244>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f003 0302 	and.w	r3, r3, #2
 8007034:	2b00      	cmp	r3, #0
 8007036:	d0f0      	beq.n	800701a <HAL_RCC_OscConfig+0x182>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007038:	4b28      	ldr	r3, [pc, #160]	; (80070dc <HAL_RCC_OscConfig+0x244>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	691b      	ldr	r3, [r3, #16]
 8007044:	00db      	lsls	r3, r3, #3
 8007046:	4925      	ldr	r1, [pc, #148]	; (80070dc <HAL_RCC_OscConfig+0x244>)
 8007048:	4313      	orrs	r3, r2
 800704a:	600b      	str	r3, [r1, #0]
 800704c:	e015      	b.n	800707a <HAL_RCC_OscConfig+0x1e2>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800704e:	4b24      	ldr	r3, [pc, #144]	; (80070e0 <HAL_RCC_OscConfig+0x248>)
 8007050:	2200      	movs	r2, #0
 8007052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007054:	f7fb fab0 	bl	80025b8 <HAL_GetTick>
 8007058:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800705a:	e008      	b.n	800706e <HAL_RCC_OscConfig+0x1d6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800705c:	f7fb faac 	bl	80025b8 <HAL_GetTick>
 8007060:	4602      	mov	r2, r0
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	1ad3      	subs	r3, r2, r3
 8007066:	2b02      	cmp	r3, #2
 8007068:	d901      	bls.n	800706e <HAL_RCC_OscConfig+0x1d6>
          {
            return HAL_TIMEOUT;
 800706a:	2303      	movs	r3, #3
 800706c:	e187      	b.n	800737e <HAL_RCC_OscConfig+0x4e6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800706e:	4b1b      	ldr	r3, [pc, #108]	; (80070dc <HAL_RCC_OscConfig+0x244>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f003 0302 	and.w	r3, r3, #2
 8007076:	2b00      	cmp	r3, #0
 8007078:	d1f0      	bne.n	800705c <HAL_RCC_OscConfig+0x1c4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f003 0308 	and.w	r3, r3, #8
 8007082:	2b00      	cmp	r3, #0
 8007084:	d036      	beq.n	80070f4 <HAL_RCC_OscConfig+0x25c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	695b      	ldr	r3, [r3, #20]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d016      	beq.n	80070bc <HAL_RCC_OscConfig+0x224>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800708e:	4b15      	ldr	r3, [pc, #84]	; (80070e4 <HAL_RCC_OscConfig+0x24c>)
 8007090:	2201      	movs	r2, #1
 8007092:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007094:	f7fb fa90 	bl	80025b8 <HAL_GetTick>
 8007098:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800709a:	e008      	b.n	80070ae <HAL_RCC_OscConfig+0x216>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800709c:	f7fb fa8c 	bl	80025b8 <HAL_GetTick>
 80070a0:	4602      	mov	r2, r0
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	1ad3      	subs	r3, r2, r3
 80070a6:	2b02      	cmp	r3, #2
 80070a8:	d901      	bls.n	80070ae <HAL_RCC_OscConfig+0x216>
        {
          return HAL_TIMEOUT;
 80070aa:	2303      	movs	r3, #3
 80070ac:	e167      	b.n	800737e <HAL_RCC_OscConfig+0x4e6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80070ae:	4b0b      	ldr	r3, [pc, #44]	; (80070dc <HAL_RCC_OscConfig+0x244>)
 80070b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070b2:	f003 0302 	and.w	r3, r3, #2
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d0f0      	beq.n	800709c <HAL_RCC_OscConfig+0x204>
 80070ba:	e01b      	b.n	80070f4 <HAL_RCC_OscConfig+0x25c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80070bc:	4b09      	ldr	r3, [pc, #36]	; (80070e4 <HAL_RCC_OscConfig+0x24c>)
 80070be:	2200      	movs	r2, #0
 80070c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80070c2:	f7fb fa79 	bl	80025b8 <HAL_GetTick>
 80070c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80070c8:	e00e      	b.n	80070e8 <HAL_RCC_OscConfig+0x250>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80070ca:	f7fb fa75 	bl	80025b8 <HAL_GetTick>
 80070ce:	4602      	mov	r2, r0
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	1ad3      	subs	r3, r2, r3
 80070d4:	2b02      	cmp	r3, #2
 80070d6:	d907      	bls.n	80070e8 <HAL_RCC_OscConfig+0x250>
        {
          return HAL_TIMEOUT;
 80070d8:	2303      	movs	r3, #3
 80070da:	e150      	b.n	800737e <HAL_RCC_OscConfig+0x4e6>
 80070dc:	40023800 	.word	0x40023800
 80070e0:	42470000 	.word	0x42470000
 80070e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80070e8:	4b88      	ldr	r3, [pc, #544]	; (800730c <HAL_RCC_OscConfig+0x474>)
 80070ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070ec:	f003 0302 	and.w	r3, r3, #2
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d1ea      	bne.n	80070ca <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f003 0304 	and.w	r3, r3, #4
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	f000 8097 	beq.w	8007230 <HAL_RCC_OscConfig+0x398>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007102:	2300      	movs	r3, #0
 8007104:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007106:	4b81      	ldr	r3, [pc, #516]	; (800730c <HAL_RCC_OscConfig+0x474>)
 8007108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800710a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800710e:	2b00      	cmp	r3, #0
 8007110:	d10f      	bne.n	8007132 <HAL_RCC_OscConfig+0x29a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007112:	2300      	movs	r3, #0
 8007114:	60bb      	str	r3, [r7, #8]
 8007116:	4b7d      	ldr	r3, [pc, #500]	; (800730c <HAL_RCC_OscConfig+0x474>)
 8007118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800711a:	4a7c      	ldr	r2, [pc, #496]	; (800730c <HAL_RCC_OscConfig+0x474>)
 800711c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007120:	6413      	str	r3, [r2, #64]	; 0x40
 8007122:	4b7a      	ldr	r3, [pc, #488]	; (800730c <HAL_RCC_OscConfig+0x474>)
 8007124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800712a:	60bb      	str	r3, [r7, #8]
 800712c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800712e:	2301      	movs	r3, #1
 8007130:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007132:	4b77      	ldr	r3, [pc, #476]	; (8007310 <HAL_RCC_OscConfig+0x478>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800713a:	2b00      	cmp	r3, #0
 800713c:	d118      	bne.n	8007170 <HAL_RCC_OscConfig+0x2d8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800713e:	4b74      	ldr	r3, [pc, #464]	; (8007310 <HAL_RCC_OscConfig+0x478>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a73      	ldr	r2, [pc, #460]	; (8007310 <HAL_RCC_OscConfig+0x478>)
 8007144:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007148:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800714a:	f7fb fa35 	bl	80025b8 <HAL_GetTick>
 800714e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007150:	e008      	b.n	8007164 <HAL_RCC_OscConfig+0x2cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007152:	f7fb fa31 	bl	80025b8 <HAL_GetTick>
 8007156:	4602      	mov	r2, r0
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	1ad3      	subs	r3, r2, r3
 800715c:	2b02      	cmp	r3, #2
 800715e:	d901      	bls.n	8007164 <HAL_RCC_OscConfig+0x2cc>
        {
          return HAL_TIMEOUT;
 8007160:	2303      	movs	r3, #3
 8007162:	e10c      	b.n	800737e <HAL_RCC_OscConfig+0x4e6>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007164:	4b6a      	ldr	r3, [pc, #424]	; (8007310 <HAL_RCC_OscConfig+0x478>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800716c:	2b00      	cmp	r3, #0
 800716e:	d0f0      	beq.n	8007152 <HAL_RCC_OscConfig+0x2ba>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	689b      	ldr	r3, [r3, #8]
 8007174:	2b01      	cmp	r3, #1
 8007176:	d106      	bne.n	8007186 <HAL_RCC_OscConfig+0x2ee>
 8007178:	4b64      	ldr	r3, [pc, #400]	; (800730c <HAL_RCC_OscConfig+0x474>)
 800717a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800717c:	4a63      	ldr	r2, [pc, #396]	; (800730c <HAL_RCC_OscConfig+0x474>)
 800717e:	f043 0301 	orr.w	r3, r3, #1
 8007182:	6713      	str	r3, [r2, #112]	; 0x70
 8007184:	e01c      	b.n	80071c0 <HAL_RCC_OscConfig+0x328>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	689b      	ldr	r3, [r3, #8]
 800718a:	2b05      	cmp	r3, #5
 800718c:	d10c      	bne.n	80071a8 <HAL_RCC_OscConfig+0x310>
 800718e:	4b5f      	ldr	r3, [pc, #380]	; (800730c <HAL_RCC_OscConfig+0x474>)
 8007190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007192:	4a5e      	ldr	r2, [pc, #376]	; (800730c <HAL_RCC_OscConfig+0x474>)
 8007194:	f043 0304 	orr.w	r3, r3, #4
 8007198:	6713      	str	r3, [r2, #112]	; 0x70
 800719a:	4b5c      	ldr	r3, [pc, #368]	; (800730c <HAL_RCC_OscConfig+0x474>)
 800719c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800719e:	4a5b      	ldr	r2, [pc, #364]	; (800730c <HAL_RCC_OscConfig+0x474>)
 80071a0:	f043 0301 	orr.w	r3, r3, #1
 80071a4:	6713      	str	r3, [r2, #112]	; 0x70
 80071a6:	e00b      	b.n	80071c0 <HAL_RCC_OscConfig+0x328>
 80071a8:	4b58      	ldr	r3, [pc, #352]	; (800730c <HAL_RCC_OscConfig+0x474>)
 80071aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071ac:	4a57      	ldr	r2, [pc, #348]	; (800730c <HAL_RCC_OscConfig+0x474>)
 80071ae:	f023 0301 	bic.w	r3, r3, #1
 80071b2:	6713      	str	r3, [r2, #112]	; 0x70
 80071b4:	4b55      	ldr	r3, [pc, #340]	; (800730c <HAL_RCC_OscConfig+0x474>)
 80071b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071b8:	4a54      	ldr	r2, [pc, #336]	; (800730c <HAL_RCC_OscConfig+0x474>)
 80071ba:	f023 0304 	bic.w	r3, r3, #4
 80071be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	689b      	ldr	r3, [r3, #8]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d015      	beq.n	80071f4 <HAL_RCC_OscConfig+0x35c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071c8:	f7fb f9f6 	bl	80025b8 <HAL_GetTick>
 80071cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071ce:	e00a      	b.n	80071e6 <HAL_RCC_OscConfig+0x34e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80071d0:	f7fb f9f2 	bl	80025b8 <HAL_GetTick>
 80071d4:	4602      	mov	r2, r0
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	1ad3      	subs	r3, r2, r3
 80071da:	f241 3288 	movw	r2, #5000	; 0x1388
 80071de:	4293      	cmp	r3, r2
 80071e0:	d901      	bls.n	80071e6 <HAL_RCC_OscConfig+0x34e>
        {
          return HAL_TIMEOUT;
 80071e2:	2303      	movs	r3, #3
 80071e4:	e0cb      	b.n	800737e <HAL_RCC_OscConfig+0x4e6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071e6:	4b49      	ldr	r3, [pc, #292]	; (800730c <HAL_RCC_OscConfig+0x474>)
 80071e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071ea:	f003 0302 	and.w	r3, r3, #2
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d0ee      	beq.n	80071d0 <HAL_RCC_OscConfig+0x338>
 80071f2:	e014      	b.n	800721e <HAL_RCC_OscConfig+0x386>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80071f4:	f7fb f9e0 	bl	80025b8 <HAL_GetTick>
 80071f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80071fa:	e00a      	b.n	8007212 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80071fc:	f7fb f9dc 	bl	80025b8 <HAL_GetTick>
 8007200:	4602      	mov	r2, r0
 8007202:	693b      	ldr	r3, [r7, #16]
 8007204:	1ad3      	subs	r3, r2, r3
 8007206:	f241 3288 	movw	r2, #5000	; 0x1388
 800720a:	4293      	cmp	r3, r2
 800720c:	d901      	bls.n	8007212 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 800720e:	2303      	movs	r3, #3
 8007210:	e0b5      	b.n	800737e <HAL_RCC_OscConfig+0x4e6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007212:	4b3e      	ldr	r3, [pc, #248]	; (800730c <HAL_RCC_OscConfig+0x474>)
 8007214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007216:	f003 0302 	and.w	r3, r3, #2
 800721a:	2b00      	cmp	r3, #0
 800721c:	d1ee      	bne.n	80071fc <HAL_RCC_OscConfig+0x364>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800721e:	7dfb      	ldrb	r3, [r7, #23]
 8007220:	2b01      	cmp	r3, #1
 8007222:	d105      	bne.n	8007230 <HAL_RCC_OscConfig+0x398>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007224:	4b39      	ldr	r3, [pc, #228]	; (800730c <HAL_RCC_OscConfig+0x474>)
 8007226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007228:	4a38      	ldr	r2, [pc, #224]	; (800730c <HAL_RCC_OscConfig+0x474>)
 800722a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800722e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	699b      	ldr	r3, [r3, #24]
 8007234:	2b00      	cmp	r3, #0
 8007236:	f000 80a1 	beq.w	800737c <HAL_RCC_OscConfig+0x4e4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800723a:	4b34      	ldr	r3, [pc, #208]	; (800730c <HAL_RCC_OscConfig+0x474>)
 800723c:	689b      	ldr	r3, [r3, #8]
 800723e:	f003 030c 	and.w	r3, r3, #12
 8007242:	2b08      	cmp	r3, #8
 8007244:	d05c      	beq.n	8007300 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	699b      	ldr	r3, [r3, #24]
 800724a:	2b02      	cmp	r3, #2
 800724c:	d141      	bne.n	80072d2 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800724e:	4b31      	ldr	r3, [pc, #196]	; (8007314 <HAL_RCC_OscConfig+0x47c>)
 8007250:	2200      	movs	r2, #0
 8007252:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007254:	f7fb f9b0 	bl	80025b8 <HAL_GetTick>
 8007258:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800725a:	e008      	b.n	800726e <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800725c:	f7fb f9ac 	bl	80025b8 <HAL_GetTick>
 8007260:	4602      	mov	r2, r0
 8007262:	693b      	ldr	r3, [r7, #16]
 8007264:	1ad3      	subs	r3, r2, r3
 8007266:	2b02      	cmp	r3, #2
 8007268:	d901      	bls.n	800726e <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 800726a:	2303      	movs	r3, #3
 800726c:	e087      	b.n	800737e <HAL_RCC_OscConfig+0x4e6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800726e:	4b27      	ldr	r3, [pc, #156]	; (800730c <HAL_RCC_OscConfig+0x474>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007276:	2b00      	cmp	r3, #0
 8007278:	d1f0      	bne.n	800725c <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	69da      	ldr	r2, [r3, #28]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6a1b      	ldr	r3, [r3, #32]
 8007282:	431a      	orrs	r2, r3
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007288:	019b      	lsls	r3, r3, #6
 800728a:	431a      	orrs	r2, r3
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007290:	085b      	lsrs	r3, r3, #1
 8007292:	3b01      	subs	r3, #1
 8007294:	041b      	lsls	r3, r3, #16
 8007296:	431a      	orrs	r2, r3
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800729c:	061b      	lsls	r3, r3, #24
 800729e:	491b      	ldr	r1, [pc, #108]	; (800730c <HAL_RCC_OscConfig+0x474>)
 80072a0:	4313      	orrs	r3, r2
 80072a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80072a4:	4b1b      	ldr	r3, [pc, #108]	; (8007314 <HAL_RCC_OscConfig+0x47c>)
 80072a6:	2201      	movs	r2, #1
 80072a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072aa:	f7fb f985 	bl	80025b8 <HAL_GetTick>
 80072ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80072b0:	e008      	b.n	80072c4 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80072b2:	f7fb f981 	bl	80025b8 <HAL_GetTick>
 80072b6:	4602      	mov	r2, r0
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	1ad3      	subs	r3, r2, r3
 80072bc:	2b02      	cmp	r3, #2
 80072be:	d901      	bls.n	80072c4 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80072c0:	2303      	movs	r3, #3
 80072c2:	e05c      	b.n	800737e <HAL_RCC_OscConfig+0x4e6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80072c4:	4b11      	ldr	r3, [pc, #68]	; (800730c <HAL_RCC_OscConfig+0x474>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d0f0      	beq.n	80072b2 <HAL_RCC_OscConfig+0x41a>
 80072d0:	e054      	b.n	800737c <HAL_RCC_OscConfig+0x4e4>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80072d2:	4b10      	ldr	r3, [pc, #64]	; (8007314 <HAL_RCC_OscConfig+0x47c>)
 80072d4:	2200      	movs	r2, #0
 80072d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072d8:	f7fb f96e 	bl	80025b8 <HAL_GetTick>
 80072dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80072de:	e008      	b.n	80072f2 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80072e0:	f7fb f96a 	bl	80025b8 <HAL_GetTick>
 80072e4:	4602      	mov	r2, r0
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	1ad3      	subs	r3, r2, r3
 80072ea:	2b02      	cmp	r3, #2
 80072ec:	d901      	bls.n	80072f2 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80072ee:	2303      	movs	r3, #3
 80072f0:	e045      	b.n	800737e <HAL_RCC_OscConfig+0x4e6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80072f2:	4b06      	ldr	r3, [pc, #24]	; (800730c <HAL_RCC_OscConfig+0x474>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d1f0      	bne.n	80072e0 <HAL_RCC_OscConfig+0x448>
 80072fe:	e03d      	b.n	800737c <HAL_RCC_OscConfig+0x4e4>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	699b      	ldr	r3, [r3, #24]
 8007304:	2b01      	cmp	r3, #1
 8007306:	d107      	bne.n	8007318 <HAL_RCC_OscConfig+0x480>
      {
        return HAL_ERROR;
 8007308:	2301      	movs	r3, #1
 800730a:	e038      	b.n	800737e <HAL_RCC_OscConfig+0x4e6>
 800730c:	40023800 	.word	0x40023800
 8007310:	40007000 	.word	0x40007000
 8007314:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007318:	4b1b      	ldr	r3, [pc, #108]	; (8007388 <HAL_RCC_OscConfig+0x4f0>)
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	699b      	ldr	r3, [r3, #24]
 8007322:	2b01      	cmp	r3, #1
 8007324:	d028      	beq.n	8007378 <HAL_RCC_OscConfig+0x4e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007330:	429a      	cmp	r2, r3
 8007332:	d121      	bne.n	8007378 <HAL_RCC_OscConfig+0x4e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800733e:	429a      	cmp	r2, r3
 8007340:	d11a      	bne.n	8007378 <HAL_RCC_OscConfig+0x4e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007342:	68fa      	ldr	r2, [r7, #12]
 8007344:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007348:	4013      	ands	r3, r2
 800734a:	687a      	ldr	r2, [r7, #4]
 800734c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800734e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007350:	4293      	cmp	r3, r2
 8007352:	d111      	bne.n	8007378 <HAL_RCC_OscConfig+0x4e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800735e:	085b      	lsrs	r3, r3, #1
 8007360:	3b01      	subs	r3, #1
 8007362:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007364:	429a      	cmp	r2, r3
 8007366:	d107      	bne.n	8007378 <HAL_RCC_OscConfig+0x4e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007372:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007374:	429a      	cmp	r2, r3
 8007376:	d001      	beq.n	800737c <HAL_RCC_OscConfig+0x4e4>
#endif
        {
          return HAL_ERROR;
 8007378:	2301      	movs	r3, #1
 800737a:	e000      	b.n	800737e <HAL_RCC_OscConfig+0x4e6>
        }
      }
    }
  }
  return HAL_OK;
 800737c:	2300      	movs	r3, #0
}
 800737e:	4618      	mov	r0, r3
 8007380:	3718      	adds	r7, #24
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}
 8007386:	bf00      	nop
 8007388:	40023800 	.word	0x40023800

0800738c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b084      	sub	sp, #16
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
 8007394:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d101      	bne.n	80073a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800739c:	2301      	movs	r3, #1
 800739e:	e0cc      	b.n	800753a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80073a0:	4b68      	ldr	r3, [pc, #416]	; (8007544 <HAL_RCC_ClockConfig+0x1b8>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f003 0307 	and.w	r3, r3, #7
 80073a8:	683a      	ldr	r2, [r7, #0]
 80073aa:	429a      	cmp	r2, r3
 80073ac:	d90c      	bls.n	80073c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80073ae:	4b65      	ldr	r3, [pc, #404]	; (8007544 <HAL_RCC_ClockConfig+0x1b8>)
 80073b0:	683a      	ldr	r2, [r7, #0]
 80073b2:	b2d2      	uxtb	r2, r2
 80073b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80073b6:	4b63      	ldr	r3, [pc, #396]	; (8007544 <HAL_RCC_ClockConfig+0x1b8>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f003 0307 	and.w	r3, r3, #7
 80073be:	683a      	ldr	r2, [r7, #0]
 80073c0:	429a      	cmp	r2, r3
 80073c2:	d001      	beq.n	80073c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80073c4:	2301      	movs	r3, #1
 80073c6:	e0b8      	b.n	800753a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f003 0302 	and.w	r3, r3, #2
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d020      	beq.n	8007416 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f003 0304 	and.w	r3, r3, #4
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d005      	beq.n	80073ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80073e0:	4b59      	ldr	r3, [pc, #356]	; (8007548 <HAL_RCC_ClockConfig+0x1bc>)
 80073e2:	689b      	ldr	r3, [r3, #8]
 80073e4:	4a58      	ldr	r2, [pc, #352]	; (8007548 <HAL_RCC_ClockConfig+0x1bc>)
 80073e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80073ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f003 0308 	and.w	r3, r3, #8
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d005      	beq.n	8007404 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80073f8:	4b53      	ldr	r3, [pc, #332]	; (8007548 <HAL_RCC_ClockConfig+0x1bc>)
 80073fa:	689b      	ldr	r3, [r3, #8]
 80073fc:	4a52      	ldr	r2, [pc, #328]	; (8007548 <HAL_RCC_ClockConfig+0x1bc>)
 80073fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007402:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007404:	4b50      	ldr	r3, [pc, #320]	; (8007548 <HAL_RCC_ClockConfig+0x1bc>)
 8007406:	689b      	ldr	r3, [r3, #8]
 8007408:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	689b      	ldr	r3, [r3, #8]
 8007410:	494d      	ldr	r1, [pc, #308]	; (8007548 <HAL_RCC_ClockConfig+0x1bc>)
 8007412:	4313      	orrs	r3, r2
 8007414:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f003 0301 	and.w	r3, r3, #1
 800741e:	2b00      	cmp	r3, #0
 8007420:	d044      	beq.n	80074ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	2b01      	cmp	r3, #1
 8007428:	d107      	bne.n	800743a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800742a:	4b47      	ldr	r3, [pc, #284]	; (8007548 <HAL_RCC_ClockConfig+0x1bc>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007432:	2b00      	cmp	r3, #0
 8007434:	d119      	bne.n	800746a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007436:	2301      	movs	r3, #1
 8007438:	e07f      	b.n	800753a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	2b02      	cmp	r3, #2
 8007440:	d003      	beq.n	800744a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007446:	2b03      	cmp	r3, #3
 8007448:	d107      	bne.n	800745a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800744a:	4b3f      	ldr	r3, [pc, #252]	; (8007548 <HAL_RCC_ClockConfig+0x1bc>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007452:	2b00      	cmp	r3, #0
 8007454:	d109      	bne.n	800746a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007456:	2301      	movs	r3, #1
 8007458:	e06f      	b.n	800753a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800745a:	4b3b      	ldr	r3, [pc, #236]	; (8007548 <HAL_RCC_ClockConfig+0x1bc>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f003 0302 	and.w	r3, r3, #2
 8007462:	2b00      	cmp	r3, #0
 8007464:	d101      	bne.n	800746a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007466:	2301      	movs	r3, #1
 8007468:	e067      	b.n	800753a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800746a:	4b37      	ldr	r3, [pc, #220]	; (8007548 <HAL_RCC_ClockConfig+0x1bc>)
 800746c:	689b      	ldr	r3, [r3, #8]
 800746e:	f023 0203 	bic.w	r2, r3, #3
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	685b      	ldr	r3, [r3, #4]
 8007476:	4934      	ldr	r1, [pc, #208]	; (8007548 <HAL_RCC_ClockConfig+0x1bc>)
 8007478:	4313      	orrs	r3, r2
 800747a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800747c:	f7fb f89c 	bl	80025b8 <HAL_GetTick>
 8007480:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007482:	e00a      	b.n	800749a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007484:	f7fb f898 	bl	80025b8 <HAL_GetTick>
 8007488:	4602      	mov	r2, r0
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	1ad3      	subs	r3, r2, r3
 800748e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007492:	4293      	cmp	r3, r2
 8007494:	d901      	bls.n	800749a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007496:	2303      	movs	r3, #3
 8007498:	e04f      	b.n	800753a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800749a:	4b2b      	ldr	r3, [pc, #172]	; (8007548 <HAL_RCC_ClockConfig+0x1bc>)
 800749c:	689b      	ldr	r3, [r3, #8]
 800749e:	f003 020c 	and.w	r2, r3, #12
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	685b      	ldr	r3, [r3, #4]
 80074a6:	009b      	lsls	r3, r3, #2
 80074a8:	429a      	cmp	r2, r3
 80074aa:	d1eb      	bne.n	8007484 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80074ac:	4b25      	ldr	r3, [pc, #148]	; (8007544 <HAL_RCC_ClockConfig+0x1b8>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f003 0307 	and.w	r3, r3, #7
 80074b4:	683a      	ldr	r2, [r7, #0]
 80074b6:	429a      	cmp	r2, r3
 80074b8:	d20c      	bcs.n	80074d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074ba:	4b22      	ldr	r3, [pc, #136]	; (8007544 <HAL_RCC_ClockConfig+0x1b8>)
 80074bc:	683a      	ldr	r2, [r7, #0]
 80074be:	b2d2      	uxtb	r2, r2
 80074c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80074c2:	4b20      	ldr	r3, [pc, #128]	; (8007544 <HAL_RCC_ClockConfig+0x1b8>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f003 0307 	and.w	r3, r3, #7
 80074ca:	683a      	ldr	r2, [r7, #0]
 80074cc:	429a      	cmp	r2, r3
 80074ce:	d001      	beq.n	80074d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80074d0:	2301      	movs	r3, #1
 80074d2:	e032      	b.n	800753a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f003 0304 	and.w	r3, r3, #4
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d008      	beq.n	80074f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80074e0:	4b19      	ldr	r3, [pc, #100]	; (8007548 <HAL_RCC_ClockConfig+0x1bc>)
 80074e2:	689b      	ldr	r3, [r3, #8]
 80074e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	68db      	ldr	r3, [r3, #12]
 80074ec:	4916      	ldr	r1, [pc, #88]	; (8007548 <HAL_RCC_ClockConfig+0x1bc>)
 80074ee:	4313      	orrs	r3, r2
 80074f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f003 0308 	and.w	r3, r3, #8
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d009      	beq.n	8007512 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80074fe:	4b12      	ldr	r3, [pc, #72]	; (8007548 <HAL_RCC_ClockConfig+0x1bc>)
 8007500:	689b      	ldr	r3, [r3, #8]
 8007502:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	691b      	ldr	r3, [r3, #16]
 800750a:	00db      	lsls	r3, r3, #3
 800750c:	490e      	ldr	r1, [pc, #56]	; (8007548 <HAL_RCC_ClockConfig+0x1bc>)
 800750e:	4313      	orrs	r3, r2
 8007510:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007512:	f000 f821 	bl	8007558 <HAL_RCC_GetSysClockFreq>
 8007516:	4602      	mov	r2, r0
 8007518:	4b0b      	ldr	r3, [pc, #44]	; (8007548 <HAL_RCC_ClockConfig+0x1bc>)
 800751a:	689b      	ldr	r3, [r3, #8]
 800751c:	091b      	lsrs	r3, r3, #4
 800751e:	f003 030f 	and.w	r3, r3, #15
 8007522:	490a      	ldr	r1, [pc, #40]	; (800754c <HAL_RCC_ClockConfig+0x1c0>)
 8007524:	5ccb      	ldrb	r3, [r1, r3]
 8007526:	fa22 f303 	lsr.w	r3, r2, r3
 800752a:	4a09      	ldr	r2, [pc, #36]	; (8007550 <HAL_RCC_ClockConfig+0x1c4>)
 800752c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800752e:	4b09      	ldr	r3, [pc, #36]	; (8007554 <HAL_RCC_ClockConfig+0x1c8>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4618      	mov	r0, r3
 8007534:	f7fa fffc 	bl	8002530 <HAL_InitTick>

  return HAL_OK;
 8007538:	2300      	movs	r3, #0
}
 800753a:	4618      	mov	r0, r3
 800753c:	3710      	adds	r7, #16
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}
 8007542:	bf00      	nop
 8007544:	40023c00 	.word	0x40023c00
 8007548:	40023800 	.word	0x40023800
 800754c:	0801410c 	.word	0x0801410c
 8007550:	20000034 	.word	0x20000034
 8007554:	20000038 	.word	0x20000038

08007558 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007558:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800755c:	b094      	sub	sp, #80	; 0x50
 800755e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007560:	2300      	movs	r3, #0
 8007562:	647b      	str	r3, [r7, #68]	; 0x44
 8007564:	2300      	movs	r3, #0
 8007566:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007568:	2300      	movs	r3, #0
 800756a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800756c:	2300      	movs	r3, #0
 800756e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007570:	4b79      	ldr	r3, [pc, #484]	; (8007758 <HAL_RCC_GetSysClockFreq+0x200>)
 8007572:	689b      	ldr	r3, [r3, #8]
 8007574:	f003 030c 	and.w	r3, r3, #12
 8007578:	2b08      	cmp	r3, #8
 800757a:	d00d      	beq.n	8007598 <HAL_RCC_GetSysClockFreq+0x40>
 800757c:	2b08      	cmp	r3, #8
 800757e:	f200 80e1 	bhi.w	8007744 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007582:	2b00      	cmp	r3, #0
 8007584:	d002      	beq.n	800758c <HAL_RCC_GetSysClockFreq+0x34>
 8007586:	2b04      	cmp	r3, #4
 8007588:	d003      	beq.n	8007592 <HAL_RCC_GetSysClockFreq+0x3a>
 800758a:	e0db      	b.n	8007744 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800758c:	4b73      	ldr	r3, [pc, #460]	; (800775c <HAL_RCC_GetSysClockFreq+0x204>)
 800758e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8007590:	e0db      	b.n	800774a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007592:	4b73      	ldr	r3, [pc, #460]	; (8007760 <HAL_RCC_GetSysClockFreq+0x208>)
 8007594:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007596:	e0d8      	b.n	800774a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007598:	4b6f      	ldr	r3, [pc, #444]	; (8007758 <HAL_RCC_GetSysClockFreq+0x200>)
 800759a:	685b      	ldr	r3, [r3, #4]
 800759c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80075a0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80075a2:	4b6d      	ldr	r3, [pc, #436]	; (8007758 <HAL_RCC_GetSysClockFreq+0x200>)
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d063      	beq.n	8007676 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80075ae:	4b6a      	ldr	r3, [pc, #424]	; (8007758 <HAL_RCC_GetSysClockFreq+0x200>)
 80075b0:	685b      	ldr	r3, [r3, #4]
 80075b2:	099b      	lsrs	r3, r3, #6
 80075b4:	2200      	movs	r2, #0
 80075b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80075b8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80075ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075c0:	633b      	str	r3, [r7, #48]	; 0x30
 80075c2:	2300      	movs	r3, #0
 80075c4:	637b      	str	r3, [r7, #52]	; 0x34
 80075c6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80075ca:	4622      	mov	r2, r4
 80075cc:	462b      	mov	r3, r5
 80075ce:	f04f 0000 	mov.w	r0, #0
 80075d2:	f04f 0100 	mov.w	r1, #0
 80075d6:	0159      	lsls	r1, r3, #5
 80075d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80075dc:	0150      	lsls	r0, r2, #5
 80075de:	4602      	mov	r2, r0
 80075e0:	460b      	mov	r3, r1
 80075e2:	4621      	mov	r1, r4
 80075e4:	1a51      	subs	r1, r2, r1
 80075e6:	6139      	str	r1, [r7, #16]
 80075e8:	4629      	mov	r1, r5
 80075ea:	eb63 0301 	sbc.w	r3, r3, r1
 80075ee:	617b      	str	r3, [r7, #20]
 80075f0:	f04f 0200 	mov.w	r2, #0
 80075f4:	f04f 0300 	mov.w	r3, #0
 80075f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80075fc:	4659      	mov	r1, fp
 80075fe:	018b      	lsls	r3, r1, #6
 8007600:	4651      	mov	r1, sl
 8007602:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007606:	4651      	mov	r1, sl
 8007608:	018a      	lsls	r2, r1, #6
 800760a:	4651      	mov	r1, sl
 800760c:	ebb2 0801 	subs.w	r8, r2, r1
 8007610:	4659      	mov	r1, fp
 8007612:	eb63 0901 	sbc.w	r9, r3, r1
 8007616:	f04f 0200 	mov.w	r2, #0
 800761a:	f04f 0300 	mov.w	r3, #0
 800761e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007622:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007626:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800762a:	4690      	mov	r8, r2
 800762c:	4699      	mov	r9, r3
 800762e:	4623      	mov	r3, r4
 8007630:	eb18 0303 	adds.w	r3, r8, r3
 8007634:	60bb      	str	r3, [r7, #8]
 8007636:	462b      	mov	r3, r5
 8007638:	eb49 0303 	adc.w	r3, r9, r3
 800763c:	60fb      	str	r3, [r7, #12]
 800763e:	f04f 0200 	mov.w	r2, #0
 8007642:	f04f 0300 	mov.w	r3, #0
 8007646:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800764a:	4629      	mov	r1, r5
 800764c:	024b      	lsls	r3, r1, #9
 800764e:	4621      	mov	r1, r4
 8007650:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007654:	4621      	mov	r1, r4
 8007656:	024a      	lsls	r2, r1, #9
 8007658:	4610      	mov	r0, r2
 800765a:	4619      	mov	r1, r3
 800765c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800765e:	2200      	movs	r2, #0
 8007660:	62bb      	str	r3, [r7, #40]	; 0x28
 8007662:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007664:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007668:	f7f8 fe02 	bl	8000270 <__aeabi_uldivmod>
 800766c:	4602      	mov	r2, r0
 800766e:	460b      	mov	r3, r1
 8007670:	4613      	mov	r3, r2
 8007672:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007674:	e058      	b.n	8007728 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007676:	4b38      	ldr	r3, [pc, #224]	; (8007758 <HAL_RCC_GetSysClockFreq+0x200>)
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	099b      	lsrs	r3, r3, #6
 800767c:	2200      	movs	r2, #0
 800767e:	4618      	mov	r0, r3
 8007680:	4611      	mov	r1, r2
 8007682:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007686:	623b      	str	r3, [r7, #32]
 8007688:	2300      	movs	r3, #0
 800768a:	627b      	str	r3, [r7, #36]	; 0x24
 800768c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007690:	4642      	mov	r2, r8
 8007692:	464b      	mov	r3, r9
 8007694:	f04f 0000 	mov.w	r0, #0
 8007698:	f04f 0100 	mov.w	r1, #0
 800769c:	0159      	lsls	r1, r3, #5
 800769e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80076a2:	0150      	lsls	r0, r2, #5
 80076a4:	4602      	mov	r2, r0
 80076a6:	460b      	mov	r3, r1
 80076a8:	4641      	mov	r1, r8
 80076aa:	ebb2 0a01 	subs.w	sl, r2, r1
 80076ae:	4649      	mov	r1, r9
 80076b0:	eb63 0b01 	sbc.w	fp, r3, r1
 80076b4:	f04f 0200 	mov.w	r2, #0
 80076b8:	f04f 0300 	mov.w	r3, #0
 80076bc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80076c0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80076c4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80076c8:	ebb2 040a 	subs.w	r4, r2, sl
 80076cc:	eb63 050b 	sbc.w	r5, r3, fp
 80076d0:	f04f 0200 	mov.w	r2, #0
 80076d4:	f04f 0300 	mov.w	r3, #0
 80076d8:	00eb      	lsls	r3, r5, #3
 80076da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80076de:	00e2      	lsls	r2, r4, #3
 80076e0:	4614      	mov	r4, r2
 80076e2:	461d      	mov	r5, r3
 80076e4:	4643      	mov	r3, r8
 80076e6:	18e3      	adds	r3, r4, r3
 80076e8:	603b      	str	r3, [r7, #0]
 80076ea:	464b      	mov	r3, r9
 80076ec:	eb45 0303 	adc.w	r3, r5, r3
 80076f0:	607b      	str	r3, [r7, #4]
 80076f2:	f04f 0200 	mov.w	r2, #0
 80076f6:	f04f 0300 	mov.w	r3, #0
 80076fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80076fe:	4629      	mov	r1, r5
 8007700:	028b      	lsls	r3, r1, #10
 8007702:	4621      	mov	r1, r4
 8007704:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007708:	4621      	mov	r1, r4
 800770a:	028a      	lsls	r2, r1, #10
 800770c:	4610      	mov	r0, r2
 800770e:	4619      	mov	r1, r3
 8007710:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007712:	2200      	movs	r2, #0
 8007714:	61bb      	str	r3, [r7, #24]
 8007716:	61fa      	str	r2, [r7, #28]
 8007718:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800771c:	f7f8 fda8 	bl	8000270 <__aeabi_uldivmod>
 8007720:	4602      	mov	r2, r0
 8007722:	460b      	mov	r3, r1
 8007724:	4613      	mov	r3, r2
 8007726:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007728:	4b0b      	ldr	r3, [pc, #44]	; (8007758 <HAL_RCC_GetSysClockFreq+0x200>)
 800772a:	685b      	ldr	r3, [r3, #4]
 800772c:	0c1b      	lsrs	r3, r3, #16
 800772e:	f003 0303 	and.w	r3, r3, #3
 8007732:	3301      	adds	r3, #1
 8007734:	005b      	lsls	r3, r3, #1
 8007736:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007738:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800773a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800773c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007740:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007742:	e002      	b.n	800774a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007744:	4b05      	ldr	r3, [pc, #20]	; (800775c <HAL_RCC_GetSysClockFreq+0x204>)
 8007746:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007748:	bf00      	nop
    }
  }
  return sysclockfreq;
 800774a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800774c:	4618      	mov	r0, r3
 800774e:	3750      	adds	r7, #80	; 0x50
 8007750:	46bd      	mov	sp, r7
 8007752:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007756:	bf00      	nop
 8007758:	40023800 	.word	0x40023800
 800775c:	00f42400 	.word	0x00f42400
 8007760:	007a1200 	.word	0x007a1200

08007764 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007764:	b480      	push	{r7}
 8007766:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007768:	4b03      	ldr	r3, [pc, #12]	; (8007778 <HAL_RCC_GetHCLKFreq+0x14>)
 800776a:	681b      	ldr	r3, [r3, #0]
}
 800776c:	4618      	mov	r0, r3
 800776e:	46bd      	mov	sp, r7
 8007770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007774:	4770      	bx	lr
 8007776:	bf00      	nop
 8007778:	20000034 	.word	0x20000034

0800777c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007780:	f7ff fff0 	bl	8007764 <HAL_RCC_GetHCLKFreq>
 8007784:	4602      	mov	r2, r0
 8007786:	4b05      	ldr	r3, [pc, #20]	; (800779c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007788:	689b      	ldr	r3, [r3, #8]
 800778a:	0a9b      	lsrs	r3, r3, #10
 800778c:	f003 0307 	and.w	r3, r3, #7
 8007790:	4903      	ldr	r1, [pc, #12]	; (80077a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007792:	5ccb      	ldrb	r3, [r1, r3]
 8007794:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007798:	4618      	mov	r0, r3
 800779a:	bd80      	pop	{r7, pc}
 800779c:	40023800 	.word	0x40023800
 80077a0:	0801411c 	.word	0x0801411c

080077a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b082      	sub	sp, #8
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d101      	bne.n	80077b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80077b2:	2301      	movs	r3, #1
 80077b4:	e07b      	b.n	80078ae <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d108      	bne.n	80077d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	685b      	ldr	r3, [r3, #4]
 80077c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80077c6:	d009      	beq.n	80077dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2200      	movs	r2, #0
 80077cc:	61da      	str	r2, [r3, #28]
 80077ce:	e005      	b.n	80077dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2200      	movs	r2, #0
 80077d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2200      	movs	r2, #0
 80077da:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2200      	movs	r2, #0
 80077e0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80077e8:	b2db      	uxtb	r3, r3
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d106      	bne.n	80077fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2200      	movs	r2, #0
 80077f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f7fa fc34 	bl	8002064 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2202      	movs	r2, #2
 8007800:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	681a      	ldr	r2, [r3, #0]
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007812:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	685b      	ldr	r3, [r3, #4]
 8007818:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	689b      	ldr	r3, [r3, #8]
 8007820:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007824:	431a      	orrs	r2, r3
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	68db      	ldr	r3, [r3, #12]
 800782a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800782e:	431a      	orrs	r2, r3
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	691b      	ldr	r3, [r3, #16]
 8007834:	f003 0302 	and.w	r3, r3, #2
 8007838:	431a      	orrs	r2, r3
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	695b      	ldr	r3, [r3, #20]
 800783e:	f003 0301 	and.w	r3, r3, #1
 8007842:	431a      	orrs	r2, r3
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	699b      	ldr	r3, [r3, #24]
 8007848:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800784c:	431a      	orrs	r2, r3
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	69db      	ldr	r3, [r3, #28]
 8007852:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007856:	431a      	orrs	r2, r3
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6a1b      	ldr	r3, [r3, #32]
 800785c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007860:	ea42 0103 	orr.w	r1, r2, r3
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007868:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	430a      	orrs	r2, r1
 8007872:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	699b      	ldr	r3, [r3, #24]
 8007878:	0c1b      	lsrs	r3, r3, #16
 800787a:	f003 0104 	and.w	r1, r3, #4
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007882:	f003 0210 	and.w	r2, r3, #16
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	430a      	orrs	r2, r1
 800788c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	69da      	ldr	r2, [r3, #28]
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800789c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2200      	movs	r2, #0
 80078a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2201      	movs	r2, #1
 80078a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80078ac:	2300      	movs	r3, #0
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3708      	adds	r7, #8
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}

080078b6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078b6:	b580      	push	{r7, lr}
 80078b8:	b088      	sub	sp, #32
 80078ba:	af00      	add	r7, sp, #0
 80078bc:	60f8      	str	r0, [r7, #12]
 80078be:	60b9      	str	r1, [r7, #8]
 80078c0:	603b      	str	r3, [r7, #0]
 80078c2:	4613      	mov	r3, r2
 80078c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80078c6:	2300      	movs	r3, #0
 80078c8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80078d0:	2b01      	cmp	r3, #1
 80078d2:	d101      	bne.n	80078d8 <HAL_SPI_Transmit+0x22>
 80078d4:	2302      	movs	r3, #2
 80078d6:	e126      	b.n	8007b26 <HAL_SPI_Transmit+0x270>
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	2201      	movs	r2, #1
 80078dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80078e0:	f7fa fe6a 	bl	80025b8 <HAL_GetTick>
 80078e4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80078e6:	88fb      	ldrh	r3, [r7, #6]
 80078e8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80078f0:	b2db      	uxtb	r3, r3
 80078f2:	2b01      	cmp	r3, #1
 80078f4:	d002      	beq.n	80078fc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80078f6:	2302      	movs	r3, #2
 80078f8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80078fa:	e10b      	b.n	8007b14 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d002      	beq.n	8007908 <HAL_SPI_Transmit+0x52>
 8007902:	88fb      	ldrh	r3, [r7, #6]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d102      	bne.n	800790e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007908:	2301      	movs	r3, #1
 800790a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800790c:	e102      	b.n	8007b14 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	2203      	movs	r2, #3
 8007912:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2200      	movs	r2, #0
 800791a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	68ba      	ldr	r2, [r7, #8]
 8007920:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	88fa      	ldrh	r2, [r7, #6]
 8007926:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	88fa      	ldrh	r2, [r7, #6]
 800792c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	2200      	movs	r2, #0
 8007932:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2200      	movs	r2, #0
 8007938:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	2200      	movs	r2, #0
 800793e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	2200      	movs	r2, #0
 8007944:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2200      	movs	r2, #0
 800794a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	689b      	ldr	r3, [r3, #8]
 8007950:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007954:	d10f      	bne.n	8007976 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	681a      	ldr	r2, [r3, #0]
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007964:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	681a      	ldr	r2, [r3, #0]
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007974:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007980:	2b40      	cmp	r3, #64	; 0x40
 8007982:	d007      	beq.n	8007994 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	681a      	ldr	r2, [r3, #0]
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007992:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	68db      	ldr	r3, [r3, #12]
 8007998:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800799c:	d14b      	bne.n	8007a36 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	685b      	ldr	r3, [r3, #4]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d002      	beq.n	80079ac <HAL_SPI_Transmit+0xf6>
 80079a6:	8afb      	ldrh	r3, [r7, #22]
 80079a8:	2b01      	cmp	r3, #1
 80079aa:	d13e      	bne.n	8007a2a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079b0:	881a      	ldrh	r2, [r3, #0]
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079bc:	1c9a      	adds	r2, r3, #2
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	3b01      	subs	r3, #1
 80079ca:	b29a      	uxth	r2, r3
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80079d0:	e02b      	b.n	8007a2a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	689b      	ldr	r3, [r3, #8]
 80079d8:	f003 0302 	and.w	r3, r3, #2
 80079dc:	2b02      	cmp	r3, #2
 80079de:	d112      	bne.n	8007a06 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079e4:	881a      	ldrh	r2, [r3, #0]
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079f0:	1c9a      	adds	r2, r3, #2
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079fa:	b29b      	uxth	r3, r3
 80079fc:	3b01      	subs	r3, #1
 80079fe:	b29a      	uxth	r2, r3
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	86da      	strh	r2, [r3, #54]	; 0x36
 8007a04:	e011      	b.n	8007a2a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a06:	f7fa fdd7 	bl	80025b8 <HAL_GetTick>
 8007a0a:	4602      	mov	r2, r0
 8007a0c:	69bb      	ldr	r3, [r7, #24]
 8007a0e:	1ad3      	subs	r3, r2, r3
 8007a10:	683a      	ldr	r2, [r7, #0]
 8007a12:	429a      	cmp	r2, r3
 8007a14:	d803      	bhi.n	8007a1e <HAL_SPI_Transmit+0x168>
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a1c:	d102      	bne.n	8007a24 <HAL_SPI_Transmit+0x16e>
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d102      	bne.n	8007a2a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007a24:	2303      	movs	r3, #3
 8007a26:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007a28:	e074      	b.n	8007b14 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a2e:	b29b      	uxth	r3, r3
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d1ce      	bne.n	80079d2 <HAL_SPI_Transmit+0x11c>
 8007a34:	e04c      	b.n	8007ad0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	685b      	ldr	r3, [r3, #4]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d002      	beq.n	8007a44 <HAL_SPI_Transmit+0x18e>
 8007a3e:	8afb      	ldrh	r3, [r7, #22]
 8007a40:	2b01      	cmp	r3, #1
 8007a42:	d140      	bne.n	8007ac6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	330c      	adds	r3, #12
 8007a4e:	7812      	ldrb	r2, [r2, #0]
 8007a50:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a56:	1c5a      	adds	r2, r3, #1
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a60:	b29b      	uxth	r3, r3
 8007a62:	3b01      	subs	r3, #1
 8007a64:	b29a      	uxth	r2, r3
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007a6a:	e02c      	b.n	8007ac6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	689b      	ldr	r3, [r3, #8]
 8007a72:	f003 0302 	and.w	r3, r3, #2
 8007a76:	2b02      	cmp	r3, #2
 8007a78:	d113      	bne.n	8007aa2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	330c      	adds	r3, #12
 8007a84:	7812      	ldrb	r2, [r2, #0]
 8007a86:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a8c:	1c5a      	adds	r2, r3, #1
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a96:	b29b      	uxth	r3, r3
 8007a98:	3b01      	subs	r3, #1
 8007a9a:	b29a      	uxth	r2, r3
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	86da      	strh	r2, [r3, #54]	; 0x36
 8007aa0:	e011      	b.n	8007ac6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007aa2:	f7fa fd89 	bl	80025b8 <HAL_GetTick>
 8007aa6:	4602      	mov	r2, r0
 8007aa8:	69bb      	ldr	r3, [r7, #24]
 8007aaa:	1ad3      	subs	r3, r2, r3
 8007aac:	683a      	ldr	r2, [r7, #0]
 8007aae:	429a      	cmp	r2, r3
 8007ab0:	d803      	bhi.n	8007aba <HAL_SPI_Transmit+0x204>
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ab8:	d102      	bne.n	8007ac0 <HAL_SPI_Transmit+0x20a>
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d102      	bne.n	8007ac6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007ac0:	2303      	movs	r3, #3
 8007ac2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007ac4:	e026      	b.n	8007b14 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007aca:	b29b      	uxth	r3, r3
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d1cd      	bne.n	8007a6c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007ad0:	69ba      	ldr	r2, [r7, #24]
 8007ad2:	6839      	ldr	r1, [r7, #0]
 8007ad4:	68f8      	ldr	r0, [r7, #12]
 8007ad6:	f000 f9ff 	bl	8007ed8 <SPI_EndRxTxTransaction>
 8007ada:	4603      	mov	r3, r0
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d002      	beq.n	8007ae6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	2220      	movs	r2, #32
 8007ae4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	689b      	ldr	r3, [r3, #8]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d10a      	bne.n	8007b04 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007aee:	2300      	movs	r3, #0
 8007af0:	613b      	str	r3, [r7, #16]
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	68db      	ldr	r3, [r3, #12]
 8007af8:	613b      	str	r3, [r7, #16]
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	689b      	ldr	r3, [r3, #8]
 8007b00:	613b      	str	r3, [r7, #16]
 8007b02:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d002      	beq.n	8007b12 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	77fb      	strb	r3, [r7, #31]
 8007b10:	e000      	b.n	8007b14 <HAL_SPI_Transmit+0x25e>
  }

error:
 8007b12:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	2201      	movs	r2, #1
 8007b18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007b24:	7ffb      	ldrb	r3, [r7, #31]
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	3720      	adds	r7, #32
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}
	...

08007b30 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b086      	sub	sp, #24
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	60f8      	str	r0, [r7, #12]
 8007b38:	60b9      	str	r1, [r7, #8]
 8007b3a:	4613      	mov	r3, r2
 8007b3c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	d101      	bne.n	8007b50 <HAL_SPI_Transmit_DMA+0x20>
 8007b4c:	2302      	movs	r3, #2
 8007b4e:	e09b      	b.n	8007c88 <HAL_SPI_Transmit_DMA+0x158>
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	2201      	movs	r2, #1
 8007b54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007b5e:	b2db      	uxtb	r3, r3
 8007b60:	2b01      	cmp	r3, #1
 8007b62:	d002      	beq.n	8007b6a <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8007b64:	2302      	movs	r3, #2
 8007b66:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007b68:	e089      	b.n	8007c7e <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d002      	beq.n	8007b76 <HAL_SPI_Transmit_DMA+0x46>
 8007b70:	88fb      	ldrh	r3, [r7, #6]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d102      	bne.n	8007b7c <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8007b76:	2301      	movs	r3, #1
 8007b78:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007b7a:	e080      	b.n	8007c7e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	2203      	movs	r2, #3
 8007b80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	2200      	movs	r2, #0
 8007b88:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	68ba      	ldr	r2, [r7, #8]
 8007b8e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	88fa      	ldrh	r2, [r7, #6]
 8007b94:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	88fa      	ldrh	r2, [r7, #6]
 8007b9a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	2200      	movs	r2, #0
 8007bac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	689b      	ldr	r3, [r3, #8]
 8007bbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bc2:	d10f      	bne.n	8007be4 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	681a      	ldr	r2, [r3, #0]
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007bd2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	681a      	ldr	r2, [r3, #0]
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007be2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007be8:	4a29      	ldr	r2, [pc, #164]	; (8007c90 <HAL_SPI_Transmit_DMA+0x160>)
 8007bea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bf0:	4a28      	ldr	r2, [pc, #160]	; (8007c94 <HAL_SPI_Transmit_DMA+0x164>)
 8007bf2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bf8:	4a27      	ldr	r2, [pc, #156]	; (8007c98 <HAL_SPI_Transmit_DMA+0x168>)
 8007bfa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c00:	2200      	movs	r2, #0
 8007c02:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c0c:	4619      	mov	r1, r3
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	330c      	adds	r3, #12
 8007c14:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c1a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007c1c:	f7fa febc 	bl	8002998 <HAL_DMA_Start_IT>
 8007c20:	4603      	mov	r3, r0
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d00c      	beq.n	8007c40 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c2a:	f043 0210 	orr.w	r2, r3, #16
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8007c32:	2301      	movs	r3, #1
 8007c34:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2201      	movs	r2, #1
 8007c3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8007c3e:	e01e      	b.n	8007c7e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c4a:	2b40      	cmp	r3, #64	; 0x40
 8007c4c:	d007      	beq.n	8007c5e <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	681a      	ldr	r2, [r3, #0]
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c5c:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	685a      	ldr	r2, [r3, #4]
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f042 0220 	orr.w	r2, r2, #32
 8007c6c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	685a      	ldr	r2, [r3, #4]
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f042 0202 	orr.w	r2, r2, #2
 8007c7c:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	2200      	movs	r2, #0
 8007c82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007c86:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3718      	adds	r7, #24
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}
 8007c90:	08007d6d 	.word	0x08007d6d
 8007c94:	08007cc5 	.word	0x08007cc5
 8007c98:	08007d89 	.word	0x08007d89

08007c9c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b083      	sub	sp, #12
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8007ca4:	bf00      	nop
 8007ca6:	370c      	adds	r7, #12
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cae:	4770      	bx	lr

08007cb0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b083      	sub	sp, #12
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007cb8:	bf00      	nop
 8007cba:	370c      	adds	r7, #12
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr

08007cc4 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b086      	sub	sp, #24
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cd0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007cd2:	f7fa fc71 	bl	80025b8 <HAL_GetTick>
 8007cd6:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ce2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ce6:	d03b      	beq.n	8007d60 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	685a      	ldr	r2, [r3, #4]
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f022 0220 	bic.w	r2, r2, #32
 8007cf6:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	685a      	ldr	r2, [r3, #4]
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f022 0202 	bic.w	r2, r2, #2
 8007d06:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007d08:	693a      	ldr	r2, [r7, #16]
 8007d0a:	2164      	movs	r1, #100	; 0x64
 8007d0c:	6978      	ldr	r0, [r7, #20]
 8007d0e:	f000 f8e3 	bl	8007ed8 <SPI_EndRxTxTransaction>
 8007d12:	4603      	mov	r3, r0
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d005      	beq.n	8007d24 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d1c:	f043 0220 	orr.w	r2, r3, #32
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	689b      	ldr	r3, [r3, #8]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d10a      	bne.n	8007d42 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	60fb      	str	r3, [r7, #12]
 8007d30:	697b      	ldr	r3, [r7, #20]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	68db      	ldr	r3, [r3, #12]
 8007d36:	60fb      	str	r3, [r7, #12]
 8007d38:	697b      	ldr	r3, [r7, #20]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	689b      	ldr	r3, [r3, #8]
 8007d3e:	60fb      	str	r3, [r7, #12]
 8007d40:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	2200      	movs	r2, #0
 8007d46:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8007d48:	697b      	ldr	r3, [r7, #20]
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007d50:	697b      	ldr	r3, [r7, #20]
 8007d52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d003      	beq.n	8007d60 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007d58:	6978      	ldr	r0, [r7, #20]
 8007d5a:	f7ff ffa9 	bl	8007cb0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007d5e:	e002      	b.n	8007d66 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8007d60:	6978      	ldr	r0, [r7, #20]
 8007d62:	f7f8 fcc5 	bl	80006f0 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007d66:	3718      	adds	r7, #24
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}

08007d6c <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b084      	sub	sp, #16
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d78:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8007d7a:	68f8      	ldr	r0, [r7, #12]
 8007d7c:	f7ff ff8e 	bl	8007c9c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007d80:	bf00      	nop
 8007d82:	3710      	adds	r7, #16
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}

08007d88 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b084      	sub	sp, #16
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d94:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	685a      	ldr	r2, [r3, #4]
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f022 0203 	bic.w	r2, r2, #3
 8007da4:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007daa:	f043 0210 	orr.w	r2, r3, #16
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	2201      	movs	r2, #1
 8007db6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007dba:	68f8      	ldr	r0, [r7, #12]
 8007dbc:	f7ff ff78 	bl	8007cb0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007dc0:	bf00      	nop
 8007dc2:	3710      	adds	r7, #16
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}

08007dc8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b088      	sub	sp, #32
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	60f8      	str	r0, [r7, #12]
 8007dd0:	60b9      	str	r1, [r7, #8]
 8007dd2:	603b      	str	r3, [r7, #0]
 8007dd4:	4613      	mov	r3, r2
 8007dd6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007dd8:	f7fa fbee 	bl	80025b8 <HAL_GetTick>
 8007ddc:	4602      	mov	r2, r0
 8007dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007de0:	1a9b      	subs	r3, r3, r2
 8007de2:	683a      	ldr	r2, [r7, #0]
 8007de4:	4413      	add	r3, r2
 8007de6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007de8:	f7fa fbe6 	bl	80025b8 <HAL_GetTick>
 8007dec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007dee:	4b39      	ldr	r3, [pc, #228]	; (8007ed4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	015b      	lsls	r3, r3, #5
 8007df4:	0d1b      	lsrs	r3, r3, #20
 8007df6:	69fa      	ldr	r2, [r7, #28]
 8007df8:	fb02 f303 	mul.w	r3, r2, r3
 8007dfc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007dfe:	e054      	b.n	8007eaa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e06:	d050      	beq.n	8007eaa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007e08:	f7fa fbd6 	bl	80025b8 <HAL_GetTick>
 8007e0c:	4602      	mov	r2, r0
 8007e0e:	69bb      	ldr	r3, [r7, #24]
 8007e10:	1ad3      	subs	r3, r2, r3
 8007e12:	69fa      	ldr	r2, [r7, #28]
 8007e14:	429a      	cmp	r2, r3
 8007e16:	d902      	bls.n	8007e1e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007e18:	69fb      	ldr	r3, [r7, #28]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d13d      	bne.n	8007e9a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	685a      	ldr	r2, [r3, #4]
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007e2c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	685b      	ldr	r3, [r3, #4]
 8007e32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007e36:	d111      	bne.n	8007e5c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	689b      	ldr	r3, [r3, #8]
 8007e3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e40:	d004      	beq.n	8007e4c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	689b      	ldr	r3, [r3, #8]
 8007e46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e4a:	d107      	bne.n	8007e5c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	681a      	ldr	r2, [r3, #0]
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e5a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e64:	d10f      	bne.n	8007e86 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	681a      	ldr	r2, [r3, #0]
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007e74:	601a      	str	r2, [r3, #0]
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	681a      	ldr	r2, [r3, #0]
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007e84:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	2201      	movs	r2, #1
 8007e8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	2200      	movs	r2, #0
 8007e92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007e96:	2303      	movs	r3, #3
 8007e98:	e017      	b.n	8007eca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d101      	bne.n	8007ea4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007ea4:	697b      	ldr	r3, [r7, #20]
 8007ea6:	3b01      	subs	r3, #1
 8007ea8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	689a      	ldr	r2, [r3, #8]
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	4013      	ands	r3, r2
 8007eb4:	68ba      	ldr	r2, [r7, #8]
 8007eb6:	429a      	cmp	r2, r3
 8007eb8:	bf0c      	ite	eq
 8007eba:	2301      	moveq	r3, #1
 8007ebc:	2300      	movne	r3, #0
 8007ebe:	b2db      	uxtb	r3, r3
 8007ec0:	461a      	mov	r2, r3
 8007ec2:	79fb      	ldrb	r3, [r7, #7]
 8007ec4:	429a      	cmp	r2, r3
 8007ec6:	d19b      	bne.n	8007e00 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007ec8:	2300      	movs	r3, #0
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	3720      	adds	r7, #32
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}
 8007ed2:	bf00      	nop
 8007ed4:	20000034 	.word	0x20000034

08007ed8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b088      	sub	sp, #32
 8007edc:	af02      	add	r7, sp, #8
 8007ede:	60f8      	str	r0, [r7, #12]
 8007ee0:	60b9      	str	r1, [r7, #8]
 8007ee2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007ee4:	4b1b      	ldr	r3, [pc, #108]	; (8007f54 <SPI_EndRxTxTransaction+0x7c>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	4a1b      	ldr	r2, [pc, #108]	; (8007f58 <SPI_EndRxTxTransaction+0x80>)
 8007eea:	fba2 2303 	umull	r2, r3, r2, r3
 8007eee:	0d5b      	lsrs	r3, r3, #21
 8007ef0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007ef4:	fb02 f303 	mul.w	r3, r2, r3
 8007ef8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	685b      	ldr	r3, [r3, #4]
 8007efe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007f02:	d112      	bne.n	8007f2a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	9300      	str	r3, [sp, #0]
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	2180      	movs	r1, #128	; 0x80
 8007f0e:	68f8      	ldr	r0, [r7, #12]
 8007f10:	f7ff ff5a 	bl	8007dc8 <SPI_WaitFlagStateUntilTimeout>
 8007f14:	4603      	mov	r3, r0
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d016      	beq.n	8007f48 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f1e:	f043 0220 	orr.w	r2, r3, #32
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007f26:	2303      	movs	r3, #3
 8007f28:	e00f      	b.n	8007f4a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007f2a:	697b      	ldr	r3, [r7, #20]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d00a      	beq.n	8007f46 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007f30:	697b      	ldr	r3, [r7, #20]
 8007f32:	3b01      	subs	r3, #1
 8007f34:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	689b      	ldr	r3, [r3, #8]
 8007f3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f40:	2b80      	cmp	r3, #128	; 0x80
 8007f42:	d0f2      	beq.n	8007f2a <SPI_EndRxTxTransaction+0x52>
 8007f44:	e000      	b.n	8007f48 <SPI_EndRxTxTransaction+0x70>
        break;
 8007f46:	bf00      	nop
  }

  return HAL_OK;
 8007f48:	2300      	movs	r3, #0
}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	3718      	adds	r7, #24
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bd80      	pop	{r7, pc}
 8007f52:	bf00      	nop
 8007f54:	20000034 	.word	0x20000034
 8007f58:	165e9f81 	.word	0x165e9f81

08007f5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b082      	sub	sp, #8
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d101      	bne.n	8007f6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	e041      	b.n	8007ff2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f74:	b2db      	uxtb	r3, r3
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d106      	bne.n	8007f88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f7fa f908 	bl	8002198 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2202      	movs	r2, #2
 8007f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681a      	ldr	r2, [r3, #0]
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	3304      	adds	r3, #4
 8007f98:	4619      	mov	r1, r3
 8007f9a:	4610      	mov	r0, r2
 8007f9c:	f000 fac4 	bl	8008528 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2201      	movs	r2, #1
 8007fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2201      	movs	r2, #1
 8007fb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2201      	movs	r2, #1
 8007fbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2201      	movs	r2, #1
 8007fc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2201      	movs	r2, #1
 8007fcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2201      	movs	r2, #1
 8007fd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2201      	movs	r2, #1
 8007fdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2201      	movs	r2, #1
 8007fe4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2201      	movs	r2, #1
 8007fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007ff0:	2300      	movs	r3, #0
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	3708      	adds	r7, #8
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}
	...

08007ffc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b085      	sub	sp, #20
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800800a:	b2db      	uxtb	r3, r3
 800800c:	2b01      	cmp	r3, #1
 800800e:	d001      	beq.n	8008014 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008010:	2301      	movs	r3, #1
 8008012:	e04e      	b.n	80080b2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2202      	movs	r2, #2
 8008018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	68da      	ldr	r2, [r3, #12]
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f042 0201 	orr.w	r2, r2, #1
 800802a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	4a23      	ldr	r2, [pc, #140]	; (80080c0 <HAL_TIM_Base_Start_IT+0xc4>)
 8008032:	4293      	cmp	r3, r2
 8008034:	d022      	beq.n	800807c <HAL_TIM_Base_Start_IT+0x80>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800803e:	d01d      	beq.n	800807c <HAL_TIM_Base_Start_IT+0x80>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4a1f      	ldr	r2, [pc, #124]	; (80080c4 <HAL_TIM_Base_Start_IT+0xc8>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d018      	beq.n	800807c <HAL_TIM_Base_Start_IT+0x80>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	4a1e      	ldr	r2, [pc, #120]	; (80080c8 <HAL_TIM_Base_Start_IT+0xcc>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d013      	beq.n	800807c <HAL_TIM_Base_Start_IT+0x80>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4a1c      	ldr	r2, [pc, #112]	; (80080cc <HAL_TIM_Base_Start_IT+0xd0>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d00e      	beq.n	800807c <HAL_TIM_Base_Start_IT+0x80>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	4a1b      	ldr	r2, [pc, #108]	; (80080d0 <HAL_TIM_Base_Start_IT+0xd4>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d009      	beq.n	800807c <HAL_TIM_Base_Start_IT+0x80>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4a19      	ldr	r2, [pc, #100]	; (80080d4 <HAL_TIM_Base_Start_IT+0xd8>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d004      	beq.n	800807c <HAL_TIM_Base_Start_IT+0x80>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	4a18      	ldr	r2, [pc, #96]	; (80080d8 <HAL_TIM_Base_Start_IT+0xdc>)
 8008078:	4293      	cmp	r3, r2
 800807a:	d111      	bne.n	80080a0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	689b      	ldr	r3, [r3, #8]
 8008082:	f003 0307 	and.w	r3, r3, #7
 8008086:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	2b06      	cmp	r3, #6
 800808c:	d010      	beq.n	80080b0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	681a      	ldr	r2, [r3, #0]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f042 0201 	orr.w	r2, r2, #1
 800809c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800809e:	e007      	b.n	80080b0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	681a      	ldr	r2, [r3, #0]
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f042 0201 	orr.w	r2, r2, #1
 80080ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80080b0:	2300      	movs	r3, #0
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3714      	adds	r7, #20
 80080b6:	46bd      	mov	sp, r7
 80080b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080bc:	4770      	bx	lr
 80080be:	bf00      	nop
 80080c0:	40010000 	.word	0x40010000
 80080c4:	40000400 	.word	0x40000400
 80080c8:	40000800 	.word	0x40000800
 80080cc:	40000c00 	.word	0x40000c00
 80080d0:	40010400 	.word	0x40010400
 80080d4:	40014000 	.word	0x40014000
 80080d8:	40001800 	.word	0x40001800

080080dc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80080dc:	b480      	push	{r7}
 80080de:	b083      	sub	sp, #12
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	68da      	ldr	r2, [r3, #12]
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f022 0201 	bic.w	r2, r2, #1
 80080f2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	6a1a      	ldr	r2, [r3, #32]
 80080fa:	f241 1311 	movw	r3, #4369	; 0x1111
 80080fe:	4013      	ands	r3, r2
 8008100:	2b00      	cmp	r3, #0
 8008102:	d10f      	bne.n	8008124 <HAL_TIM_Base_Stop_IT+0x48>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	6a1a      	ldr	r2, [r3, #32]
 800810a:	f240 4344 	movw	r3, #1092	; 0x444
 800810e:	4013      	ands	r3, r2
 8008110:	2b00      	cmp	r3, #0
 8008112:	d107      	bne.n	8008124 <HAL_TIM_Base_Stop_IT+0x48>
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	681a      	ldr	r2, [r3, #0]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f022 0201 	bic.w	r2, r2, #1
 8008122:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2201      	movs	r2, #1
 8008128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800812c:	2300      	movs	r3, #0
}
 800812e:	4618      	mov	r0, r3
 8008130:	370c      	adds	r7, #12
 8008132:	46bd      	mov	sp, r7
 8008134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008138:	4770      	bx	lr

0800813a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800813a:	b580      	push	{r7, lr}
 800813c:	b082      	sub	sp, #8
 800813e:	af00      	add	r7, sp, #0
 8008140:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	691b      	ldr	r3, [r3, #16]
 8008148:	f003 0302 	and.w	r3, r3, #2
 800814c:	2b02      	cmp	r3, #2
 800814e:	d122      	bne.n	8008196 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	68db      	ldr	r3, [r3, #12]
 8008156:	f003 0302 	and.w	r3, r3, #2
 800815a:	2b02      	cmp	r3, #2
 800815c:	d11b      	bne.n	8008196 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f06f 0202 	mvn.w	r2, #2
 8008166:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2201      	movs	r2, #1
 800816c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	699b      	ldr	r3, [r3, #24]
 8008174:	f003 0303 	and.w	r3, r3, #3
 8008178:	2b00      	cmp	r3, #0
 800817a:	d003      	beq.n	8008184 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	f000 f9b5 	bl	80084ec <HAL_TIM_IC_CaptureCallback>
 8008182:	e005      	b.n	8008190 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f000 f9a7 	bl	80084d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f000 f9b8 	bl	8008500 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2200      	movs	r2, #0
 8008194:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	691b      	ldr	r3, [r3, #16]
 800819c:	f003 0304 	and.w	r3, r3, #4
 80081a0:	2b04      	cmp	r3, #4
 80081a2:	d122      	bne.n	80081ea <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	68db      	ldr	r3, [r3, #12]
 80081aa:	f003 0304 	and.w	r3, r3, #4
 80081ae:	2b04      	cmp	r3, #4
 80081b0:	d11b      	bne.n	80081ea <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f06f 0204 	mvn.w	r2, #4
 80081ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2202      	movs	r2, #2
 80081c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	699b      	ldr	r3, [r3, #24]
 80081c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d003      	beq.n	80081d8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	f000 f98b 	bl	80084ec <HAL_TIM_IC_CaptureCallback>
 80081d6:	e005      	b.n	80081e4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f000 f97d 	bl	80084d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f000 f98e 	bl	8008500 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2200      	movs	r2, #0
 80081e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	691b      	ldr	r3, [r3, #16]
 80081f0:	f003 0308 	and.w	r3, r3, #8
 80081f4:	2b08      	cmp	r3, #8
 80081f6:	d122      	bne.n	800823e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	68db      	ldr	r3, [r3, #12]
 80081fe:	f003 0308 	and.w	r3, r3, #8
 8008202:	2b08      	cmp	r3, #8
 8008204:	d11b      	bne.n	800823e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f06f 0208 	mvn.w	r2, #8
 800820e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2204      	movs	r2, #4
 8008214:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	69db      	ldr	r3, [r3, #28]
 800821c:	f003 0303 	and.w	r3, r3, #3
 8008220:	2b00      	cmp	r3, #0
 8008222:	d003      	beq.n	800822c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f000 f961 	bl	80084ec <HAL_TIM_IC_CaptureCallback>
 800822a:	e005      	b.n	8008238 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	f000 f953 	bl	80084d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f000 f964 	bl	8008500 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2200      	movs	r2, #0
 800823c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	691b      	ldr	r3, [r3, #16]
 8008244:	f003 0310 	and.w	r3, r3, #16
 8008248:	2b10      	cmp	r3, #16
 800824a:	d122      	bne.n	8008292 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	68db      	ldr	r3, [r3, #12]
 8008252:	f003 0310 	and.w	r3, r3, #16
 8008256:	2b10      	cmp	r3, #16
 8008258:	d11b      	bne.n	8008292 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f06f 0210 	mvn.w	r2, #16
 8008262:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2208      	movs	r2, #8
 8008268:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	69db      	ldr	r3, [r3, #28]
 8008270:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008274:	2b00      	cmp	r3, #0
 8008276:	d003      	beq.n	8008280 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f000 f937 	bl	80084ec <HAL_TIM_IC_CaptureCallback>
 800827e:	e005      	b.n	800828c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f000 f929 	bl	80084d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f000 f93a 	bl	8008500 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2200      	movs	r2, #0
 8008290:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	691b      	ldr	r3, [r3, #16]
 8008298:	f003 0301 	and.w	r3, r3, #1
 800829c:	2b01      	cmp	r3, #1
 800829e:	d10e      	bne.n	80082be <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	68db      	ldr	r3, [r3, #12]
 80082a6:	f003 0301 	and.w	r3, r3, #1
 80082aa:	2b01      	cmp	r3, #1
 80082ac:	d107      	bne.n	80082be <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f06f 0201 	mvn.w	r2, #1
 80082b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f7f9 fdc1 	bl	8001e40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	691b      	ldr	r3, [r3, #16]
 80082c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082c8:	2b80      	cmp	r3, #128	; 0x80
 80082ca:	d10e      	bne.n	80082ea <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	68db      	ldr	r3, [r3, #12]
 80082d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082d6:	2b80      	cmp	r3, #128	; 0x80
 80082d8:	d107      	bne.n	80082ea <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80082e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f000 fadf 	bl	80088a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	691b      	ldr	r3, [r3, #16]
 80082f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082f4:	2b40      	cmp	r3, #64	; 0x40
 80082f6:	d10e      	bne.n	8008316 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	68db      	ldr	r3, [r3, #12]
 80082fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008302:	2b40      	cmp	r3, #64	; 0x40
 8008304:	d107      	bne.n	8008316 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800830e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	f000 f8ff 	bl	8008514 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	691b      	ldr	r3, [r3, #16]
 800831c:	f003 0320 	and.w	r3, r3, #32
 8008320:	2b20      	cmp	r3, #32
 8008322:	d10e      	bne.n	8008342 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	68db      	ldr	r3, [r3, #12]
 800832a:	f003 0320 	and.w	r3, r3, #32
 800832e:	2b20      	cmp	r3, #32
 8008330:	d107      	bne.n	8008342 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f06f 0220 	mvn.w	r2, #32
 800833a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	f000 faa9 	bl	8008894 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008342:	bf00      	nop
 8008344:	3708      	adds	r7, #8
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}

0800834a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800834a:	b580      	push	{r7, lr}
 800834c:	b084      	sub	sp, #16
 800834e:	af00      	add	r7, sp, #0
 8008350:	6078      	str	r0, [r7, #4]
 8008352:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008354:	2300      	movs	r3, #0
 8008356:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800835e:	2b01      	cmp	r3, #1
 8008360:	d101      	bne.n	8008366 <HAL_TIM_ConfigClockSource+0x1c>
 8008362:	2302      	movs	r3, #2
 8008364:	e0b4      	b.n	80084d0 <HAL_TIM_ConfigClockSource+0x186>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2201      	movs	r2, #1
 800836a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2202      	movs	r2, #2
 8008372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	689b      	ldr	r3, [r3, #8]
 800837c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008384:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800838c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	68ba      	ldr	r2, [r7, #8]
 8008394:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800839e:	d03e      	beq.n	800841e <HAL_TIM_ConfigClockSource+0xd4>
 80083a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80083a4:	f200 8087 	bhi.w	80084b6 <HAL_TIM_ConfigClockSource+0x16c>
 80083a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083ac:	f000 8086 	beq.w	80084bc <HAL_TIM_ConfigClockSource+0x172>
 80083b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083b4:	d87f      	bhi.n	80084b6 <HAL_TIM_ConfigClockSource+0x16c>
 80083b6:	2b70      	cmp	r3, #112	; 0x70
 80083b8:	d01a      	beq.n	80083f0 <HAL_TIM_ConfigClockSource+0xa6>
 80083ba:	2b70      	cmp	r3, #112	; 0x70
 80083bc:	d87b      	bhi.n	80084b6 <HAL_TIM_ConfigClockSource+0x16c>
 80083be:	2b60      	cmp	r3, #96	; 0x60
 80083c0:	d050      	beq.n	8008464 <HAL_TIM_ConfigClockSource+0x11a>
 80083c2:	2b60      	cmp	r3, #96	; 0x60
 80083c4:	d877      	bhi.n	80084b6 <HAL_TIM_ConfigClockSource+0x16c>
 80083c6:	2b50      	cmp	r3, #80	; 0x50
 80083c8:	d03c      	beq.n	8008444 <HAL_TIM_ConfigClockSource+0xfa>
 80083ca:	2b50      	cmp	r3, #80	; 0x50
 80083cc:	d873      	bhi.n	80084b6 <HAL_TIM_ConfigClockSource+0x16c>
 80083ce:	2b40      	cmp	r3, #64	; 0x40
 80083d0:	d058      	beq.n	8008484 <HAL_TIM_ConfigClockSource+0x13a>
 80083d2:	2b40      	cmp	r3, #64	; 0x40
 80083d4:	d86f      	bhi.n	80084b6 <HAL_TIM_ConfigClockSource+0x16c>
 80083d6:	2b30      	cmp	r3, #48	; 0x30
 80083d8:	d064      	beq.n	80084a4 <HAL_TIM_ConfigClockSource+0x15a>
 80083da:	2b30      	cmp	r3, #48	; 0x30
 80083dc:	d86b      	bhi.n	80084b6 <HAL_TIM_ConfigClockSource+0x16c>
 80083de:	2b20      	cmp	r3, #32
 80083e0:	d060      	beq.n	80084a4 <HAL_TIM_ConfigClockSource+0x15a>
 80083e2:	2b20      	cmp	r3, #32
 80083e4:	d867      	bhi.n	80084b6 <HAL_TIM_ConfigClockSource+0x16c>
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d05c      	beq.n	80084a4 <HAL_TIM_ConfigClockSource+0x15a>
 80083ea:	2b10      	cmp	r3, #16
 80083ec:	d05a      	beq.n	80084a4 <HAL_TIM_ConfigClockSource+0x15a>
 80083ee:	e062      	b.n	80084b6 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6818      	ldr	r0, [r3, #0]
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	6899      	ldr	r1, [r3, #8]
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	685a      	ldr	r2, [r3, #4]
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	68db      	ldr	r3, [r3, #12]
 8008400:	f000 f9ac 	bl	800875c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	689b      	ldr	r3, [r3, #8]
 800840a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008412:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	68ba      	ldr	r2, [r7, #8]
 800841a:	609a      	str	r2, [r3, #8]
      break;
 800841c:	e04f      	b.n	80084be <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6818      	ldr	r0, [r3, #0]
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	6899      	ldr	r1, [r3, #8]
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	685a      	ldr	r2, [r3, #4]
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	68db      	ldr	r3, [r3, #12]
 800842e:	f000 f995 	bl	800875c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	689a      	ldr	r2, [r3, #8]
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008440:	609a      	str	r2, [r3, #8]
      break;
 8008442:	e03c      	b.n	80084be <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6818      	ldr	r0, [r3, #0]
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	6859      	ldr	r1, [r3, #4]
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	68db      	ldr	r3, [r3, #12]
 8008450:	461a      	mov	r2, r3
 8008452:	f000 f909 	bl	8008668 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	2150      	movs	r1, #80	; 0x50
 800845c:	4618      	mov	r0, r3
 800845e:	f000 f962 	bl	8008726 <TIM_ITRx_SetConfig>
      break;
 8008462:	e02c      	b.n	80084be <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6818      	ldr	r0, [r3, #0]
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	6859      	ldr	r1, [r3, #4]
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	68db      	ldr	r3, [r3, #12]
 8008470:	461a      	mov	r2, r3
 8008472:	f000 f928 	bl	80086c6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	2160      	movs	r1, #96	; 0x60
 800847c:	4618      	mov	r0, r3
 800847e:	f000 f952 	bl	8008726 <TIM_ITRx_SetConfig>
      break;
 8008482:	e01c      	b.n	80084be <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6818      	ldr	r0, [r3, #0]
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	6859      	ldr	r1, [r3, #4]
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	68db      	ldr	r3, [r3, #12]
 8008490:	461a      	mov	r2, r3
 8008492:	f000 f8e9 	bl	8008668 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	2140      	movs	r1, #64	; 0x40
 800849c:	4618      	mov	r0, r3
 800849e:	f000 f942 	bl	8008726 <TIM_ITRx_SetConfig>
      break;
 80084a2:	e00c      	b.n	80084be <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681a      	ldr	r2, [r3, #0]
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	4619      	mov	r1, r3
 80084ae:	4610      	mov	r0, r2
 80084b0:	f000 f939 	bl	8008726 <TIM_ITRx_SetConfig>
      break;
 80084b4:	e003      	b.n	80084be <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80084b6:	2301      	movs	r3, #1
 80084b8:	73fb      	strb	r3, [r7, #15]
      break;
 80084ba:	e000      	b.n	80084be <HAL_TIM_ConfigClockSource+0x174>
      break;
 80084bc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2201      	movs	r2, #1
 80084c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2200      	movs	r2, #0
 80084ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80084ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80084d0:	4618      	mov	r0, r3
 80084d2:	3710      	adds	r7, #16
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}

080084d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80084d8:	b480      	push	{r7}
 80084da:	b083      	sub	sp, #12
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80084e0:	bf00      	nop
 80084e2:	370c      	adds	r7, #12
 80084e4:	46bd      	mov	sp, r7
 80084e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ea:	4770      	bx	lr

080084ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80084ec:	b480      	push	{r7}
 80084ee:	b083      	sub	sp, #12
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80084f4:	bf00      	nop
 80084f6:	370c      	adds	r7, #12
 80084f8:	46bd      	mov	sp, r7
 80084fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fe:	4770      	bx	lr

08008500 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008500:	b480      	push	{r7}
 8008502:	b083      	sub	sp, #12
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008508:	bf00      	nop
 800850a:	370c      	adds	r7, #12
 800850c:	46bd      	mov	sp, r7
 800850e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008512:	4770      	bx	lr

08008514 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008514:	b480      	push	{r7}
 8008516:	b083      	sub	sp, #12
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800851c:	bf00      	nop
 800851e:	370c      	adds	r7, #12
 8008520:	46bd      	mov	sp, r7
 8008522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008526:	4770      	bx	lr

08008528 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008528:	b480      	push	{r7}
 800852a:	b085      	sub	sp, #20
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
 8008530:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	4a40      	ldr	r2, [pc, #256]	; (800863c <TIM_Base_SetConfig+0x114>)
 800853c:	4293      	cmp	r3, r2
 800853e:	d013      	beq.n	8008568 <TIM_Base_SetConfig+0x40>
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008546:	d00f      	beq.n	8008568 <TIM_Base_SetConfig+0x40>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	4a3d      	ldr	r2, [pc, #244]	; (8008640 <TIM_Base_SetConfig+0x118>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d00b      	beq.n	8008568 <TIM_Base_SetConfig+0x40>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	4a3c      	ldr	r2, [pc, #240]	; (8008644 <TIM_Base_SetConfig+0x11c>)
 8008554:	4293      	cmp	r3, r2
 8008556:	d007      	beq.n	8008568 <TIM_Base_SetConfig+0x40>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	4a3b      	ldr	r2, [pc, #236]	; (8008648 <TIM_Base_SetConfig+0x120>)
 800855c:	4293      	cmp	r3, r2
 800855e:	d003      	beq.n	8008568 <TIM_Base_SetConfig+0x40>
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	4a3a      	ldr	r2, [pc, #232]	; (800864c <TIM_Base_SetConfig+0x124>)
 8008564:	4293      	cmp	r3, r2
 8008566:	d108      	bne.n	800857a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800856e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	685b      	ldr	r3, [r3, #4]
 8008574:	68fa      	ldr	r2, [r7, #12]
 8008576:	4313      	orrs	r3, r2
 8008578:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	4a2f      	ldr	r2, [pc, #188]	; (800863c <TIM_Base_SetConfig+0x114>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d02b      	beq.n	80085da <TIM_Base_SetConfig+0xb2>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008588:	d027      	beq.n	80085da <TIM_Base_SetConfig+0xb2>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	4a2c      	ldr	r2, [pc, #176]	; (8008640 <TIM_Base_SetConfig+0x118>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d023      	beq.n	80085da <TIM_Base_SetConfig+0xb2>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	4a2b      	ldr	r2, [pc, #172]	; (8008644 <TIM_Base_SetConfig+0x11c>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d01f      	beq.n	80085da <TIM_Base_SetConfig+0xb2>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	4a2a      	ldr	r2, [pc, #168]	; (8008648 <TIM_Base_SetConfig+0x120>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	d01b      	beq.n	80085da <TIM_Base_SetConfig+0xb2>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	4a29      	ldr	r2, [pc, #164]	; (800864c <TIM_Base_SetConfig+0x124>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d017      	beq.n	80085da <TIM_Base_SetConfig+0xb2>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	4a28      	ldr	r2, [pc, #160]	; (8008650 <TIM_Base_SetConfig+0x128>)
 80085ae:	4293      	cmp	r3, r2
 80085b0:	d013      	beq.n	80085da <TIM_Base_SetConfig+0xb2>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	4a27      	ldr	r2, [pc, #156]	; (8008654 <TIM_Base_SetConfig+0x12c>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d00f      	beq.n	80085da <TIM_Base_SetConfig+0xb2>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	4a26      	ldr	r2, [pc, #152]	; (8008658 <TIM_Base_SetConfig+0x130>)
 80085be:	4293      	cmp	r3, r2
 80085c0:	d00b      	beq.n	80085da <TIM_Base_SetConfig+0xb2>
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	4a25      	ldr	r2, [pc, #148]	; (800865c <TIM_Base_SetConfig+0x134>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d007      	beq.n	80085da <TIM_Base_SetConfig+0xb2>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	4a24      	ldr	r2, [pc, #144]	; (8008660 <TIM_Base_SetConfig+0x138>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d003      	beq.n	80085da <TIM_Base_SetConfig+0xb2>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	4a23      	ldr	r2, [pc, #140]	; (8008664 <TIM_Base_SetConfig+0x13c>)
 80085d6:	4293      	cmp	r3, r2
 80085d8:	d108      	bne.n	80085ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	68db      	ldr	r3, [r3, #12]
 80085e6:	68fa      	ldr	r2, [r7, #12]
 80085e8:	4313      	orrs	r3, r2
 80085ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	695b      	ldr	r3, [r3, #20]
 80085f6:	4313      	orrs	r3, r2
 80085f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	68fa      	ldr	r2, [r7, #12]
 80085fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	689a      	ldr	r2, [r3, #8]
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	681a      	ldr	r2, [r3, #0]
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	4a0a      	ldr	r2, [pc, #40]	; (800863c <TIM_Base_SetConfig+0x114>)
 8008614:	4293      	cmp	r3, r2
 8008616:	d003      	beq.n	8008620 <TIM_Base_SetConfig+0xf8>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	4a0c      	ldr	r2, [pc, #48]	; (800864c <TIM_Base_SetConfig+0x124>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d103      	bne.n	8008628 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	691a      	ldr	r2, [r3, #16]
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2201      	movs	r2, #1
 800862c:	615a      	str	r2, [r3, #20]
}
 800862e:	bf00      	nop
 8008630:	3714      	adds	r7, #20
 8008632:	46bd      	mov	sp, r7
 8008634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008638:	4770      	bx	lr
 800863a:	bf00      	nop
 800863c:	40010000 	.word	0x40010000
 8008640:	40000400 	.word	0x40000400
 8008644:	40000800 	.word	0x40000800
 8008648:	40000c00 	.word	0x40000c00
 800864c:	40010400 	.word	0x40010400
 8008650:	40014000 	.word	0x40014000
 8008654:	40014400 	.word	0x40014400
 8008658:	40014800 	.word	0x40014800
 800865c:	40001800 	.word	0x40001800
 8008660:	40001c00 	.word	0x40001c00
 8008664:	40002000 	.word	0x40002000

08008668 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008668:	b480      	push	{r7}
 800866a:	b087      	sub	sp, #28
 800866c:	af00      	add	r7, sp, #0
 800866e:	60f8      	str	r0, [r7, #12]
 8008670:	60b9      	str	r1, [r7, #8]
 8008672:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	6a1b      	ldr	r3, [r3, #32]
 8008678:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	6a1b      	ldr	r3, [r3, #32]
 800867e:	f023 0201 	bic.w	r2, r3, #1
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	699b      	ldr	r3, [r3, #24]
 800868a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800868c:	693b      	ldr	r3, [r7, #16]
 800868e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008692:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	011b      	lsls	r3, r3, #4
 8008698:	693a      	ldr	r2, [r7, #16]
 800869a:	4313      	orrs	r3, r2
 800869c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	f023 030a 	bic.w	r3, r3, #10
 80086a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80086a6:	697a      	ldr	r2, [r7, #20]
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	4313      	orrs	r3, r2
 80086ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	693a      	ldr	r2, [r7, #16]
 80086b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	697a      	ldr	r2, [r7, #20]
 80086b8:	621a      	str	r2, [r3, #32]
}
 80086ba:	bf00      	nop
 80086bc:	371c      	adds	r7, #28
 80086be:	46bd      	mov	sp, r7
 80086c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c4:	4770      	bx	lr

080086c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80086c6:	b480      	push	{r7}
 80086c8:	b087      	sub	sp, #28
 80086ca:	af00      	add	r7, sp, #0
 80086cc:	60f8      	str	r0, [r7, #12]
 80086ce:	60b9      	str	r1, [r7, #8]
 80086d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	6a1b      	ldr	r3, [r3, #32]
 80086d6:	f023 0210 	bic.w	r2, r3, #16
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	699b      	ldr	r3, [r3, #24]
 80086e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	6a1b      	ldr	r3, [r3, #32]
 80086e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80086f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	031b      	lsls	r3, r3, #12
 80086f6:	697a      	ldr	r2, [r7, #20]
 80086f8:	4313      	orrs	r3, r2
 80086fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80086fc:	693b      	ldr	r3, [r7, #16]
 80086fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008702:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	011b      	lsls	r3, r3, #4
 8008708:	693a      	ldr	r2, [r7, #16]
 800870a:	4313      	orrs	r3, r2
 800870c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	697a      	ldr	r2, [r7, #20]
 8008712:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	693a      	ldr	r2, [r7, #16]
 8008718:	621a      	str	r2, [r3, #32]
}
 800871a:	bf00      	nop
 800871c:	371c      	adds	r7, #28
 800871e:	46bd      	mov	sp, r7
 8008720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008724:	4770      	bx	lr

08008726 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008726:	b480      	push	{r7}
 8008728:	b085      	sub	sp, #20
 800872a:	af00      	add	r7, sp, #0
 800872c:	6078      	str	r0, [r7, #4]
 800872e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	689b      	ldr	r3, [r3, #8]
 8008734:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800873c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800873e:	683a      	ldr	r2, [r7, #0]
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	4313      	orrs	r3, r2
 8008744:	f043 0307 	orr.w	r3, r3, #7
 8008748:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	68fa      	ldr	r2, [r7, #12]
 800874e:	609a      	str	r2, [r3, #8]
}
 8008750:	bf00      	nop
 8008752:	3714      	adds	r7, #20
 8008754:	46bd      	mov	sp, r7
 8008756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875a:	4770      	bx	lr

0800875c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800875c:	b480      	push	{r7}
 800875e:	b087      	sub	sp, #28
 8008760:	af00      	add	r7, sp, #0
 8008762:	60f8      	str	r0, [r7, #12]
 8008764:	60b9      	str	r1, [r7, #8]
 8008766:	607a      	str	r2, [r7, #4]
 8008768:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	689b      	ldr	r3, [r3, #8]
 800876e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008770:	697b      	ldr	r3, [r7, #20]
 8008772:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008776:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	021a      	lsls	r2, r3, #8
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	431a      	orrs	r2, r3
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	4313      	orrs	r3, r2
 8008784:	697a      	ldr	r2, [r7, #20]
 8008786:	4313      	orrs	r3, r2
 8008788:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	697a      	ldr	r2, [r7, #20]
 800878e:	609a      	str	r2, [r3, #8]
}
 8008790:	bf00      	nop
 8008792:	371c      	adds	r7, #28
 8008794:	46bd      	mov	sp, r7
 8008796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879a:	4770      	bx	lr

0800879c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800879c:	b480      	push	{r7}
 800879e:	b085      	sub	sp, #20
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
 80087a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80087ac:	2b01      	cmp	r3, #1
 80087ae:	d101      	bne.n	80087b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80087b0:	2302      	movs	r3, #2
 80087b2:	e05a      	b.n	800886a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2201      	movs	r2, #1
 80087b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2202      	movs	r2, #2
 80087c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	685b      	ldr	r3, [r3, #4]
 80087ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	689b      	ldr	r3, [r3, #8]
 80087d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	68fa      	ldr	r2, [r7, #12]
 80087e2:	4313      	orrs	r3, r2
 80087e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	68fa      	ldr	r2, [r7, #12]
 80087ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	4a21      	ldr	r2, [pc, #132]	; (8008878 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80087f4:	4293      	cmp	r3, r2
 80087f6:	d022      	beq.n	800883e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008800:	d01d      	beq.n	800883e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	4a1d      	ldr	r2, [pc, #116]	; (800887c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008808:	4293      	cmp	r3, r2
 800880a:	d018      	beq.n	800883e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	4a1b      	ldr	r2, [pc, #108]	; (8008880 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008812:	4293      	cmp	r3, r2
 8008814:	d013      	beq.n	800883e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	4a1a      	ldr	r2, [pc, #104]	; (8008884 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800881c:	4293      	cmp	r3, r2
 800881e:	d00e      	beq.n	800883e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	4a18      	ldr	r2, [pc, #96]	; (8008888 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008826:	4293      	cmp	r3, r2
 8008828:	d009      	beq.n	800883e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	4a17      	ldr	r2, [pc, #92]	; (800888c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008830:	4293      	cmp	r3, r2
 8008832:	d004      	beq.n	800883e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	4a15      	ldr	r2, [pc, #84]	; (8008890 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800883a:	4293      	cmp	r3, r2
 800883c:	d10c      	bne.n	8008858 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008844:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	685b      	ldr	r3, [r3, #4]
 800884a:	68ba      	ldr	r2, [r7, #8]
 800884c:	4313      	orrs	r3, r2
 800884e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	68ba      	ldr	r2, [r7, #8]
 8008856:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2201      	movs	r2, #1
 800885c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2200      	movs	r2, #0
 8008864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008868:	2300      	movs	r3, #0
}
 800886a:	4618      	mov	r0, r3
 800886c:	3714      	adds	r7, #20
 800886e:	46bd      	mov	sp, r7
 8008870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008874:	4770      	bx	lr
 8008876:	bf00      	nop
 8008878:	40010000 	.word	0x40010000
 800887c:	40000400 	.word	0x40000400
 8008880:	40000800 	.word	0x40000800
 8008884:	40000c00 	.word	0x40000c00
 8008888:	40010400 	.word	0x40010400
 800888c:	40014000 	.word	0x40014000
 8008890:	40001800 	.word	0x40001800

08008894 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008894:	b480      	push	{r7}
 8008896:	b083      	sub	sp, #12
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800889c:	bf00      	nop
 800889e:	370c      	adds	r7, #12
 80088a0:	46bd      	mov	sp, r7
 80088a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a6:	4770      	bx	lr

080088a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80088a8:	b480      	push	{r7}
 80088aa:	b083      	sub	sp, #12
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80088b0:	bf00      	nop
 80088b2:	370c      	adds	r7, #12
 80088b4:	46bd      	mov	sp, r7
 80088b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ba:	4770      	bx	lr

080088bc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80088bc:	b084      	sub	sp, #16
 80088be:	b580      	push	{r7, lr}
 80088c0:	b084      	sub	sp, #16
 80088c2:	af00      	add	r7, sp, #0
 80088c4:	6078      	str	r0, [r7, #4]
 80088c6:	f107 001c 	add.w	r0, r7, #28
 80088ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80088ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088d0:	2b01      	cmp	r3, #1
 80088d2:	d122      	bne.n	800891a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088d8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	68db      	ldr	r3, [r3, #12]
 80088e4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80088e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088ec:	687a      	ldr	r2, [r7, #4]
 80088ee:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	68db      	ldr	r3, [r3, #12]
 80088f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80088fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088fe:	2b01      	cmp	r3, #1
 8008900:	d105      	bne.n	800890e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	68db      	ldr	r3, [r3, #12]
 8008906:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f001 fbee 	bl	800a0f0 <USB_CoreReset>
 8008914:	4603      	mov	r3, r0
 8008916:	73fb      	strb	r3, [r7, #15]
 8008918:	e01a      	b.n	8008950 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	68db      	ldr	r3, [r3, #12]
 800891e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f001 fbe2 	bl	800a0f0 <USB_CoreReset>
 800892c:	4603      	mov	r3, r0
 800892e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008930:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008932:	2b00      	cmp	r3, #0
 8008934:	d106      	bne.n	8008944 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800893a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	639a      	str	r2, [r3, #56]	; 0x38
 8008942:	e005      	b.n	8008950 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008948:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008952:	2b01      	cmp	r3, #1
 8008954:	d10b      	bne.n	800896e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	689b      	ldr	r3, [r3, #8]
 800895a:	f043 0206 	orr.w	r2, r3, #6
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	689b      	ldr	r3, [r3, #8]
 8008966:	f043 0220 	orr.w	r2, r3, #32
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800896e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008970:	4618      	mov	r0, r3
 8008972:	3710      	adds	r7, #16
 8008974:	46bd      	mov	sp, r7
 8008976:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800897a:	b004      	add	sp, #16
 800897c:	4770      	bx	lr
	...

08008980 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008980:	b480      	push	{r7}
 8008982:	b087      	sub	sp, #28
 8008984:	af00      	add	r7, sp, #0
 8008986:	60f8      	str	r0, [r7, #12]
 8008988:	60b9      	str	r1, [r7, #8]
 800898a:	4613      	mov	r3, r2
 800898c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800898e:	79fb      	ldrb	r3, [r7, #7]
 8008990:	2b02      	cmp	r3, #2
 8008992:	d165      	bne.n	8008a60 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	4a41      	ldr	r2, [pc, #260]	; (8008a9c <USB_SetTurnaroundTime+0x11c>)
 8008998:	4293      	cmp	r3, r2
 800899a:	d906      	bls.n	80089aa <USB_SetTurnaroundTime+0x2a>
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	4a40      	ldr	r2, [pc, #256]	; (8008aa0 <USB_SetTurnaroundTime+0x120>)
 80089a0:	4293      	cmp	r3, r2
 80089a2:	d202      	bcs.n	80089aa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80089a4:	230f      	movs	r3, #15
 80089a6:	617b      	str	r3, [r7, #20]
 80089a8:	e062      	b.n	8008a70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	4a3c      	ldr	r2, [pc, #240]	; (8008aa0 <USB_SetTurnaroundTime+0x120>)
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d306      	bcc.n	80089c0 <USB_SetTurnaroundTime+0x40>
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	4a3b      	ldr	r2, [pc, #236]	; (8008aa4 <USB_SetTurnaroundTime+0x124>)
 80089b6:	4293      	cmp	r3, r2
 80089b8:	d202      	bcs.n	80089c0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80089ba:	230e      	movs	r3, #14
 80089bc:	617b      	str	r3, [r7, #20]
 80089be:	e057      	b.n	8008a70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	4a38      	ldr	r2, [pc, #224]	; (8008aa4 <USB_SetTurnaroundTime+0x124>)
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d306      	bcc.n	80089d6 <USB_SetTurnaroundTime+0x56>
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	4a37      	ldr	r2, [pc, #220]	; (8008aa8 <USB_SetTurnaroundTime+0x128>)
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d202      	bcs.n	80089d6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80089d0:	230d      	movs	r3, #13
 80089d2:	617b      	str	r3, [r7, #20]
 80089d4:	e04c      	b.n	8008a70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	4a33      	ldr	r2, [pc, #204]	; (8008aa8 <USB_SetTurnaroundTime+0x128>)
 80089da:	4293      	cmp	r3, r2
 80089dc:	d306      	bcc.n	80089ec <USB_SetTurnaroundTime+0x6c>
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	4a32      	ldr	r2, [pc, #200]	; (8008aac <USB_SetTurnaroundTime+0x12c>)
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d802      	bhi.n	80089ec <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80089e6:	230c      	movs	r3, #12
 80089e8:	617b      	str	r3, [r7, #20]
 80089ea:	e041      	b.n	8008a70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	4a2f      	ldr	r2, [pc, #188]	; (8008aac <USB_SetTurnaroundTime+0x12c>)
 80089f0:	4293      	cmp	r3, r2
 80089f2:	d906      	bls.n	8008a02 <USB_SetTurnaroundTime+0x82>
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	4a2e      	ldr	r2, [pc, #184]	; (8008ab0 <USB_SetTurnaroundTime+0x130>)
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d802      	bhi.n	8008a02 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80089fc:	230b      	movs	r3, #11
 80089fe:	617b      	str	r3, [r7, #20]
 8008a00:	e036      	b.n	8008a70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	4a2a      	ldr	r2, [pc, #168]	; (8008ab0 <USB_SetTurnaroundTime+0x130>)
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d906      	bls.n	8008a18 <USB_SetTurnaroundTime+0x98>
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	4a29      	ldr	r2, [pc, #164]	; (8008ab4 <USB_SetTurnaroundTime+0x134>)
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d802      	bhi.n	8008a18 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008a12:	230a      	movs	r3, #10
 8008a14:	617b      	str	r3, [r7, #20]
 8008a16:	e02b      	b.n	8008a70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	4a26      	ldr	r2, [pc, #152]	; (8008ab4 <USB_SetTurnaroundTime+0x134>)
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	d906      	bls.n	8008a2e <USB_SetTurnaroundTime+0xae>
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	4a25      	ldr	r2, [pc, #148]	; (8008ab8 <USB_SetTurnaroundTime+0x138>)
 8008a24:	4293      	cmp	r3, r2
 8008a26:	d202      	bcs.n	8008a2e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008a28:	2309      	movs	r3, #9
 8008a2a:	617b      	str	r3, [r7, #20]
 8008a2c:	e020      	b.n	8008a70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	4a21      	ldr	r2, [pc, #132]	; (8008ab8 <USB_SetTurnaroundTime+0x138>)
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d306      	bcc.n	8008a44 <USB_SetTurnaroundTime+0xc4>
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	4a20      	ldr	r2, [pc, #128]	; (8008abc <USB_SetTurnaroundTime+0x13c>)
 8008a3a:	4293      	cmp	r3, r2
 8008a3c:	d802      	bhi.n	8008a44 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008a3e:	2308      	movs	r3, #8
 8008a40:	617b      	str	r3, [r7, #20]
 8008a42:	e015      	b.n	8008a70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	4a1d      	ldr	r2, [pc, #116]	; (8008abc <USB_SetTurnaroundTime+0x13c>)
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	d906      	bls.n	8008a5a <USB_SetTurnaroundTime+0xda>
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	4a1c      	ldr	r2, [pc, #112]	; (8008ac0 <USB_SetTurnaroundTime+0x140>)
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d202      	bcs.n	8008a5a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008a54:	2307      	movs	r3, #7
 8008a56:	617b      	str	r3, [r7, #20]
 8008a58:	e00a      	b.n	8008a70 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008a5a:	2306      	movs	r3, #6
 8008a5c:	617b      	str	r3, [r7, #20]
 8008a5e:	e007      	b.n	8008a70 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008a60:	79fb      	ldrb	r3, [r7, #7]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d102      	bne.n	8008a6c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008a66:	2309      	movs	r3, #9
 8008a68:	617b      	str	r3, [r7, #20]
 8008a6a:	e001      	b.n	8008a70 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008a6c:	2309      	movs	r3, #9
 8008a6e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	68db      	ldr	r3, [r3, #12]
 8008a74:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	68da      	ldr	r2, [r3, #12]
 8008a80:	697b      	ldr	r3, [r7, #20]
 8008a82:	029b      	lsls	r3, r3, #10
 8008a84:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008a88:	431a      	orrs	r2, r3
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008a8e:	2300      	movs	r3, #0
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	371c      	adds	r7, #28
 8008a94:	46bd      	mov	sp, r7
 8008a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9a:	4770      	bx	lr
 8008a9c:	00d8acbf 	.word	0x00d8acbf
 8008aa0:	00e4e1c0 	.word	0x00e4e1c0
 8008aa4:	00f42400 	.word	0x00f42400
 8008aa8:	01067380 	.word	0x01067380
 8008aac:	011a499f 	.word	0x011a499f
 8008ab0:	01312cff 	.word	0x01312cff
 8008ab4:	014ca43f 	.word	0x014ca43f
 8008ab8:	016e3600 	.word	0x016e3600
 8008abc:	01a6ab1f 	.word	0x01a6ab1f
 8008ac0:	01e84800 	.word	0x01e84800

08008ac4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	b083      	sub	sp, #12
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	689b      	ldr	r3, [r3, #8]
 8008ad0:	f043 0201 	orr.w	r2, r3, #1
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008ad8:	2300      	movs	r3, #0
}
 8008ada:	4618      	mov	r0, r3
 8008adc:	370c      	adds	r7, #12
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae4:	4770      	bx	lr

08008ae6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008ae6:	b480      	push	{r7}
 8008ae8:	b083      	sub	sp, #12
 8008aea:	af00      	add	r7, sp, #0
 8008aec:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	689b      	ldr	r3, [r3, #8]
 8008af2:	f023 0201 	bic.w	r2, r3, #1
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008afa:	2300      	movs	r3, #0
}
 8008afc:	4618      	mov	r0, r3
 8008afe:	370c      	adds	r7, #12
 8008b00:	46bd      	mov	sp, r7
 8008b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b06:	4770      	bx	lr

08008b08 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b084      	sub	sp, #16
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
 8008b10:	460b      	mov	r3, r1
 8008b12:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008b14:	2300      	movs	r3, #0
 8008b16:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	68db      	ldr	r3, [r3, #12]
 8008b1c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008b24:	78fb      	ldrb	r3, [r7, #3]
 8008b26:	2b01      	cmp	r3, #1
 8008b28:	d115      	bne.n	8008b56 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	68db      	ldr	r3, [r3, #12]
 8008b2e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008b36:	2001      	movs	r0, #1
 8008b38:	f7f9 fd4a 	bl	80025d0 <HAL_Delay>
      ms++;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	3301      	adds	r3, #1
 8008b40:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f001 fa45 	bl	8009fd2 <USB_GetMode>
 8008b48:	4603      	mov	r3, r0
 8008b4a:	2b01      	cmp	r3, #1
 8008b4c:	d01e      	beq.n	8008b8c <USB_SetCurrentMode+0x84>
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	2b31      	cmp	r3, #49	; 0x31
 8008b52:	d9f0      	bls.n	8008b36 <USB_SetCurrentMode+0x2e>
 8008b54:	e01a      	b.n	8008b8c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008b56:	78fb      	ldrb	r3, [r7, #3]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d115      	bne.n	8008b88 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	68db      	ldr	r3, [r3, #12]
 8008b60:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008b68:	2001      	movs	r0, #1
 8008b6a:	f7f9 fd31 	bl	80025d0 <HAL_Delay>
      ms++;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	3301      	adds	r3, #1
 8008b72:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	f001 fa2c 	bl	8009fd2 <USB_GetMode>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d005      	beq.n	8008b8c <USB_SetCurrentMode+0x84>
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	2b31      	cmp	r3, #49	; 0x31
 8008b84:	d9f0      	bls.n	8008b68 <USB_SetCurrentMode+0x60>
 8008b86:	e001      	b.n	8008b8c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008b88:	2301      	movs	r3, #1
 8008b8a:	e005      	b.n	8008b98 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	2b32      	cmp	r3, #50	; 0x32
 8008b90:	d101      	bne.n	8008b96 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008b92:	2301      	movs	r3, #1
 8008b94:	e000      	b.n	8008b98 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008b96:	2300      	movs	r3, #0
}
 8008b98:	4618      	mov	r0, r3
 8008b9a:	3710      	adds	r7, #16
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bd80      	pop	{r7, pc}

08008ba0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008ba0:	b084      	sub	sp, #16
 8008ba2:	b580      	push	{r7, lr}
 8008ba4:	b086      	sub	sp, #24
 8008ba6:	af00      	add	r7, sp, #0
 8008ba8:	6078      	str	r0, [r7, #4]
 8008baa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008bae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008bba:	2300      	movs	r3, #0
 8008bbc:	613b      	str	r3, [r7, #16]
 8008bbe:	e009      	b.n	8008bd4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008bc0:	687a      	ldr	r2, [r7, #4]
 8008bc2:	693b      	ldr	r3, [r7, #16]
 8008bc4:	3340      	adds	r3, #64	; 0x40
 8008bc6:	009b      	lsls	r3, r3, #2
 8008bc8:	4413      	add	r3, r2
 8008bca:	2200      	movs	r2, #0
 8008bcc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008bce:	693b      	ldr	r3, [r7, #16]
 8008bd0:	3301      	adds	r3, #1
 8008bd2:	613b      	str	r3, [r7, #16]
 8008bd4:	693b      	ldr	r3, [r7, #16]
 8008bd6:	2b0e      	cmp	r3, #14
 8008bd8:	d9f2      	bls.n	8008bc0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008bda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d11c      	bne.n	8008c1a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008be6:	685b      	ldr	r3, [r3, #4]
 8008be8:	68fa      	ldr	r2, [r7, #12]
 8008bea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008bee:	f043 0302 	orr.w	r3, r3, #2
 8008bf2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bf8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c04:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c10:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	639a      	str	r2, [r3, #56]	; 0x38
 8008c18:	e00b      	b.n	8008c32 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c1e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c2a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008c38:	461a      	mov	r2, r3
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c44:	4619      	mov	r1, r3
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c4c:	461a      	mov	r2, r3
 8008c4e:	680b      	ldr	r3, [r1, #0]
 8008c50:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c54:	2b01      	cmp	r3, #1
 8008c56:	d10c      	bne.n	8008c72 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d104      	bne.n	8008c68 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008c5e:	2100      	movs	r1, #0
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f000 f965 	bl	8008f30 <USB_SetDevSpeed>
 8008c66:	e008      	b.n	8008c7a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008c68:	2101      	movs	r1, #1
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f000 f960 	bl	8008f30 <USB_SetDevSpeed>
 8008c70:	e003      	b.n	8008c7a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008c72:	2103      	movs	r1, #3
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f000 f95b 	bl	8008f30 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008c7a:	2110      	movs	r1, #16
 8008c7c:	6878      	ldr	r0, [r7, #4]
 8008c7e:	f000 f8f3 	bl	8008e68 <USB_FlushTxFifo>
 8008c82:	4603      	mov	r3, r0
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d001      	beq.n	8008c8c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008c88:	2301      	movs	r3, #1
 8008c8a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f000 f91f 	bl	8008ed0 <USB_FlushRxFifo>
 8008c92:	4603      	mov	r3, r0
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d001      	beq.n	8008c9c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008c98:	2301      	movs	r3, #1
 8008c9a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ca2:	461a      	mov	r2, r3
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cae:	461a      	mov	r2, r3
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cba:	461a      	mov	r2, r3
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	613b      	str	r3, [r7, #16]
 8008cc4:	e043      	b.n	8008d4e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008cc6:	693b      	ldr	r3, [r7, #16]
 8008cc8:	015a      	lsls	r2, r3, #5
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	4413      	add	r3, r2
 8008cce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008cd8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008cdc:	d118      	bne.n	8008d10 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8008cde:	693b      	ldr	r3, [r7, #16]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d10a      	bne.n	8008cfa <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008ce4:	693b      	ldr	r3, [r7, #16]
 8008ce6:	015a      	lsls	r2, r3, #5
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	4413      	add	r3, r2
 8008cec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cf0:	461a      	mov	r2, r3
 8008cf2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008cf6:	6013      	str	r3, [r2, #0]
 8008cf8:	e013      	b.n	8008d22 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008cfa:	693b      	ldr	r3, [r7, #16]
 8008cfc:	015a      	lsls	r2, r3, #5
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	4413      	add	r3, r2
 8008d02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d06:	461a      	mov	r2, r3
 8008d08:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008d0c:	6013      	str	r3, [r2, #0]
 8008d0e:	e008      	b.n	8008d22 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008d10:	693b      	ldr	r3, [r7, #16]
 8008d12:	015a      	lsls	r2, r3, #5
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	4413      	add	r3, r2
 8008d18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d1c:	461a      	mov	r2, r3
 8008d1e:	2300      	movs	r3, #0
 8008d20:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008d22:	693b      	ldr	r3, [r7, #16]
 8008d24:	015a      	lsls	r2, r3, #5
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	4413      	add	r3, r2
 8008d2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d2e:	461a      	mov	r2, r3
 8008d30:	2300      	movs	r3, #0
 8008d32:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008d34:	693b      	ldr	r3, [r7, #16]
 8008d36:	015a      	lsls	r2, r3, #5
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	4413      	add	r3, r2
 8008d3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d40:	461a      	mov	r2, r3
 8008d42:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008d46:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008d48:	693b      	ldr	r3, [r7, #16]
 8008d4a:	3301      	adds	r3, #1
 8008d4c:	613b      	str	r3, [r7, #16]
 8008d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d50:	693a      	ldr	r2, [r7, #16]
 8008d52:	429a      	cmp	r2, r3
 8008d54:	d3b7      	bcc.n	8008cc6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008d56:	2300      	movs	r3, #0
 8008d58:	613b      	str	r3, [r7, #16]
 8008d5a:	e043      	b.n	8008de4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008d5c:	693b      	ldr	r3, [r7, #16]
 8008d5e:	015a      	lsls	r2, r3, #5
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	4413      	add	r3, r2
 8008d64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008d6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d72:	d118      	bne.n	8008da6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008d74:	693b      	ldr	r3, [r7, #16]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d10a      	bne.n	8008d90 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008d7a:	693b      	ldr	r3, [r7, #16]
 8008d7c:	015a      	lsls	r2, r3, #5
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	4413      	add	r3, r2
 8008d82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d86:	461a      	mov	r2, r3
 8008d88:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008d8c:	6013      	str	r3, [r2, #0]
 8008d8e:	e013      	b.n	8008db8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008d90:	693b      	ldr	r3, [r7, #16]
 8008d92:	015a      	lsls	r2, r3, #5
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	4413      	add	r3, r2
 8008d98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d9c:	461a      	mov	r2, r3
 8008d9e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008da2:	6013      	str	r3, [r2, #0]
 8008da4:	e008      	b.n	8008db8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008da6:	693b      	ldr	r3, [r7, #16]
 8008da8:	015a      	lsls	r2, r3, #5
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	4413      	add	r3, r2
 8008dae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008db2:	461a      	mov	r2, r3
 8008db4:	2300      	movs	r3, #0
 8008db6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008db8:	693b      	ldr	r3, [r7, #16]
 8008dba:	015a      	lsls	r2, r3, #5
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	4413      	add	r3, r2
 8008dc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dc4:	461a      	mov	r2, r3
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008dca:	693b      	ldr	r3, [r7, #16]
 8008dcc:	015a      	lsls	r2, r3, #5
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	4413      	add	r3, r2
 8008dd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dd6:	461a      	mov	r2, r3
 8008dd8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008ddc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008dde:	693b      	ldr	r3, [r7, #16]
 8008de0:	3301      	adds	r3, #1
 8008de2:	613b      	str	r3, [r7, #16]
 8008de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008de6:	693a      	ldr	r2, [r7, #16]
 8008de8:	429a      	cmp	r2, r3
 8008dea:	d3b7      	bcc.n	8008d5c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008df2:	691b      	ldr	r3, [r3, #16]
 8008df4:	68fa      	ldr	r2, [r7, #12]
 8008df6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008dfa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008dfe:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2200      	movs	r2, #0
 8008e04:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008e0c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d105      	bne.n	8008e20 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	699b      	ldr	r3, [r3, #24]
 8008e18:	f043 0210 	orr.w	r2, r3, #16
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	699a      	ldr	r2, [r3, #24]
 8008e24:	4b0f      	ldr	r3, [pc, #60]	; (8008e64 <USB_DevInit+0x2c4>)
 8008e26:	4313      	orrs	r3, r2
 8008e28:	687a      	ldr	r2, [r7, #4]
 8008e2a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008e2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d005      	beq.n	8008e3e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	699b      	ldr	r3, [r3, #24]
 8008e36:	f043 0208 	orr.w	r2, r3, #8
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008e3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e40:	2b01      	cmp	r3, #1
 8008e42:	d107      	bne.n	8008e54 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	699b      	ldr	r3, [r3, #24]
 8008e48:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008e4c:	f043 0304 	orr.w	r3, r3, #4
 8008e50:	687a      	ldr	r2, [r7, #4]
 8008e52:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008e54:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	3718      	adds	r7, #24
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008e60:	b004      	add	sp, #16
 8008e62:	4770      	bx	lr
 8008e64:	803c3800 	.word	0x803c3800

08008e68 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008e68:	b480      	push	{r7}
 8008e6a:	b085      	sub	sp, #20
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
 8008e70:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008e72:	2300      	movs	r3, #0
 8008e74:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	3301      	adds	r3, #1
 8008e7a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	4a13      	ldr	r2, [pc, #76]	; (8008ecc <USB_FlushTxFifo+0x64>)
 8008e80:	4293      	cmp	r3, r2
 8008e82:	d901      	bls.n	8008e88 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008e84:	2303      	movs	r3, #3
 8008e86:	e01b      	b.n	8008ec0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	691b      	ldr	r3, [r3, #16]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	daf2      	bge.n	8008e76 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008e90:	2300      	movs	r3, #0
 8008e92:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	019b      	lsls	r3, r3, #6
 8008e98:	f043 0220 	orr.w	r2, r3, #32
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	3301      	adds	r3, #1
 8008ea4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	4a08      	ldr	r2, [pc, #32]	; (8008ecc <USB_FlushTxFifo+0x64>)
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d901      	bls.n	8008eb2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008eae:	2303      	movs	r3, #3
 8008eb0:	e006      	b.n	8008ec0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	691b      	ldr	r3, [r3, #16]
 8008eb6:	f003 0320 	and.w	r3, r3, #32
 8008eba:	2b20      	cmp	r3, #32
 8008ebc:	d0f0      	beq.n	8008ea0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008ebe:	2300      	movs	r3, #0
}
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	3714      	adds	r7, #20
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eca:	4770      	bx	lr
 8008ecc:	00030d40 	.word	0x00030d40

08008ed0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008ed0:	b480      	push	{r7}
 8008ed2:	b085      	sub	sp, #20
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	3301      	adds	r3, #1
 8008ee0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	4a11      	ldr	r2, [pc, #68]	; (8008f2c <USB_FlushRxFifo+0x5c>)
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d901      	bls.n	8008eee <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008eea:	2303      	movs	r3, #3
 8008eec:	e018      	b.n	8008f20 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	691b      	ldr	r3, [r3, #16]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	daf2      	bge.n	8008edc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2210      	movs	r2, #16
 8008efe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	3301      	adds	r3, #1
 8008f04:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	4a08      	ldr	r2, [pc, #32]	; (8008f2c <USB_FlushRxFifo+0x5c>)
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	d901      	bls.n	8008f12 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008f0e:	2303      	movs	r3, #3
 8008f10:	e006      	b.n	8008f20 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	691b      	ldr	r3, [r3, #16]
 8008f16:	f003 0310 	and.w	r3, r3, #16
 8008f1a:	2b10      	cmp	r3, #16
 8008f1c:	d0f0      	beq.n	8008f00 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008f1e:	2300      	movs	r3, #0
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	3714      	adds	r7, #20
 8008f24:	46bd      	mov	sp, r7
 8008f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2a:	4770      	bx	lr
 8008f2c:	00030d40 	.word	0x00030d40

08008f30 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008f30:	b480      	push	{r7}
 8008f32:	b085      	sub	sp, #20
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
 8008f38:	460b      	mov	r3, r1
 8008f3a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f46:	681a      	ldr	r2, [r3, #0]
 8008f48:	78fb      	ldrb	r3, [r7, #3]
 8008f4a:	68f9      	ldr	r1, [r7, #12]
 8008f4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008f50:	4313      	orrs	r3, r2
 8008f52:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008f54:	2300      	movs	r3, #0
}
 8008f56:	4618      	mov	r0, r3
 8008f58:	3714      	adds	r7, #20
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f60:	4770      	bx	lr

08008f62 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008f62:	b480      	push	{r7}
 8008f64:	b087      	sub	sp, #28
 8008f66:	af00      	add	r7, sp, #0
 8008f68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008f6e:	693b      	ldr	r3, [r7, #16]
 8008f70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f74:	689b      	ldr	r3, [r3, #8]
 8008f76:	f003 0306 	and.w	r3, r3, #6
 8008f7a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d102      	bne.n	8008f88 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008f82:	2300      	movs	r3, #0
 8008f84:	75fb      	strb	r3, [r7, #23]
 8008f86:	e00a      	b.n	8008f9e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	2b02      	cmp	r3, #2
 8008f8c:	d002      	beq.n	8008f94 <USB_GetDevSpeed+0x32>
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	2b06      	cmp	r3, #6
 8008f92:	d102      	bne.n	8008f9a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008f94:	2302      	movs	r3, #2
 8008f96:	75fb      	strb	r3, [r7, #23]
 8008f98:	e001      	b.n	8008f9e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008f9a:	230f      	movs	r3, #15
 8008f9c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008f9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	371c      	adds	r7, #28
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008faa:	4770      	bx	lr

08008fac <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008fac:	b480      	push	{r7}
 8008fae:	b085      	sub	sp, #20
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
 8008fb4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	781b      	ldrb	r3, [r3, #0]
 8008fbe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	785b      	ldrb	r3, [r3, #1]
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	d13a      	bne.n	800903e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fce:	69da      	ldr	r2, [r3, #28]
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	781b      	ldrb	r3, [r3, #0]
 8008fd4:	f003 030f 	and.w	r3, r3, #15
 8008fd8:	2101      	movs	r1, #1
 8008fda:	fa01 f303 	lsl.w	r3, r1, r3
 8008fde:	b29b      	uxth	r3, r3
 8008fe0:	68f9      	ldr	r1, [r7, #12]
 8008fe2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008fe6:	4313      	orrs	r3, r2
 8008fe8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	015a      	lsls	r2, r3, #5
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	4413      	add	r3, r2
 8008ff2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d155      	bne.n	80090ac <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	015a      	lsls	r2, r3, #5
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	4413      	add	r3, r2
 8009008:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800900c:	681a      	ldr	r2, [r3, #0]
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	68db      	ldr	r3, [r3, #12]
 8009012:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	791b      	ldrb	r3, [r3, #4]
 800901a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800901c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800901e:	68bb      	ldr	r3, [r7, #8]
 8009020:	059b      	lsls	r3, r3, #22
 8009022:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009024:	4313      	orrs	r3, r2
 8009026:	68ba      	ldr	r2, [r7, #8]
 8009028:	0151      	lsls	r1, r2, #5
 800902a:	68fa      	ldr	r2, [r7, #12]
 800902c:	440a      	add	r2, r1
 800902e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009032:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009036:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800903a:	6013      	str	r3, [r2, #0]
 800903c:	e036      	b.n	80090ac <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009044:	69da      	ldr	r2, [r3, #28]
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	781b      	ldrb	r3, [r3, #0]
 800904a:	f003 030f 	and.w	r3, r3, #15
 800904e:	2101      	movs	r1, #1
 8009050:	fa01 f303 	lsl.w	r3, r1, r3
 8009054:	041b      	lsls	r3, r3, #16
 8009056:	68f9      	ldr	r1, [r7, #12]
 8009058:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800905c:	4313      	orrs	r3, r2
 800905e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	015a      	lsls	r2, r3, #5
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	4413      	add	r3, r2
 8009068:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009072:	2b00      	cmp	r3, #0
 8009074:	d11a      	bne.n	80090ac <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	015a      	lsls	r2, r3, #5
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	4413      	add	r3, r2
 800907e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009082:	681a      	ldr	r2, [r3, #0]
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	68db      	ldr	r3, [r3, #12]
 8009088:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	791b      	ldrb	r3, [r3, #4]
 8009090:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009092:	430b      	orrs	r3, r1
 8009094:	4313      	orrs	r3, r2
 8009096:	68ba      	ldr	r2, [r7, #8]
 8009098:	0151      	lsls	r1, r2, #5
 800909a:	68fa      	ldr	r2, [r7, #12]
 800909c:	440a      	add	r2, r1
 800909e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80090a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80090aa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80090ac:	2300      	movs	r3, #0
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	3714      	adds	r7, #20
 80090b2:	46bd      	mov	sp, r7
 80090b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b8:	4770      	bx	lr
	...

080090bc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80090bc:	b480      	push	{r7}
 80090be:	b085      	sub	sp, #20
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
 80090c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	781b      	ldrb	r3, [r3, #0]
 80090ce:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	785b      	ldrb	r3, [r3, #1]
 80090d4:	2b01      	cmp	r3, #1
 80090d6:	d161      	bne.n	800919c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	015a      	lsls	r2, r3, #5
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	4413      	add	r3, r2
 80090e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80090ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80090ee:	d11f      	bne.n	8009130 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	015a      	lsls	r2, r3, #5
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	4413      	add	r3, r2
 80090f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	68ba      	ldr	r2, [r7, #8]
 8009100:	0151      	lsls	r1, r2, #5
 8009102:	68fa      	ldr	r2, [r7, #12]
 8009104:	440a      	add	r2, r1
 8009106:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800910a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800910e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	015a      	lsls	r2, r3, #5
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	4413      	add	r3, r2
 8009118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	68ba      	ldr	r2, [r7, #8]
 8009120:	0151      	lsls	r1, r2, #5
 8009122:	68fa      	ldr	r2, [r7, #12]
 8009124:	440a      	add	r2, r1
 8009126:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800912a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800912e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009136:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	781b      	ldrb	r3, [r3, #0]
 800913c:	f003 030f 	and.w	r3, r3, #15
 8009140:	2101      	movs	r1, #1
 8009142:	fa01 f303 	lsl.w	r3, r1, r3
 8009146:	b29b      	uxth	r3, r3
 8009148:	43db      	mvns	r3, r3
 800914a:	68f9      	ldr	r1, [r7, #12]
 800914c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009150:	4013      	ands	r3, r2
 8009152:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800915a:	69da      	ldr	r2, [r3, #28]
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	781b      	ldrb	r3, [r3, #0]
 8009160:	f003 030f 	and.w	r3, r3, #15
 8009164:	2101      	movs	r1, #1
 8009166:	fa01 f303 	lsl.w	r3, r1, r3
 800916a:	b29b      	uxth	r3, r3
 800916c:	43db      	mvns	r3, r3
 800916e:	68f9      	ldr	r1, [r7, #12]
 8009170:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009174:	4013      	ands	r3, r2
 8009176:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	015a      	lsls	r2, r3, #5
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	4413      	add	r3, r2
 8009180:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009184:	681a      	ldr	r2, [r3, #0]
 8009186:	68bb      	ldr	r3, [r7, #8]
 8009188:	0159      	lsls	r1, r3, #5
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	440b      	add	r3, r1
 800918e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009192:	4619      	mov	r1, r3
 8009194:	4b35      	ldr	r3, [pc, #212]	; (800926c <USB_DeactivateEndpoint+0x1b0>)
 8009196:	4013      	ands	r3, r2
 8009198:	600b      	str	r3, [r1, #0]
 800919a:	e060      	b.n	800925e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	015a      	lsls	r2, r3, #5
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	4413      	add	r3, r2
 80091a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80091ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80091b2:	d11f      	bne.n	80091f4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	015a      	lsls	r2, r3, #5
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	4413      	add	r3, r2
 80091bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	68ba      	ldr	r2, [r7, #8]
 80091c4:	0151      	lsls	r1, r2, #5
 80091c6:	68fa      	ldr	r2, [r7, #12]
 80091c8:	440a      	add	r2, r1
 80091ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80091ce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80091d2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	015a      	lsls	r2, r3, #5
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	4413      	add	r3, r2
 80091dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	68ba      	ldr	r2, [r7, #8]
 80091e4:	0151      	lsls	r1, r2, #5
 80091e6:	68fa      	ldr	r2, [r7, #12]
 80091e8:	440a      	add	r2, r1
 80091ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80091ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80091f2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	781b      	ldrb	r3, [r3, #0]
 8009200:	f003 030f 	and.w	r3, r3, #15
 8009204:	2101      	movs	r1, #1
 8009206:	fa01 f303 	lsl.w	r3, r1, r3
 800920a:	041b      	lsls	r3, r3, #16
 800920c:	43db      	mvns	r3, r3
 800920e:	68f9      	ldr	r1, [r7, #12]
 8009210:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009214:	4013      	ands	r3, r2
 8009216:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800921e:	69da      	ldr	r2, [r3, #28]
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	781b      	ldrb	r3, [r3, #0]
 8009224:	f003 030f 	and.w	r3, r3, #15
 8009228:	2101      	movs	r1, #1
 800922a:	fa01 f303 	lsl.w	r3, r1, r3
 800922e:	041b      	lsls	r3, r3, #16
 8009230:	43db      	mvns	r3, r3
 8009232:	68f9      	ldr	r1, [r7, #12]
 8009234:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009238:	4013      	ands	r3, r2
 800923a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800923c:	68bb      	ldr	r3, [r7, #8]
 800923e:	015a      	lsls	r2, r3, #5
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	4413      	add	r3, r2
 8009244:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009248:	681a      	ldr	r2, [r3, #0]
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	0159      	lsls	r1, r3, #5
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	440b      	add	r3, r1
 8009252:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009256:	4619      	mov	r1, r3
 8009258:	4b05      	ldr	r3, [pc, #20]	; (8009270 <USB_DeactivateEndpoint+0x1b4>)
 800925a:	4013      	ands	r3, r2
 800925c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800925e:	2300      	movs	r3, #0
}
 8009260:	4618      	mov	r0, r3
 8009262:	3714      	adds	r7, #20
 8009264:	46bd      	mov	sp, r7
 8009266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926a:	4770      	bx	lr
 800926c:	ec337800 	.word	0xec337800
 8009270:	eff37800 	.word	0xeff37800

08009274 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b08a      	sub	sp, #40	; 0x28
 8009278:	af02      	add	r7, sp, #8
 800927a:	60f8      	str	r0, [r7, #12]
 800927c:	60b9      	str	r1, [r7, #8]
 800927e:	4613      	mov	r3, r2
 8009280:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009286:	68bb      	ldr	r3, [r7, #8]
 8009288:	781b      	ldrb	r3, [r3, #0]
 800928a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	785b      	ldrb	r3, [r3, #1]
 8009290:	2b01      	cmp	r3, #1
 8009292:	f040 815c 	bne.w	800954e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009296:	68bb      	ldr	r3, [r7, #8]
 8009298:	699b      	ldr	r3, [r3, #24]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d132      	bne.n	8009304 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800929e:	69bb      	ldr	r3, [r7, #24]
 80092a0:	015a      	lsls	r2, r3, #5
 80092a2:	69fb      	ldr	r3, [r7, #28]
 80092a4:	4413      	add	r3, r2
 80092a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092aa:	691b      	ldr	r3, [r3, #16]
 80092ac:	69ba      	ldr	r2, [r7, #24]
 80092ae:	0151      	lsls	r1, r2, #5
 80092b0:	69fa      	ldr	r2, [r7, #28]
 80092b2:	440a      	add	r2, r1
 80092b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092b8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80092bc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80092c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80092c2:	69bb      	ldr	r3, [r7, #24]
 80092c4:	015a      	lsls	r2, r3, #5
 80092c6:	69fb      	ldr	r3, [r7, #28]
 80092c8:	4413      	add	r3, r2
 80092ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092ce:	691b      	ldr	r3, [r3, #16]
 80092d0:	69ba      	ldr	r2, [r7, #24]
 80092d2:	0151      	lsls	r1, r2, #5
 80092d4:	69fa      	ldr	r2, [r7, #28]
 80092d6:	440a      	add	r2, r1
 80092d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80092e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80092e2:	69bb      	ldr	r3, [r7, #24]
 80092e4:	015a      	lsls	r2, r3, #5
 80092e6:	69fb      	ldr	r3, [r7, #28]
 80092e8:	4413      	add	r3, r2
 80092ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092ee:	691b      	ldr	r3, [r3, #16]
 80092f0:	69ba      	ldr	r2, [r7, #24]
 80092f2:	0151      	lsls	r1, r2, #5
 80092f4:	69fa      	ldr	r2, [r7, #28]
 80092f6:	440a      	add	r2, r1
 80092f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092fc:	0cdb      	lsrs	r3, r3, #19
 80092fe:	04db      	lsls	r3, r3, #19
 8009300:	6113      	str	r3, [r2, #16]
 8009302:	e074      	b.n	80093ee <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009304:	69bb      	ldr	r3, [r7, #24]
 8009306:	015a      	lsls	r2, r3, #5
 8009308:	69fb      	ldr	r3, [r7, #28]
 800930a:	4413      	add	r3, r2
 800930c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009310:	691b      	ldr	r3, [r3, #16]
 8009312:	69ba      	ldr	r2, [r7, #24]
 8009314:	0151      	lsls	r1, r2, #5
 8009316:	69fa      	ldr	r2, [r7, #28]
 8009318:	440a      	add	r2, r1
 800931a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800931e:	0cdb      	lsrs	r3, r3, #19
 8009320:	04db      	lsls	r3, r3, #19
 8009322:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009324:	69bb      	ldr	r3, [r7, #24]
 8009326:	015a      	lsls	r2, r3, #5
 8009328:	69fb      	ldr	r3, [r7, #28]
 800932a:	4413      	add	r3, r2
 800932c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009330:	691b      	ldr	r3, [r3, #16]
 8009332:	69ba      	ldr	r2, [r7, #24]
 8009334:	0151      	lsls	r1, r2, #5
 8009336:	69fa      	ldr	r2, [r7, #28]
 8009338:	440a      	add	r2, r1
 800933a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800933e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009342:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009346:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009348:	69bb      	ldr	r3, [r7, #24]
 800934a:	015a      	lsls	r2, r3, #5
 800934c:	69fb      	ldr	r3, [r7, #28]
 800934e:	4413      	add	r3, r2
 8009350:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009354:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8009356:	68bb      	ldr	r3, [r7, #8]
 8009358:	6999      	ldr	r1, [r3, #24]
 800935a:	68bb      	ldr	r3, [r7, #8]
 800935c:	68db      	ldr	r3, [r3, #12]
 800935e:	440b      	add	r3, r1
 8009360:	1e59      	subs	r1, r3, #1
 8009362:	68bb      	ldr	r3, [r7, #8]
 8009364:	68db      	ldr	r3, [r3, #12]
 8009366:	fbb1 f3f3 	udiv	r3, r1, r3
 800936a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800936c:	4b9d      	ldr	r3, [pc, #628]	; (80095e4 <USB_EPStartXfer+0x370>)
 800936e:	400b      	ands	r3, r1
 8009370:	69b9      	ldr	r1, [r7, #24]
 8009372:	0148      	lsls	r0, r1, #5
 8009374:	69f9      	ldr	r1, [r7, #28]
 8009376:	4401      	add	r1, r0
 8009378:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800937c:	4313      	orrs	r3, r2
 800937e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009380:	69bb      	ldr	r3, [r7, #24]
 8009382:	015a      	lsls	r2, r3, #5
 8009384:	69fb      	ldr	r3, [r7, #28]
 8009386:	4413      	add	r3, r2
 8009388:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800938c:	691a      	ldr	r2, [r3, #16]
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	699b      	ldr	r3, [r3, #24]
 8009392:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009396:	69b9      	ldr	r1, [r7, #24]
 8009398:	0148      	lsls	r0, r1, #5
 800939a:	69f9      	ldr	r1, [r7, #28]
 800939c:	4401      	add	r1, r0
 800939e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80093a2:	4313      	orrs	r3, r2
 80093a4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80093a6:	68bb      	ldr	r3, [r7, #8]
 80093a8:	791b      	ldrb	r3, [r3, #4]
 80093aa:	2b01      	cmp	r3, #1
 80093ac:	d11f      	bne.n	80093ee <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80093ae:	69bb      	ldr	r3, [r7, #24]
 80093b0:	015a      	lsls	r2, r3, #5
 80093b2:	69fb      	ldr	r3, [r7, #28]
 80093b4:	4413      	add	r3, r2
 80093b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093ba:	691b      	ldr	r3, [r3, #16]
 80093bc:	69ba      	ldr	r2, [r7, #24]
 80093be:	0151      	lsls	r1, r2, #5
 80093c0:	69fa      	ldr	r2, [r7, #28]
 80093c2:	440a      	add	r2, r1
 80093c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093c8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80093cc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80093ce:	69bb      	ldr	r3, [r7, #24]
 80093d0:	015a      	lsls	r2, r3, #5
 80093d2:	69fb      	ldr	r3, [r7, #28]
 80093d4:	4413      	add	r3, r2
 80093d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093da:	691b      	ldr	r3, [r3, #16]
 80093dc:	69ba      	ldr	r2, [r7, #24]
 80093de:	0151      	lsls	r1, r2, #5
 80093e0:	69fa      	ldr	r2, [r7, #28]
 80093e2:	440a      	add	r2, r1
 80093e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093e8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80093ec:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80093ee:	79fb      	ldrb	r3, [r7, #7]
 80093f0:	2b01      	cmp	r3, #1
 80093f2:	d14b      	bne.n	800948c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80093f4:	68bb      	ldr	r3, [r7, #8]
 80093f6:	695b      	ldr	r3, [r3, #20]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d009      	beq.n	8009410 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80093fc:	69bb      	ldr	r3, [r7, #24]
 80093fe:	015a      	lsls	r2, r3, #5
 8009400:	69fb      	ldr	r3, [r7, #28]
 8009402:	4413      	add	r3, r2
 8009404:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009408:	461a      	mov	r2, r3
 800940a:	68bb      	ldr	r3, [r7, #8]
 800940c:	695b      	ldr	r3, [r3, #20]
 800940e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009410:	68bb      	ldr	r3, [r7, #8]
 8009412:	791b      	ldrb	r3, [r3, #4]
 8009414:	2b01      	cmp	r3, #1
 8009416:	d128      	bne.n	800946a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009418:	69fb      	ldr	r3, [r7, #28]
 800941a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800941e:	689b      	ldr	r3, [r3, #8]
 8009420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009424:	2b00      	cmp	r3, #0
 8009426:	d110      	bne.n	800944a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009428:	69bb      	ldr	r3, [r7, #24]
 800942a:	015a      	lsls	r2, r3, #5
 800942c:	69fb      	ldr	r3, [r7, #28]
 800942e:	4413      	add	r3, r2
 8009430:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	69ba      	ldr	r2, [r7, #24]
 8009438:	0151      	lsls	r1, r2, #5
 800943a:	69fa      	ldr	r2, [r7, #28]
 800943c:	440a      	add	r2, r1
 800943e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009442:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009446:	6013      	str	r3, [r2, #0]
 8009448:	e00f      	b.n	800946a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800944a:	69bb      	ldr	r3, [r7, #24]
 800944c:	015a      	lsls	r2, r3, #5
 800944e:	69fb      	ldr	r3, [r7, #28]
 8009450:	4413      	add	r3, r2
 8009452:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	69ba      	ldr	r2, [r7, #24]
 800945a:	0151      	lsls	r1, r2, #5
 800945c:	69fa      	ldr	r2, [r7, #28]
 800945e:	440a      	add	r2, r1
 8009460:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009464:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009468:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800946a:	69bb      	ldr	r3, [r7, #24]
 800946c:	015a      	lsls	r2, r3, #5
 800946e:	69fb      	ldr	r3, [r7, #28]
 8009470:	4413      	add	r3, r2
 8009472:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	69ba      	ldr	r2, [r7, #24]
 800947a:	0151      	lsls	r1, r2, #5
 800947c:	69fa      	ldr	r2, [r7, #28]
 800947e:	440a      	add	r2, r1
 8009480:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009484:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009488:	6013      	str	r3, [r2, #0]
 800948a:	e133      	b.n	80096f4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800948c:	69bb      	ldr	r3, [r7, #24]
 800948e:	015a      	lsls	r2, r3, #5
 8009490:	69fb      	ldr	r3, [r7, #28]
 8009492:	4413      	add	r3, r2
 8009494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	69ba      	ldr	r2, [r7, #24]
 800949c:	0151      	lsls	r1, r2, #5
 800949e:	69fa      	ldr	r2, [r7, #28]
 80094a0:	440a      	add	r2, r1
 80094a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094a6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80094aa:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	791b      	ldrb	r3, [r3, #4]
 80094b0:	2b01      	cmp	r3, #1
 80094b2:	d015      	beq.n	80094e0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	699b      	ldr	r3, [r3, #24]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	f000 811b 	beq.w	80096f4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80094be:	69fb      	ldr	r3, [r7, #28]
 80094c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80094c6:	68bb      	ldr	r3, [r7, #8]
 80094c8:	781b      	ldrb	r3, [r3, #0]
 80094ca:	f003 030f 	and.w	r3, r3, #15
 80094ce:	2101      	movs	r1, #1
 80094d0:	fa01 f303 	lsl.w	r3, r1, r3
 80094d4:	69f9      	ldr	r1, [r7, #28]
 80094d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80094da:	4313      	orrs	r3, r2
 80094dc:	634b      	str	r3, [r1, #52]	; 0x34
 80094de:	e109      	b.n	80096f4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80094e0:	69fb      	ldr	r3, [r7, #28]
 80094e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094e6:	689b      	ldr	r3, [r3, #8]
 80094e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d110      	bne.n	8009512 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80094f0:	69bb      	ldr	r3, [r7, #24]
 80094f2:	015a      	lsls	r2, r3, #5
 80094f4:	69fb      	ldr	r3, [r7, #28]
 80094f6:	4413      	add	r3, r2
 80094f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	69ba      	ldr	r2, [r7, #24]
 8009500:	0151      	lsls	r1, r2, #5
 8009502:	69fa      	ldr	r2, [r7, #28]
 8009504:	440a      	add	r2, r1
 8009506:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800950a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800950e:	6013      	str	r3, [r2, #0]
 8009510:	e00f      	b.n	8009532 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009512:	69bb      	ldr	r3, [r7, #24]
 8009514:	015a      	lsls	r2, r3, #5
 8009516:	69fb      	ldr	r3, [r7, #28]
 8009518:	4413      	add	r3, r2
 800951a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	69ba      	ldr	r2, [r7, #24]
 8009522:	0151      	lsls	r1, r2, #5
 8009524:	69fa      	ldr	r2, [r7, #28]
 8009526:	440a      	add	r2, r1
 8009528:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800952c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009530:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009532:	68bb      	ldr	r3, [r7, #8]
 8009534:	6919      	ldr	r1, [r3, #16]
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	781a      	ldrb	r2, [r3, #0]
 800953a:	68bb      	ldr	r3, [r7, #8]
 800953c:	699b      	ldr	r3, [r3, #24]
 800953e:	b298      	uxth	r0, r3
 8009540:	79fb      	ldrb	r3, [r7, #7]
 8009542:	9300      	str	r3, [sp, #0]
 8009544:	4603      	mov	r3, r0
 8009546:	68f8      	ldr	r0, [r7, #12]
 8009548:	f000 fade 	bl	8009b08 <USB_WritePacket>
 800954c:	e0d2      	b.n	80096f4 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800954e:	69bb      	ldr	r3, [r7, #24]
 8009550:	015a      	lsls	r2, r3, #5
 8009552:	69fb      	ldr	r3, [r7, #28]
 8009554:	4413      	add	r3, r2
 8009556:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800955a:	691b      	ldr	r3, [r3, #16]
 800955c:	69ba      	ldr	r2, [r7, #24]
 800955e:	0151      	lsls	r1, r2, #5
 8009560:	69fa      	ldr	r2, [r7, #28]
 8009562:	440a      	add	r2, r1
 8009564:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009568:	0cdb      	lsrs	r3, r3, #19
 800956a:	04db      	lsls	r3, r3, #19
 800956c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800956e:	69bb      	ldr	r3, [r7, #24]
 8009570:	015a      	lsls	r2, r3, #5
 8009572:	69fb      	ldr	r3, [r7, #28]
 8009574:	4413      	add	r3, r2
 8009576:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800957a:	691b      	ldr	r3, [r3, #16]
 800957c:	69ba      	ldr	r2, [r7, #24]
 800957e:	0151      	lsls	r1, r2, #5
 8009580:	69fa      	ldr	r2, [r7, #28]
 8009582:	440a      	add	r2, r1
 8009584:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009588:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800958c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009590:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8009592:	68bb      	ldr	r3, [r7, #8]
 8009594:	699b      	ldr	r3, [r3, #24]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d126      	bne.n	80095e8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800959a:	69bb      	ldr	r3, [r7, #24]
 800959c:	015a      	lsls	r2, r3, #5
 800959e:	69fb      	ldr	r3, [r7, #28]
 80095a0:	4413      	add	r3, r2
 80095a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095a6:	691a      	ldr	r2, [r3, #16]
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	68db      	ldr	r3, [r3, #12]
 80095ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80095b0:	69b9      	ldr	r1, [r7, #24]
 80095b2:	0148      	lsls	r0, r1, #5
 80095b4:	69f9      	ldr	r1, [r7, #28]
 80095b6:	4401      	add	r1, r0
 80095b8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80095bc:	4313      	orrs	r3, r2
 80095be:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80095c0:	69bb      	ldr	r3, [r7, #24]
 80095c2:	015a      	lsls	r2, r3, #5
 80095c4:	69fb      	ldr	r3, [r7, #28]
 80095c6:	4413      	add	r3, r2
 80095c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095cc:	691b      	ldr	r3, [r3, #16]
 80095ce:	69ba      	ldr	r2, [r7, #24]
 80095d0:	0151      	lsls	r1, r2, #5
 80095d2:	69fa      	ldr	r2, [r7, #28]
 80095d4:	440a      	add	r2, r1
 80095d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80095de:	6113      	str	r3, [r2, #16]
 80095e0:	e03a      	b.n	8009658 <USB_EPStartXfer+0x3e4>
 80095e2:	bf00      	nop
 80095e4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80095e8:	68bb      	ldr	r3, [r7, #8]
 80095ea:	699a      	ldr	r2, [r3, #24]
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	68db      	ldr	r3, [r3, #12]
 80095f0:	4413      	add	r3, r2
 80095f2:	1e5a      	subs	r2, r3, #1
 80095f4:	68bb      	ldr	r3, [r7, #8]
 80095f6:	68db      	ldr	r3, [r3, #12]
 80095f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80095fc:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80095fe:	68bb      	ldr	r3, [r7, #8]
 8009600:	68db      	ldr	r3, [r3, #12]
 8009602:	8afa      	ldrh	r2, [r7, #22]
 8009604:	fb03 f202 	mul.w	r2, r3, r2
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800960c:	69bb      	ldr	r3, [r7, #24]
 800960e:	015a      	lsls	r2, r3, #5
 8009610:	69fb      	ldr	r3, [r7, #28]
 8009612:	4413      	add	r3, r2
 8009614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009618:	691a      	ldr	r2, [r3, #16]
 800961a:	8afb      	ldrh	r3, [r7, #22]
 800961c:	04d9      	lsls	r1, r3, #19
 800961e:	4b38      	ldr	r3, [pc, #224]	; (8009700 <USB_EPStartXfer+0x48c>)
 8009620:	400b      	ands	r3, r1
 8009622:	69b9      	ldr	r1, [r7, #24]
 8009624:	0148      	lsls	r0, r1, #5
 8009626:	69f9      	ldr	r1, [r7, #28]
 8009628:	4401      	add	r1, r0
 800962a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800962e:	4313      	orrs	r3, r2
 8009630:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009632:	69bb      	ldr	r3, [r7, #24]
 8009634:	015a      	lsls	r2, r3, #5
 8009636:	69fb      	ldr	r3, [r7, #28]
 8009638:	4413      	add	r3, r2
 800963a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800963e:	691a      	ldr	r2, [r3, #16]
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	69db      	ldr	r3, [r3, #28]
 8009644:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009648:	69b9      	ldr	r1, [r7, #24]
 800964a:	0148      	lsls	r0, r1, #5
 800964c:	69f9      	ldr	r1, [r7, #28]
 800964e:	4401      	add	r1, r0
 8009650:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009654:	4313      	orrs	r3, r2
 8009656:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009658:	79fb      	ldrb	r3, [r7, #7]
 800965a:	2b01      	cmp	r3, #1
 800965c:	d10d      	bne.n	800967a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800965e:	68bb      	ldr	r3, [r7, #8]
 8009660:	691b      	ldr	r3, [r3, #16]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d009      	beq.n	800967a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009666:	68bb      	ldr	r3, [r7, #8]
 8009668:	6919      	ldr	r1, [r3, #16]
 800966a:	69bb      	ldr	r3, [r7, #24]
 800966c:	015a      	lsls	r2, r3, #5
 800966e:	69fb      	ldr	r3, [r7, #28]
 8009670:	4413      	add	r3, r2
 8009672:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009676:	460a      	mov	r2, r1
 8009678:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	791b      	ldrb	r3, [r3, #4]
 800967e:	2b01      	cmp	r3, #1
 8009680:	d128      	bne.n	80096d4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009682:	69fb      	ldr	r3, [r7, #28]
 8009684:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009688:	689b      	ldr	r3, [r3, #8]
 800968a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800968e:	2b00      	cmp	r3, #0
 8009690:	d110      	bne.n	80096b4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009692:	69bb      	ldr	r3, [r7, #24]
 8009694:	015a      	lsls	r2, r3, #5
 8009696:	69fb      	ldr	r3, [r7, #28]
 8009698:	4413      	add	r3, r2
 800969a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	69ba      	ldr	r2, [r7, #24]
 80096a2:	0151      	lsls	r1, r2, #5
 80096a4:	69fa      	ldr	r2, [r7, #28]
 80096a6:	440a      	add	r2, r1
 80096a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096ac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80096b0:	6013      	str	r3, [r2, #0]
 80096b2:	e00f      	b.n	80096d4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80096b4:	69bb      	ldr	r3, [r7, #24]
 80096b6:	015a      	lsls	r2, r3, #5
 80096b8:	69fb      	ldr	r3, [r7, #28]
 80096ba:	4413      	add	r3, r2
 80096bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	69ba      	ldr	r2, [r7, #24]
 80096c4:	0151      	lsls	r1, r2, #5
 80096c6:	69fa      	ldr	r2, [r7, #28]
 80096c8:	440a      	add	r2, r1
 80096ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80096d2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80096d4:	69bb      	ldr	r3, [r7, #24]
 80096d6:	015a      	lsls	r2, r3, #5
 80096d8:	69fb      	ldr	r3, [r7, #28]
 80096da:	4413      	add	r3, r2
 80096dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	69ba      	ldr	r2, [r7, #24]
 80096e4:	0151      	lsls	r1, r2, #5
 80096e6:	69fa      	ldr	r2, [r7, #28]
 80096e8:	440a      	add	r2, r1
 80096ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096ee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80096f2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80096f4:	2300      	movs	r3, #0
}
 80096f6:	4618      	mov	r0, r3
 80096f8:	3720      	adds	r7, #32
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bd80      	pop	{r7, pc}
 80096fe:	bf00      	nop
 8009700:	1ff80000 	.word	0x1ff80000

08009704 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009704:	b480      	push	{r7}
 8009706:	b087      	sub	sp, #28
 8009708:	af00      	add	r7, sp, #0
 800970a:	60f8      	str	r0, [r7, #12]
 800970c:	60b9      	str	r1, [r7, #8]
 800970e:	4613      	mov	r3, r2
 8009710:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009716:	68bb      	ldr	r3, [r7, #8]
 8009718:	781b      	ldrb	r3, [r3, #0]
 800971a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800971c:	68bb      	ldr	r3, [r7, #8]
 800971e:	785b      	ldrb	r3, [r3, #1]
 8009720:	2b01      	cmp	r3, #1
 8009722:	f040 80ce 	bne.w	80098c2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009726:	68bb      	ldr	r3, [r7, #8]
 8009728:	699b      	ldr	r3, [r3, #24]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d132      	bne.n	8009794 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800972e:	693b      	ldr	r3, [r7, #16]
 8009730:	015a      	lsls	r2, r3, #5
 8009732:	697b      	ldr	r3, [r7, #20]
 8009734:	4413      	add	r3, r2
 8009736:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800973a:	691b      	ldr	r3, [r3, #16]
 800973c:	693a      	ldr	r2, [r7, #16]
 800973e:	0151      	lsls	r1, r2, #5
 8009740:	697a      	ldr	r2, [r7, #20]
 8009742:	440a      	add	r2, r1
 8009744:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009748:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800974c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009750:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009752:	693b      	ldr	r3, [r7, #16]
 8009754:	015a      	lsls	r2, r3, #5
 8009756:	697b      	ldr	r3, [r7, #20]
 8009758:	4413      	add	r3, r2
 800975a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800975e:	691b      	ldr	r3, [r3, #16]
 8009760:	693a      	ldr	r2, [r7, #16]
 8009762:	0151      	lsls	r1, r2, #5
 8009764:	697a      	ldr	r2, [r7, #20]
 8009766:	440a      	add	r2, r1
 8009768:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800976c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009770:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009772:	693b      	ldr	r3, [r7, #16]
 8009774:	015a      	lsls	r2, r3, #5
 8009776:	697b      	ldr	r3, [r7, #20]
 8009778:	4413      	add	r3, r2
 800977a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800977e:	691b      	ldr	r3, [r3, #16]
 8009780:	693a      	ldr	r2, [r7, #16]
 8009782:	0151      	lsls	r1, r2, #5
 8009784:	697a      	ldr	r2, [r7, #20]
 8009786:	440a      	add	r2, r1
 8009788:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800978c:	0cdb      	lsrs	r3, r3, #19
 800978e:	04db      	lsls	r3, r3, #19
 8009790:	6113      	str	r3, [r2, #16]
 8009792:	e04e      	b.n	8009832 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009794:	693b      	ldr	r3, [r7, #16]
 8009796:	015a      	lsls	r2, r3, #5
 8009798:	697b      	ldr	r3, [r7, #20]
 800979a:	4413      	add	r3, r2
 800979c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097a0:	691b      	ldr	r3, [r3, #16]
 80097a2:	693a      	ldr	r2, [r7, #16]
 80097a4:	0151      	lsls	r1, r2, #5
 80097a6:	697a      	ldr	r2, [r7, #20]
 80097a8:	440a      	add	r2, r1
 80097aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097ae:	0cdb      	lsrs	r3, r3, #19
 80097b0:	04db      	lsls	r3, r3, #19
 80097b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80097b4:	693b      	ldr	r3, [r7, #16]
 80097b6:	015a      	lsls	r2, r3, #5
 80097b8:	697b      	ldr	r3, [r7, #20]
 80097ba:	4413      	add	r3, r2
 80097bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097c0:	691b      	ldr	r3, [r3, #16]
 80097c2:	693a      	ldr	r2, [r7, #16]
 80097c4:	0151      	lsls	r1, r2, #5
 80097c6:	697a      	ldr	r2, [r7, #20]
 80097c8:	440a      	add	r2, r1
 80097ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097ce:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80097d2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80097d6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80097d8:	68bb      	ldr	r3, [r7, #8]
 80097da:	699a      	ldr	r2, [r3, #24]
 80097dc:	68bb      	ldr	r3, [r7, #8]
 80097de:	68db      	ldr	r3, [r3, #12]
 80097e0:	429a      	cmp	r2, r3
 80097e2:	d903      	bls.n	80097ec <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80097e4:	68bb      	ldr	r3, [r7, #8]
 80097e6:	68da      	ldr	r2, [r3, #12]
 80097e8:	68bb      	ldr	r3, [r7, #8]
 80097ea:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80097ec:	693b      	ldr	r3, [r7, #16]
 80097ee:	015a      	lsls	r2, r3, #5
 80097f0:	697b      	ldr	r3, [r7, #20]
 80097f2:	4413      	add	r3, r2
 80097f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097f8:	691b      	ldr	r3, [r3, #16]
 80097fa:	693a      	ldr	r2, [r7, #16]
 80097fc:	0151      	lsls	r1, r2, #5
 80097fe:	697a      	ldr	r2, [r7, #20]
 8009800:	440a      	add	r2, r1
 8009802:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009806:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800980a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800980c:	693b      	ldr	r3, [r7, #16]
 800980e:	015a      	lsls	r2, r3, #5
 8009810:	697b      	ldr	r3, [r7, #20]
 8009812:	4413      	add	r3, r2
 8009814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009818:	691a      	ldr	r2, [r3, #16]
 800981a:	68bb      	ldr	r3, [r7, #8]
 800981c:	699b      	ldr	r3, [r3, #24]
 800981e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009822:	6939      	ldr	r1, [r7, #16]
 8009824:	0148      	lsls	r0, r1, #5
 8009826:	6979      	ldr	r1, [r7, #20]
 8009828:	4401      	add	r1, r0
 800982a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800982e:	4313      	orrs	r3, r2
 8009830:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009832:	79fb      	ldrb	r3, [r7, #7]
 8009834:	2b01      	cmp	r3, #1
 8009836:	d11e      	bne.n	8009876 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	695b      	ldr	r3, [r3, #20]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d009      	beq.n	8009854 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009840:	693b      	ldr	r3, [r7, #16]
 8009842:	015a      	lsls	r2, r3, #5
 8009844:	697b      	ldr	r3, [r7, #20]
 8009846:	4413      	add	r3, r2
 8009848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800984c:	461a      	mov	r2, r3
 800984e:	68bb      	ldr	r3, [r7, #8]
 8009850:	695b      	ldr	r3, [r3, #20]
 8009852:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009854:	693b      	ldr	r3, [r7, #16]
 8009856:	015a      	lsls	r2, r3, #5
 8009858:	697b      	ldr	r3, [r7, #20]
 800985a:	4413      	add	r3, r2
 800985c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	693a      	ldr	r2, [r7, #16]
 8009864:	0151      	lsls	r1, r2, #5
 8009866:	697a      	ldr	r2, [r7, #20]
 8009868:	440a      	add	r2, r1
 800986a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800986e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009872:	6013      	str	r3, [r2, #0]
 8009874:	e097      	b.n	80099a6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009876:	693b      	ldr	r3, [r7, #16]
 8009878:	015a      	lsls	r2, r3, #5
 800987a:	697b      	ldr	r3, [r7, #20]
 800987c:	4413      	add	r3, r2
 800987e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	693a      	ldr	r2, [r7, #16]
 8009886:	0151      	lsls	r1, r2, #5
 8009888:	697a      	ldr	r2, [r7, #20]
 800988a:	440a      	add	r2, r1
 800988c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009890:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009894:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8009896:	68bb      	ldr	r3, [r7, #8]
 8009898:	699b      	ldr	r3, [r3, #24]
 800989a:	2b00      	cmp	r3, #0
 800989c:	f000 8083 	beq.w	80099a6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80098a0:	697b      	ldr	r3, [r7, #20]
 80098a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80098a8:	68bb      	ldr	r3, [r7, #8]
 80098aa:	781b      	ldrb	r3, [r3, #0]
 80098ac:	f003 030f 	and.w	r3, r3, #15
 80098b0:	2101      	movs	r1, #1
 80098b2:	fa01 f303 	lsl.w	r3, r1, r3
 80098b6:	6979      	ldr	r1, [r7, #20]
 80098b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80098bc:	4313      	orrs	r3, r2
 80098be:	634b      	str	r3, [r1, #52]	; 0x34
 80098c0:	e071      	b.n	80099a6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80098c2:	693b      	ldr	r3, [r7, #16]
 80098c4:	015a      	lsls	r2, r3, #5
 80098c6:	697b      	ldr	r3, [r7, #20]
 80098c8:	4413      	add	r3, r2
 80098ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098ce:	691b      	ldr	r3, [r3, #16]
 80098d0:	693a      	ldr	r2, [r7, #16]
 80098d2:	0151      	lsls	r1, r2, #5
 80098d4:	697a      	ldr	r2, [r7, #20]
 80098d6:	440a      	add	r2, r1
 80098d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80098dc:	0cdb      	lsrs	r3, r3, #19
 80098de:	04db      	lsls	r3, r3, #19
 80098e0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80098e2:	693b      	ldr	r3, [r7, #16]
 80098e4:	015a      	lsls	r2, r3, #5
 80098e6:	697b      	ldr	r3, [r7, #20]
 80098e8:	4413      	add	r3, r2
 80098ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098ee:	691b      	ldr	r3, [r3, #16]
 80098f0:	693a      	ldr	r2, [r7, #16]
 80098f2:	0151      	lsls	r1, r2, #5
 80098f4:	697a      	ldr	r2, [r7, #20]
 80098f6:	440a      	add	r2, r1
 80098f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80098fc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009900:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009904:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8009906:	68bb      	ldr	r3, [r7, #8]
 8009908:	699b      	ldr	r3, [r3, #24]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d003      	beq.n	8009916 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800990e:	68bb      	ldr	r3, [r7, #8]
 8009910:	68da      	ldr	r2, [r3, #12]
 8009912:	68bb      	ldr	r3, [r7, #8]
 8009914:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8009916:	68bb      	ldr	r3, [r7, #8]
 8009918:	68da      	ldr	r2, [r3, #12]
 800991a:	68bb      	ldr	r3, [r7, #8]
 800991c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800991e:	693b      	ldr	r3, [r7, #16]
 8009920:	015a      	lsls	r2, r3, #5
 8009922:	697b      	ldr	r3, [r7, #20]
 8009924:	4413      	add	r3, r2
 8009926:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800992a:	691b      	ldr	r3, [r3, #16]
 800992c:	693a      	ldr	r2, [r7, #16]
 800992e:	0151      	lsls	r1, r2, #5
 8009930:	697a      	ldr	r2, [r7, #20]
 8009932:	440a      	add	r2, r1
 8009934:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009938:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800993c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800993e:	693b      	ldr	r3, [r7, #16]
 8009940:	015a      	lsls	r2, r3, #5
 8009942:	697b      	ldr	r3, [r7, #20]
 8009944:	4413      	add	r3, r2
 8009946:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800994a:	691a      	ldr	r2, [r3, #16]
 800994c:	68bb      	ldr	r3, [r7, #8]
 800994e:	69db      	ldr	r3, [r3, #28]
 8009950:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009954:	6939      	ldr	r1, [r7, #16]
 8009956:	0148      	lsls	r0, r1, #5
 8009958:	6979      	ldr	r1, [r7, #20]
 800995a:	4401      	add	r1, r0
 800995c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009960:	4313      	orrs	r3, r2
 8009962:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009964:	79fb      	ldrb	r3, [r7, #7]
 8009966:	2b01      	cmp	r3, #1
 8009968:	d10d      	bne.n	8009986 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800996a:	68bb      	ldr	r3, [r7, #8]
 800996c:	691b      	ldr	r3, [r3, #16]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d009      	beq.n	8009986 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009972:	68bb      	ldr	r3, [r7, #8]
 8009974:	6919      	ldr	r1, [r3, #16]
 8009976:	693b      	ldr	r3, [r7, #16]
 8009978:	015a      	lsls	r2, r3, #5
 800997a:	697b      	ldr	r3, [r7, #20]
 800997c:	4413      	add	r3, r2
 800997e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009982:	460a      	mov	r2, r1
 8009984:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009986:	693b      	ldr	r3, [r7, #16]
 8009988:	015a      	lsls	r2, r3, #5
 800998a:	697b      	ldr	r3, [r7, #20]
 800998c:	4413      	add	r3, r2
 800998e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	693a      	ldr	r2, [r7, #16]
 8009996:	0151      	lsls	r1, r2, #5
 8009998:	697a      	ldr	r2, [r7, #20]
 800999a:	440a      	add	r2, r1
 800999c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80099a0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80099a4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80099a6:	2300      	movs	r3, #0
}
 80099a8:	4618      	mov	r0, r3
 80099aa:	371c      	adds	r7, #28
 80099ac:	46bd      	mov	sp, r7
 80099ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b2:	4770      	bx	lr

080099b4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80099b4:	b480      	push	{r7}
 80099b6:	b087      	sub	sp, #28
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
 80099bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80099be:	2300      	movs	r3, #0
 80099c0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80099c2:	2300      	movs	r3, #0
 80099c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	785b      	ldrb	r3, [r3, #1]
 80099ce:	2b01      	cmp	r3, #1
 80099d0:	d14a      	bne.n	8009a68 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	781b      	ldrb	r3, [r3, #0]
 80099d6:	015a      	lsls	r2, r3, #5
 80099d8:	693b      	ldr	r3, [r7, #16]
 80099da:	4413      	add	r3, r2
 80099dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80099e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80099ea:	f040 8086 	bne.w	8009afa <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	781b      	ldrb	r3, [r3, #0]
 80099f2:	015a      	lsls	r2, r3, #5
 80099f4:	693b      	ldr	r3, [r7, #16]
 80099f6:	4413      	add	r3, r2
 80099f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	683a      	ldr	r2, [r7, #0]
 8009a00:	7812      	ldrb	r2, [r2, #0]
 8009a02:	0151      	lsls	r1, r2, #5
 8009a04:	693a      	ldr	r2, [r7, #16]
 8009a06:	440a      	add	r2, r1
 8009a08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a0c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009a10:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	781b      	ldrb	r3, [r3, #0]
 8009a16:	015a      	lsls	r2, r3, #5
 8009a18:	693b      	ldr	r3, [r7, #16]
 8009a1a:	4413      	add	r3, r2
 8009a1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	683a      	ldr	r2, [r7, #0]
 8009a24:	7812      	ldrb	r2, [r2, #0]
 8009a26:	0151      	lsls	r1, r2, #5
 8009a28:	693a      	ldr	r2, [r7, #16]
 8009a2a:	440a      	add	r2, r1
 8009a2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a30:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009a34:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	3301      	adds	r3, #1
 8009a3a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	f242 7210 	movw	r2, #10000	; 0x2710
 8009a42:	4293      	cmp	r3, r2
 8009a44:	d902      	bls.n	8009a4c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009a46:	2301      	movs	r3, #1
 8009a48:	75fb      	strb	r3, [r7, #23]
          break;
 8009a4a:	e056      	b.n	8009afa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	781b      	ldrb	r3, [r3, #0]
 8009a50:	015a      	lsls	r2, r3, #5
 8009a52:	693b      	ldr	r3, [r7, #16]
 8009a54:	4413      	add	r3, r2
 8009a56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009a60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009a64:	d0e7      	beq.n	8009a36 <USB_EPStopXfer+0x82>
 8009a66:	e048      	b.n	8009afa <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	781b      	ldrb	r3, [r3, #0]
 8009a6c:	015a      	lsls	r2, r3, #5
 8009a6e:	693b      	ldr	r3, [r7, #16]
 8009a70:	4413      	add	r3, r2
 8009a72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009a7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009a80:	d13b      	bne.n	8009afa <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	781b      	ldrb	r3, [r3, #0]
 8009a86:	015a      	lsls	r2, r3, #5
 8009a88:	693b      	ldr	r3, [r7, #16]
 8009a8a:	4413      	add	r3, r2
 8009a8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	683a      	ldr	r2, [r7, #0]
 8009a94:	7812      	ldrb	r2, [r2, #0]
 8009a96:	0151      	lsls	r1, r2, #5
 8009a98:	693a      	ldr	r2, [r7, #16]
 8009a9a:	440a      	add	r2, r1
 8009a9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009aa0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009aa4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	781b      	ldrb	r3, [r3, #0]
 8009aaa:	015a      	lsls	r2, r3, #5
 8009aac:	693b      	ldr	r3, [r7, #16]
 8009aae:	4413      	add	r3, r2
 8009ab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	683a      	ldr	r2, [r7, #0]
 8009ab8:	7812      	ldrb	r2, [r2, #0]
 8009aba:	0151      	lsls	r1, r2, #5
 8009abc:	693a      	ldr	r2, [r7, #16]
 8009abe:	440a      	add	r2, r1
 8009ac0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ac4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009ac8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	3301      	adds	r3, #1
 8009ace:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	f242 7210 	movw	r2, #10000	; 0x2710
 8009ad6:	4293      	cmp	r3, r2
 8009ad8:	d902      	bls.n	8009ae0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009ada:	2301      	movs	r3, #1
 8009adc:	75fb      	strb	r3, [r7, #23]
          break;
 8009ade:	e00c      	b.n	8009afa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	781b      	ldrb	r3, [r3, #0]
 8009ae4:	015a      	lsls	r2, r3, #5
 8009ae6:	693b      	ldr	r3, [r7, #16]
 8009ae8:	4413      	add	r3, r2
 8009aea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009af4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009af8:	d0e7      	beq.n	8009aca <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009afa:	7dfb      	ldrb	r3, [r7, #23]
}
 8009afc:	4618      	mov	r0, r3
 8009afe:	371c      	adds	r7, #28
 8009b00:	46bd      	mov	sp, r7
 8009b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b06:	4770      	bx	lr

08009b08 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009b08:	b480      	push	{r7}
 8009b0a:	b089      	sub	sp, #36	; 0x24
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	60f8      	str	r0, [r7, #12]
 8009b10:	60b9      	str	r1, [r7, #8]
 8009b12:	4611      	mov	r1, r2
 8009b14:	461a      	mov	r2, r3
 8009b16:	460b      	mov	r3, r1
 8009b18:	71fb      	strb	r3, [r7, #7]
 8009b1a:	4613      	mov	r3, r2
 8009b1c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009b22:	68bb      	ldr	r3, [r7, #8]
 8009b24:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009b26:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d123      	bne.n	8009b76 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009b2e:	88bb      	ldrh	r3, [r7, #4]
 8009b30:	3303      	adds	r3, #3
 8009b32:	089b      	lsrs	r3, r3, #2
 8009b34:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009b36:	2300      	movs	r3, #0
 8009b38:	61bb      	str	r3, [r7, #24]
 8009b3a:	e018      	b.n	8009b6e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009b3c:	79fb      	ldrb	r3, [r7, #7]
 8009b3e:	031a      	lsls	r2, r3, #12
 8009b40:	697b      	ldr	r3, [r7, #20]
 8009b42:	4413      	add	r3, r2
 8009b44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b48:	461a      	mov	r2, r3
 8009b4a:	69fb      	ldr	r3, [r7, #28]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009b50:	69fb      	ldr	r3, [r7, #28]
 8009b52:	3301      	adds	r3, #1
 8009b54:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009b56:	69fb      	ldr	r3, [r7, #28]
 8009b58:	3301      	adds	r3, #1
 8009b5a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009b5c:	69fb      	ldr	r3, [r7, #28]
 8009b5e:	3301      	adds	r3, #1
 8009b60:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009b62:	69fb      	ldr	r3, [r7, #28]
 8009b64:	3301      	adds	r3, #1
 8009b66:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009b68:	69bb      	ldr	r3, [r7, #24]
 8009b6a:	3301      	adds	r3, #1
 8009b6c:	61bb      	str	r3, [r7, #24]
 8009b6e:	69ba      	ldr	r2, [r7, #24]
 8009b70:	693b      	ldr	r3, [r7, #16]
 8009b72:	429a      	cmp	r2, r3
 8009b74:	d3e2      	bcc.n	8009b3c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009b76:	2300      	movs	r3, #0
}
 8009b78:	4618      	mov	r0, r3
 8009b7a:	3724      	adds	r7, #36	; 0x24
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b82:	4770      	bx	lr

08009b84 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009b84:	b480      	push	{r7}
 8009b86:	b08b      	sub	sp, #44	; 0x2c
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	60f8      	str	r0, [r7, #12]
 8009b8c:	60b9      	str	r1, [r7, #8]
 8009b8e:	4613      	mov	r3, r2
 8009b90:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009b96:	68bb      	ldr	r3, [r7, #8]
 8009b98:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009b9a:	88fb      	ldrh	r3, [r7, #6]
 8009b9c:	089b      	lsrs	r3, r3, #2
 8009b9e:	b29b      	uxth	r3, r3
 8009ba0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009ba2:	88fb      	ldrh	r3, [r7, #6]
 8009ba4:	f003 0303 	and.w	r3, r3, #3
 8009ba8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009baa:	2300      	movs	r3, #0
 8009bac:	623b      	str	r3, [r7, #32]
 8009bae:	e014      	b.n	8009bda <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009bb0:	69bb      	ldr	r3, [r7, #24]
 8009bb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bb6:	681a      	ldr	r2, [r3, #0]
 8009bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bba:	601a      	str	r2, [r3, #0]
    pDest++;
 8009bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bbe:	3301      	adds	r3, #1
 8009bc0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bc4:	3301      	adds	r3, #1
 8009bc6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bca:	3301      	adds	r3, #1
 8009bcc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bd0:	3301      	adds	r3, #1
 8009bd2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009bd4:	6a3b      	ldr	r3, [r7, #32]
 8009bd6:	3301      	adds	r3, #1
 8009bd8:	623b      	str	r3, [r7, #32]
 8009bda:	6a3a      	ldr	r2, [r7, #32]
 8009bdc:	697b      	ldr	r3, [r7, #20]
 8009bde:	429a      	cmp	r2, r3
 8009be0:	d3e6      	bcc.n	8009bb0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009be2:	8bfb      	ldrh	r3, [r7, #30]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d01e      	beq.n	8009c26 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009be8:	2300      	movs	r3, #0
 8009bea:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009bec:	69bb      	ldr	r3, [r7, #24]
 8009bee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bf2:	461a      	mov	r2, r3
 8009bf4:	f107 0310 	add.w	r3, r7, #16
 8009bf8:	6812      	ldr	r2, [r2, #0]
 8009bfa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009bfc:	693a      	ldr	r2, [r7, #16]
 8009bfe:	6a3b      	ldr	r3, [r7, #32]
 8009c00:	b2db      	uxtb	r3, r3
 8009c02:	00db      	lsls	r3, r3, #3
 8009c04:	fa22 f303 	lsr.w	r3, r2, r3
 8009c08:	b2da      	uxtb	r2, r3
 8009c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c0c:	701a      	strb	r2, [r3, #0]
      i++;
 8009c0e:	6a3b      	ldr	r3, [r7, #32]
 8009c10:	3301      	adds	r3, #1
 8009c12:	623b      	str	r3, [r7, #32]
      pDest++;
 8009c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c16:	3301      	adds	r3, #1
 8009c18:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009c1a:	8bfb      	ldrh	r3, [r7, #30]
 8009c1c:	3b01      	subs	r3, #1
 8009c1e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009c20:	8bfb      	ldrh	r3, [r7, #30]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d1ea      	bne.n	8009bfc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009c28:	4618      	mov	r0, r3
 8009c2a:	372c      	adds	r7, #44	; 0x2c
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c32:	4770      	bx	lr

08009c34 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009c34:	b480      	push	{r7}
 8009c36:	b085      	sub	sp, #20
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
 8009c3c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	781b      	ldrb	r3, [r3, #0]
 8009c46:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	785b      	ldrb	r3, [r3, #1]
 8009c4c:	2b01      	cmp	r3, #1
 8009c4e:	d12c      	bne.n	8009caa <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009c50:	68bb      	ldr	r3, [r7, #8]
 8009c52:	015a      	lsls	r2, r3, #5
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	4413      	add	r3, r2
 8009c58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	db12      	blt.n	8009c88 <USB_EPSetStall+0x54>
 8009c62:	68bb      	ldr	r3, [r7, #8]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d00f      	beq.n	8009c88 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	015a      	lsls	r2, r3, #5
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	4413      	add	r3, r2
 8009c70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	68ba      	ldr	r2, [r7, #8]
 8009c78:	0151      	lsls	r1, r2, #5
 8009c7a:	68fa      	ldr	r2, [r7, #12]
 8009c7c:	440a      	add	r2, r1
 8009c7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c82:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009c86:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	015a      	lsls	r2, r3, #5
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	4413      	add	r3, r2
 8009c90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	68ba      	ldr	r2, [r7, #8]
 8009c98:	0151      	lsls	r1, r2, #5
 8009c9a:	68fa      	ldr	r2, [r7, #12]
 8009c9c:	440a      	add	r2, r1
 8009c9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ca2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009ca6:	6013      	str	r3, [r2, #0]
 8009ca8:	e02b      	b.n	8009d02 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	015a      	lsls	r2, r3, #5
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	4413      	add	r3, r2
 8009cb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	db12      	blt.n	8009ce2 <USB_EPSetStall+0xae>
 8009cbc:	68bb      	ldr	r3, [r7, #8]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d00f      	beq.n	8009ce2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009cc2:	68bb      	ldr	r3, [r7, #8]
 8009cc4:	015a      	lsls	r2, r3, #5
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	4413      	add	r3, r2
 8009cca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	68ba      	ldr	r2, [r7, #8]
 8009cd2:	0151      	lsls	r1, r2, #5
 8009cd4:	68fa      	ldr	r2, [r7, #12]
 8009cd6:	440a      	add	r2, r1
 8009cd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009cdc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009ce0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009ce2:	68bb      	ldr	r3, [r7, #8]
 8009ce4:	015a      	lsls	r2, r3, #5
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	4413      	add	r3, r2
 8009cea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	68ba      	ldr	r2, [r7, #8]
 8009cf2:	0151      	lsls	r1, r2, #5
 8009cf4:	68fa      	ldr	r2, [r7, #12]
 8009cf6:	440a      	add	r2, r1
 8009cf8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009cfc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009d00:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009d02:	2300      	movs	r3, #0
}
 8009d04:	4618      	mov	r0, r3
 8009d06:	3714      	adds	r7, #20
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0e:	4770      	bx	lr

08009d10 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009d10:	b480      	push	{r7}
 8009d12:	b085      	sub	sp, #20
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
 8009d18:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	781b      	ldrb	r3, [r3, #0]
 8009d22:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	785b      	ldrb	r3, [r3, #1]
 8009d28:	2b01      	cmp	r3, #1
 8009d2a:	d128      	bne.n	8009d7e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009d2c:	68bb      	ldr	r3, [r7, #8]
 8009d2e:	015a      	lsls	r2, r3, #5
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	4413      	add	r3, r2
 8009d34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	68ba      	ldr	r2, [r7, #8]
 8009d3c:	0151      	lsls	r1, r2, #5
 8009d3e:	68fa      	ldr	r2, [r7, #12]
 8009d40:	440a      	add	r2, r1
 8009d42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d46:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009d4a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	791b      	ldrb	r3, [r3, #4]
 8009d50:	2b03      	cmp	r3, #3
 8009d52:	d003      	beq.n	8009d5c <USB_EPClearStall+0x4c>
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	791b      	ldrb	r3, [r3, #4]
 8009d58:	2b02      	cmp	r3, #2
 8009d5a:	d138      	bne.n	8009dce <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009d5c:	68bb      	ldr	r3, [r7, #8]
 8009d5e:	015a      	lsls	r2, r3, #5
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	4413      	add	r3, r2
 8009d64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	68ba      	ldr	r2, [r7, #8]
 8009d6c:	0151      	lsls	r1, r2, #5
 8009d6e:	68fa      	ldr	r2, [r7, #12]
 8009d70:	440a      	add	r2, r1
 8009d72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d7a:	6013      	str	r3, [r2, #0]
 8009d7c:	e027      	b.n	8009dce <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009d7e:	68bb      	ldr	r3, [r7, #8]
 8009d80:	015a      	lsls	r2, r3, #5
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	4413      	add	r3, r2
 8009d86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	68ba      	ldr	r2, [r7, #8]
 8009d8e:	0151      	lsls	r1, r2, #5
 8009d90:	68fa      	ldr	r2, [r7, #12]
 8009d92:	440a      	add	r2, r1
 8009d94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d98:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009d9c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	791b      	ldrb	r3, [r3, #4]
 8009da2:	2b03      	cmp	r3, #3
 8009da4:	d003      	beq.n	8009dae <USB_EPClearStall+0x9e>
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	791b      	ldrb	r3, [r3, #4]
 8009daa:	2b02      	cmp	r3, #2
 8009dac:	d10f      	bne.n	8009dce <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009dae:	68bb      	ldr	r3, [r7, #8]
 8009db0:	015a      	lsls	r2, r3, #5
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	4413      	add	r3, r2
 8009db6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	68ba      	ldr	r2, [r7, #8]
 8009dbe:	0151      	lsls	r1, r2, #5
 8009dc0:	68fa      	ldr	r2, [r7, #12]
 8009dc2:	440a      	add	r2, r1
 8009dc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009dc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009dcc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009dce:	2300      	movs	r3, #0
}
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	3714      	adds	r7, #20
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dda:	4770      	bx	lr

08009ddc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009ddc:	b480      	push	{r7}
 8009dde:	b085      	sub	sp, #20
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
 8009de4:	460b      	mov	r3, r1
 8009de6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	68fa      	ldr	r2, [r7, #12]
 8009df6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009dfa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009dfe:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e06:	681a      	ldr	r2, [r3, #0]
 8009e08:	78fb      	ldrb	r3, [r7, #3]
 8009e0a:	011b      	lsls	r3, r3, #4
 8009e0c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009e10:	68f9      	ldr	r1, [r7, #12]
 8009e12:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009e16:	4313      	orrs	r3, r2
 8009e18:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009e1a:	2300      	movs	r3, #0
}
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	3714      	adds	r7, #20
 8009e20:	46bd      	mov	sp, r7
 8009e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e26:	4770      	bx	lr

08009e28 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009e28:	b480      	push	{r7}
 8009e2a:	b085      	sub	sp, #20
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	68fa      	ldr	r2, [r7, #12]
 8009e3e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009e42:	f023 0303 	bic.w	r3, r3, #3
 8009e46:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e4e:	685b      	ldr	r3, [r3, #4]
 8009e50:	68fa      	ldr	r2, [r7, #12]
 8009e52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009e56:	f023 0302 	bic.w	r3, r3, #2
 8009e5a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009e5c:	2300      	movs	r3, #0
}
 8009e5e:	4618      	mov	r0, r3
 8009e60:	3714      	adds	r7, #20
 8009e62:	46bd      	mov	sp, r7
 8009e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e68:	4770      	bx	lr

08009e6a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009e6a:	b480      	push	{r7}
 8009e6c:	b085      	sub	sp, #20
 8009e6e:	af00      	add	r7, sp, #0
 8009e70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	68fa      	ldr	r2, [r7, #12]
 8009e80:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009e84:	f023 0303 	bic.w	r3, r3, #3
 8009e88:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e90:	685b      	ldr	r3, [r3, #4]
 8009e92:	68fa      	ldr	r2, [r7, #12]
 8009e94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009e98:	f043 0302 	orr.w	r3, r3, #2
 8009e9c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009e9e:	2300      	movs	r3, #0
}
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	3714      	adds	r7, #20
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eaa:	4770      	bx	lr

08009eac <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009eac:	b480      	push	{r7}
 8009eae:	b085      	sub	sp, #20
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	695b      	ldr	r3, [r3, #20]
 8009eb8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	699b      	ldr	r3, [r3, #24]
 8009ebe:	68fa      	ldr	r2, [r7, #12]
 8009ec0:	4013      	ands	r3, r2
 8009ec2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
}
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	3714      	adds	r7, #20
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed0:	4770      	bx	lr

08009ed2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009ed2:	b480      	push	{r7}
 8009ed4:	b085      	sub	sp, #20
 8009ed6:	af00      	add	r7, sp, #0
 8009ed8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ee4:	699b      	ldr	r3, [r3, #24]
 8009ee6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009eee:	69db      	ldr	r3, [r3, #28]
 8009ef0:	68ba      	ldr	r2, [r7, #8]
 8009ef2:	4013      	ands	r3, r2
 8009ef4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009ef6:	68bb      	ldr	r3, [r7, #8]
 8009ef8:	0c1b      	lsrs	r3, r3, #16
}
 8009efa:	4618      	mov	r0, r3
 8009efc:	3714      	adds	r7, #20
 8009efe:	46bd      	mov	sp, r7
 8009f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f04:	4770      	bx	lr

08009f06 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009f06:	b480      	push	{r7}
 8009f08:	b085      	sub	sp, #20
 8009f0a:	af00      	add	r7, sp, #0
 8009f0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f18:	699b      	ldr	r3, [r3, #24]
 8009f1a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f22:	69db      	ldr	r3, [r3, #28]
 8009f24:	68ba      	ldr	r2, [r7, #8]
 8009f26:	4013      	ands	r3, r2
 8009f28:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009f2a:	68bb      	ldr	r3, [r7, #8]
 8009f2c:	b29b      	uxth	r3, r3
}
 8009f2e:	4618      	mov	r0, r3
 8009f30:	3714      	adds	r7, #20
 8009f32:	46bd      	mov	sp, r7
 8009f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f38:	4770      	bx	lr

08009f3a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009f3a:	b480      	push	{r7}
 8009f3c:	b085      	sub	sp, #20
 8009f3e:	af00      	add	r7, sp, #0
 8009f40:	6078      	str	r0, [r7, #4]
 8009f42:	460b      	mov	r3, r1
 8009f44:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009f4a:	78fb      	ldrb	r3, [r7, #3]
 8009f4c:	015a      	lsls	r2, r3, #5
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	4413      	add	r3, r2
 8009f52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f56:	689b      	ldr	r3, [r3, #8]
 8009f58:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f60:	695b      	ldr	r3, [r3, #20]
 8009f62:	68ba      	ldr	r2, [r7, #8]
 8009f64:	4013      	ands	r3, r2
 8009f66:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009f68:	68bb      	ldr	r3, [r7, #8]
}
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	3714      	adds	r7, #20
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f74:	4770      	bx	lr

08009f76 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009f76:	b480      	push	{r7}
 8009f78:	b087      	sub	sp, #28
 8009f7a:	af00      	add	r7, sp, #0
 8009f7c:	6078      	str	r0, [r7, #4]
 8009f7e:	460b      	mov	r3, r1
 8009f80:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009f86:	697b      	ldr	r3, [r7, #20]
 8009f88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f8c:	691b      	ldr	r3, [r3, #16]
 8009f8e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009f90:	697b      	ldr	r3, [r7, #20]
 8009f92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f98:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009f9a:	78fb      	ldrb	r3, [r7, #3]
 8009f9c:	f003 030f 	and.w	r3, r3, #15
 8009fa0:	68fa      	ldr	r2, [r7, #12]
 8009fa2:	fa22 f303 	lsr.w	r3, r2, r3
 8009fa6:	01db      	lsls	r3, r3, #7
 8009fa8:	b2db      	uxtb	r3, r3
 8009faa:	693a      	ldr	r2, [r7, #16]
 8009fac:	4313      	orrs	r3, r2
 8009fae:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009fb0:	78fb      	ldrb	r3, [r7, #3]
 8009fb2:	015a      	lsls	r2, r3, #5
 8009fb4:	697b      	ldr	r3, [r7, #20]
 8009fb6:	4413      	add	r3, r2
 8009fb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fbc:	689b      	ldr	r3, [r3, #8]
 8009fbe:	693a      	ldr	r2, [r7, #16]
 8009fc0:	4013      	ands	r3, r2
 8009fc2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009fc4:	68bb      	ldr	r3, [r7, #8]
}
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	371c      	adds	r7, #28
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd0:	4770      	bx	lr

08009fd2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009fd2:	b480      	push	{r7}
 8009fd4:	b083      	sub	sp, #12
 8009fd6:	af00      	add	r7, sp, #0
 8009fd8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	695b      	ldr	r3, [r3, #20]
 8009fde:	f003 0301 	and.w	r3, r3, #1
}
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	370c      	adds	r7, #12
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fec:	4770      	bx	lr

08009fee <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009fee:	b480      	push	{r7}
 8009ff0:	b085      	sub	sp, #20
 8009ff2:	af00      	add	r7, sp, #0
 8009ff4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	68fa      	ldr	r2, [r7, #12]
 800a004:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a008:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a00c:	f023 0307 	bic.w	r3, r3, #7
 800a010:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a018:	685b      	ldr	r3, [r3, #4]
 800a01a:	68fa      	ldr	r2, [r7, #12]
 800a01c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a020:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a024:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a026:	2300      	movs	r3, #0
}
 800a028:	4618      	mov	r0, r3
 800a02a:	3714      	adds	r7, #20
 800a02c:	46bd      	mov	sp, r7
 800a02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a032:	4770      	bx	lr

0800a034 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800a034:	b480      	push	{r7}
 800a036:	b087      	sub	sp, #28
 800a038:	af00      	add	r7, sp, #0
 800a03a:	60f8      	str	r0, [r7, #12]
 800a03c:	460b      	mov	r3, r1
 800a03e:	607a      	str	r2, [r7, #4]
 800a040:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	333c      	adds	r3, #60	; 0x3c
 800a04a:	3304      	adds	r3, #4
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a050:	693b      	ldr	r3, [r7, #16]
 800a052:	4a26      	ldr	r2, [pc, #152]	; (800a0ec <USB_EP0_OutStart+0xb8>)
 800a054:	4293      	cmp	r3, r2
 800a056:	d90a      	bls.n	800a06e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a058:	697b      	ldr	r3, [r7, #20]
 800a05a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a064:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a068:	d101      	bne.n	800a06e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a06a:	2300      	movs	r3, #0
 800a06c:	e037      	b.n	800a0de <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a06e:	697b      	ldr	r3, [r7, #20]
 800a070:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a074:	461a      	mov	r2, r3
 800a076:	2300      	movs	r3, #0
 800a078:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a07a:	697b      	ldr	r3, [r7, #20]
 800a07c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a080:	691b      	ldr	r3, [r3, #16]
 800a082:	697a      	ldr	r2, [r7, #20]
 800a084:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a088:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a08c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a08e:	697b      	ldr	r3, [r7, #20]
 800a090:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a094:	691b      	ldr	r3, [r3, #16]
 800a096:	697a      	ldr	r2, [r7, #20]
 800a098:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a09c:	f043 0318 	orr.w	r3, r3, #24
 800a0a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a0a2:	697b      	ldr	r3, [r7, #20]
 800a0a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0a8:	691b      	ldr	r3, [r3, #16]
 800a0aa:	697a      	ldr	r2, [r7, #20]
 800a0ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a0b0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a0b4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a0b6:	7afb      	ldrb	r3, [r7, #11]
 800a0b8:	2b01      	cmp	r3, #1
 800a0ba:	d10f      	bne.n	800a0dc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a0bc:	697b      	ldr	r3, [r7, #20]
 800a0be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0c2:	461a      	mov	r2, r3
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a0c8:	697b      	ldr	r3, [r7, #20]
 800a0ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	697a      	ldr	r2, [r7, #20]
 800a0d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a0d6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a0da:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a0dc:	2300      	movs	r3, #0
}
 800a0de:	4618      	mov	r0, r3
 800a0e0:	371c      	adds	r7, #28
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e8:	4770      	bx	lr
 800a0ea:	bf00      	nop
 800a0ec:	4f54300a 	.word	0x4f54300a

0800a0f0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a0f0:	b480      	push	{r7}
 800a0f2:	b085      	sub	sp, #20
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	3301      	adds	r3, #1
 800a100:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	4a13      	ldr	r2, [pc, #76]	; (800a154 <USB_CoreReset+0x64>)
 800a106:	4293      	cmp	r3, r2
 800a108:	d901      	bls.n	800a10e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a10a:	2303      	movs	r3, #3
 800a10c:	e01b      	b.n	800a146 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	691b      	ldr	r3, [r3, #16]
 800a112:	2b00      	cmp	r3, #0
 800a114:	daf2      	bge.n	800a0fc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a116:	2300      	movs	r3, #0
 800a118:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	691b      	ldr	r3, [r3, #16]
 800a11e:	f043 0201 	orr.w	r2, r3, #1
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	3301      	adds	r3, #1
 800a12a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	4a09      	ldr	r2, [pc, #36]	; (800a154 <USB_CoreReset+0x64>)
 800a130:	4293      	cmp	r3, r2
 800a132:	d901      	bls.n	800a138 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a134:	2303      	movs	r3, #3
 800a136:	e006      	b.n	800a146 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	691b      	ldr	r3, [r3, #16]
 800a13c:	f003 0301 	and.w	r3, r3, #1
 800a140:	2b01      	cmp	r3, #1
 800a142:	d0f0      	beq.n	800a126 <USB_CoreReset+0x36>

  return HAL_OK;
 800a144:	2300      	movs	r3, #0
}
 800a146:	4618      	mov	r0, r3
 800a148:	3714      	adds	r7, #20
 800a14a:	46bd      	mov	sp, r7
 800a14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a150:	4770      	bx	lr
 800a152:	bf00      	nop
 800a154:	00030d40 	.word	0x00030d40

0800a158 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b084      	sub	sp, #16
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
 800a160:	460b      	mov	r3, r1
 800a162:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 800a164:	2010      	movs	r0, #16
 800a166:	f002 f937 	bl	800c3d8 <USBD_static_malloc>
 800a16a:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d109      	bne.n	800a186 <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	32b0      	adds	r2, #176	; 0xb0
 800a17c:	2100      	movs	r1, #0
 800a17e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a182:	2302      	movs	r3, #2
 800a184:	e048      	b.n	800a218 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	32b0      	adds	r2, #176	; 0xb0
 800a190:	68f9      	ldr	r1, [r7, #12]
 800a192:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	32b0      	adds	r2, #176	; 0xb0
 800a1a0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	7c1b      	ldrb	r3, [r3, #16]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d10d      	bne.n	800a1ce <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 800a1b2:	4b1b      	ldr	r3, [pc, #108]	; (800a220 <USBD_HID_Init+0xc8>)
 800a1b4:	781b      	ldrb	r3, [r3, #0]
 800a1b6:	f003 020f 	and.w	r2, r3, #15
 800a1ba:	6879      	ldr	r1, [r7, #4]
 800a1bc:	4613      	mov	r3, r2
 800a1be:	009b      	lsls	r3, r3, #2
 800a1c0:	4413      	add	r3, r2
 800a1c2:	009b      	lsls	r3, r3, #2
 800a1c4:	440b      	add	r3, r1
 800a1c6:	3326      	adds	r3, #38	; 0x26
 800a1c8:	2207      	movs	r2, #7
 800a1ca:	801a      	strh	r2, [r3, #0]
 800a1cc:	e00c      	b.n	800a1e8 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 800a1ce:	4b14      	ldr	r3, [pc, #80]	; (800a220 <USBD_HID_Init+0xc8>)
 800a1d0:	781b      	ldrb	r3, [r3, #0]
 800a1d2:	f003 020f 	and.w	r2, r3, #15
 800a1d6:	6879      	ldr	r1, [r7, #4]
 800a1d8:	4613      	mov	r3, r2
 800a1da:	009b      	lsls	r3, r3, #2
 800a1dc:	4413      	add	r3, r2
 800a1de:	009b      	lsls	r3, r3, #2
 800a1e0:	440b      	add	r3, r1
 800a1e2:	3326      	adds	r3, #38	; 0x26
 800a1e4:	220a      	movs	r2, #10
 800a1e6:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 800a1e8:	4b0d      	ldr	r3, [pc, #52]	; (800a220 <USBD_HID_Init+0xc8>)
 800a1ea:	7819      	ldrb	r1, [r3, #0]
 800a1ec:	2304      	movs	r3, #4
 800a1ee:	2203      	movs	r2, #3
 800a1f0:	6878      	ldr	r0, [r7, #4]
 800a1f2:	f001 ffe0 	bl	800c1b6 <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 800a1f6:	4b0a      	ldr	r3, [pc, #40]	; (800a220 <USBD_HID_Init+0xc8>)
 800a1f8:	781b      	ldrb	r3, [r3, #0]
 800a1fa:	f003 020f 	and.w	r2, r3, #15
 800a1fe:	6879      	ldr	r1, [r7, #4]
 800a200:	4613      	mov	r3, r2
 800a202:	009b      	lsls	r3, r3, #2
 800a204:	4413      	add	r3, r2
 800a206:	009b      	lsls	r3, r3, #2
 800a208:	440b      	add	r3, r1
 800a20a:	3324      	adds	r3, #36	; 0x24
 800a20c:	2201      	movs	r2, #1
 800a20e:	801a      	strh	r2, [r3, #0]

  hhid->state = HID_IDLE;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	2200      	movs	r2, #0
 800a214:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800a216:	2300      	movs	r3, #0
}
 800a218:	4618      	mov	r0, r3
 800a21a:	3710      	adds	r7, #16
 800a21c:	46bd      	mov	sp, r7
 800a21e:	bd80      	pop	{r7, pc}
 800a220:	200000f3 	.word	0x200000f3

0800a224 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b082      	sub	sp, #8
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
 800a22c:	460b      	mov	r3, r1
 800a22e:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 800a230:	4b1f      	ldr	r3, [pc, #124]	; (800a2b0 <USBD_HID_DeInit+0x8c>)
 800a232:	781b      	ldrb	r3, [r3, #0]
 800a234:	4619      	mov	r1, r3
 800a236:	6878      	ldr	r0, [r7, #4]
 800a238:	f001 ffe3 	bl	800c202 <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 800a23c:	4b1c      	ldr	r3, [pc, #112]	; (800a2b0 <USBD_HID_DeInit+0x8c>)
 800a23e:	781b      	ldrb	r3, [r3, #0]
 800a240:	f003 020f 	and.w	r2, r3, #15
 800a244:	6879      	ldr	r1, [r7, #4]
 800a246:	4613      	mov	r3, r2
 800a248:	009b      	lsls	r3, r3, #2
 800a24a:	4413      	add	r3, r2
 800a24c:	009b      	lsls	r3, r3, #2
 800a24e:	440b      	add	r3, r1
 800a250:	3324      	adds	r3, #36	; 0x24
 800a252:	2200      	movs	r2, #0
 800a254:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 800a256:	4b16      	ldr	r3, [pc, #88]	; (800a2b0 <USBD_HID_DeInit+0x8c>)
 800a258:	781b      	ldrb	r3, [r3, #0]
 800a25a:	f003 020f 	and.w	r2, r3, #15
 800a25e:	6879      	ldr	r1, [r7, #4]
 800a260:	4613      	mov	r3, r2
 800a262:	009b      	lsls	r3, r3, #2
 800a264:	4413      	add	r3, r2
 800a266:	009b      	lsls	r3, r3, #2
 800a268:	440b      	add	r3, r1
 800a26a:	3326      	adds	r3, #38	; 0x26
 800a26c:	2200      	movs	r2, #0
 800a26e:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	32b0      	adds	r2, #176	; 0xb0
 800a27a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d011      	beq.n	800a2a6 <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	32b0      	adds	r2, #176	; 0xb0
 800a28c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a290:	4618      	mov	r0, r3
 800a292:	f002 f8af 	bl	800c3f4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	32b0      	adds	r2, #176	; 0xb0
 800a2a0:	2100      	movs	r1, #0
 800a2a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 800a2a6:	2300      	movs	r3, #0
}
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	3708      	adds	r7, #8
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	bd80      	pop	{r7, pc}
 800a2b0:	200000f3 	.word	0x200000f3

0800a2b4 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b086      	sub	sp, #24
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
 800a2bc:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	32b0      	adds	r2, #176	; 0xb0
 800a2c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2cc:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d101      	bne.n	800a2e0 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800a2dc:	2303      	movs	r3, #3
 800a2de:	e0e8      	b.n	800a4b2 <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	781b      	ldrb	r3, [r3, #0]
 800a2e4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d046      	beq.n	800a37a <USBD_HID_Setup+0xc6>
 800a2ec:	2b20      	cmp	r3, #32
 800a2ee:	f040 80d8 	bne.w	800a4a2 <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	785b      	ldrb	r3, [r3, #1]
 800a2f6:	3b02      	subs	r3, #2
 800a2f8:	2b09      	cmp	r3, #9
 800a2fa:	d836      	bhi.n	800a36a <USBD_HID_Setup+0xb6>
 800a2fc:	a201      	add	r2, pc, #4	; (adr r2, 800a304 <USBD_HID_Setup+0x50>)
 800a2fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a302:	bf00      	nop
 800a304:	0800a35b 	.word	0x0800a35b
 800a308:	0800a33b 	.word	0x0800a33b
 800a30c:	0800a36b 	.word	0x0800a36b
 800a310:	0800a36b 	.word	0x0800a36b
 800a314:	0800a36b 	.word	0x0800a36b
 800a318:	0800a36b 	.word	0x0800a36b
 800a31c:	0800a36b 	.word	0x0800a36b
 800a320:	0800a36b 	.word	0x0800a36b
 800a324:	0800a349 	.word	0x0800a349
 800a328:	0800a32d 	.word	0x0800a32d
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800a32c:	683b      	ldr	r3, [r7, #0]
 800a32e:	885b      	ldrh	r3, [r3, #2]
 800a330:	b2db      	uxtb	r3, r3
 800a332:	461a      	mov	r2, r3
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	601a      	str	r2, [r3, #0]
          break;
 800a338:	e01e      	b.n	800a378 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	2201      	movs	r2, #1
 800a33e:	4619      	mov	r1, r3
 800a340:	6878      	ldr	r0, [r7, #4]
 800a342:	f001 fbf1 	bl	800bb28 <USBD_CtlSendData>
          break;
 800a346:	e017      	b.n	800a378 <USBD_HID_Setup+0xc4>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	885b      	ldrh	r3, [r3, #2]
 800a34c:	0a1b      	lsrs	r3, r3, #8
 800a34e:	b29b      	uxth	r3, r3
 800a350:	b2db      	uxtb	r3, r3
 800a352:	461a      	mov	r2, r3
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	605a      	str	r2, [r3, #4]
          break;
 800a358:	e00e      	b.n	800a378 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	3304      	adds	r3, #4
 800a35e:	2201      	movs	r2, #1
 800a360:	4619      	mov	r1, r3
 800a362:	6878      	ldr	r0, [r7, #4]
 800a364:	f001 fbe0 	bl	800bb28 <USBD_CtlSendData>
          break;
 800a368:	e006      	b.n	800a378 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800a36a:	6839      	ldr	r1, [r7, #0]
 800a36c:	6878      	ldr	r0, [r7, #4]
 800a36e:	f001 fb6a 	bl	800ba46 <USBD_CtlError>
          ret = USBD_FAIL;
 800a372:	2303      	movs	r3, #3
 800a374:	75fb      	strb	r3, [r7, #23]
          break;
 800a376:	bf00      	nop
      }
      break;
 800a378:	e09a      	b.n	800a4b0 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a37a:	683b      	ldr	r3, [r7, #0]
 800a37c:	785b      	ldrb	r3, [r3, #1]
 800a37e:	2b0b      	cmp	r3, #11
 800a380:	f200 8086 	bhi.w	800a490 <USBD_HID_Setup+0x1dc>
 800a384:	a201      	add	r2, pc, #4	; (adr r2, 800a38c <USBD_HID_Setup+0xd8>)
 800a386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a38a:	bf00      	nop
 800a38c:	0800a3bd 	.word	0x0800a3bd
 800a390:	0800a49f 	.word	0x0800a49f
 800a394:	0800a491 	.word	0x0800a491
 800a398:	0800a491 	.word	0x0800a491
 800a39c:	0800a491 	.word	0x0800a491
 800a3a0:	0800a491 	.word	0x0800a491
 800a3a4:	0800a3e7 	.word	0x0800a3e7
 800a3a8:	0800a491 	.word	0x0800a491
 800a3ac:	0800a491 	.word	0x0800a491
 800a3b0:	0800a491 	.word	0x0800a491
 800a3b4:	0800a43f 	.word	0x0800a43f
 800a3b8:	0800a469 	.word	0x0800a469
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3c2:	b2db      	uxtb	r3, r3
 800a3c4:	2b03      	cmp	r3, #3
 800a3c6:	d107      	bne.n	800a3d8 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a3c8:	f107 030a 	add.w	r3, r7, #10
 800a3cc:	2202      	movs	r2, #2
 800a3ce:	4619      	mov	r1, r3
 800a3d0:	6878      	ldr	r0, [r7, #4]
 800a3d2:	f001 fba9 	bl	800bb28 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a3d6:	e063      	b.n	800a4a0 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800a3d8:	6839      	ldr	r1, [r7, #0]
 800a3da:	6878      	ldr	r0, [r7, #4]
 800a3dc:	f001 fb33 	bl	800ba46 <USBD_CtlError>
            ret = USBD_FAIL;
 800a3e0:	2303      	movs	r3, #3
 800a3e2:	75fb      	strb	r3, [r7, #23]
          break;
 800a3e4:	e05c      	b.n	800a4a0 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	885b      	ldrh	r3, [r3, #2]
 800a3ea:	0a1b      	lsrs	r3, r3, #8
 800a3ec:	b29b      	uxth	r3, r3
 800a3ee:	2b22      	cmp	r3, #34	; 0x22
 800a3f0:	d108      	bne.n	800a404 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	88db      	ldrh	r3, [r3, #6]
 800a3f6:	2b3f      	cmp	r3, #63	; 0x3f
 800a3f8:	bf28      	it	cs
 800a3fa:	233f      	movcs	r3, #63	; 0x3f
 800a3fc:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 800a3fe:	4b2f      	ldr	r3, [pc, #188]	; (800a4bc <USBD_HID_Setup+0x208>)
 800a400:	613b      	str	r3, [r7, #16]
 800a402:	e015      	b.n	800a430 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	885b      	ldrh	r3, [r3, #2]
 800a408:	0a1b      	lsrs	r3, r3, #8
 800a40a:	b29b      	uxth	r3, r3
 800a40c:	2b21      	cmp	r3, #33	; 0x21
 800a40e:	d108      	bne.n	800a422 <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 800a410:	4b2b      	ldr	r3, [pc, #172]	; (800a4c0 <USBD_HID_Setup+0x20c>)
 800a412:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800a414:	683b      	ldr	r3, [r7, #0]
 800a416:	88db      	ldrh	r3, [r3, #6]
 800a418:	2b09      	cmp	r3, #9
 800a41a:	bf28      	it	cs
 800a41c:	2309      	movcs	r3, #9
 800a41e:	82bb      	strh	r3, [r7, #20]
 800a420:	e006      	b.n	800a430 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 800a422:	6839      	ldr	r1, [r7, #0]
 800a424:	6878      	ldr	r0, [r7, #4]
 800a426:	f001 fb0e 	bl	800ba46 <USBD_CtlError>
            ret = USBD_FAIL;
 800a42a:	2303      	movs	r3, #3
 800a42c:	75fb      	strb	r3, [r7, #23]
            break;
 800a42e:	e037      	b.n	800a4a0 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 800a430:	8abb      	ldrh	r3, [r7, #20]
 800a432:	461a      	mov	r2, r3
 800a434:	6939      	ldr	r1, [r7, #16]
 800a436:	6878      	ldr	r0, [r7, #4]
 800a438:	f001 fb76 	bl	800bb28 <USBD_CtlSendData>
          break;
 800a43c:	e030      	b.n	800a4a0 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a444:	b2db      	uxtb	r3, r3
 800a446:	2b03      	cmp	r3, #3
 800a448:	d107      	bne.n	800a45a <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	3308      	adds	r3, #8
 800a44e:	2201      	movs	r2, #1
 800a450:	4619      	mov	r1, r3
 800a452:	6878      	ldr	r0, [r7, #4]
 800a454:	f001 fb68 	bl	800bb28 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a458:	e022      	b.n	800a4a0 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800a45a:	6839      	ldr	r1, [r7, #0]
 800a45c:	6878      	ldr	r0, [r7, #4]
 800a45e:	f001 faf2 	bl	800ba46 <USBD_CtlError>
            ret = USBD_FAIL;
 800a462:	2303      	movs	r3, #3
 800a464:	75fb      	strb	r3, [r7, #23]
          break;
 800a466:	e01b      	b.n	800a4a0 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a46e:	b2db      	uxtb	r3, r3
 800a470:	2b03      	cmp	r3, #3
 800a472:	d106      	bne.n	800a482 <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800a474:	683b      	ldr	r3, [r7, #0]
 800a476:	885b      	ldrh	r3, [r3, #2]
 800a478:	b2db      	uxtb	r3, r3
 800a47a:	461a      	mov	r2, r3
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a480:	e00e      	b.n	800a4a0 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800a482:	6839      	ldr	r1, [r7, #0]
 800a484:	6878      	ldr	r0, [r7, #4]
 800a486:	f001 fade 	bl	800ba46 <USBD_CtlError>
            ret = USBD_FAIL;
 800a48a:	2303      	movs	r3, #3
 800a48c:	75fb      	strb	r3, [r7, #23]
          break;
 800a48e:	e007      	b.n	800a4a0 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a490:	6839      	ldr	r1, [r7, #0]
 800a492:	6878      	ldr	r0, [r7, #4]
 800a494:	f001 fad7 	bl	800ba46 <USBD_CtlError>
          ret = USBD_FAIL;
 800a498:	2303      	movs	r3, #3
 800a49a:	75fb      	strb	r3, [r7, #23]
          break;
 800a49c:	e000      	b.n	800a4a0 <USBD_HID_Setup+0x1ec>
          break;
 800a49e:	bf00      	nop
      }
      break;
 800a4a0:	e006      	b.n	800a4b0 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 800a4a2:	6839      	ldr	r1, [r7, #0]
 800a4a4:	6878      	ldr	r0, [r7, #4]
 800a4a6:	f001 face 	bl	800ba46 <USBD_CtlError>
      ret = USBD_FAIL;
 800a4aa:	2303      	movs	r3, #3
 800a4ac:	75fb      	strb	r3, [r7, #23]
      break;
 800a4ae:	bf00      	nop
  }

  return (uint8_t)ret;
 800a4b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	3718      	adds	r7, #24
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	bd80      	pop	{r7, pc}
 800a4ba:	bf00      	nop
 800a4bc:	200000b4 	.word	0x200000b4
 800a4c0:	2000009c 	.word	0x2000009c

0800a4c4 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b086      	sub	sp, #24
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	60f8      	str	r0, [r7, #12]
 800a4cc:	60b9      	str	r1, [r7, #8]
 800a4ce:	4613      	mov	r3, r2
 800a4d0:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	32b0      	adds	r2, #176	; 0xb0
 800a4dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4e0:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 800a4e2:	697b      	ldr	r3, [r7, #20]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d101      	bne.n	800a4ec <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800a4e8:	2303      	movs	r3, #3
 800a4ea:	e014      	b.n	800a516 <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4f2:	b2db      	uxtb	r3, r3
 800a4f4:	2b03      	cmp	r3, #3
 800a4f6:	d10d      	bne.n	800a514 <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == HID_IDLE)
 800a4f8:	697b      	ldr	r3, [r7, #20]
 800a4fa:	7b1b      	ldrb	r3, [r3, #12]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d109      	bne.n	800a514 <USBD_HID_SendReport+0x50>
    {
      hhid->state = HID_BUSY;
 800a500:	697b      	ldr	r3, [r7, #20]
 800a502:	2201      	movs	r2, #1
 800a504:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 800a506:	4b06      	ldr	r3, [pc, #24]	; (800a520 <USBD_HID_SendReport+0x5c>)
 800a508:	7819      	ldrb	r1, [r3, #0]
 800a50a:	88fb      	ldrh	r3, [r7, #6]
 800a50c:	68ba      	ldr	r2, [r7, #8]
 800a50e:	68f8      	ldr	r0, [r7, #12]
 800a510:	f001 ff1f 	bl	800c352 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 800a514:	2300      	movs	r3, #0
}
 800a516:	4618      	mov	r0, r3
 800a518:	3718      	adds	r7, #24
 800a51a:	46bd      	mov	sp, r7
 800a51c:	bd80      	pop	{r7, pc}
 800a51e:	bf00      	nop
 800a520:	200000f3 	.word	0x200000f3

0800a524 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b084      	sub	sp, #16
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 800a52c:	2181      	movs	r1, #129	; 0x81
 800a52e:	4809      	ldr	r0, [pc, #36]	; (800a554 <USBD_HID_GetFSCfgDesc+0x30>)
 800a530:	f000 fc51 	bl	800add6 <USBD_GetEpDesc>
 800a534:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d002      	beq.n	800a542 <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	220a      	movs	r2, #10
 800a540:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	2222      	movs	r2, #34	; 0x22
 800a546:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 800a548:	4b02      	ldr	r3, [pc, #8]	; (800a554 <USBD_HID_GetFSCfgDesc+0x30>)
}
 800a54a:	4618      	mov	r0, r3
 800a54c:	3710      	adds	r7, #16
 800a54e:	46bd      	mov	sp, r7
 800a550:	bd80      	pop	{r7, pc}
 800a552:	bf00      	nop
 800a554:	20000078 	.word	0x20000078

0800a558 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b084      	sub	sp, #16
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 800a560:	2181      	movs	r1, #129	; 0x81
 800a562:	4809      	ldr	r0, [pc, #36]	; (800a588 <USBD_HID_GetHSCfgDesc+0x30>)
 800a564:	f000 fc37 	bl	800add6 <USBD_GetEpDesc>
 800a568:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d002      	beq.n	800a576 <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	2207      	movs	r2, #7
 800a574:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	2222      	movs	r2, #34	; 0x22
 800a57a:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 800a57c:	4b02      	ldr	r3, [pc, #8]	; (800a588 <USBD_HID_GetHSCfgDesc+0x30>)
}
 800a57e:	4618      	mov	r0, r3
 800a580:	3710      	adds	r7, #16
 800a582:	46bd      	mov	sp, r7
 800a584:	bd80      	pop	{r7, pc}
 800a586:	bf00      	nop
 800a588:	20000078 	.word	0x20000078

0800a58c <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b084      	sub	sp, #16
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 800a594:	2181      	movs	r1, #129	; 0x81
 800a596:	4809      	ldr	r0, [pc, #36]	; (800a5bc <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 800a598:	f000 fc1d 	bl	800add6 <USBD_GetEpDesc>
 800a59c:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d002      	beq.n	800a5aa <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	220a      	movs	r2, #10
 800a5a8:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	2222      	movs	r2, #34	; 0x22
 800a5ae:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 800a5b0:	4b02      	ldr	r3, [pc, #8]	; (800a5bc <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	3710      	adds	r7, #16
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	bd80      	pop	{r7, pc}
 800a5ba:	bf00      	nop
 800a5bc:	20000078 	.word	0x20000078

0800a5c0 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a5c0:	b480      	push	{r7}
 800a5c2:	b083      	sub	sp, #12
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
 800a5c8:	460b      	mov	r3, r1
 800a5ca:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = HID_IDLE;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	32b0      	adds	r2, #176	; 0xb0
 800a5d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5da:	2200      	movs	r2, #0
 800a5dc:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800a5de:	2300      	movs	r3, #0
}
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	370c      	adds	r7, #12
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ea:	4770      	bx	lr

0800a5ec <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800a5ec:	b480      	push	{r7}
 800a5ee:	b083      	sub	sp, #12
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	220a      	movs	r2, #10
 800a5f8:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 800a5fa:	4b03      	ldr	r3, [pc, #12]	; (800a608 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	370c      	adds	r7, #12
 800a600:	46bd      	mov	sp, r7
 800a602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a606:	4770      	bx	lr
 800a608:	200000a8 	.word	0x200000a8

0800a60c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b086      	sub	sp, #24
 800a610:	af00      	add	r7, sp, #0
 800a612:	60f8      	str	r0, [r7, #12]
 800a614:	60b9      	str	r1, [r7, #8]
 800a616:	4613      	mov	r3, r2
 800a618:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d10a      	bne.n	800a636 <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 800a620:	4817      	ldr	r0, [pc, #92]	; (800a680 <USBD_Init+0x74>)
 800a622:	f001 ff4f 	bl	800c4c4 <iprintf>
 800a626:	4817      	ldr	r0, [pc, #92]	; (800a684 <USBD_Init+0x78>)
 800a628:	f001 ff4c 	bl	800c4c4 <iprintf>
 800a62c:	200a      	movs	r0, #10
 800a62e:	f001 ff61 	bl	800c4f4 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a632:	2303      	movs	r3, #3
 800a634:	e01f      	b.n	800a676 <USBD_Init+0x6a>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	2200      	movs	r2, #0
 800a63a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	2200      	movs	r2, #0
 800a642:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	2200      	movs	r2, #0
 800a64a:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a64e:	68bb      	ldr	r3, [r7, #8]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d003      	beq.n	800a65c <USBD_Init+0x50>
  {
    pdev->pDesc = pdesc;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	68ba      	ldr	r2, [r7, #8]
 800a658:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	2201      	movs	r2, #1
 800a660:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	79fa      	ldrb	r2, [r7, #7]
 800a668:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a66a:	68f8      	ldr	r0, [r7, #12]
 800a66c:	f001 fd3c 	bl	800c0e8 <USBD_LL_Init>
 800a670:	4603      	mov	r3, r0
 800a672:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a674:	7dfb      	ldrb	r3, [r7, #23]
}
 800a676:	4618      	mov	r0, r3
 800a678:	3718      	adds	r7, #24
 800a67a:	46bd      	mov	sp, r7
 800a67c:	bd80      	pop	{r7, pc}
 800a67e:	bf00      	nop
 800a680:	0800d8c0 	.word	0x0800d8c0
 800a684:	0800d8c8 	.word	0x0800d8c8

0800a688 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b084      	sub	sp, #16
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
 800a690:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a692:	2300      	movs	r3, #0
 800a694:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d10a      	bne.n	800a6b2 <USBD_RegisterClass+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 800a69c:	481a      	ldr	r0, [pc, #104]	; (800a708 <USBD_RegisterClass+0x80>)
 800a69e:	f001 ff11 	bl	800c4c4 <iprintf>
 800a6a2:	481a      	ldr	r0, [pc, #104]	; (800a70c <USBD_RegisterClass+0x84>)
 800a6a4:	f001 ff0e 	bl	800c4c4 <iprintf>
 800a6a8:	200a      	movs	r0, #10
 800a6aa:	f001 ff23 	bl	800c4f4 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a6ae:	2303      	movs	r3, #3
 800a6b0:	e025      	b.n	800a6fe <USBD_RegisterClass+0x76>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	683a      	ldr	r2, [r7, #0]
 800a6b6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	32ae      	adds	r2, #174	; 0xae
 800a6c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d00f      	beq.n	800a6ee <USBD_RegisterClass+0x66>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	32ae      	adds	r2, #174	; 0xae
 800a6d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6de:	f107 020e 	add.w	r2, r7, #14
 800a6e2:	4610      	mov	r0, r2
 800a6e4:	4798      	blx	r3
 800a6e6:	4602      	mov	r2, r0
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800a6f4:	1c5a      	adds	r2, r3, #1
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800a6fc:	2300      	movs	r3, #0
}
 800a6fe:	4618      	mov	r0, r3
 800a700:	3710      	adds	r7, #16
 800a702:	46bd      	mov	sp, r7
 800a704:	bd80      	pop	{r7, pc}
 800a706:	bf00      	nop
 800a708:	0800d8c0 	.word	0x0800d8c0
 800a70c:	0800d8e0 	.word	0x0800d8e0

0800a710 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b082      	sub	sp, #8
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a718:	6878      	ldr	r0, [r7, #4]
 800a71a:	f001 fd31 	bl	800c180 <USBD_LL_Start>
 800a71e:	4603      	mov	r3, r0
}
 800a720:	4618      	mov	r0, r3
 800a722:	3708      	adds	r7, #8
 800a724:	46bd      	mov	sp, r7
 800a726:	bd80      	pop	{r7, pc}

0800a728 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a728:	b480      	push	{r7}
 800a72a:	b083      	sub	sp, #12
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a730:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a732:	4618      	mov	r0, r3
 800a734:	370c      	adds	r7, #12
 800a736:	46bd      	mov	sp, r7
 800a738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73c:	4770      	bx	lr

0800a73e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a73e:	b580      	push	{r7, lr}
 800a740:	b084      	sub	sp, #16
 800a742:	af00      	add	r7, sp, #0
 800a744:	6078      	str	r0, [r7, #4]
 800a746:	460b      	mov	r3, r1
 800a748:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a74a:	2300      	movs	r3, #0
 800a74c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a754:	2b00      	cmp	r3, #0
 800a756:	d009      	beq.n	800a76c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	78fa      	ldrb	r2, [r7, #3]
 800a762:	4611      	mov	r1, r2
 800a764:	6878      	ldr	r0, [r7, #4]
 800a766:	4798      	blx	r3
 800a768:	4603      	mov	r3, r0
 800a76a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a76c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a76e:	4618      	mov	r0, r3
 800a770:	3710      	adds	r7, #16
 800a772:	46bd      	mov	sp, r7
 800a774:	bd80      	pop	{r7, pc}

0800a776 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a776:	b580      	push	{r7, lr}
 800a778:	b084      	sub	sp, #16
 800a77a:	af00      	add	r7, sp, #0
 800a77c:	6078      	str	r0, [r7, #4]
 800a77e:	460b      	mov	r3, r1
 800a780:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a782:	2300      	movs	r3, #0
 800a784:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a78c:	685b      	ldr	r3, [r3, #4]
 800a78e:	78fa      	ldrb	r2, [r7, #3]
 800a790:	4611      	mov	r1, r2
 800a792:	6878      	ldr	r0, [r7, #4]
 800a794:	4798      	blx	r3
 800a796:	4603      	mov	r3, r0
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d001      	beq.n	800a7a0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a79c:	2303      	movs	r3, #3
 800a79e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a7a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	3710      	adds	r7, #16
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	bd80      	pop	{r7, pc}

0800a7aa <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a7aa:	b580      	push	{r7, lr}
 800a7ac:	b084      	sub	sp, #16
 800a7ae:	af00      	add	r7, sp, #0
 800a7b0:	6078      	str	r0, [r7, #4]
 800a7b2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a7ba:	6839      	ldr	r1, [r7, #0]
 800a7bc:	4618      	mov	r0, r3
 800a7be:	f001 f908 	bl	800b9d2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	2201      	movs	r2, #1
 800a7c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a7d0:	461a      	mov	r2, r3
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a7de:	f003 031f 	and.w	r3, r3, #31
 800a7e2:	2b02      	cmp	r3, #2
 800a7e4:	d01a      	beq.n	800a81c <USBD_LL_SetupStage+0x72>
 800a7e6:	2b02      	cmp	r3, #2
 800a7e8:	d822      	bhi.n	800a830 <USBD_LL_SetupStage+0x86>
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d002      	beq.n	800a7f4 <USBD_LL_SetupStage+0x4a>
 800a7ee:	2b01      	cmp	r3, #1
 800a7f0:	d00a      	beq.n	800a808 <USBD_LL_SetupStage+0x5e>
 800a7f2:	e01d      	b.n	800a830 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a7fa:	4619      	mov	r1, r3
 800a7fc:	6878      	ldr	r0, [r7, #4]
 800a7fe:	f000 fb5f 	bl	800aec0 <USBD_StdDevReq>
 800a802:	4603      	mov	r3, r0
 800a804:	73fb      	strb	r3, [r7, #15]
      break;
 800a806:	e020      	b.n	800a84a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a80e:	4619      	mov	r1, r3
 800a810:	6878      	ldr	r0, [r7, #4]
 800a812:	f000 fbc7 	bl	800afa4 <USBD_StdItfReq>
 800a816:	4603      	mov	r3, r0
 800a818:	73fb      	strb	r3, [r7, #15]
      break;
 800a81a:	e016      	b.n	800a84a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a822:	4619      	mov	r1, r3
 800a824:	6878      	ldr	r0, [r7, #4]
 800a826:	f000 fc29 	bl	800b07c <USBD_StdEPReq>
 800a82a:	4603      	mov	r3, r0
 800a82c:	73fb      	strb	r3, [r7, #15]
      break;
 800a82e:	e00c      	b.n	800a84a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a836:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a83a:	b2db      	uxtb	r3, r3
 800a83c:	4619      	mov	r1, r3
 800a83e:	6878      	ldr	r0, [r7, #4]
 800a840:	f001 fcfe 	bl	800c240 <USBD_LL_StallEP>
 800a844:	4603      	mov	r3, r0
 800a846:	73fb      	strb	r3, [r7, #15]
      break;
 800a848:	bf00      	nop
  }

  return ret;
 800a84a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a84c:	4618      	mov	r0, r3
 800a84e:	3710      	adds	r7, #16
 800a850:	46bd      	mov	sp, r7
 800a852:	bd80      	pop	{r7, pc}

0800a854 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b086      	sub	sp, #24
 800a858:	af00      	add	r7, sp, #0
 800a85a:	60f8      	str	r0, [r7, #12]
 800a85c:	460b      	mov	r3, r1
 800a85e:	607a      	str	r2, [r7, #4]
 800a860:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a862:	2300      	movs	r3, #0
 800a864:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a866:	7afb      	ldrb	r3, [r7, #11]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d16e      	bne.n	800a94a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a872:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a87a:	2b03      	cmp	r3, #3
 800a87c:	f040 8098 	bne.w	800a9b0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a880:	693b      	ldr	r3, [r7, #16]
 800a882:	689a      	ldr	r2, [r3, #8]
 800a884:	693b      	ldr	r3, [r7, #16]
 800a886:	68db      	ldr	r3, [r3, #12]
 800a888:	429a      	cmp	r2, r3
 800a88a:	d913      	bls.n	800a8b4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a88c:	693b      	ldr	r3, [r7, #16]
 800a88e:	689a      	ldr	r2, [r3, #8]
 800a890:	693b      	ldr	r3, [r7, #16]
 800a892:	68db      	ldr	r3, [r3, #12]
 800a894:	1ad2      	subs	r2, r2, r3
 800a896:	693b      	ldr	r3, [r7, #16]
 800a898:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a89a:	693b      	ldr	r3, [r7, #16]
 800a89c:	68da      	ldr	r2, [r3, #12]
 800a89e:	693b      	ldr	r3, [r7, #16]
 800a8a0:	689b      	ldr	r3, [r3, #8]
 800a8a2:	4293      	cmp	r3, r2
 800a8a4:	bf28      	it	cs
 800a8a6:	4613      	movcs	r3, r2
 800a8a8:	461a      	mov	r2, r3
 800a8aa:	6879      	ldr	r1, [r7, #4]
 800a8ac:	68f8      	ldr	r0, [r7, #12]
 800a8ae:	f001 f967 	bl	800bb80 <USBD_CtlContinueRx>
 800a8b2:	e07d      	b.n	800a9b0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a8ba:	f003 031f 	and.w	r3, r3, #31
 800a8be:	2b02      	cmp	r3, #2
 800a8c0:	d014      	beq.n	800a8ec <USBD_LL_DataOutStage+0x98>
 800a8c2:	2b02      	cmp	r3, #2
 800a8c4:	d81d      	bhi.n	800a902 <USBD_LL_DataOutStage+0xae>
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d002      	beq.n	800a8d0 <USBD_LL_DataOutStage+0x7c>
 800a8ca:	2b01      	cmp	r3, #1
 800a8cc:	d003      	beq.n	800a8d6 <USBD_LL_DataOutStage+0x82>
 800a8ce:	e018      	b.n	800a902 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	75bb      	strb	r3, [r7, #22]
            break;
 800a8d4:	e018      	b.n	800a908 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a8dc:	b2db      	uxtb	r3, r3
 800a8de:	4619      	mov	r1, r3
 800a8e0:	68f8      	ldr	r0, [r7, #12]
 800a8e2:	f000 fa5e 	bl	800ada2 <USBD_CoreFindIF>
 800a8e6:	4603      	mov	r3, r0
 800a8e8:	75bb      	strb	r3, [r7, #22]
            break;
 800a8ea:	e00d      	b.n	800a908 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a8f2:	b2db      	uxtb	r3, r3
 800a8f4:	4619      	mov	r1, r3
 800a8f6:	68f8      	ldr	r0, [r7, #12]
 800a8f8:	f000 fa60 	bl	800adbc <USBD_CoreFindEP>
 800a8fc:	4603      	mov	r3, r0
 800a8fe:	75bb      	strb	r3, [r7, #22]
            break;
 800a900:	e002      	b.n	800a908 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a902:	2300      	movs	r3, #0
 800a904:	75bb      	strb	r3, [r7, #22]
            break;
 800a906:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a908:	7dbb      	ldrb	r3, [r7, #22]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d119      	bne.n	800a942 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a914:	b2db      	uxtb	r3, r3
 800a916:	2b03      	cmp	r3, #3
 800a918:	d113      	bne.n	800a942 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a91a:	7dba      	ldrb	r2, [r7, #22]
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	32ae      	adds	r2, #174	; 0xae
 800a920:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a924:	691b      	ldr	r3, [r3, #16]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d00b      	beq.n	800a942 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a92a:	7dba      	ldrb	r2, [r7, #22]
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a932:	7dba      	ldrb	r2, [r7, #22]
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	32ae      	adds	r2, #174	; 0xae
 800a938:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a93c:	691b      	ldr	r3, [r3, #16]
 800a93e:	68f8      	ldr	r0, [r7, #12]
 800a940:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a942:	68f8      	ldr	r0, [r7, #12]
 800a944:	f001 f92d 	bl	800bba2 <USBD_CtlSendStatus>
 800a948:	e032      	b.n	800a9b0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a94a:	7afb      	ldrb	r3, [r7, #11]
 800a94c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a950:	b2db      	uxtb	r3, r3
 800a952:	4619      	mov	r1, r3
 800a954:	68f8      	ldr	r0, [r7, #12]
 800a956:	f000 fa31 	bl	800adbc <USBD_CoreFindEP>
 800a95a:	4603      	mov	r3, r0
 800a95c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a95e:	7dbb      	ldrb	r3, [r7, #22]
 800a960:	2bff      	cmp	r3, #255	; 0xff
 800a962:	d025      	beq.n	800a9b0 <USBD_LL_DataOutStage+0x15c>
 800a964:	7dbb      	ldrb	r3, [r7, #22]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d122      	bne.n	800a9b0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a970:	b2db      	uxtb	r3, r3
 800a972:	2b03      	cmp	r3, #3
 800a974:	d117      	bne.n	800a9a6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a976:	7dba      	ldrb	r2, [r7, #22]
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	32ae      	adds	r2, #174	; 0xae
 800a97c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a980:	699b      	ldr	r3, [r3, #24]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d00f      	beq.n	800a9a6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a986:	7dba      	ldrb	r2, [r7, #22]
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a98e:	7dba      	ldrb	r2, [r7, #22]
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	32ae      	adds	r2, #174	; 0xae
 800a994:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a998:	699b      	ldr	r3, [r3, #24]
 800a99a:	7afa      	ldrb	r2, [r7, #11]
 800a99c:	4611      	mov	r1, r2
 800a99e:	68f8      	ldr	r0, [r7, #12]
 800a9a0:	4798      	blx	r3
 800a9a2:	4603      	mov	r3, r0
 800a9a4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a9a6:	7dfb      	ldrb	r3, [r7, #23]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d001      	beq.n	800a9b0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a9ac:	7dfb      	ldrb	r3, [r7, #23]
 800a9ae:	e000      	b.n	800a9b2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a9b0:	2300      	movs	r3, #0
}
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	3718      	adds	r7, #24
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	bd80      	pop	{r7, pc}

0800a9ba <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a9ba:	b580      	push	{r7, lr}
 800a9bc:	b086      	sub	sp, #24
 800a9be:	af00      	add	r7, sp, #0
 800a9c0:	60f8      	str	r0, [r7, #12]
 800a9c2:	460b      	mov	r3, r1
 800a9c4:	607a      	str	r2, [r7, #4]
 800a9c6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a9c8:	7afb      	ldrb	r3, [r7, #11]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d16f      	bne.n	800aaae <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	3314      	adds	r3, #20
 800a9d2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a9da:	2b02      	cmp	r3, #2
 800a9dc:	d15a      	bne.n	800aa94 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a9de:	693b      	ldr	r3, [r7, #16]
 800a9e0:	689a      	ldr	r2, [r3, #8]
 800a9e2:	693b      	ldr	r3, [r7, #16]
 800a9e4:	68db      	ldr	r3, [r3, #12]
 800a9e6:	429a      	cmp	r2, r3
 800a9e8:	d914      	bls.n	800aa14 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a9ea:	693b      	ldr	r3, [r7, #16]
 800a9ec:	689a      	ldr	r2, [r3, #8]
 800a9ee:	693b      	ldr	r3, [r7, #16]
 800a9f0:	68db      	ldr	r3, [r3, #12]
 800a9f2:	1ad2      	subs	r2, r2, r3
 800a9f4:	693b      	ldr	r3, [r7, #16]
 800a9f6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a9f8:	693b      	ldr	r3, [r7, #16]
 800a9fa:	689b      	ldr	r3, [r3, #8]
 800a9fc:	461a      	mov	r2, r3
 800a9fe:	6879      	ldr	r1, [r7, #4]
 800aa00:	68f8      	ldr	r0, [r7, #12]
 800aa02:	f001 f8ac 	bl	800bb5e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aa06:	2300      	movs	r3, #0
 800aa08:	2200      	movs	r2, #0
 800aa0a:	2100      	movs	r1, #0
 800aa0c:	68f8      	ldr	r0, [r7, #12]
 800aa0e:	f001 fcc1 	bl	800c394 <USBD_LL_PrepareReceive>
 800aa12:	e03f      	b.n	800aa94 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800aa14:	693b      	ldr	r3, [r7, #16]
 800aa16:	68da      	ldr	r2, [r3, #12]
 800aa18:	693b      	ldr	r3, [r7, #16]
 800aa1a:	689b      	ldr	r3, [r3, #8]
 800aa1c:	429a      	cmp	r2, r3
 800aa1e:	d11c      	bne.n	800aa5a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800aa20:	693b      	ldr	r3, [r7, #16]
 800aa22:	685a      	ldr	r2, [r3, #4]
 800aa24:	693b      	ldr	r3, [r7, #16]
 800aa26:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800aa28:	429a      	cmp	r2, r3
 800aa2a:	d316      	bcc.n	800aa5a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800aa2c:	693b      	ldr	r3, [r7, #16]
 800aa2e:	685a      	ldr	r2, [r3, #4]
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800aa36:	429a      	cmp	r2, r3
 800aa38:	d20f      	bcs.n	800aa5a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	2100      	movs	r1, #0
 800aa3e:	68f8      	ldr	r0, [r7, #12]
 800aa40:	f001 f88d 	bl	800bb5e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	2200      	movs	r2, #0
 800aa48:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	2200      	movs	r2, #0
 800aa50:	2100      	movs	r1, #0
 800aa52:	68f8      	ldr	r0, [r7, #12]
 800aa54:	f001 fc9e 	bl	800c394 <USBD_LL_PrepareReceive>
 800aa58:	e01c      	b.n	800aa94 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa60:	b2db      	uxtb	r3, r3
 800aa62:	2b03      	cmp	r3, #3
 800aa64:	d10f      	bne.n	800aa86 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa6c:	68db      	ldr	r3, [r3, #12]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d009      	beq.n	800aa86 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	2200      	movs	r2, #0
 800aa76:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa80:	68db      	ldr	r3, [r3, #12]
 800aa82:	68f8      	ldr	r0, [r7, #12]
 800aa84:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800aa86:	2180      	movs	r1, #128	; 0x80
 800aa88:	68f8      	ldr	r0, [r7, #12]
 800aa8a:	f001 fbd9 	bl	800c240 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800aa8e:	68f8      	ldr	r0, [r7, #12]
 800aa90:	f001 f89a 	bl	800bbc8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d03a      	beq.n	800ab14 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800aa9e:	68f8      	ldr	r0, [r7, #12]
 800aaa0:	f7ff fe42 	bl	800a728 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800aaac:	e032      	b.n	800ab14 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800aaae:	7afb      	ldrb	r3, [r7, #11]
 800aab0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800aab4:	b2db      	uxtb	r3, r3
 800aab6:	4619      	mov	r1, r3
 800aab8:	68f8      	ldr	r0, [r7, #12]
 800aaba:	f000 f97f 	bl	800adbc <USBD_CoreFindEP>
 800aabe:	4603      	mov	r3, r0
 800aac0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800aac2:	7dfb      	ldrb	r3, [r7, #23]
 800aac4:	2bff      	cmp	r3, #255	; 0xff
 800aac6:	d025      	beq.n	800ab14 <USBD_LL_DataInStage+0x15a>
 800aac8:	7dfb      	ldrb	r3, [r7, #23]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d122      	bne.n	800ab14 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aad4:	b2db      	uxtb	r3, r3
 800aad6:	2b03      	cmp	r3, #3
 800aad8:	d11c      	bne.n	800ab14 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800aada:	7dfa      	ldrb	r2, [r7, #23]
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	32ae      	adds	r2, #174	; 0xae
 800aae0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aae4:	695b      	ldr	r3, [r3, #20]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d014      	beq.n	800ab14 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800aaea:	7dfa      	ldrb	r2, [r7, #23]
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800aaf2:	7dfa      	ldrb	r2, [r7, #23]
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	32ae      	adds	r2, #174	; 0xae
 800aaf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aafc:	695b      	ldr	r3, [r3, #20]
 800aafe:	7afa      	ldrb	r2, [r7, #11]
 800ab00:	4611      	mov	r1, r2
 800ab02:	68f8      	ldr	r0, [r7, #12]
 800ab04:	4798      	blx	r3
 800ab06:	4603      	mov	r3, r0
 800ab08:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800ab0a:	7dbb      	ldrb	r3, [r7, #22]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d001      	beq.n	800ab14 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800ab10:	7dbb      	ldrb	r3, [r7, #22]
 800ab12:	e000      	b.n	800ab16 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800ab14:	2300      	movs	r3, #0
}
 800ab16:	4618      	mov	r0, r3
 800ab18:	3718      	adds	r7, #24
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	bd80      	pop	{r7, pc}

0800ab1e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ab1e:	b580      	push	{r7, lr}
 800ab20:	b084      	sub	sp, #16
 800ab22:	af00      	add	r7, sp, #0
 800ab24:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800ab26:	2300      	movs	r3, #0
 800ab28:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	2201      	movs	r2, #1
 800ab2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	2200      	movs	r2, #0
 800ab36:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	2200      	movs	r2, #0
 800ab44:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d014      	beq.n	800ab84 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab60:	685b      	ldr	r3, [r3, #4]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d00e      	beq.n	800ab84 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab6c:	685b      	ldr	r3, [r3, #4]
 800ab6e:	687a      	ldr	r2, [r7, #4]
 800ab70:	6852      	ldr	r2, [r2, #4]
 800ab72:	b2d2      	uxtb	r2, r2
 800ab74:	4611      	mov	r1, r2
 800ab76:	6878      	ldr	r0, [r7, #4]
 800ab78:	4798      	blx	r3
 800ab7a:	4603      	mov	r3, r0
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d001      	beq.n	800ab84 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800ab80:	2303      	movs	r3, #3
 800ab82:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ab84:	2340      	movs	r3, #64	; 0x40
 800ab86:	2200      	movs	r2, #0
 800ab88:	2100      	movs	r1, #0
 800ab8a:	6878      	ldr	r0, [r7, #4]
 800ab8c:	f001 fb13 	bl	800c1b6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	2201      	movs	r2, #1
 800ab94:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	2240      	movs	r2, #64	; 0x40
 800ab9c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800aba0:	2340      	movs	r3, #64	; 0x40
 800aba2:	2200      	movs	r2, #0
 800aba4:	2180      	movs	r1, #128	; 0x80
 800aba6:	6878      	ldr	r0, [r7, #4]
 800aba8:	f001 fb05 	bl	800c1b6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2201      	movs	r2, #1
 800abb0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	2240      	movs	r2, #64	; 0x40
 800abb6:	621a      	str	r2, [r3, #32]

  return ret;
 800abb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800abba:	4618      	mov	r0, r3
 800abbc:	3710      	adds	r7, #16
 800abbe:	46bd      	mov	sp, r7
 800abc0:	bd80      	pop	{r7, pc}

0800abc2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800abc2:	b480      	push	{r7}
 800abc4:	b083      	sub	sp, #12
 800abc6:	af00      	add	r7, sp, #0
 800abc8:	6078      	str	r0, [r7, #4]
 800abca:	460b      	mov	r3, r1
 800abcc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	78fa      	ldrb	r2, [r7, #3]
 800abd2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800abd4:	2300      	movs	r3, #0
}
 800abd6:	4618      	mov	r0, r3
 800abd8:	370c      	adds	r7, #12
 800abda:	46bd      	mov	sp, r7
 800abdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe0:	4770      	bx	lr

0800abe2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800abe2:	b480      	push	{r7}
 800abe4:	b083      	sub	sp, #12
 800abe6:	af00      	add	r7, sp, #0
 800abe8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abf0:	b2da      	uxtb	r2, r3
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2204      	movs	r2, #4
 800abfc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800ac00:	2300      	movs	r3, #0
}
 800ac02:	4618      	mov	r0, r3
 800ac04:	370c      	adds	r7, #12
 800ac06:	46bd      	mov	sp, r7
 800ac08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0c:	4770      	bx	lr

0800ac0e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ac0e:	b480      	push	{r7}
 800ac10:	b083      	sub	sp, #12
 800ac12:	af00      	add	r7, sp, #0
 800ac14:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac1c:	b2db      	uxtb	r3, r3
 800ac1e:	2b04      	cmp	r3, #4
 800ac20:	d106      	bne.n	800ac30 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800ac28:	b2da      	uxtb	r2, r3
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800ac30:	2300      	movs	r3, #0
}
 800ac32:	4618      	mov	r0, r3
 800ac34:	370c      	adds	r7, #12
 800ac36:	46bd      	mov	sp, r7
 800ac38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3c:	4770      	bx	lr

0800ac3e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ac3e:	b580      	push	{r7, lr}
 800ac40:	b082      	sub	sp, #8
 800ac42:	af00      	add	r7, sp, #0
 800ac44:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac4c:	b2db      	uxtb	r3, r3
 800ac4e:	2b03      	cmp	r3, #3
 800ac50:	d110      	bne.n	800ac74 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d00b      	beq.n	800ac74 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac62:	69db      	ldr	r3, [r3, #28]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d005      	beq.n	800ac74 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac6e:	69db      	ldr	r3, [r3, #28]
 800ac70:	6878      	ldr	r0, [r7, #4]
 800ac72:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800ac74:	2300      	movs	r3, #0
}
 800ac76:	4618      	mov	r0, r3
 800ac78:	3708      	adds	r7, #8
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	bd80      	pop	{r7, pc}

0800ac7e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ac7e:	b580      	push	{r7, lr}
 800ac80:	b082      	sub	sp, #8
 800ac82:	af00      	add	r7, sp, #0
 800ac84:	6078      	str	r0, [r7, #4]
 800ac86:	460b      	mov	r3, r1
 800ac88:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	32ae      	adds	r2, #174	; 0xae
 800ac94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d101      	bne.n	800aca0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800ac9c:	2303      	movs	r3, #3
 800ac9e:	e01c      	b.n	800acda <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aca6:	b2db      	uxtb	r3, r3
 800aca8:	2b03      	cmp	r3, #3
 800acaa:	d115      	bne.n	800acd8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	32ae      	adds	r2, #174	; 0xae
 800acb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acba:	6a1b      	ldr	r3, [r3, #32]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d00b      	beq.n	800acd8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	32ae      	adds	r2, #174	; 0xae
 800acca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acce:	6a1b      	ldr	r3, [r3, #32]
 800acd0:	78fa      	ldrb	r2, [r7, #3]
 800acd2:	4611      	mov	r1, r2
 800acd4:	6878      	ldr	r0, [r7, #4]
 800acd6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800acd8:	2300      	movs	r3, #0
}
 800acda:	4618      	mov	r0, r3
 800acdc:	3708      	adds	r7, #8
 800acde:	46bd      	mov	sp, r7
 800ace0:	bd80      	pop	{r7, pc}

0800ace2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ace2:	b580      	push	{r7, lr}
 800ace4:	b082      	sub	sp, #8
 800ace6:	af00      	add	r7, sp, #0
 800ace8:	6078      	str	r0, [r7, #4]
 800acea:	460b      	mov	r3, r1
 800acec:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	32ae      	adds	r2, #174	; 0xae
 800acf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d101      	bne.n	800ad04 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800ad00:	2303      	movs	r3, #3
 800ad02:	e01c      	b.n	800ad3e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad0a:	b2db      	uxtb	r3, r3
 800ad0c:	2b03      	cmp	r3, #3
 800ad0e:	d115      	bne.n	800ad3c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	32ae      	adds	r2, #174	; 0xae
 800ad1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d00b      	beq.n	800ad3c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	32ae      	adds	r2, #174	; 0xae
 800ad2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad34:	78fa      	ldrb	r2, [r7, #3]
 800ad36:	4611      	mov	r1, r2
 800ad38:	6878      	ldr	r0, [r7, #4]
 800ad3a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ad3c:	2300      	movs	r3, #0
}
 800ad3e:	4618      	mov	r0, r3
 800ad40:	3708      	adds	r7, #8
 800ad42:	46bd      	mov	sp, r7
 800ad44:	bd80      	pop	{r7, pc}

0800ad46 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ad46:	b480      	push	{r7}
 800ad48:	b083      	sub	sp, #12
 800ad4a:	af00      	add	r7, sp, #0
 800ad4c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ad4e:	2300      	movs	r3, #0
}
 800ad50:	4618      	mov	r0, r3
 800ad52:	370c      	adds	r7, #12
 800ad54:	46bd      	mov	sp, r7
 800ad56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5a:	4770      	bx	lr

0800ad5c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b084      	sub	sp, #16
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800ad64:	2300      	movs	r3, #0
 800ad66:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	2201      	movs	r2, #1
 800ad6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d00e      	beq.n	800ad98 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad80:	685b      	ldr	r3, [r3, #4]
 800ad82:	687a      	ldr	r2, [r7, #4]
 800ad84:	6852      	ldr	r2, [r2, #4]
 800ad86:	b2d2      	uxtb	r2, r2
 800ad88:	4611      	mov	r1, r2
 800ad8a:	6878      	ldr	r0, [r7, #4]
 800ad8c:	4798      	blx	r3
 800ad8e:	4603      	mov	r3, r0
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d001      	beq.n	800ad98 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800ad94:	2303      	movs	r3, #3
 800ad96:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ad98:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	3710      	adds	r7, #16
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	bd80      	pop	{r7, pc}

0800ada2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ada2:	b480      	push	{r7}
 800ada4:	b083      	sub	sp, #12
 800ada6:	af00      	add	r7, sp, #0
 800ada8:	6078      	str	r0, [r7, #4]
 800adaa:	460b      	mov	r3, r1
 800adac:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800adae:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800adb0:	4618      	mov	r0, r3
 800adb2:	370c      	adds	r7, #12
 800adb4:	46bd      	mov	sp, r7
 800adb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adba:	4770      	bx	lr

0800adbc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800adbc:	b480      	push	{r7}
 800adbe:	b083      	sub	sp, #12
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
 800adc4:	460b      	mov	r3, r1
 800adc6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800adc8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800adca:	4618      	mov	r0, r3
 800adcc:	370c      	adds	r7, #12
 800adce:	46bd      	mov	sp, r7
 800add0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add4:	4770      	bx	lr

0800add6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800add6:	b580      	push	{r7, lr}
 800add8:	b086      	sub	sp, #24
 800adda:	af00      	add	r7, sp, #0
 800addc:	6078      	str	r0, [r7, #4]
 800adde:	460b      	mov	r3, r1
 800ade0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800adea:	2300      	movs	r3, #0
 800adec:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	885b      	ldrh	r3, [r3, #2]
 800adf2:	b29a      	uxth	r2, r3
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	781b      	ldrb	r3, [r3, #0]
 800adf8:	b29b      	uxth	r3, r3
 800adfa:	429a      	cmp	r2, r3
 800adfc:	d920      	bls.n	800ae40 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	781b      	ldrb	r3, [r3, #0]
 800ae02:	b29b      	uxth	r3, r3
 800ae04:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800ae06:	e013      	b.n	800ae30 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800ae08:	f107 030a 	add.w	r3, r7, #10
 800ae0c:	4619      	mov	r1, r3
 800ae0e:	6978      	ldr	r0, [r7, #20]
 800ae10:	f000 f81b 	bl	800ae4a <USBD_GetNextDesc>
 800ae14:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ae16:	697b      	ldr	r3, [r7, #20]
 800ae18:	785b      	ldrb	r3, [r3, #1]
 800ae1a:	2b05      	cmp	r3, #5
 800ae1c:	d108      	bne.n	800ae30 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800ae1e:	697b      	ldr	r3, [r7, #20]
 800ae20:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800ae22:	693b      	ldr	r3, [r7, #16]
 800ae24:	789b      	ldrb	r3, [r3, #2]
 800ae26:	78fa      	ldrb	r2, [r7, #3]
 800ae28:	429a      	cmp	r2, r3
 800ae2a:	d008      	beq.n	800ae3e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	885b      	ldrh	r3, [r3, #2]
 800ae34:	b29a      	uxth	r2, r3
 800ae36:	897b      	ldrh	r3, [r7, #10]
 800ae38:	429a      	cmp	r2, r3
 800ae3a:	d8e5      	bhi.n	800ae08 <USBD_GetEpDesc+0x32>
 800ae3c:	e000      	b.n	800ae40 <USBD_GetEpDesc+0x6a>
          break;
 800ae3e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800ae40:	693b      	ldr	r3, [r7, #16]
}
 800ae42:	4618      	mov	r0, r3
 800ae44:	3718      	adds	r7, #24
 800ae46:	46bd      	mov	sp, r7
 800ae48:	bd80      	pop	{r7, pc}

0800ae4a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ae4a:	b480      	push	{r7}
 800ae4c:	b085      	sub	sp, #20
 800ae4e:	af00      	add	r7, sp, #0
 800ae50:	6078      	str	r0, [r7, #4]
 800ae52:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800ae58:	683b      	ldr	r3, [r7, #0]
 800ae5a:	881a      	ldrh	r2, [r3, #0]
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	781b      	ldrb	r3, [r3, #0]
 800ae60:	b29b      	uxth	r3, r3
 800ae62:	4413      	add	r3, r2
 800ae64:	b29a      	uxth	r2, r3
 800ae66:	683b      	ldr	r3, [r7, #0]
 800ae68:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	781b      	ldrb	r3, [r3, #0]
 800ae6e:	461a      	mov	r2, r3
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	4413      	add	r3, r2
 800ae74:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ae76:	68fb      	ldr	r3, [r7, #12]
}
 800ae78:	4618      	mov	r0, r3
 800ae7a:	3714      	adds	r7, #20
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae82:	4770      	bx	lr

0800ae84 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ae84:	b480      	push	{r7}
 800ae86:	b087      	sub	sp, #28
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ae90:	697b      	ldr	r3, [r7, #20]
 800ae92:	781b      	ldrb	r3, [r3, #0]
 800ae94:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ae96:	697b      	ldr	r3, [r7, #20]
 800ae98:	3301      	adds	r3, #1
 800ae9a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ae9c:	697b      	ldr	r3, [r7, #20]
 800ae9e:	781b      	ldrb	r3, [r3, #0]
 800aea0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800aea2:	8a3b      	ldrh	r3, [r7, #16]
 800aea4:	021b      	lsls	r3, r3, #8
 800aea6:	b21a      	sxth	r2, r3
 800aea8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800aeac:	4313      	orrs	r3, r2
 800aeae:	b21b      	sxth	r3, r3
 800aeb0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800aeb2:	89fb      	ldrh	r3, [r7, #14]
}
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	371c      	adds	r7, #28
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aebe:	4770      	bx	lr

0800aec0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b084      	sub	sp, #16
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
 800aec8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aeca:	2300      	movs	r3, #0
 800aecc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aece:	683b      	ldr	r3, [r7, #0]
 800aed0:	781b      	ldrb	r3, [r3, #0]
 800aed2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aed6:	2b40      	cmp	r3, #64	; 0x40
 800aed8:	d005      	beq.n	800aee6 <USBD_StdDevReq+0x26>
 800aeda:	2b40      	cmp	r3, #64	; 0x40
 800aedc:	d857      	bhi.n	800af8e <USBD_StdDevReq+0xce>
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d00f      	beq.n	800af02 <USBD_StdDevReq+0x42>
 800aee2:	2b20      	cmp	r3, #32
 800aee4:	d153      	bne.n	800af8e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	32ae      	adds	r2, #174	; 0xae
 800aef0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aef4:	689b      	ldr	r3, [r3, #8]
 800aef6:	6839      	ldr	r1, [r7, #0]
 800aef8:	6878      	ldr	r0, [r7, #4]
 800aefa:	4798      	blx	r3
 800aefc:	4603      	mov	r3, r0
 800aefe:	73fb      	strb	r3, [r7, #15]
      break;
 800af00:	e04a      	b.n	800af98 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800af02:	683b      	ldr	r3, [r7, #0]
 800af04:	785b      	ldrb	r3, [r3, #1]
 800af06:	2b09      	cmp	r3, #9
 800af08:	d83b      	bhi.n	800af82 <USBD_StdDevReq+0xc2>
 800af0a:	a201      	add	r2, pc, #4	; (adr r2, 800af10 <USBD_StdDevReq+0x50>)
 800af0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af10:	0800af65 	.word	0x0800af65
 800af14:	0800af79 	.word	0x0800af79
 800af18:	0800af83 	.word	0x0800af83
 800af1c:	0800af6f 	.word	0x0800af6f
 800af20:	0800af83 	.word	0x0800af83
 800af24:	0800af43 	.word	0x0800af43
 800af28:	0800af39 	.word	0x0800af39
 800af2c:	0800af83 	.word	0x0800af83
 800af30:	0800af5b 	.word	0x0800af5b
 800af34:	0800af4d 	.word	0x0800af4d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800af38:	6839      	ldr	r1, [r7, #0]
 800af3a:	6878      	ldr	r0, [r7, #4]
 800af3c:	f000 fa3c 	bl	800b3b8 <USBD_GetDescriptor>
          break;
 800af40:	e024      	b.n	800af8c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800af42:	6839      	ldr	r1, [r7, #0]
 800af44:	6878      	ldr	r0, [r7, #4]
 800af46:	f000 fba1 	bl	800b68c <USBD_SetAddress>
          break;
 800af4a:	e01f      	b.n	800af8c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800af4c:	6839      	ldr	r1, [r7, #0]
 800af4e:	6878      	ldr	r0, [r7, #4]
 800af50:	f000 fbe0 	bl	800b714 <USBD_SetConfig>
 800af54:	4603      	mov	r3, r0
 800af56:	73fb      	strb	r3, [r7, #15]
          break;
 800af58:	e018      	b.n	800af8c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800af5a:	6839      	ldr	r1, [r7, #0]
 800af5c:	6878      	ldr	r0, [r7, #4]
 800af5e:	f000 fc83 	bl	800b868 <USBD_GetConfig>
          break;
 800af62:	e013      	b.n	800af8c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800af64:	6839      	ldr	r1, [r7, #0]
 800af66:	6878      	ldr	r0, [r7, #4]
 800af68:	f000 fcb4 	bl	800b8d4 <USBD_GetStatus>
          break;
 800af6c:	e00e      	b.n	800af8c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800af6e:	6839      	ldr	r1, [r7, #0]
 800af70:	6878      	ldr	r0, [r7, #4]
 800af72:	f000 fce3 	bl	800b93c <USBD_SetFeature>
          break;
 800af76:	e009      	b.n	800af8c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800af78:	6839      	ldr	r1, [r7, #0]
 800af7a:	6878      	ldr	r0, [r7, #4]
 800af7c:	f000 fd07 	bl	800b98e <USBD_ClrFeature>
          break;
 800af80:	e004      	b.n	800af8c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800af82:	6839      	ldr	r1, [r7, #0]
 800af84:	6878      	ldr	r0, [r7, #4]
 800af86:	f000 fd5e 	bl	800ba46 <USBD_CtlError>
          break;
 800af8a:	bf00      	nop
      }
      break;
 800af8c:	e004      	b.n	800af98 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800af8e:	6839      	ldr	r1, [r7, #0]
 800af90:	6878      	ldr	r0, [r7, #4]
 800af92:	f000 fd58 	bl	800ba46 <USBD_CtlError>
      break;
 800af96:	bf00      	nop
  }

  return ret;
 800af98:	7bfb      	ldrb	r3, [r7, #15]
}
 800af9a:	4618      	mov	r0, r3
 800af9c:	3710      	adds	r7, #16
 800af9e:	46bd      	mov	sp, r7
 800afa0:	bd80      	pop	{r7, pc}
 800afa2:	bf00      	nop

0800afa4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b084      	sub	sp, #16
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
 800afac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800afae:	2300      	movs	r3, #0
 800afb0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800afb2:	683b      	ldr	r3, [r7, #0]
 800afb4:	781b      	ldrb	r3, [r3, #0]
 800afb6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800afba:	2b40      	cmp	r3, #64	; 0x40
 800afbc:	d005      	beq.n	800afca <USBD_StdItfReq+0x26>
 800afbe:	2b40      	cmp	r3, #64	; 0x40
 800afc0:	d852      	bhi.n	800b068 <USBD_StdItfReq+0xc4>
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d001      	beq.n	800afca <USBD_StdItfReq+0x26>
 800afc6:	2b20      	cmp	r3, #32
 800afc8:	d14e      	bne.n	800b068 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afd0:	b2db      	uxtb	r3, r3
 800afd2:	3b01      	subs	r3, #1
 800afd4:	2b02      	cmp	r3, #2
 800afd6:	d840      	bhi.n	800b05a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	889b      	ldrh	r3, [r3, #4]
 800afdc:	b2db      	uxtb	r3, r3
 800afde:	2b01      	cmp	r3, #1
 800afe0:	d836      	bhi.n	800b050 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800afe2:	683b      	ldr	r3, [r7, #0]
 800afe4:	889b      	ldrh	r3, [r3, #4]
 800afe6:	b2db      	uxtb	r3, r3
 800afe8:	4619      	mov	r1, r3
 800afea:	6878      	ldr	r0, [r7, #4]
 800afec:	f7ff fed9 	bl	800ada2 <USBD_CoreFindIF>
 800aff0:	4603      	mov	r3, r0
 800aff2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800aff4:	7bbb      	ldrb	r3, [r7, #14]
 800aff6:	2bff      	cmp	r3, #255	; 0xff
 800aff8:	d01d      	beq.n	800b036 <USBD_StdItfReq+0x92>
 800affa:	7bbb      	ldrb	r3, [r7, #14]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d11a      	bne.n	800b036 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b000:	7bba      	ldrb	r2, [r7, #14]
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	32ae      	adds	r2, #174	; 0xae
 800b006:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b00a:	689b      	ldr	r3, [r3, #8]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d00f      	beq.n	800b030 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b010:	7bba      	ldrb	r2, [r7, #14]
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b018:	7bba      	ldrb	r2, [r7, #14]
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	32ae      	adds	r2, #174	; 0xae
 800b01e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b022:	689b      	ldr	r3, [r3, #8]
 800b024:	6839      	ldr	r1, [r7, #0]
 800b026:	6878      	ldr	r0, [r7, #4]
 800b028:	4798      	blx	r3
 800b02a:	4603      	mov	r3, r0
 800b02c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b02e:	e004      	b.n	800b03a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b030:	2303      	movs	r3, #3
 800b032:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b034:	e001      	b.n	800b03a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b036:	2303      	movs	r3, #3
 800b038:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b03a:	683b      	ldr	r3, [r7, #0]
 800b03c:	88db      	ldrh	r3, [r3, #6]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d110      	bne.n	800b064 <USBD_StdItfReq+0xc0>
 800b042:	7bfb      	ldrb	r3, [r7, #15]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d10d      	bne.n	800b064 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b048:	6878      	ldr	r0, [r7, #4]
 800b04a:	f000 fdaa 	bl	800bba2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b04e:	e009      	b.n	800b064 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b050:	6839      	ldr	r1, [r7, #0]
 800b052:	6878      	ldr	r0, [r7, #4]
 800b054:	f000 fcf7 	bl	800ba46 <USBD_CtlError>
          break;
 800b058:	e004      	b.n	800b064 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b05a:	6839      	ldr	r1, [r7, #0]
 800b05c:	6878      	ldr	r0, [r7, #4]
 800b05e:	f000 fcf2 	bl	800ba46 <USBD_CtlError>
          break;
 800b062:	e000      	b.n	800b066 <USBD_StdItfReq+0xc2>
          break;
 800b064:	bf00      	nop
      }
      break;
 800b066:	e004      	b.n	800b072 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b068:	6839      	ldr	r1, [r7, #0]
 800b06a:	6878      	ldr	r0, [r7, #4]
 800b06c:	f000 fceb 	bl	800ba46 <USBD_CtlError>
      break;
 800b070:	bf00      	nop
  }

  return ret;
 800b072:	7bfb      	ldrb	r3, [r7, #15]
}
 800b074:	4618      	mov	r0, r3
 800b076:	3710      	adds	r7, #16
 800b078:	46bd      	mov	sp, r7
 800b07a:	bd80      	pop	{r7, pc}

0800b07c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b084      	sub	sp, #16
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
 800b084:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b086:	2300      	movs	r3, #0
 800b088:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b08a:	683b      	ldr	r3, [r7, #0]
 800b08c:	889b      	ldrh	r3, [r3, #4]
 800b08e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b090:	683b      	ldr	r3, [r7, #0]
 800b092:	781b      	ldrb	r3, [r3, #0]
 800b094:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b098:	2b40      	cmp	r3, #64	; 0x40
 800b09a:	d007      	beq.n	800b0ac <USBD_StdEPReq+0x30>
 800b09c:	2b40      	cmp	r3, #64	; 0x40
 800b09e:	f200 817f 	bhi.w	800b3a0 <USBD_StdEPReq+0x324>
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d02a      	beq.n	800b0fc <USBD_StdEPReq+0x80>
 800b0a6:	2b20      	cmp	r3, #32
 800b0a8:	f040 817a 	bne.w	800b3a0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b0ac:	7bbb      	ldrb	r3, [r7, #14]
 800b0ae:	4619      	mov	r1, r3
 800b0b0:	6878      	ldr	r0, [r7, #4]
 800b0b2:	f7ff fe83 	bl	800adbc <USBD_CoreFindEP>
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b0ba:	7b7b      	ldrb	r3, [r7, #13]
 800b0bc:	2bff      	cmp	r3, #255	; 0xff
 800b0be:	f000 8174 	beq.w	800b3aa <USBD_StdEPReq+0x32e>
 800b0c2:	7b7b      	ldrb	r3, [r7, #13]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	f040 8170 	bne.w	800b3aa <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b0ca:	7b7a      	ldrb	r2, [r7, #13]
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b0d2:	7b7a      	ldrb	r2, [r7, #13]
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	32ae      	adds	r2, #174	; 0xae
 800b0d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0dc:	689b      	ldr	r3, [r3, #8]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	f000 8163 	beq.w	800b3aa <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b0e4:	7b7a      	ldrb	r2, [r7, #13]
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	32ae      	adds	r2, #174	; 0xae
 800b0ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0ee:	689b      	ldr	r3, [r3, #8]
 800b0f0:	6839      	ldr	r1, [r7, #0]
 800b0f2:	6878      	ldr	r0, [r7, #4]
 800b0f4:	4798      	blx	r3
 800b0f6:	4603      	mov	r3, r0
 800b0f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b0fa:	e156      	b.n	800b3aa <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b0fc:	683b      	ldr	r3, [r7, #0]
 800b0fe:	785b      	ldrb	r3, [r3, #1]
 800b100:	2b03      	cmp	r3, #3
 800b102:	d008      	beq.n	800b116 <USBD_StdEPReq+0x9a>
 800b104:	2b03      	cmp	r3, #3
 800b106:	f300 8145 	bgt.w	800b394 <USBD_StdEPReq+0x318>
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	f000 809b 	beq.w	800b246 <USBD_StdEPReq+0x1ca>
 800b110:	2b01      	cmp	r3, #1
 800b112:	d03c      	beq.n	800b18e <USBD_StdEPReq+0x112>
 800b114:	e13e      	b.n	800b394 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b11c:	b2db      	uxtb	r3, r3
 800b11e:	2b02      	cmp	r3, #2
 800b120:	d002      	beq.n	800b128 <USBD_StdEPReq+0xac>
 800b122:	2b03      	cmp	r3, #3
 800b124:	d016      	beq.n	800b154 <USBD_StdEPReq+0xd8>
 800b126:	e02c      	b.n	800b182 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b128:	7bbb      	ldrb	r3, [r7, #14]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d00d      	beq.n	800b14a <USBD_StdEPReq+0xce>
 800b12e:	7bbb      	ldrb	r3, [r7, #14]
 800b130:	2b80      	cmp	r3, #128	; 0x80
 800b132:	d00a      	beq.n	800b14a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b134:	7bbb      	ldrb	r3, [r7, #14]
 800b136:	4619      	mov	r1, r3
 800b138:	6878      	ldr	r0, [r7, #4]
 800b13a:	f001 f881 	bl	800c240 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b13e:	2180      	movs	r1, #128	; 0x80
 800b140:	6878      	ldr	r0, [r7, #4]
 800b142:	f001 f87d 	bl	800c240 <USBD_LL_StallEP>
 800b146:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b148:	e020      	b.n	800b18c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b14a:	6839      	ldr	r1, [r7, #0]
 800b14c:	6878      	ldr	r0, [r7, #4]
 800b14e:	f000 fc7a 	bl	800ba46 <USBD_CtlError>
              break;
 800b152:	e01b      	b.n	800b18c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b154:	683b      	ldr	r3, [r7, #0]
 800b156:	885b      	ldrh	r3, [r3, #2]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d10e      	bne.n	800b17a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b15c:	7bbb      	ldrb	r3, [r7, #14]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d00b      	beq.n	800b17a <USBD_StdEPReq+0xfe>
 800b162:	7bbb      	ldrb	r3, [r7, #14]
 800b164:	2b80      	cmp	r3, #128	; 0x80
 800b166:	d008      	beq.n	800b17a <USBD_StdEPReq+0xfe>
 800b168:	683b      	ldr	r3, [r7, #0]
 800b16a:	88db      	ldrh	r3, [r3, #6]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d104      	bne.n	800b17a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b170:	7bbb      	ldrb	r3, [r7, #14]
 800b172:	4619      	mov	r1, r3
 800b174:	6878      	ldr	r0, [r7, #4]
 800b176:	f001 f863 	bl	800c240 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b17a:	6878      	ldr	r0, [r7, #4]
 800b17c:	f000 fd11 	bl	800bba2 <USBD_CtlSendStatus>

              break;
 800b180:	e004      	b.n	800b18c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b182:	6839      	ldr	r1, [r7, #0]
 800b184:	6878      	ldr	r0, [r7, #4]
 800b186:	f000 fc5e 	bl	800ba46 <USBD_CtlError>
              break;
 800b18a:	bf00      	nop
          }
          break;
 800b18c:	e107      	b.n	800b39e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b194:	b2db      	uxtb	r3, r3
 800b196:	2b02      	cmp	r3, #2
 800b198:	d002      	beq.n	800b1a0 <USBD_StdEPReq+0x124>
 800b19a:	2b03      	cmp	r3, #3
 800b19c:	d016      	beq.n	800b1cc <USBD_StdEPReq+0x150>
 800b19e:	e04b      	b.n	800b238 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b1a0:	7bbb      	ldrb	r3, [r7, #14]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d00d      	beq.n	800b1c2 <USBD_StdEPReq+0x146>
 800b1a6:	7bbb      	ldrb	r3, [r7, #14]
 800b1a8:	2b80      	cmp	r3, #128	; 0x80
 800b1aa:	d00a      	beq.n	800b1c2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b1ac:	7bbb      	ldrb	r3, [r7, #14]
 800b1ae:	4619      	mov	r1, r3
 800b1b0:	6878      	ldr	r0, [r7, #4]
 800b1b2:	f001 f845 	bl	800c240 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b1b6:	2180      	movs	r1, #128	; 0x80
 800b1b8:	6878      	ldr	r0, [r7, #4]
 800b1ba:	f001 f841 	bl	800c240 <USBD_LL_StallEP>
 800b1be:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b1c0:	e040      	b.n	800b244 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b1c2:	6839      	ldr	r1, [r7, #0]
 800b1c4:	6878      	ldr	r0, [r7, #4]
 800b1c6:	f000 fc3e 	bl	800ba46 <USBD_CtlError>
              break;
 800b1ca:	e03b      	b.n	800b244 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b1cc:	683b      	ldr	r3, [r7, #0]
 800b1ce:	885b      	ldrh	r3, [r3, #2]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d136      	bne.n	800b242 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b1d4:	7bbb      	ldrb	r3, [r7, #14]
 800b1d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d004      	beq.n	800b1e8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b1de:	7bbb      	ldrb	r3, [r7, #14]
 800b1e0:	4619      	mov	r1, r3
 800b1e2:	6878      	ldr	r0, [r7, #4]
 800b1e4:	f001 f84b 	bl	800c27e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b1e8:	6878      	ldr	r0, [r7, #4]
 800b1ea:	f000 fcda 	bl	800bba2 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b1ee:	7bbb      	ldrb	r3, [r7, #14]
 800b1f0:	4619      	mov	r1, r3
 800b1f2:	6878      	ldr	r0, [r7, #4]
 800b1f4:	f7ff fde2 	bl	800adbc <USBD_CoreFindEP>
 800b1f8:	4603      	mov	r3, r0
 800b1fa:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b1fc:	7b7b      	ldrb	r3, [r7, #13]
 800b1fe:	2bff      	cmp	r3, #255	; 0xff
 800b200:	d01f      	beq.n	800b242 <USBD_StdEPReq+0x1c6>
 800b202:	7b7b      	ldrb	r3, [r7, #13]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d11c      	bne.n	800b242 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b208:	7b7a      	ldrb	r2, [r7, #13]
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b210:	7b7a      	ldrb	r2, [r7, #13]
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	32ae      	adds	r2, #174	; 0xae
 800b216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b21a:	689b      	ldr	r3, [r3, #8]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d010      	beq.n	800b242 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b220:	7b7a      	ldrb	r2, [r7, #13]
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	32ae      	adds	r2, #174	; 0xae
 800b226:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b22a:	689b      	ldr	r3, [r3, #8]
 800b22c:	6839      	ldr	r1, [r7, #0]
 800b22e:	6878      	ldr	r0, [r7, #4]
 800b230:	4798      	blx	r3
 800b232:	4603      	mov	r3, r0
 800b234:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b236:	e004      	b.n	800b242 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b238:	6839      	ldr	r1, [r7, #0]
 800b23a:	6878      	ldr	r0, [r7, #4]
 800b23c:	f000 fc03 	bl	800ba46 <USBD_CtlError>
              break;
 800b240:	e000      	b.n	800b244 <USBD_StdEPReq+0x1c8>
              break;
 800b242:	bf00      	nop
          }
          break;
 800b244:	e0ab      	b.n	800b39e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b24c:	b2db      	uxtb	r3, r3
 800b24e:	2b02      	cmp	r3, #2
 800b250:	d002      	beq.n	800b258 <USBD_StdEPReq+0x1dc>
 800b252:	2b03      	cmp	r3, #3
 800b254:	d032      	beq.n	800b2bc <USBD_StdEPReq+0x240>
 800b256:	e097      	b.n	800b388 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b258:	7bbb      	ldrb	r3, [r7, #14]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d007      	beq.n	800b26e <USBD_StdEPReq+0x1f2>
 800b25e:	7bbb      	ldrb	r3, [r7, #14]
 800b260:	2b80      	cmp	r3, #128	; 0x80
 800b262:	d004      	beq.n	800b26e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b264:	6839      	ldr	r1, [r7, #0]
 800b266:	6878      	ldr	r0, [r7, #4]
 800b268:	f000 fbed 	bl	800ba46 <USBD_CtlError>
                break;
 800b26c:	e091      	b.n	800b392 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b26e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b272:	2b00      	cmp	r3, #0
 800b274:	da0b      	bge.n	800b28e <USBD_StdEPReq+0x212>
 800b276:	7bbb      	ldrb	r3, [r7, #14]
 800b278:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b27c:	4613      	mov	r3, r2
 800b27e:	009b      	lsls	r3, r3, #2
 800b280:	4413      	add	r3, r2
 800b282:	009b      	lsls	r3, r3, #2
 800b284:	3310      	adds	r3, #16
 800b286:	687a      	ldr	r2, [r7, #4]
 800b288:	4413      	add	r3, r2
 800b28a:	3304      	adds	r3, #4
 800b28c:	e00b      	b.n	800b2a6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b28e:	7bbb      	ldrb	r3, [r7, #14]
 800b290:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b294:	4613      	mov	r3, r2
 800b296:	009b      	lsls	r3, r3, #2
 800b298:	4413      	add	r3, r2
 800b29a:	009b      	lsls	r3, r3, #2
 800b29c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b2a0:	687a      	ldr	r2, [r7, #4]
 800b2a2:	4413      	add	r3, r2
 800b2a4:	3304      	adds	r3, #4
 800b2a6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b2a8:	68bb      	ldr	r3, [r7, #8]
 800b2aa:	2200      	movs	r2, #0
 800b2ac:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b2ae:	68bb      	ldr	r3, [r7, #8]
 800b2b0:	2202      	movs	r2, #2
 800b2b2:	4619      	mov	r1, r3
 800b2b4:	6878      	ldr	r0, [r7, #4]
 800b2b6:	f000 fc37 	bl	800bb28 <USBD_CtlSendData>
              break;
 800b2ba:	e06a      	b.n	800b392 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b2bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	da11      	bge.n	800b2e8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b2c4:	7bbb      	ldrb	r3, [r7, #14]
 800b2c6:	f003 020f 	and.w	r2, r3, #15
 800b2ca:	6879      	ldr	r1, [r7, #4]
 800b2cc:	4613      	mov	r3, r2
 800b2ce:	009b      	lsls	r3, r3, #2
 800b2d0:	4413      	add	r3, r2
 800b2d2:	009b      	lsls	r3, r3, #2
 800b2d4:	440b      	add	r3, r1
 800b2d6:	3324      	adds	r3, #36	; 0x24
 800b2d8:	881b      	ldrh	r3, [r3, #0]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d117      	bne.n	800b30e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b2de:	6839      	ldr	r1, [r7, #0]
 800b2e0:	6878      	ldr	r0, [r7, #4]
 800b2e2:	f000 fbb0 	bl	800ba46 <USBD_CtlError>
                  break;
 800b2e6:	e054      	b.n	800b392 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b2e8:	7bbb      	ldrb	r3, [r7, #14]
 800b2ea:	f003 020f 	and.w	r2, r3, #15
 800b2ee:	6879      	ldr	r1, [r7, #4]
 800b2f0:	4613      	mov	r3, r2
 800b2f2:	009b      	lsls	r3, r3, #2
 800b2f4:	4413      	add	r3, r2
 800b2f6:	009b      	lsls	r3, r3, #2
 800b2f8:	440b      	add	r3, r1
 800b2fa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b2fe:	881b      	ldrh	r3, [r3, #0]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d104      	bne.n	800b30e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b304:	6839      	ldr	r1, [r7, #0]
 800b306:	6878      	ldr	r0, [r7, #4]
 800b308:	f000 fb9d 	bl	800ba46 <USBD_CtlError>
                  break;
 800b30c:	e041      	b.n	800b392 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b30e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b312:	2b00      	cmp	r3, #0
 800b314:	da0b      	bge.n	800b32e <USBD_StdEPReq+0x2b2>
 800b316:	7bbb      	ldrb	r3, [r7, #14]
 800b318:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b31c:	4613      	mov	r3, r2
 800b31e:	009b      	lsls	r3, r3, #2
 800b320:	4413      	add	r3, r2
 800b322:	009b      	lsls	r3, r3, #2
 800b324:	3310      	adds	r3, #16
 800b326:	687a      	ldr	r2, [r7, #4]
 800b328:	4413      	add	r3, r2
 800b32a:	3304      	adds	r3, #4
 800b32c:	e00b      	b.n	800b346 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b32e:	7bbb      	ldrb	r3, [r7, #14]
 800b330:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b334:	4613      	mov	r3, r2
 800b336:	009b      	lsls	r3, r3, #2
 800b338:	4413      	add	r3, r2
 800b33a:	009b      	lsls	r3, r3, #2
 800b33c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b340:	687a      	ldr	r2, [r7, #4]
 800b342:	4413      	add	r3, r2
 800b344:	3304      	adds	r3, #4
 800b346:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b348:	7bbb      	ldrb	r3, [r7, #14]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d002      	beq.n	800b354 <USBD_StdEPReq+0x2d8>
 800b34e:	7bbb      	ldrb	r3, [r7, #14]
 800b350:	2b80      	cmp	r3, #128	; 0x80
 800b352:	d103      	bne.n	800b35c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b354:	68bb      	ldr	r3, [r7, #8]
 800b356:	2200      	movs	r2, #0
 800b358:	601a      	str	r2, [r3, #0]
 800b35a:	e00e      	b.n	800b37a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b35c:	7bbb      	ldrb	r3, [r7, #14]
 800b35e:	4619      	mov	r1, r3
 800b360:	6878      	ldr	r0, [r7, #4]
 800b362:	f000 ffab 	bl	800c2bc <USBD_LL_IsStallEP>
 800b366:	4603      	mov	r3, r0
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d003      	beq.n	800b374 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b36c:	68bb      	ldr	r3, [r7, #8]
 800b36e:	2201      	movs	r2, #1
 800b370:	601a      	str	r2, [r3, #0]
 800b372:	e002      	b.n	800b37a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b374:	68bb      	ldr	r3, [r7, #8]
 800b376:	2200      	movs	r2, #0
 800b378:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b37a:	68bb      	ldr	r3, [r7, #8]
 800b37c:	2202      	movs	r2, #2
 800b37e:	4619      	mov	r1, r3
 800b380:	6878      	ldr	r0, [r7, #4]
 800b382:	f000 fbd1 	bl	800bb28 <USBD_CtlSendData>
              break;
 800b386:	e004      	b.n	800b392 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b388:	6839      	ldr	r1, [r7, #0]
 800b38a:	6878      	ldr	r0, [r7, #4]
 800b38c:	f000 fb5b 	bl	800ba46 <USBD_CtlError>
              break;
 800b390:	bf00      	nop
          }
          break;
 800b392:	e004      	b.n	800b39e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b394:	6839      	ldr	r1, [r7, #0]
 800b396:	6878      	ldr	r0, [r7, #4]
 800b398:	f000 fb55 	bl	800ba46 <USBD_CtlError>
          break;
 800b39c:	bf00      	nop
      }
      break;
 800b39e:	e005      	b.n	800b3ac <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b3a0:	6839      	ldr	r1, [r7, #0]
 800b3a2:	6878      	ldr	r0, [r7, #4]
 800b3a4:	f000 fb4f 	bl	800ba46 <USBD_CtlError>
      break;
 800b3a8:	e000      	b.n	800b3ac <USBD_StdEPReq+0x330>
      break;
 800b3aa:	bf00      	nop
  }

  return ret;
 800b3ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	3710      	adds	r7, #16
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	bd80      	pop	{r7, pc}
	...

0800b3b8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b084      	sub	sp, #16
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
 800b3c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b3ce:	683b      	ldr	r3, [r7, #0]
 800b3d0:	885b      	ldrh	r3, [r3, #2]
 800b3d2:	0a1b      	lsrs	r3, r3, #8
 800b3d4:	b29b      	uxth	r3, r3
 800b3d6:	3b01      	subs	r3, #1
 800b3d8:	2b06      	cmp	r3, #6
 800b3da:	f200 8128 	bhi.w	800b62e <USBD_GetDescriptor+0x276>
 800b3de:	a201      	add	r2, pc, #4	; (adr r2, 800b3e4 <USBD_GetDescriptor+0x2c>)
 800b3e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3e4:	0800b401 	.word	0x0800b401
 800b3e8:	0800b419 	.word	0x0800b419
 800b3ec:	0800b459 	.word	0x0800b459
 800b3f0:	0800b62f 	.word	0x0800b62f
 800b3f4:	0800b62f 	.word	0x0800b62f
 800b3f8:	0800b5cf 	.word	0x0800b5cf
 800b3fc:	0800b5fb 	.word	0x0800b5fb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	687a      	ldr	r2, [r7, #4]
 800b40a:	7c12      	ldrb	r2, [r2, #16]
 800b40c:	f107 0108 	add.w	r1, r7, #8
 800b410:	4610      	mov	r0, r2
 800b412:	4798      	blx	r3
 800b414:	60f8      	str	r0, [r7, #12]
      break;
 800b416:	e112      	b.n	800b63e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	7c1b      	ldrb	r3, [r3, #16]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d10d      	bne.n	800b43c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b428:	f107 0208 	add.w	r2, r7, #8
 800b42c:	4610      	mov	r0, r2
 800b42e:	4798      	blx	r3
 800b430:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	3301      	adds	r3, #1
 800b436:	2202      	movs	r2, #2
 800b438:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b43a:	e100      	b.n	800b63e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b444:	f107 0208 	add.w	r2, r7, #8
 800b448:	4610      	mov	r0, r2
 800b44a:	4798      	blx	r3
 800b44c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	3301      	adds	r3, #1
 800b452:	2202      	movs	r2, #2
 800b454:	701a      	strb	r2, [r3, #0]
      break;
 800b456:	e0f2      	b.n	800b63e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	885b      	ldrh	r3, [r3, #2]
 800b45c:	b2db      	uxtb	r3, r3
 800b45e:	2b05      	cmp	r3, #5
 800b460:	f200 80ac 	bhi.w	800b5bc <USBD_GetDescriptor+0x204>
 800b464:	a201      	add	r2, pc, #4	; (adr r2, 800b46c <USBD_GetDescriptor+0xb4>)
 800b466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b46a:	bf00      	nop
 800b46c:	0800b485 	.word	0x0800b485
 800b470:	0800b4b9 	.word	0x0800b4b9
 800b474:	0800b4ed 	.word	0x0800b4ed
 800b478:	0800b521 	.word	0x0800b521
 800b47c:	0800b555 	.word	0x0800b555
 800b480:	0800b589 	.word	0x0800b589
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b48a:	685b      	ldr	r3, [r3, #4]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d00b      	beq.n	800b4a8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b496:	685b      	ldr	r3, [r3, #4]
 800b498:	687a      	ldr	r2, [r7, #4]
 800b49a:	7c12      	ldrb	r2, [r2, #16]
 800b49c:	f107 0108 	add.w	r1, r7, #8
 800b4a0:	4610      	mov	r0, r2
 800b4a2:	4798      	blx	r3
 800b4a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b4a6:	e091      	b.n	800b5cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b4a8:	6839      	ldr	r1, [r7, #0]
 800b4aa:	6878      	ldr	r0, [r7, #4]
 800b4ac:	f000 facb 	bl	800ba46 <USBD_CtlError>
            err++;
 800b4b0:	7afb      	ldrb	r3, [r7, #11]
 800b4b2:	3301      	adds	r3, #1
 800b4b4:	72fb      	strb	r3, [r7, #11]
          break;
 800b4b6:	e089      	b.n	800b5cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b4be:	689b      	ldr	r3, [r3, #8]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d00b      	beq.n	800b4dc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b4ca:	689b      	ldr	r3, [r3, #8]
 800b4cc:	687a      	ldr	r2, [r7, #4]
 800b4ce:	7c12      	ldrb	r2, [r2, #16]
 800b4d0:	f107 0108 	add.w	r1, r7, #8
 800b4d4:	4610      	mov	r0, r2
 800b4d6:	4798      	blx	r3
 800b4d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b4da:	e077      	b.n	800b5cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b4dc:	6839      	ldr	r1, [r7, #0]
 800b4de:	6878      	ldr	r0, [r7, #4]
 800b4e0:	f000 fab1 	bl	800ba46 <USBD_CtlError>
            err++;
 800b4e4:	7afb      	ldrb	r3, [r7, #11]
 800b4e6:	3301      	adds	r3, #1
 800b4e8:	72fb      	strb	r3, [r7, #11]
          break;
 800b4ea:	e06f      	b.n	800b5cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b4f2:	68db      	ldr	r3, [r3, #12]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d00b      	beq.n	800b510 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b4fe:	68db      	ldr	r3, [r3, #12]
 800b500:	687a      	ldr	r2, [r7, #4]
 800b502:	7c12      	ldrb	r2, [r2, #16]
 800b504:	f107 0108 	add.w	r1, r7, #8
 800b508:	4610      	mov	r0, r2
 800b50a:	4798      	blx	r3
 800b50c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b50e:	e05d      	b.n	800b5cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b510:	6839      	ldr	r1, [r7, #0]
 800b512:	6878      	ldr	r0, [r7, #4]
 800b514:	f000 fa97 	bl	800ba46 <USBD_CtlError>
            err++;
 800b518:	7afb      	ldrb	r3, [r7, #11]
 800b51a:	3301      	adds	r3, #1
 800b51c:	72fb      	strb	r3, [r7, #11]
          break;
 800b51e:	e055      	b.n	800b5cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b526:	691b      	ldr	r3, [r3, #16]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d00b      	beq.n	800b544 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b532:	691b      	ldr	r3, [r3, #16]
 800b534:	687a      	ldr	r2, [r7, #4]
 800b536:	7c12      	ldrb	r2, [r2, #16]
 800b538:	f107 0108 	add.w	r1, r7, #8
 800b53c:	4610      	mov	r0, r2
 800b53e:	4798      	blx	r3
 800b540:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b542:	e043      	b.n	800b5cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b544:	6839      	ldr	r1, [r7, #0]
 800b546:	6878      	ldr	r0, [r7, #4]
 800b548:	f000 fa7d 	bl	800ba46 <USBD_CtlError>
            err++;
 800b54c:	7afb      	ldrb	r3, [r7, #11]
 800b54e:	3301      	adds	r3, #1
 800b550:	72fb      	strb	r3, [r7, #11]
          break;
 800b552:	e03b      	b.n	800b5cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b55a:	695b      	ldr	r3, [r3, #20]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d00b      	beq.n	800b578 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b566:	695b      	ldr	r3, [r3, #20]
 800b568:	687a      	ldr	r2, [r7, #4]
 800b56a:	7c12      	ldrb	r2, [r2, #16]
 800b56c:	f107 0108 	add.w	r1, r7, #8
 800b570:	4610      	mov	r0, r2
 800b572:	4798      	blx	r3
 800b574:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b576:	e029      	b.n	800b5cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b578:	6839      	ldr	r1, [r7, #0]
 800b57a:	6878      	ldr	r0, [r7, #4]
 800b57c:	f000 fa63 	bl	800ba46 <USBD_CtlError>
            err++;
 800b580:	7afb      	ldrb	r3, [r7, #11]
 800b582:	3301      	adds	r3, #1
 800b584:	72fb      	strb	r3, [r7, #11]
          break;
 800b586:	e021      	b.n	800b5cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b58e:	699b      	ldr	r3, [r3, #24]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d00b      	beq.n	800b5ac <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b59a:	699b      	ldr	r3, [r3, #24]
 800b59c:	687a      	ldr	r2, [r7, #4]
 800b59e:	7c12      	ldrb	r2, [r2, #16]
 800b5a0:	f107 0108 	add.w	r1, r7, #8
 800b5a4:	4610      	mov	r0, r2
 800b5a6:	4798      	blx	r3
 800b5a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b5aa:	e00f      	b.n	800b5cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b5ac:	6839      	ldr	r1, [r7, #0]
 800b5ae:	6878      	ldr	r0, [r7, #4]
 800b5b0:	f000 fa49 	bl	800ba46 <USBD_CtlError>
            err++;
 800b5b4:	7afb      	ldrb	r3, [r7, #11]
 800b5b6:	3301      	adds	r3, #1
 800b5b8:	72fb      	strb	r3, [r7, #11]
          break;
 800b5ba:	e007      	b.n	800b5cc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b5bc:	6839      	ldr	r1, [r7, #0]
 800b5be:	6878      	ldr	r0, [r7, #4]
 800b5c0:	f000 fa41 	bl	800ba46 <USBD_CtlError>
          err++;
 800b5c4:	7afb      	ldrb	r3, [r7, #11]
 800b5c6:	3301      	adds	r3, #1
 800b5c8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b5ca:	bf00      	nop
      }
      break;
 800b5cc:	e037      	b.n	800b63e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	7c1b      	ldrb	r3, [r3, #16]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d109      	bne.n	800b5ea <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5de:	f107 0208 	add.w	r2, r7, #8
 800b5e2:	4610      	mov	r0, r2
 800b5e4:	4798      	blx	r3
 800b5e6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b5e8:	e029      	b.n	800b63e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b5ea:	6839      	ldr	r1, [r7, #0]
 800b5ec:	6878      	ldr	r0, [r7, #4]
 800b5ee:	f000 fa2a 	bl	800ba46 <USBD_CtlError>
        err++;
 800b5f2:	7afb      	ldrb	r3, [r7, #11]
 800b5f4:	3301      	adds	r3, #1
 800b5f6:	72fb      	strb	r3, [r7, #11]
      break;
 800b5f8:	e021      	b.n	800b63e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	7c1b      	ldrb	r3, [r3, #16]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d10d      	bne.n	800b61e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b60a:	f107 0208 	add.w	r2, r7, #8
 800b60e:	4610      	mov	r0, r2
 800b610:	4798      	blx	r3
 800b612:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	3301      	adds	r3, #1
 800b618:	2207      	movs	r2, #7
 800b61a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b61c:	e00f      	b.n	800b63e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b61e:	6839      	ldr	r1, [r7, #0]
 800b620:	6878      	ldr	r0, [r7, #4]
 800b622:	f000 fa10 	bl	800ba46 <USBD_CtlError>
        err++;
 800b626:	7afb      	ldrb	r3, [r7, #11]
 800b628:	3301      	adds	r3, #1
 800b62a:	72fb      	strb	r3, [r7, #11]
      break;
 800b62c:	e007      	b.n	800b63e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b62e:	6839      	ldr	r1, [r7, #0]
 800b630:	6878      	ldr	r0, [r7, #4]
 800b632:	f000 fa08 	bl	800ba46 <USBD_CtlError>
      err++;
 800b636:	7afb      	ldrb	r3, [r7, #11]
 800b638:	3301      	adds	r3, #1
 800b63a:	72fb      	strb	r3, [r7, #11]
      break;
 800b63c:	bf00      	nop
  }

  if (err != 0U)
 800b63e:	7afb      	ldrb	r3, [r7, #11]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d11e      	bne.n	800b682 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b644:	683b      	ldr	r3, [r7, #0]
 800b646:	88db      	ldrh	r3, [r3, #6]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d016      	beq.n	800b67a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b64c:	893b      	ldrh	r3, [r7, #8]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d00e      	beq.n	800b670 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b652:	683b      	ldr	r3, [r7, #0]
 800b654:	88da      	ldrh	r2, [r3, #6]
 800b656:	893b      	ldrh	r3, [r7, #8]
 800b658:	4293      	cmp	r3, r2
 800b65a:	bf28      	it	cs
 800b65c:	4613      	movcs	r3, r2
 800b65e:	b29b      	uxth	r3, r3
 800b660:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b662:	893b      	ldrh	r3, [r7, #8]
 800b664:	461a      	mov	r2, r3
 800b666:	68f9      	ldr	r1, [r7, #12]
 800b668:	6878      	ldr	r0, [r7, #4]
 800b66a:	f000 fa5d 	bl	800bb28 <USBD_CtlSendData>
 800b66e:	e009      	b.n	800b684 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b670:	6839      	ldr	r1, [r7, #0]
 800b672:	6878      	ldr	r0, [r7, #4]
 800b674:	f000 f9e7 	bl	800ba46 <USBD_CtlError>
 800b678:	e004      	b.n	800b684 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b67a:	6878      	ldr	r0, [r7, #4]
 800b67c:	f000 fa91 	bl	800bba2 <USBD_CtlSendStatus>
 800b680:	e000      	b.n	800b684 <USBD_GetDescriptor+0x2cc>
    return;
 800b682:	bf00      	nop
  }
}
 800b684:	3710      	adds	r7, #16
 800b686:	46bd      	mov	sp, r7
 800b688:	bd80      	pop	{r7, pc}
 800b68a:	bf00      	nop

0800b68c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b084      	sub	sp, #16
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]
 800b694:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b696:	683b      	ldr	r3, [r7, #0]
 800b698:	889b      	ldrh	r3, [r3, #4]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d131      	bne.n	800b702 <USBD_SetAddress+0x76>
 800b69e:	683b      	ldr	r3, [r7, #0]
 800b6a0:	88db      	ldrh	r3, [r3, #6]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d12d      	bne.n	800b702 <USBD_SetAddress+0x76>
 800b6a6:	683b      	ldr	r3, [r7, #0]
 800b6a8:	885b      	ldrh	r3, [r3, #2]
 800b6aa:	2b7f      	cmp	r3, #127	; 0x7f
 800b6ac:	d829      	bhi.n	800b702 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b6ae:	683b      	ldr	r3, [r7, #0]
 800b6b0:	885b      	ldrh	r3, [r3, #2]
 800b6b2:	b2db      	uxtb	r3, r3
 800b6b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b6b8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6c0:	b2db      	uxtb	r3, r3
 800b6c2:	2b03      	cmp	r3, #3
 800b6c4:	d104      	bne.n	800b6d0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b6c6:	6839      	ldr	r1, [r7, #0]
 800b6c8:	6878      	ldr	r0, [r7, #4]
 800b6ca:	f000 f9bc 	bl	800ba46 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6ce:	e01d      	b.n	800b70c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	7bfa      	ldrb	r2, [r7, #15]
 800b6d4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b6d8:	7bfb      	ldrb	r3, [r7, #15]
 800b6da:	4619      	mov	r1, r3
 800b6dc:	6878      	ldr	r0, [r7, #4]
 800b6de:	f000 fe19 	bl	800c314 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b6e2:	6878      	ldr	r0, [r7, #4]
 800b6e4:	f000 fa5d 	bl	800bba2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b6e8:	7bfb      	ldrb	r3, [r7, #15]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d004      	beq.n	800b6f8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	2202      	movs	r2, #2
 800b6f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6f6:	e009      	b.n	800b70c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	2201      	movs	r2, #1
 800b6fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b700:	e004      	b.n	800b70c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b702:	6839      	ldr	r1, [r7, #0]
 800b704:	6878      	ldr	r0, [r7, #4]
 800b706:	f000 f99e 	bl	800ba46 <USBD_CtlError>
  }
}
 800b70a:	bf00      	nop
 800b70c:	bf00      	nop
 800b70e:	3710      	adds	r7, #16
 800b710:	46bd      	mov	sp, r7
 800b712:	bd80      	pop	{r7, pc}

0800b714 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b714:	b580      	push	{r7, lr}
 800b716:	b084      	sub	sp, #16
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
 800b71c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b71e:	2300      	movs	r3, #0
 800b720:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b722:	683b      	ldr	r3, [r7, #0]
 800b724:	885b      	ldrh	r3, [r3, #2]
 800b726:	b2da      	uxtb	r2, r3
 800b728:	4b4e      	ldr	r3, [pc, #312]	; (800b864 <USBD_SetConfig+0x150>)
 800b72a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b72c:	4b4d      	ldr	r3, [pc, #308]	; (800b864 <USBD_SetConfig+0x150>)
 800b72e:	781b      	ldrb	r3, [r3, #0]
 800b730:	2b01      	cmp	r3, #1
 800b732:	d905      	bls.n	800b740 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b734:	6839      	ldr	r1, [r7, #0]
 800b736:	6878      	ldr	r0, [r7, #4]
 800b738:	f000 f985 	bl	800ba46 <USBD_CtlError>
    return USBD_FAIL;
 800b73c:	2303      	movs	r3, #3
 800b73e:	e08c      	b.n	800b85a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b746:	b2db      	uxtb	r3, r3
 800b748:	2b02      	cmp	r3, #2
 800b74a:	d002      	beq.n	800b752 <USBD_SetConfig+0x3e>
 800b74c:	2b03      	cmp	r3, #3
 800b74e:	d029      	beq.n	800b7a4 <USBD_SetConfig+0x90>
 800b750:	e075      	b.n	800b83e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b752:	4b44      	ldr	r3, [pc, #272]	; (800b864 <USBD_SetConfig+0x150>)
 800b754:	781b      	ldrb	r3, [r3, #0]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d020      	beq.n	800b79c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b75a:	4b42      	ldr	r3, [pc, #264]	; (800b864 <USBD_SetConfig+0x150>)
 800b75c:	781b      	ldrb	r3, [r3, #0]
 800b75e:	461a      	mov	r2, r3
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b764:	4b3f      	ldr	r3, [pc, #252]	; (800b864 <USBD_SetConfig+0x150>)
 800b766:	781b      	ldrb	r3, [r3, #0]
 800b768:	4619      	mov	r1, r3
 800b76a:	6878      	ldr	r0, [r7, #4]
 800b76c:	f7fe ffe7 	bl	800a73e <USBD_SetClassConfig>
 800b770:	4603      	mov	r3, r0
 800b772:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b774:	7bfb      	ldrb	r3, [r7, #15]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d008      	beq.n	800b78c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b77a:	6839      	ldr	r1, [r7, #0]
 800b77c:	6878      	ldr	r0, [r7, #4]
 800b77e:	f000 f962 	bl	800ba46 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	2202      	movs	r2, #2
 800b786:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b78a:	e065      	b.n	800b858 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b78c:	6878      	ldr	r0, [r7, #4]
 800b78e:	f000 fa08 	bl	800bba2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	2203      	movs	r2, #3
 800b796:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b79a:	e05d      	b.n	800b858 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b79c:	6878      	ldr	r0, [r7, #4]
 800b79e:	f000 fa00 	bl	800bba2 <USBD_CtlSendStatus>
      break;
 800b7a2:	e059      	b.n	800b858 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b7a4:	4b2f      	ldr	r3, [pc, #188]	; (800b864 <USBD_SetConfig+0x150>)
 800b7a6:	781b      	ldrb	r3, [r3, #0]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d112      	bne.n	800b7d2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	2202      	movs	r2, #2
 800b7b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b7b4:	4b2b      	ldr	r3, [pc, #172]	; (800b864 <USBD_SetConfig+0x150>)
 800b7b6:	781b      	ldrb	r3, [r3, #0]
 800b7b8:	461a      	mov	r2, r3
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b7be:	4b29      	ldr	r3, [pc, #164]	; (800b864 <USBD_SetConfig+0x150>)
 800b7c0:	781b      	ldrb	r3, [r3, #0]
 800b7c2:	4619      	mov	r1, r3
 800b7c4:	6878      	ldr	r0, [r7, #4]
 800b7c6:	f7fe ffd6 	bl	800a776 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b7ca:	6878      	ldr	r0, [r7, #4]
 800b7cc:	f000 f9e9 	bl	800bba2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b7d0:	e042      	b.n	800b858 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b7d2:	4b24      	ldr	r3, [pc, #144]	; (800b864 <USBD_SetConfig+0x150>)
 800b7d4:	781b      	ldrb	r3, [r3, #0]
 800b7d6:	461a      	mov	r2, r3
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	685b      	ldr	r3, [r3, #4]
 800b7dc:	429a      	cmp	r2, r3
 800b7de:	d02a      	beq.n	800b836 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	685b      	ldr	r3, [r3, #4]
 800b7e4:	b2db      	uxtb	r3, r3
 800b7e6:	4619      	mov	r1, r3
 800b7e8:	6878      	ldr	r0, [r7, #4]
 800b7ea:	f7fe ffc4 	bl	800a776 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b7ee:	4b1d      	ldr	r3, [pc, #116]	; (800b864 <USBD_SetConfig+0x150>)
 800b7f0:	781b      	ldrb	r3, [r3, #0]
 800b7f2:	461a      	mov	r2, r3
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b7f8:	4b1a      	ldr	r3, [pc, #104]	; (800b864 <USBD_SetConfig+0x150>)
 800b7fa:	781b      	ldrb	r3, [r3, #0]
 800b7fc:	4619      	mov	r1, r3
 800b7fe:	6878      	ldr	r0, [r7, #4]
 800b800:	f7fe ff9d 	bl	800a73e <USBD_SetClassConfig>
 800b804:	4603      	mov	r3, r0
 800b806:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b808:	7bfb      	ldrb	r3, [r7, #15]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d00f      	beq.n	800b82e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b80e:	6839      	ldr	r1, [r7, #0]
 800b810:	6878      	ldr	r0, [r7, #4]
 800b812:	f000 f918 	bl	800ba46 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	685b      	ldr	r3, [r3, #4]
 800b81a:	b2db      	uxtb	r3, r3
 800b81c:	4619      	mov	r1, r3
 800b81e:	6878      	ldr	r0, [r7, #4]
 800b820:	f7fe ffa9 	bl	800a776 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	2202      	movs	r2, #2
 800b828:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b82c:	e014      	b.n	800b858 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b82e:	6878      	ldr	r0, [r7, #4]
 800b830:	f000 f9b7 	bl	800bba2 <USBD_CtlSendStatus>
      break;
 800b834:	e010      	b.n	800b858 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b836:	6878      	ldr	r0, [r7, #4]
 800b838:	f000 f9b3 	bl	800bba2 <USBD_CtlSendStatus>
      break;
 800b83c:	e00c      	b.n	800b858 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b83e:	6839      	ldr	r1, [r7, #0]
 800b840:	6878      	ldr	r0, [r7, #4]
 800b842:	f000 f900 	bl	800ba46 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b846:	4b07      	ldr	r3, [pc, #28]	; (800b864 <USBD_SetConfig+0x150>)
 800b848:	781b      	ldrb	r3, [r3, #0]
 800b84a:	4619      	mov	r1, r3
 800b84c:	6878      	ldr	r0, [r7, #4]
 800b84e:	f7fe ff92 	bl	800a776 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b852:	2303      	movs	r3, #3
 800b854:	73fb      	strb	r3, [r7, #15]
      break;
 800b856:	bf00      	nop
  }

  return ret;
 800b858:	7bfb      	ldrb	r3, [r7, #15]
}
 800b85a:	4618      	mov	r0, r3
 800b85c:	3710      	adds	r7, #16
 800b85e:	46bd      	mov	sp, r7
 800b860:	bd80      	pop	{r7, pc}
 800b862:	bf00      	nop
 800b864:	2000045c 	.word	0x2000045c

0800b868 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b868:	b580      	push	{r7, lr}
 800b86a:	b082      	sub	sp, #8
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	6078      	str	r0, [r7, #4]
 800b870:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b872:	683b      	ldr	r3, [r7, #0]
 800b874:	88db      	ldrh	r3, [r3, #6]
 800b876:	2b01      	cmp	r3, #1
 800b878:	d004      	beq.n	800b884 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b87a:	6839      	ldr	r1, [r7, #0]
 800b87c:	6878      	ldr	r0, [r7, #4]
 800b87e:	f000 f8e2 	bl	800ba46 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b882:	e023      	b.n	800b8cc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b88a:	b2db      	uxtb	r3, r3
 800b88c:	2b02      	cmp	r3, #2
 800b88e:	dc02      	bgt.n	800b896 <USBD_GetConfig+0x2e>
 800b890:	2b00      	cmp	r3, #0
 800b892:	dc03      	bgt.n	800b89c <USBD_GetConfig+0x34>
 800b894:	e015      	b.n	800b8c2 <USBD_GetConfig+0x5a>
 800b896:	2b03      	cmp	r3, #3
 800b898:	d00b      	beq.n	800b8b2 <USBD_GetConfig+0x4a>
 800b89a:	e012      	b.n	800b8c2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	2200      	movs	r2, #0
 800b8a0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	3308      	adds	r3, #8
 800b8a6:	2201      	movs	r2, #1
 800b8a8:	4619      	mov	r1, r3
 800b8aa:	6878      	ldr	r0, [r7, #4]
 800b8ac:	f000 f93c 	bl	800bb28 <USBD_CtlSendData>
        break;
 800b8b0:	e00c      	b.n	800b8cc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	3304      	adds	r3, #4
 800b8b6:	2201      	movs	r2, #1
 800b8b8:	4619      	mov	r1, r3
 800b8ba:	6878      	ldr	r0, [r7, #4]
 800b8bc:	f000 f934 	bl	800bb28 <USBD_CtlSendData>
        break;
 800b8c0:	e004      	b.n	800b8cc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b8c2:	6839      	ldr	r1, [r7, #0]
 800b8c4:	6878      	ldr	r0, [r7, #4]
 800b8c6:	f000 f8be 	bl	800ba46 <USBD_CtlError>
        break;
 800b8ca:	bf00      	nop
}
 800b8cc:	bf00      	nop
 800b8ce:	3708      	adds	r7, #8
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	bd80      	pop	{r7, pc}

0800b8d4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b082      	sub	sp, #8
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
 800b8dc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b8e4:	b2db      	uxtb	r3, r3
 800b8e6:	3b01      	subs	r3, #1
 800b8e8:	2b02      	cmp	r3, #2
 800b8ea:	d81e      	bhi.n	800b92a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b8ec:	683b      	ldr	r3, [r7, #0]
 800b8ee:	88db      	ldrh	r3, [r3, #6]
 800b8f0:	2b02      	cmp	r3, #2
 800b8f2:	d004      	beq.n	800b8fe <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b8f4:	6839      	ldr	r1, [r7, #0]
 800b8f6:	6878      	ldr	r0, [r7, #4]
 800b8f8:	f000 f8a5 	bl	800ba46 <USBD_CtlError>
        break;
 800b8fc:	e01a      	b.n	800b934 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
#else
      pdev->dev_config_status = 0U;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	2200      	movs	r2, #0
 800b902:	60da      	str	r2, [r3, #12]
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d005      	beq.n	800b91a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	68db      	ldr	r3, [r3, #12]
 800b912:	f043 0202 	orr.w	r2, r3, #2
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	330c      	adds	r3, #12
 800b91e:	2202      	movs	r2, #2
 800b920:	4619      	mov	r1, r3
 800b922:	6878      	ldr	r0, [r7, #4]
 800b924:	f000 f900 	bl	800bb28 <USBD_CtlSendData>
      break;
 800b928:	e004      	b.n	800b934 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b92a:	6839      	ldr	r1, [r7, #0]
 800b92c:	6878      	ldr	r0, [r7, #4]
 800b92e:	f000 f88a 	bl	800ba46 <USBD_CtlError>
      break;
 800b932:	bf00      	nop
  }
}
 800b934:	bf00      	nop
 800b936:	3708      	adds	r7, #8
 800b938:	46bd      	mov	sp, r7
 800b93a:	bd80      	pop	{r7, pc}

0800b93c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b93c:	b580      	push	{r7, lr}
 800b93e:	b082      	sub	sp, #8
 800b940:	af00      	add	r7, sp, #0
 800b942:	6078      	str	r0, [r7, #4]
 800b944:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b946:	683b      	ldr	r3, [r7, #0]
 800b948:	885b      	ldrh	r3, [r3, #2]
 800b94a:	2b01      	cmp	r3, #1
 800b94c:	d107      	bne.n	800b95e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	2201      	movs	r2, #1
 800b952:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b956:	6878      	ldr	r0, [r7, #4]
 800b958:	f000 f923 	bl	800bba2 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b95c:	e013      	b.n	800b986 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b95e:	683b      	ldr	r3, [r7, #0]
 800b960:	885b      	ldrh	r3, [r3, #2]
 800b962:	2b02      	cmp	r3, #2
 800b964:	d10b      	bne.n	800b97e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800b966:	683b      	ldr	r3, [r7, #0]
 800b968:	889b      	ldrh	r3, [r3, #4]
 800b96a:	0a1b      	lsrs	r3, r3, #8
 800b96c:	b29b      	uxth	r3, r3
 800b96e:	b2da      	uxtb	r2, r3
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b976:	6878      	ldr	r0, [r7, #4]
 800b978:	f000 f913 	bl	800bba2 <USBD_CtlSendStatus>
}
 800b97c:	e003      	b.n	800b986 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b97e:	6839      	ldr	r1, [r7, #0]
 800b980:	6878      	ldr	r0, [r7, #4]
 800b982:	f000 f860 	bl	800ba46 <USBD_CtlError>
}
 800b986:	bf00      	nop
 800b988:	3708      	adds	r7, #8
 800b98a:	46bd      	mov	sp, r7
 800b98c:	bd80      	pop	{r7, pc}

0800b98e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b98e:	b580      	push	{r7, lr}
 800b990:	b082      	sub	sp, #8
 800b992:	af00      	add	r7, sp, #0
 800b994:	6078      	str	r0, [r7, #4]
 800b996:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b99e:	b2db      	uxtb	r3, r3
 800b9a0:	3b01      	subs	r3, #1
 800b9a2:	2b02      	cmp	r3, #2
 800b9a4:	d80b      	bhi.n	800b9be <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b9a6:	683b      	ldr	r3, [r7, #0]
 800b9a8:	885b      	ldrh	r3, [r3, #2]
 800b9aa:	2b01      	cmp	r3, #1
 800b9ac:	d10c      	bne.n	800b9c8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	2200      	movs	r2, #0
 800b9b2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b9b6:	6878      	ldr	r0, [r7, #4]
 800b9b8:	f000 f8f3 	bl	800bba2 <USBD_CtlSendStatus>
      }
      break;
 800b9bc:	e004      	b.n	800b9c8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b9be:	6839      	ldr	r1, [r7, #0]
 800b9c0:	6878      	ldr	r0, [r7, #4]
 800b9c2:	f000 f840 	bl	800ba46 <USBD_CtlError>
      break;
 800b9c6:	e000      	b.n	800b9ca <USBD_ClrFeature+0x3c>
      break;
 800b9c8:	bf00      	nop
  }
}
 800b9ca:	bf00      	nop
 800b9cc:	3708      	adds	r7, #8
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	bd80      	pop	{r7, pc}

0800b9d2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b9d2:	b580      	push	{r7, lr}
 800b9d4:	b084      	sub	sp, #16
 800b9d6:	af00      	add	r7, sp, #0
 800b9d8:	6078      	str	r0, [r7, #4]
 800b9da:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b9dc:	683b      	ldr	r3, [r7, #0]
 800b9de:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	781a      	ldrb	r2, [r3, #0]
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	3301      	adds	r3, #1
 800b9ec:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	781a      	ldrb	r2, [r3, #0]
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	3301      	adds	r3, #1
 800b9fa:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b9fc:	68f8      	ldr	r0, [r7, #12]
 800b9fe:	f7ff fa41 	bl	800ae84 <SWAPBYTE>
 800ba02:	4603      	mov	r3, r0
 800ba04:	461a      	mov	r2, r3
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	3301      	adds	r3, #1
 800ba0e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	3301      	adds	r3, #1
 800ba14:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ba16:	68f8      	ldr	r0, [r7, #12]
 800ba18:	f7ff fa34 	bl	800ae84 <SWAPBYTE>
 800ba1c:	4603      	mov	r3, r0
 800ba1e:	461a      	mov	r2, r3
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	3301      	adds	r3, #1
 800ba28:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	3301      	adds	r3, #1
 800ba2e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ba30:	68f8      	ldr	r0, [r7, #12]
 800ba32:	f7ff fa27 	bl	800ae84 <SWAPBYTE>
 800ba36:	4603      	mov	r3, r0
 800ba38:	461a      	mov	r2, r3
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	80da      	strh	r2, [r3, #6]
}
 800ba3e:	bf00      	nop
 800ba40:	3710      	adds	r7, #16
 800ba42:	46bd      	mov	sp, r7
 800ba44:	bd80      	pop	{r7, pc}

0800ba46 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba46:	b580      	push	{r7, lr}
 800ba48:	b082      	sub	sp, #8
 800ba4a:	af00      	add	r7, sp, #0
 800ba4c:	6078      	str	r0, [r7, #4]
 800ba4e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ba50:	2180      	movs	r1, #128	; 0x80
 800ba52:	6878      	ldr	r0, [r7, #4]
 800ba54:	f000 fbf4 	bl	800c240 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ba58:	2100      	movs	r1, #0
 800ba5a:	6878      	ldr	r0, [r7, #4]
 800ba5c:	f000 fbf0 	bl	800c240 <USBD_LL_StallEP>
}
 800ba60:	bf00      	nop
 800ba62:	3708      	adds	r7, #8
 800ba64:	46bd      	mov	sp, r7
 800ba66:	bd80      	pop	{r7, pc}

0800ba68 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ba68:	b580      	push	{r7, lr}
 800ba6a:	b086      	sub	sp, #24
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	60f8      	str	r0, [r7, #12]
 800ba70:	60b9      	str	r1, [r7, #8]
 800ba72:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ba74:	2300      	movs	r3, #0
 800ba76:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d036      	beq.n	800baec <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ba82:	6938      	ldr	r0, [r7, #16]
 800ba84:	f000 f836 	bl	800baf4 <USBD_GetLen>
 800ba88:	4603      	mov	r3, r0
 800ba8a:	3301      	adds	r3, #1
 800ba8c:	b29b      	uxth	r3, r3
 800ba8e:	005b      	lsls	r3, r3, #1
 800ba90:	b29a      	uxth	r2, r3
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ba96:	7dfb      	ldrb	r3, [r7, #23]
 800ba98:	68ba      	ldr	r2, [r7, #8]
 800ba9a:	4413      	add	r3, r2
 800ba9c:	687a      	ldr	r2, [r7, #4]
 800ba9e:	7812      	ldrb	r2, [r2, #0]
 800baa0:	701a      	strb	r2, [r3, #0]
  idx++;
 800baa2:	7dfb      	ldrb	r3, [r7, #23]
 800baa4:	3301      	adds	r3, #1
 800baa6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800baa8:	7dfb      	ldrb	r3, [r7, #23]
 800baaa:	68ba      	ldr	r2, [r7, #8]
 800baac:	4413      	add	r3, r2
 800baae:	2203      	movs	r2, #3
 800bab0:	701a      	strb	r2, [r3, #0]
  idx++;
 800bab2:	7dfb      	ldrb	r3, [r7, #23]
 800bab4:	3301      	adds	r3, #1
 800bab6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800bab8:	e013      	b.n	800bae2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800baba:	7dfb      	ldrb	r3, [r7, #23]
 800babc:	68ba      	ldr	r2, [r7, #8]
 800babe:	4413      	add	r3, r2
 800bac0:	693a      	ldr	r2, [r7, #16]
 800bac2:	7812      	ldrb	r2, [r2, #0]
 800bac4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800bac6:	693b      	ldr	r3, [r7, #16]
 800bac8:	3301      	adds	r3, #1
 800baca:	613b      	str	r3, [r7, #16]
    idx++;
 800bacc:	7dfb      	ldrb	r3, [r7, #23]
 800bace:	3301      	adds	r3, #1
 800bad0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800bad2:	7dfb      	ldrb	r3, [r7, #23]
 800bad4:	68ba      	ldr	r2, [r7, #8]
 800bad6:	4413      	add	r3, r2
 800bad8:	2200      	movs	r2, #0
 800bada:	701a      	strb	r2, [r3, #0]
    idx++;
 800badc:	7dfb      	ldrb	r3, [r7, #23]
 800bade:	3301      	adds	r3, #1
 800bae0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800bae2:	693b      	ldr	r3, [r7, #16]
 800bae4:	781b      	ldrb	r3, [r3, #0]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d1e7      	bne.n	800baba <USBD_GetString+0x52>
 800baea:	e000      	b.n	800baee <USBD_GetString+0x86>
    return;
 800baec:	bf00      	nop
  }
}
 800baee:	3718      	adds	r7, #24
 800baf0:	46bd      	mov	sp, r7
 800baf2:	bd80      	pop	{r7, pc}

0800baf4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800baf4:	b480      	push	{r7}
 800baf6:	b085      	sub	sp, #20
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bafc:	2300      	movs	r3, #0
 800bafe:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800bb04:	e005      	b.n	800bb12 <USBD_GetLen+0x1e>
  {
    len++;
 800bb06:	7bfb      	ldrb	r3, [r7, #15]
 800bb08:	3301      	adds	r3, #1
 800bb0a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800bb0c:	68bb      	ldr	r3, [r7, #8]
 800bb0e:	3301      	adds	r3, #1
 800bb10:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800bb12:	68bb      	ldr	r3, [r7, #8]
 800bb14:	781b      	ldrb	r3, [r3, #0]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d1f5      	bne.n	800bb06 <USBD_GetLen+0x12>
  }

  return len;
 800bb1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	3714      	adds	r7, #20
 800bb20:	46bd      	mov	sp, r7
 800bb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb26:	4770      	bx	lr

0800bb28 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800bb28:	b580      	push	{r7, lr}
 800bb2a:	b084      	sub	sp, #16
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	60f8      	str	r0, [r7, #12]
 800bb30:	60b9      	str	r1, [r7, #8]
 800bb32:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	2202      	movs	r2, #2
 800bb38:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	687a      	ldr	r2, [r7, #4]
 800bb40:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	687a      	ldr	r2, [r7, #4]
 800bb46:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	68ba      	ldr	r2, [r7, #8]
 800bb4c:	2100      	movs	r1, #0
 800bb4e:	68f8      	ldr	r0, [r7, #12]
 800bb50:	f000 fbff 	bl	800c352 <USBD_LL_Transmit>

  return USBD_OK;
 800bb54:	2300      	movs	r3, #0
}
 800bb56:	4618      	mov	r0, r3
 800bb58:	3710      	adds	r7, #16
 800bb5a:	46bd      	mov	sp, r7
 800bb5c:	bd80      	pop	{r7, pc}

0800bb5e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800bb5e:	b580      	push	{r7, lr}
 800bb60:	b084      	sub	sp, #16
 800bb62:	af00      	add	r7, sp, #0
 800bb64:	60f8      	str	r0, [r7, #12]
 800bb66:	60b9      	str	r1, [r7, #8]
 800bb68:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	68ba      	ldr	r2, [r7, #8]
 800bb6e:	2100      	movs	r1, #0
 800bb70:	68f8      	ldr	r0, [r7, #12]
 800bb72:	f000 fbee 	bl	800c352 <USBD_LL_Transmit>

  return USBD_OK;
 800bb76:	2300      	movs	r3, #0
}
 800bb78:	4618      	mov	r0, r3
 800bb7a:	3710      	adds	r7, #16
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	bd80      	pop	{r7, pc}

0800bb80 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b084      	sub	sp, #16
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	60f8      	str	r0, [r7, #12]
 800bb88:	60b9      	str	r1, [r7, #8]
 800bb8a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	68ba      	ldr	r2, [r7, #8]
 800bb90:	2100      	movs	r1, #0
 800bb92:	68f8      	ldr	r0, [r7, #12]
 800bb94:	f000 fbfe 	bl	800c394 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bb98:	2300      	movs	r3, #0
}
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	3710      	adds	r7, #16
 800bb9e:	46bd      	mov	sp, r7
 800bba0:	bd80      	pop	{r7, pc}

0800bba2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bba2:	b580      	push	{r7, lr}
 800bba4:	b082      	sub	sp, #8
 800bba6:	af00      	add	r7, sp, #0
 800bba8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	2204      	movs	r2, #4
 800bbae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	2100      	movs	r1, #0
 800bbb8:	6878      	ldr	r0, [r7, #4]
 800bbba:	f000 fbca 	bl	800c352 <USBD_LL_Transmit>

  return USBD_OK;
 800bbbe:	2300      	movs	r3, #0
}
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	3708      	adds	r7, #8
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	bd80      	pop	{r7, pc}

0800bbc8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b082      	sub	sp, #8
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	2205      	movs	r2, #5
 800bbd4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bbd8:	2300      	movs	r3, #0
 800bbda:	2200      	movs	r2, #0
 800bbdc:	2100      	movs	r1, #0
 800bbde:	6878      	ldr	r0, [r7, #4]
 800bbe0:	f000 fbd8 	bl	800c394 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bbe4:	2300      	movs	r3, #0
}
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	3708      	adds	r7, #8
 800bbea:	46bd      	mov	sp, r7
 800bbec:	bd80      	pop	{r7, pc}
	...

0800bbf0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800bbf4:	2200      	movs	r2, #0
 800bbf6:	490e      	ldr	r1, [pc, #56]	; (800bc30 <MX_USB_DEVICE_Init+0x40>)
 800bbf8:	480e      	ldr	r0, [pc, #56]	; (800bc34 <MX_USB_DEVICE_Init+0x44>)
 800bbfa:	f7fe fd07 	bl	800a60c <USBD_Init>
 800bbfe:	4603      	mov	r3, r0
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d001      	beq.n	800bc08 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800bc04:	f7f6 f9b0 	bl	8001f68 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800bc08:	490b      	ldr	r1, [pc, #44]	; (800bc38 <MX_USB_DEVICE_Init+0x48>)
 800bc0a:	480a      	ldr	r0, [pc, #40]	; (800bc34 <MX_USB_DEVICE_Init+0x44>)
 800bc0c:	f7fe fd3c 	bl	800a688 <USBD_RegisterClass>
 800bc10:	4603      	mov	r3, r0
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d001      	beq.n	800bc1a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800bc16:	f7f6 f9a7 	bl	8001f68 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bc1a:	4806      	ldr	r0, [pc, #24]	; (800bc34 <MX_USB_DEVICE_Init+0x44>)
 800bc1c:	f7fe fd78 	bl	800a710 <USBD_Start>
 800bc20:	4603      	mov	r3, r0
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d001      	beq.n	800bc2a <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800bc26:	f7f6 f99f 	bl	8001f68 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bc2a:	bf00      	nop
 800bc2c:	bd80      	pop	{r7, pc}
 800bc2e:	bf00      	nop
 800bc30:	200000f4 	.word	0x200000f4
 800bc34:	20000460 	.word	0x20000460
 800bc38:	20000040 	.word	0x20000040

0800bc3c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc3c:	b480      	push	{r7}
 800bc3e:	b083      	sub	sp, #12
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	4603      	mov	r3, r0
 800bc44:	6039      	str	r1, [r7, #0]
 800bc46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800bc48:	683b      	ldr	r3, [r7, #0]
 800bc4a:	2212      	movs	r2, #18
 800bc4c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800bc4e:	4b03      	ldr	r3, [pc, #12]	; (800bc5c <USBD_FS_DeviceDescriptor+0x20>)
}
 800bc50:	4618      	mov	r0, r3
 800bc52:	370c      	adds	r7, #12
 800bc54:	46bd      	mov	sp, r7
 800bc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5a:	4770      	bx	lr
 800bc5c:	20000110 	.word	0x20000110

0800bc60 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc60:	b480      	push	{r7}
 800bc62:	b083      	sub	sp, #12
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	4603      	mov	r3, r0
 800bc68:	6039      	str	r1, [r7, #0]
 800bc6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bc6c:	683b      	ldr	r3, [r7, #0]
 800bc6e:	2204      	movs	r2, #4
 800bc70:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bc72:	4b03      	ldr	r3, [pc, #12]	; (800bc80 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800bc74:	4618      	mov	r0, r3
 800bc76:	370c      	adds	r7, #12
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7e:	4770      	bx	lr
 800bc80:	20000124 	.word	0x20000124

0800bc84 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc84:	b580      	push	{r7, lr}
 800bc86:	b082      	sub	sp, #8
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	4603      	mov	r3, r0
 800bc8c:	6039      	str	r1, [r7, #0]
 800bc8e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bc90:	79fb      	ldrb	r3, [r7, #7]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d105      	bne.n	800bca2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bc96:	683a      	ldr	r2, [r7, #0]
 800bc98:	4907      	ldr	r1, [pc, #28]	; (800bcb8 <USBD_FS_ProductStrDescriptor+0x34>)
 800bc9a:	4808      	ldr	r0, [pc, #32]	; (800bcbc <USBD_FS_ProductStrDescriptor+0x38>)
 800bc9c:	f7ff fee4 	bl	800ba68 <USBD_GetString>
 800bca0:	e004      	b.n	800bcac <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bca2:	683a      	ldr	r2, [r7, #0]
 800bca4:	4904      	ldr	r1, [pc, #16]	; (800bcb8 <USBD_FS_ProductStrDescriptor+0x34>)
 800bca6:	4805      	ldr	r0, [pc, #20]	; (800bcbc <USBD_FS_ProductStrDescriptor+0x38>)
 800bca8:	f7ff fede 	bl	800ba68 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bcac:	4b02      	ldr	r3, [pc, #8]	; (800bcb8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800bcae:	4618      	mov	r0, r3
 800bcb0:	3708      	adds	r7, #8
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	bd80      	pop	{r7, pc}
 800bcb6:	bf00      	nop
 800bcb8:	2000073c 	.word	0x2000073c
 800bcbc:	0800d8f8 	.word	0x0800d8f8

0800bcc0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	b082      	sub	sp, #8
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	4603      	mov	r3, r0
 800bcc8:	6039      	str	r1, [r7, #0]
 800bcca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bccc:	683a      	ldr	r2, [r7, #0]
 800bcce:	4904      	ldr	r1, [pc, #16]	; (800bce0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800bcd0:	4804      	ldr	r0, [pc, #16]	; (800bce4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800bcd2:	f7ff fec9 	bl	800ba68 <USBD_GetString>
  return USBD_StrDesc;
 800bcd6:	4b02      	ldr	r3, [pc, #8]	; (800bce0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800bcd8:	4618      	mov	r0, r3
 800bcda:	3708      	adds	r7, #8
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	bd80      	pop	{r7, pc}
 800bce0:	2000073c 	.word	0x2000073c
 800bce4:	0800d908 	.word	0x0800d908

0800bce8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b082      	sub	sp, #8
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	4603      	mov	r3, r0
 800bcf0:	6039      	str	r1, [r7, #0]
 800bcf2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bcf4:	683b      	ldr	r3, [r7, #0]
 800bcf6:	221a      	movs	r2, #26
 800bcf8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bcfa:	f000 f843 	bl	800bd84 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800bcfe:	4b02      	ldr	r3, [pc, #8]	; (800bd08 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800bd00:	4618      	mov	r0, r3
 800bd02:	3708      	adds	r7, #8
 800bd04:	46bd      	mov	sp, r7
 800bd06:	bd80      	pop	{r7, pc}
 800bd08:	20000128 	.word	0x20000128

0800bd0c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd0c:	b580      	push	{r7, lr}
 800bd0e:	b082      	sub	sp, #8
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	4603      	mov	r3, r0
 800bd14:	6039      	str	r1, [r7, #0]
 800bd16:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bd18:	79fb      	ldrb	r3, [r7, #7]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d105      	bne.n	800bd2a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bd1e:	683a      	ldr	r2, [r7, #0]
 800bd20:	4907      	ldr	r1, [pc, #28]	; (800bd40 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bd22:	4808      	ldr	r0, [pc, #32]	; (800bd44 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bd24:	f7ff fea0 	bl	800ba68 <USBD_GetString>
 800bd28:	e004      	b.n	800bd34 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bd2a:	683a      	ldr	r2, [r7, #0]
 800bd2c:	4904      	ldr	r1, [pc, #16]	; (800bd40 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bd2e:	4805      	ldr	r0, [pc, #20]	; (800bd44 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bd30:	f7ff fe9a 	bl	800ba68 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bd34:	4b02      	ldr	r3, [pc, #8]	; (800bd40 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800bd36:	4618      	mov	r0, r3
 800bd38:	3708      	adds	r7, #8
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	bd80      	pop	{r7, pc}
 800bd3e:	bf00      	nop
 800bd40:	2000073c 	.word	0x2000073c
 800bd44:	0800d910 	.word	0x0800d910

0800bd48 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	b082      	sub	sp, #8
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	4603      	mov	r3, r0
 800bd50:	6039      	str	r1, [r7, #0]
 800bd52:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bd54:	79fb      	ldrb	r3, [r7, #7]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d105      	bne.n	800bd66 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bd5a:	683a      	ldr	r2, [r7, #0]
 800bd5c:	4907      	ldr	r1, [pc, #28]	; (800bd7c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bd5e:	4808      	ldr	r0, [pc, #32]	; (800bd80 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bd60:	f7ff fe82 	bl	800ba68 <USBD_GetString>
 800bd64:	e004      	b.n	800bd70 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bd66:	683a      	ldr	r2, [r7, #0]
 800bd68:	4904      	ldr	r1, [pc, #16]	; (800bd7c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bd6a:	4805      	ldr	r0, [pc, #20]	; (800bd80 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bd6c:	f7ff fe7c 	bl	800ba68 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bd70:	4b02      	ldr	r3, [pc, #8]	; (800bd7c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bd72:	4618      	mov	r0, r3
 800bd74:	3708      	adds	r7, #8
 800bd76:	46bd      	mov	sp, r7
 800bd78:	bd80      	pop	{r7, pc}
 800bd7a:	bf00      	nop
 800bd7c:	2000073c 	.word	0x2000073c
 800bd80:	0800d91c 	.word	0x0800d91c

0800bd84 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bd84:	b580      	push	{r7, lr}
 800bd86:	b084      	sub	sp, #16
 800bd88:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bd8a:	4b0f      	ldr	r3, [pc, #60]	; (800bdc8 <Get_SerialNum+0x44>)
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bd90:	4b0e      	ldr	r3, [pc, #56]	; (800bdcc <Get_SerialNum+0x48>)
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bd96:	4b0e      	ldr	r3, [pc, #56]	; (800bdd0 <Get_SerialNum+0x4c>)
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bd9c:	68fa      	ldr	r2, [r7, #12]
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	4413      	add	r3, r2
 800bda2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d009      	beq.n	800bdbe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bdaa:	2208      	movs	r2, #8
 800bdac:	4909      	ldr	r1, [pc, #36]	; (800bdd4 <Get_SerialNum+0x50>)
 800bdae:	68f8      	ldr	r0, [r7, #12]
 800bdb0:	f000 f814 	bl	800bddc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bdb4:	2204      	movs	r2, #4
 800bdb6:	4908      	ldr	r1, [pc, #32]	; (800bdd8 <Get_SerialNum+0x54>)
 800bdb8:	68b8      	ldr	r0, [r7, #8]
 800bdba:	f000 f80f 	bl	800bddc <IntToUnicode>
  }
}
 800bdbe:	bf00      	nop
 800bdc0:	3710      	adds	r7, #16
 800bdc2:	46bd      	mov	sp, r7
 800bdc4:	bd80      	pop	{r7, pc}
 800bdc6:	bf00      	nop
 800bdc8:	1fff7a10 	.word	0x1fff7a10
 800bdcc:	1fff7a14 	.word	0x1fff7a14
 800bdd0:	1fff7a18 	.word	0x1fff7a18
 800bdd4:	2000012a 	.word	0x2000012a
 800bdd8:	2000013a 	.word	0x2000013a

0800bddc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bddc:	b480      	push	{r7}
 800bdde:	b087      	sub	sp, #28
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	60f8      	str	r0, [r7, #12]
 800bde4:	60b9      	str	r1, [r7, #8]
 800bde6:	4613      	mov	r3, r2
 800bde8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bdea:	2300      	movs	r3, #0
 800bdec:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bdee:	2300      	movs	r3, #0
 800bdf0:	75fb      	strb	r3, [r7, #23]
 800bdf2:	e027      	b.n	800be44 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	0f1b      	lsrs	r3, r3, #28
 800bdf8:	2b09      	cmp	r3, #9
 800bdfa:	d80b      	bhi.n	800be14 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	0f1b      	lsrs	r3, r3, #28
 800be00:	b2da      	uxtb	r2, r3
 800be02:	7dfb      	ldrb	r3, [r7, #23]
 800be04:	005b      	lsls	r3, r3, #1
 800be06:	4619      	mov	r1, r3
 800be08:	68bb      	ldr	r3, [r7, #8]
 800be0a:	440b      	add	r3, r1
 800be0c:	3230      	adds	r2, #48	; 0x30
 800be0e:	b2d2      	uxtb	r2, r2
 800be10:	701a      	strb	r2, [r3, #0]
 800be12:	e00a      	b.n	800be2a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	0f1b      	lsrs	r3, r3, #28
 800be18:	b2da      	uxtb	r2, r3
 800be1a:	7dfb      	ldrb	r3, [r7, #23]
 800be1c:	005b      	lsls	r3, r3, #1
 800be1e:	4619      	mov	r1, r3
 800be20:	68bb      	ldr	r3, [r7, #8]
 800be22:	440b      	add	r3, r1
 800be24:	3237      	adds	r2, #55	; 0x37
 800be26:	b2d2      	uxtb	r2, r2
 800be28:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	011b      	lsls	r3, r3, #4
 800be2e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800be30:	7dfb      	ldrb	r3, [r7, #23]
 800be32:	005b      	lsls	r3, r3, #1
 800be34:	3301      	adds	r3, #1
 800be36:	68ba      	ldr	r2, [r7, #8]
 800be38:	4413      	add	r3, r2
 800be3a:	2200      	movs	r2, #0
 800be3c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800be3e:	7dfb      	ldrb	r3, [r7, #23]
 800be40:	3301      	adds	r3, #1
 800be42:	75fb      	strb	r3, [r7, #23]
 800be44:	7dfa      	ldrb	r2, [r7, #23]
 800be46:	79fb      	ldrb	r3, [r7, #7]
 800be48:	429a      	cmp	r2, r3
 800be4a:	d3d3      	bcc.n	800bdf4 <IntToUnicode+0x18>
  }
}
 800be4c:	bf00      	nop
 800be4e:	bf00      	nop
 800be50:	371c      	adds	r7, #28
 800be52:	46bd      	mov	sp, r7
 800be54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be58:	4770      	bx	lr
	...

0800be5c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800be5c:	b580      	push	{r7, lr}
 800be5e:	b08a      	sub	sp, #40	; 0x28
 800be60:	af00      	add	r7, sp, #0
 800be62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800be64:	f107 0314 	add.w	r3, r7, #20
 800be68:	2200      	movs	r2, #0
 800be6a:	601a      	str	r2, [r3, #0]
 800be6c:	605a      	str	r2, [r3, #4]
 800be6e:	609a      	str	r2, [r3, #8]
 800be70:	60da      	str	r2, [r3, #12]
 800be72:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800be7c:	d13a      	bne.n	800bef4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800be7e:	2300      	movs	r3, #0
 800be80:	613b      	str	r3, [r7, #16]
 800be82:	4b1e      	ldr	r3, [pc, #120]	; (800befc <HAL_PCD_MspInit+0xa0>)
 800be84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be86:	4a1d      	ldr	r2, [pc, #116]	; (800befc <HAL_PCD_MspInit+0xa0>)
 800be88:	f043 0301 	orr.w	r3, r3, #1
 800be8c:	6313      	str	r3, [r2, #48]	; 0x30
 800be8e:	4b1b      	ldr	r3, [pc, #108]	; (800befc <HAL_PCD_MspInit+0xa0>)
 800be90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be92:	f003 0301 	and.w	r3, r3, #1
 800be96:	613b      	str	r3, [r7, #16]
 800be98:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800be9a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800be9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bea0:	2302      	movs	r3, #2
 800bea2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bea4:	2300      	movs	r3, #0
 800bea6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bea8:	2303      	movs	r3, #3
 800beaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800beac:	230a      	movs	r3, #10
 800beae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800beb0:	f107 0314 	add.w	r3, r7, #20
 800beb4:	4619      	mov	r1, r3
 800beb6:	4812      	ldr	r0, [pc, #72]	; (800bf00 <HAL_PCD_MspInit+0xa4>)
 800beb8:	f7f7 f860 	bl	8002f7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800bebc:	4b0f      	ldr	r3, [pc, #60]	; (800befc <HAL_PCD_MspInit+0xa0>)
 800bebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bec0:	4a0e      	ldr	r2, [pc, #56]	; (800befc <HAL_PCD_MspInit+0xa0>)
 800bec2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bec6:	6353      	str	r3, [r2, #52]	; 0x34
 800bec8:	2300      	movs	r3, #0
 800beca:	60fb      	str	r3, [r7, #12]
 800becc:	4b0b      	ldr	r3, [pc, #44]	; (800befc <HAL_PCD_MspInit+0xa0>)
 800bece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bed0:	4a0a      	ldr	r2, [pc, #40]	; (800befc <HAL_PCD_MspInit+0xa0>)
 800bed2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bed6:	6453      	str	r3, [r2, #68]	; 0x44
 800bed8:	4b08      	ldr	r3, [pc, #32]	; (800befc <HAL_PCD_MspInit+0xa0>)
 800beda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bedc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bee0:	60fb      	str	r3, [r7, #12]
 800bee2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800bee4:	2200      	movs	r2, #0
 800bee6:	2100      	movs	r1, #0
 800bee8:	2043      	movs	r0, #67	; 0x43
 800beea:	f7f6 fc70 	bl	80027ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800beee:	2043      	movs	r0, #67	; 0x43
 800bef0:	f7f6 fc89 	bl	8002806 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800bef4:	bf00      	nop
 800bef6:	3728      	adds	r7, #40	; 0x28
 800bef8:	46bd      	mov	sp, r7
 800befa:	bd80      	pop	{r7, pc}
 800befc:	40023800 	.word	0x40023800
 800bf00:	40020000 	.word	0x40020000

0800bf04 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b082      	sub	sp, #8
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800bf18:	4619      	mov	r1, r3
 800bf1a:	4610      	mov	r0, r2
 800bf1c:	f7fe fc45 	bl	800a7aa <USBD_LL_SetupStage>
}
 800bf20:	bf00      	nop
 800bf22:	3708      	adds	r7, #8
 800bf24:	46bd      	mov	sp, r7
 800bf26:	bd80      	pop	{r7, pc}

0800bf28 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b082      	sub	sp, #8
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	6078      	str	r0, [r7, #4]
 800bf30:	460b      	mov	r3, r1
 800bf32:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800bf3a:	78fa      	ldrb	r2, [r7, #3]
 800bf3c:	6879      	ldr	r1, [r7, #4]
 800bf3e:	4613      	mov	r3, r2
 800bf40:	00db      	lsls	r3, r3, #3
 800bf42:	4413      	add	r3, r2
 800bf44:	009b      	lsls	r3, r3, #2
 800bf46:	440b      	add	r3, r1
 800bf48:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800bf4c:	681a      	ldr	r2, [r3, #0]
 800bf4e:	78fb      	ldrb	r3, [r7, #3]
 800bf50:	4619      	mov	r1, r3
 800bf52:	f7fe fc7f 	bl	800a854 <USBD_LL_DataOutStage>
}
 800bf56:	bf00      	nop
 800bf58:	3708      	adds	r7, #8
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	bd80      	pop	{r7, pc}

0800bf5e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf5e:	b580      	push	{r7, lr}
 800bf60:	b082      	sub	sp, #8
 800bf62:	af00      	add	r7, sp, #0
 800bf64:	6078      	str	r0, [r7, #4]
 800bf66:	460b      	mov	r3, r1
 800bf68:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800bf70:	78fa      	ldrb	r2, [r7, #3]
 800bf72:	6879      	ldr	r1, [r7, #4]
 800bf74:	4613      	mov	r3, r2
 800bf76:	00db      	lsls	r3, r3, #3
 800bf78:	4413      	add	r3, r2
 800bf7a:	009b      	lsls	r3, r3, #2
 800bf7c:	440b      	add	r3, r1
 800bf7e:	334c      	adds	r3, #76	; 0x4c
 800bf80:	681a      	ldr	r2, [r3, #0]
 800bf82:	78fb      	ldrb	r3, [r7, #3]
 800bf84:	4619      	mov	r1, r3
 800bf86:	f7fe fd18 	bl	800a9ba <USBD_LL_DataInStage>
}
 800bf8a:	bf00      	nop
 800bf8c:	3708      	adds	r7, #8
 800bf8e:	46bd      	mov	sp, r7
 800bf90:	bd80      	pop	{r7, pc}

0800bf92 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf92:	b580      	push	{r7, lr}
 800bf94:	b082      	sub	sp, #8
 800bf96:	af00      	add	r7, sp, #0
 800bf98:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	f7fe fe4c 	bl	800ac3e <USBD_LL_SOF>
}
 800bfa6:	bf00      	nop
 800bfa8:	3708      	adds	r7, #8
 800bfaa:	46bd      	mov	sp, r7
 800bfac:	bd80      	pop	{r7, pc}

0800bfae <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfae:	b580      	push	{r7, lr}
 800bfb0:	b084      	sub	sp, #16
 800bfb2:	af00      	add	r7, sp, #0
 800bfb4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bfb6:	2301      	movs	r3, #1
 800bfb8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	68db      	ldr	r3, [r3, #12]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d102      	bne.n	800bfc8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	73fb      	strb	r3, [r7, #15]
 800bfc6:	e008      	b.n	800bfda <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	68db      	ldr	r3, [r3, #12]
 800bfcc:	2b02      	cmp	r3, #2
 800bfce:	d102      	bne.n	800bfd6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800bfd0:	2301      	movs	r3, #1
 800bfd2:	73fb      	strb	r3, [r7, #15]
 800bfd4:	e001      	b.n	800bfda <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800bfd6:	f7f5 ffc7 	bl	8001f68 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bfe0:	7bfa      	ldrb	r2, [r7, #15]
 800bfe2:	4611      	mov	r1, r2
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	f7fe fdec 	bl	800abc2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bff0:	4618      	mov	r0, r3
 800bff2:	f7fe fd94 	bl	800ab1e <USBD_LL_Reset>
}
 800bff6:	bf00      	nop
 800bff8:	3710      	adds	r7, #16
 800bffa:	46bd      	mov	sp, r7
 800bffc:	bd80      	pop	{r7, pc}
	...

0800c000 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c000:	b580      	push	{r7, lr}
 800c002:	b082      	sub	sp, #8
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c00e:	4618      	mov	r0, r3
 800c010:	f7fe fde7 	bl	800abe2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	687a      	ldr	r2, [r7, #4]
 800c020:	6812      	ldr	r2, [r2, #0]
 800c022:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c026:	f043 0301 	orr.w	r3, r3, #1
 800c02a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	6a1b      	ldr	r3, [r3, #32]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d005      	beq.n	800c040 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c034:	4b04      	ldr	r3, [pc, #16]	; (800c048 <HAL_PCD_SuspendCallback+0x48>)
 800c036:	691b      	ldr	r3, [r3, #16]
 800c038:	4a03      	ldr	r2, [pc, #12]	; (800c048 <HAL_PCD_SuspendCallback+0x48>)
 800c03a:	f043 0306 	orr.w	r3, r3, #6
 800c03e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c040:	bf00      	nop
 800c042:	3708      	adds	r7, #8
 800c044:	46bd      	mov	sp, r7
 800c046:	bd80      	pop	{r7, pc}
 800c048:	e000ed00 	.word	0xe000ed00

0800c04c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c04c:	b580      	push	{r7, lr}
 800c04e:	b082      	sub	sp, #8
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c05a:	4618      	mov	r0, r3
 800c05c:	f7fe fdd7 	bl	800ac0e <USBD_LL_Resume>
}
 800c060:	bf00      	nop
 800c062:	3708      	adds	r7, #8
 800c064:	46bd      	mov	sp, r7
 800c066:	bd80      	pop	{r7, pc}

0800c068 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c068:	b580      	push	{r7, lr}
 800c06a:	b082      	sub	sp, #8
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	6078      	str	r0, [r7, #4]
 800c070:	460b      	mov	r3, r1
 800c072:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c07a:	78fa      	ldrb	r2, [r7, #3]
 800c07c:	4611      	mov	r1, r2
 800c07e:	4618      	mov	r0, r3
 800c080:	f7fe fe2f 	bl	800ace2 <USBD_LL_IsoOUTIncomplete>
}
 800c084:	bf00      	nop
 800c086:	3708      	adds	r7, #8
 800c088:	46bd      	mov	sp, r7
 800c08a:	bd80      	pop	{r7, pc}

0800c08c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c08c:	b580      	push	{r7, lr}
 800c08e:	b082      	sub	sp, #8
 800c090:	af00      	add	r7, sp, #0
 800c092:	6078      	str	r0, [r7, #4]
 800c094:	460b      	mov	r3, r1
 800c096:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c09e:	78fa      	ldrb	r2, [r7, #3]
 800c0a0:	4611      	mov	r1, r2
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	f7fe fdeb 	bl	800ac7e <USBD_LL_IsoINIncomplete>
}
 800c0a8:	bf00      	nop
 800c0aa:	3708      	adds	r7, #8
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	bd80      	pop	{r7, pc}

0800c0b0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0b0:	b580      	push	{r7, lr}
 800c0b2:	b082      	sub	sp, #8
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c0be:	4618      	mov	r0, r3
 800c0c0:	f7fe fe41 	bl	800ad46 <USBD_LL_DevConnected>
}
 800c0c4:	bf00      	nop
 800c0c6:	3708      	adds	r7, #8
 800c0c8:	46bd      	mov	sp, r7
 800c0ca:	bd80      	pop	{r7, pc}

0800c0cc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b082      	sub	sp, #8
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c0da:	4618      	mov	r0, r3
 800c0dc:	f7fe fe3e 	bl	800ad5c <USBD_LL_DevDisconnected>
}
 800c0e0:	bf00      	nop
 800c0e2:	3708      	adds	r7, #8
 800c0e4:	46bd      	mov	sp, r7
 800c0e6:	bd80      	pop	{r7, pc}

0800c0e8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	b082      	sub	sp, #8
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	781b      	ldrb	r3, [r3, #0]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d13c      	bne.n	800c172 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c0f8:	4a20      	ldr	r2, [pc, #128]	; (800c17c <USBD_LL_Init+0x94>)
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	4a1e      	ldr	r2, [pc, #120]	; (800c17c <USBD_LL_Init+0x94>)
 800c104:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c108:	4b1c      	ldr	r3, [pc, #112]	; (800c17c <USBD_LL_Init+0x94>)
 800c10a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c10e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800c110:	4b1a      	ldr	r3, [pc, #104]	; (800c17c <USBD_LL_Init+0x94>)
 800c112:	2204      	movs	r2, #4
 800c114:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c116:	4b19      	ldr	r3, [pc, #100]	; (800c17c <USBD_LL_Init+0x94>)
 800c118:	2202      	movs	r2, #2
 800c11a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c11c:	4b17      	ldr	r3, [pc, #92]	; (800c17c <USBD_LL_Init+0x94>)
 800c11e:	2200      	movs	r2, #0
 800c120:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c122:	4b16      	ldr	r3, [pc, #88]	; (800c17c <USBD_LL_Init+0x94>)
 800c124:	2202      	movs	r2, #2
 800c126:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c128:	4b14      	ldr	r3, [pc, #80]	; (800c17c <USBD_LL_Init+0x94>)
 800c12a:	2200      	movs	r2, #0
 800c12c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c12e:	4b13      	ldr	r3, [pc, #76]	; (800c17c <USBD_LL_Init+0x94>)
 800c130:	2200      	movs	r2, #0
 800c132:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c134:	4b11      	ldr	r3, [pc, #68]	; (800c17c <USBD_LL_Init+0x94>)
 800c136:	2200      	movs	r2, #0
 800c138:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c13a:	4b10      	ldr	r3, [pc, #64]	; (800c17c <USBD_LL_Init+0x94>)
 800c13c:	2200      	movs	r2, #0
 800c13e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c140:	4b0e      	ldr	r3, [pc, #56]	; (800c17c <USBD_LL_Init+0x94>)
 800c142:	2200      	movs	r2, #0
 800c144:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c146:	480d      	ldr	r0, [pc, #52]	; (800c17c <USBD_LL_Init+0x94>)
 800c148:	f7f9 fc40 	bl	80059cc <HAL_PCD_Init>
 800c14c:	4603      	mov	r3, r0
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d001      	beq.n	800c156 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c152:	f7f5 ff09 	bl	8001f68 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c156:	2180      	movs	r1, #128	; 0x80
 800c158:	4808      	ldr	r0, [pc, #32]	; (800c17c <USBD_LL_Init+0x94>)
 800c15a:	f7fa fe80 	bl	8006e5e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c15e:	2240      	movs	r2, #64	; 0x40
 800c160:	2100      	movs	r1, #0
 800c162:	4806      	ldr	r0, [pc, #24]	; (800c17c <USBD_LL_Init+0x94>)
 800c164:	f7fa fe34 	bl	8006dd0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c168:	2280      	movs	r2, #128	; 0x80
 800c16a:	2101      	movs	r1, #1
 800c16c:	4803      	ldr	r0, [pc, #12]	; (800c17c <USBD_LL_Init+0x94>)
 800c16e:	f7fa fe2f 	bl	8006dd0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c172:	2300      	movs	r3, #0
}
 800c174:	4618      	mov	r0, r3
 800c176:	3708      	adds	r7, #8
 800c178:	46bd      	mov	sp, r7
 800c17a:	bd80      	pop	{r7, pc}
 800c17c:	2000093c 	.word	0x2000093c

0800c180 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c180:	b580      	push	{r7, lr}
 800c182:	b084      	sub	sp, #16
 800c184:	af00      	add	r7, sp, #0
 800c186:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c188:	2300      	movs	r3, #0
 800c18a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c18c:	2300      	movs	r3, #0
 800c18e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c196:	4618      	mov	r0, r3
 800c198:	f7f9 fd35 	bl	8005c06 <HAL_PCD_Start>
 800c19c:	4603      	mov	r3, r0
 800c19e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c1a0:	7bfb      	ldrb	r3, [r7, #15]
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	f000 f930 	bl	800c408 <USBD_Get_USB_Status>
 800c1a8:	4603      	mov	r3, r0
 800c1aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c1ac:	7bbb      	ldrb	r3, [r7, #14]
}
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	3710      	adds	r7, #16
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	bd80      	pop	{r7, pc}

0800c1b6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c1b6:	b580      	push	{r7, lr}
 800c1b8:	b084      	sub	sp, #16
 800c1ba:	af00      	add	r7, sp, #0
 800c1bc:	6078      	str	r0, [r7, #4]
 800c1be:	4608      	mov	r0, r1
 800c1c0:	4611      	mov	r1, r2
 800c1c2:	461a      	mov	r2, r3
 800c1c4:	4603      	mov	r3, r0
 800c1c6:	70fb      	strb	r3, [r7, #3]
 800c1c8:	460b      	mov	r3, r1
 800c1ca:	70bb      	strb	r3, [r7, #2]
 800c1cc:	4613      	mov	r3, r2
 800c1ce:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c1de:	78bb      	ldrb	r3, [r7, #2]
 800c1e0:	883a      	ldrh	r2, [r7, #0]
 800c1e2:	78f9      	ldrb	r1, [r7, #3]
 800c1e4:	f7fa fa06 	bl	80065f4 <HAL_PCD_EP_Open>
 800c1e8:	4603      	mov	r3, r0
 800c1ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c1ec:	7bfb      	ldrb	r3, [r7, #15]
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	f000 f90a 	bl	800c408 <USBD_Get_USB_Status>
 800c1f4:	4603      	mov	r3, r0
 800c1f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c1f8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	3710      	adds	r7, #16
 800c1fe:	46bd      	mov	sp, r7
 800c200:	bd80      	pop	{r7, pc}

0800c202 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c202:	b580      	push	{r7, lr}
 800c204:	b084      	sub	sp, #16
 800c206:	af00      	add	r7, sp, #0
 800c208:	6078      	str	r0, [r7, #4]
 800c20a:	460b      	mov	r3, r1
 800c20c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c20e:	2300      	movs	r3, #0
 800c210:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c212:	2300      	movs	r3, #0
 800c214:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c21c:	78fa      	ldrb	r2, [r7, #3]
 800c21e:	4611      	mov	r1, r2
 800c220:	4618      	mov	r0, r3
 800c222:	f7fa fa4f 	bl	80066c4 <HAL_PCD_EP_Close>
 800c226:	4603      	mov	r3, r0
 800c228:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c22a:	7bfb      	ldrb	r3, [r7, #15]
 800c22c:	4618      	mov	r0, r3
 800c22e:	f000 f8eb 	bl	800c408 <USBD_Get_USB_Status>
 800c232:	4603      	mov	r3, r0
 800c234:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c236:	7bbb      	ldrb	r3, [r7, #14]
}
 800c238:	4618      	mov	r0, r3
 800c23a:	3710      	adds	r7, #16
 800c23c:	46bd      	mov	sp, r7
 800c23e:	bd80      	pop	{r7, pc}

0800c240 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c240:	b580      	push	{r7, lr}
 800c242:	b084      	sub	sp, #16
 800c244:	af00      	add	r7, sp, #0
 800c246:	6078      	str	r0, [r7, #4]
 800c248:	460b      	mov	r3, r1
 800c24a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c24c:	2300      	movs	r3, #0
 800c24e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c250:	2300      	movs	r3, #0
 800c252:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c25a:	78fa      	ldrb	r2, [r7, #3]
 800c25c:	4611      	mov	r1, r2
 800c25e:	4618      	mov	r0, r3
 800c260:	f7fa fb0f 	bl	8006882 <HAL_PCD_EP_SetStall>
 800c264:	4603      	mov	r3, r0
 800c266:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c268:	7bfb      	ldrb	r3, [r7, #15]
 800c26a:	4618      	mov	r0, r3
 800c26c:	f000 f8cc 	bl	800c408 <USBD_Get_USB_Status>
 800c270:	4603      	mov	r3, r0
 800c272:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c274:	7bbb      	ldrb	r3, [r7, #14]
}
 800c276:	4618      	mov	r0, r3
 800c278:	3710      	adds	r7, #16
 800c27a:	46bd      	mov	sp, r7
 800c27c:	bd80      	pop	{r7, pc}

0800c27e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c27e:	b580      	push	{r7, lr}
 800c280:	b084      	sub	sp, #16
 800c282:	af00      	add	r7, sp, #0
 800c284:	6078      	str	r0, [r7, #4]
 800c286:	460b      	mov	r3, r1
 800c288:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c28a:	2300      	movs	r3, #0
 800c28c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c28e:	2300      	movs	r3, #0
 800c290:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c298:	78fa      	ldrb	r2, [r7, #3]
 800c29a:	4611      	mov	r1, r2
 800c29c:	4618      	mov	r0, r3
 800c29e:	f7fa fb54 	bl	800694a <HAL_PCD_EP_ClrStall>
 800c2a2:	4603      	mov	r3, r0
 800c2a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c2a6:	7bfb      	ldrb	r3, [r7, #15]
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	f000 f8ad 	bl	800c408 <USBD_Get_USB_Status>
 800c2ae:	4603      	mov	r3, r0
 800c2b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c2b2:	7bbb      	ldrb	r3, [r7, #14]
}
 800c2b4:	4618      	mov	r0, r3
 800c2b6:	3710      	adds	r7, #16
 800c2b8:	46bd      	mov	sp, r7
 800c2ba:	bd80      	pop	{r7, pc}

0800c2bc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c2bc:	b480      	push	{r7}
 800c2be:	b085      	sub	sp, #20
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	6078      	str	r0, [r7, #4]
 800c2c4:	460b      	mov	r3, r1
 800c2c6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c2ce:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c2d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	da0b      	bge.n	800c2f0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c2d8:	78fb      	ldrb	r3, [r7, #3]
 800c2da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c2de:	68f9      	ldr	r1, [r7, #12]
 800c2e0:	4613      	mov	r3, r2
 800c2e2:	00db      	lsls	r3, r3, #3
 800c2e4:	4413      	add	r3, r2
 800c2e6:	009b      	lsls	r3, r3, #2
 800c2e8:	440b      	add	r3, r1
 800c2ea:	333e      	adds	r3, #62	; 0x3e
 800c2ec:	781b      	ldrb	r3, [r3, #0]
 800c2ee:	e00b      	b.n	800c308 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c2f0:	78fb      	ldrb	r3, [r7, #3]
 800c2f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c2f6:	68f9      	ldr	r1, [r7, #12]
 800c2f8:	4613      	mov	r3, r2
 800c2fa:	00db      	lsls	r3, r3, #3
 800c2fc:	4413      	add	r3, r2
 800c2fe:	009b      	lsls	r3, r3, #2
 800c300:	440b      	add	r3, r1
 800c302:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800c306:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c308:	4618      	mov	r0, r3
 800c30a:	3714      	adds	r7, #20
 800c30c:	46bd      	mov	sp, r7
 800c30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c312:	4770      	bx	lr

0800c314 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c314:	b580      	push	{r7, lr}
 800c316:	b084      	sub	sp, #16
 800c318:	af00      	add	r7, sp, #0
 800c31a:	6078      	str	r0, [r7, #4]
 800c31c:	460b      	mov	r3, r1
 800c31e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c320:	2300      	movs	r3, #0
 800c322:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c324:	2300      	movs	r3, #0
 800c326:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c32e:	78fa      	ldrb	r2, [r7, #3]
 800c330:	4611      	mov	r1, r2
 800c332:	4618      	mov	r0, r3
 800c334:	f7fa f939 	bl	80065aa <HAL_PCD_SetAddress>
 800c338:	4603      	mov	r3, r0
 800c33a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c33c:	7bfb      	ldrb	r3, [r7, #15]
 800c33e:	4618      	mov	r0, r3
 800c340:	f000 f862 	bl	800c408 <USBD_Get_USB_Status>
 800c344:	4603      	mov	r3, r0
 800c346:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c348:	7bbb      	ldrb	r3, [r7, #14]
}
 800c34a:	4618      	mov	r0, r3
 800c34c:	3710      	adds	r7, #16
 800c34e:	46bd      	mov	sp, r7
 800c350:	bd80      	pop	{r7, pc}

0800c352 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c352:	b580      	push	{r7, lr}
 800c354:	b086      	sub	sp, #24
 800c356:	af00      	add	r7, sp, #0
 800c358:	60f8      	str	r0, [r7, #12]
 800c35a:	607a      	str	r2, [r7, #4]
 800c35c:	603b      	str	r3, [r7, #0]
 800c35e:	460b      	mov	r3, r1
 800c360:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c362:	2300      	movs	r3, #0
 800c364:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c366:	2300      	movs	r3, #0
 800c368:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c370:	7af9      	ldrb	r1, [r7, #11]
 800c372:	683b      	ldr	r3, [r7, #0]
 800c374:	687a      	ldr	r2, [r7, #4]
 800c376:	f7fa fa3a 	bl	80067ee <HAL_PCD_EP_Transmit>
 800c37a:	4603      	mov	r3, r0
 800c37c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c37e:	7dfb      	ldrb	r3, [r7, #23]
 800c380:	4618      	mov	r0, r3
 800c382:	f000 f841 	bl	800c408 <USBD_Get_USB_Status>
 800c386:	4603      	mov	r3, r0
 800c388:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c38a:	7dbb      	ldrb	r3, [r7, #22]
}
 800c38c:	4618      	mov	r0, r3
 800c38e:	3718      	adds	r7, #24
 800c390:	46bd      	mov	sp, r7
 800c392:	bd80      	pop	{r7, pc}

0800c394 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c394:	b580      	push	{r7, lr}
 800c396:	b086      	sub	sp, #24
 800c398:	af00      	add	r7, sp, #0
 800c39a:	60f8      	str	r0, [r7, #12]
 800c39c:	607a      	str	r2, [r7, #4]
 800c39e:	603b      	str	r3, [r7, #0]
 800c3a0:	460b      	mov	r3, r1
 800c3a2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c3b2:	7af9      	ldrb	r1, [r7, #11]
 800c3b4:	683b      	ldr	r3, [r7, #0]
 800c3b6:	687a      	ldr	r2, [r7, #4]
 800c3b8:	f7fa f9ce 	bl	8006758 <HAL_PCD_EP_Receive>
 800c3bc:	4603      	mov	r3, r0
 800c3be:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c3c0:	7dfb      	ldrb	r3, [r7, #23]
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	f000 f820 	bl	800c408 <USBD_Get_USB_Status>
 800c3c8:	4603      	mov	r3, r0
 800c3ca:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c3cc:	7dbb      	ldrb	r3, [r7, #22]
}
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	3718      	adds	r7, #24
 800c3d2:	46bd      	mov	sp, r7
 800c3d4:	bd80      	pop	{r7, pc}
	...

0800c3d8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c3d8:	b480      	push	{r7}
 800c3da:	b083      	sub	sp, #12
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c3e0:	4b03      	ldr	r3, [pc, #12]	; (800c3f0 <USBD_static_malloc+0x18>)
}
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	370c      	adds	r7, #12
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ec:	4770      	bx	lr
 800c3ee:	bf00      	nop
 800c3f0:	20000e48 	.word	0x20000e48

0800c3f4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c3f4:	b480      	push	{r7}
 800c3f6:	b083      	sub	sp, #12
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	6078      	str	r0, [r7, #4]

}
 800c3fc:	bf00      	nop
 800c3fe:	370c      	adds	r7, #12
 800c400:	46bd      	mov	sp, r7
 800c402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c406:	4770      	bx	lr

0800c408 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c408:	b480      	push	{r7}
 800c40a:	b085      	sub	sp, #20
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	4603      	mov	r3, r0
 800c410:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c412:	2300      	movs	r3, #0
 800c414:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c416:	79fb      	ldrb	r3, [r7, #7]
 800c418:	2b03      	cmp	r3, #3
 800c41a:	d817      	bhi.n	800c44c <USBD_Get_USB_Status+0x44>
 800c41c:	a201      	add	r2, pc, #4	; (adr r2, 800c424 <USBD_Get_USB_Status+0x1c>)
 800c41e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c422:	bf00      	nop
 800c424:	0800c435 	.word	0x0800c435
 800c428:	0800c43b 	.word	0x0800c43b
 800c42c:	0800c441 	.word	0x0800c441
 800c430:	0800c447 	.word	0x0800c447
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c434:	2300      	movs	r3, #0
 800c436:	73fb      	strb	r3, [r7, #15]
    break;
 800c438:	e00b      	b.n	800c452 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c43a:	2303      	movs	r3, #3
 800c43c:	73fb      	strb	r3, [r7, #15]
    break;
 800c43e:	e008      	b.n	800c452 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c440:	2301      	movs	r3, #1
 800c442:	73fb      	strb	r3, [r7, #15]
    break;
 800c444:	e005      	b.n	800c452 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c446:	2303      	movs	r3, #3
 800c448:	73fb      	strb	r3, [r7, #15]
    break;
 800c44a:	e002      	b.n	800c452 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c44c:	2303      	movs	r3, #3
 800c44e:	73fb      	strb	r3, [r7, #15]
    break;
 800c450:	bf00      	nop
  }
  return usb_status;
 800c452:	7bfb      	ldrb	r3, [r7, #15]
}
 800c454:	4618      	mov	r0, r3
 800c456:	3714      	adds	r7, #20
 800c458:	46bd      	mov	sp, r7
 800c45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c45e:	4770      	bx	lr

0800c460 <__errno>:
 800c460:	4b01      	ldr	r3, [pc, #4]	; (800c468 <__errno+0x8>)
 800c462:	6818      	ldr	r0, [r3, #0]
 800c464:	4770      	bx	lr
 800c466:	bf00      	nop
 800c468:	20000144 	.word	0x20000144

0800c46c <__libc_init_array>:
 800c46c:	b570      	push	{r4, r5, r6, lr}
 800c46e:	4d0d      	ldr	r5, [pc, #52]	; (800c4a4 <__libc_init_array+0x38>)
 800c470:	4c0d      	ldr	r4, [pc, #52]	; (800c4a8 <__libc_init_array+0x3c>)
 800c472:	1b64      	subs	r4, r4, r5
 800c474:	10a4      	asrs	r4, r4, #2
 800c476:	2600      	movs	r6, #0
 800c478:	42a6      	cmp	r6, r4
 800c47a:	d109      	bne.n	800c490 <__libc_init_array+0x24>
 800c47c:	4d0b      	ldr	r5, [pc, #44]	; (800c4ac <__libc_init_array+0x40>)
 800c47e:	4c0c      	ldr	r4, [pc, #48]	; (800c4b0 <__libc_init_array+0x44>)
 800c480:	f001 f9e8 	bl	800d854 <_init>
 800c484:	1b64      	subs	r4, r4, r5
 800c486:	10a4      	asrs	r4, r4, #2
 800c488:	2600      	movs	r6, #0
 800c48a:	42a6      	cmp	r6, r4
 800c48c:	d105      	bne.n	800c49a <__libc_init_array+0x2e>
 800c48e:	bd70      	pop	{r4, r5, r6, pc}
 800c490:	f855 3b04 	ldr.w	r3, [r5], #4
 800c494:	4798      	blx	r3
 800c496:	3601      	adds	r6, #1
 800c498:	e7ee      	b.n	800c478 <__libc_init_array+0xc>
 800c49a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c49e:	4798      	blx	r3
 800c4a0:	3601      	adds	r6, #1
 800c4a2:	e7f2      	b.n	800c48a <__libc_init_array+0x1e>
 800c4a4:	080141cc 	.word	0x080141cc
 800c4a8:	080141cc 	.word	0x080141cc
 800c4ac:	080141cc 	.word	0x080141cc
 800c4b0:	080141d0 	.word	0x080141d0

0800c4b4 <memset>:
 800c4b4:	4402      	add	r2, r0
 800c4b6:	4603      	mov	r3, r0
 800c4b8:	4293      	cmp	r3, r2
 800c4ba:	d100      	bne.n	800c4be <memset+0xa>
 800c4bc:	4770      	bx	lr
 800c4be:	f803 1b01 	strb.w	r1, [r3], #1
 800c4c2:	e7f9      	b.n	800c4b8 <memset+0x4>

0800c4c4 <iprintf>:
 800c4c4:	b40f      	push	{r0, r1, r2, r3}
 800c4c6:	4b0a      	ldr	r3, [pc, #40]	; (800c4f0 <iprintf+0x2c>)
 800c4c8:	b513      	push	{r0, r1, r4, lr}
 800c4ca:	681c      	ldr	r4, [r3, #0]
 800c4cc:	b124      	cbz	r4, 800c4d8 <iprintf+0x14>
 800c4ce:	69a3      	ldr	r3, [r4, #24]
 800c4d0:	b913      	cbnz	r3, 800c4d8 <iprintf+0x14>
 800c4d2:	4620      	mov	r0, r4
 800c4d4:	f000 f89c 	bl	800c610 <__sinit>
 800c4d8:	ab05      	add	r3, sp, #20
 800c4da:	9a04      	ldr	r2, [sp, #16]
 800c4dc:	68a1      	ldr	r1, [r4, #8]
 800c4de:	9301      	str	r3, [sp, #4]
 800c4e0:	4620      	mov	r0, r4
 800c4e2:	f000 fb4f 	bl	800cb84 <_vfiprintf_r>
 800c4e6:	b002      	add	sp, #8
 800c4e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c4ec:	b004      	add	sp, #16
 800c4ee:	4770      	bx	lr
 800c4f0:	20000144 	.word	0x20000144

0800c4f4 <putchar>:
 800c4f4:	4b09      	ldr	r3, [pc, #36]	; (800c51c <putchar+0x28>)
 800c4f6:	b513      	push	{r0, r1, r4, lr}
 800c4f8:	681c      	ldr	r4, [r3, #0]
 800c4fa:	4601      	mov	r1, r0
 800c4fc:	b134      	cbz	r4, 800c50c <putchar+0x18>
 800c4fe:	69a3      	ldr	r3, [r4, #24]
 800c500:	b923      	cbnz	r3, 800c50c <putchar+0x18>
 800c502:	9001      	str	r0, [sp, #4]
 800c504:	4620      	mov	r0, r4
 800c506:	f000 f883 	bl	800c610 <__sinit>
 800c50a:	9901      	ldr	r1, [sp, #4]
 800c50c:	68a2      	ldr	r2, [r4, #8]
 800c50e:	4620      	mov	r0, r4
 800c510:	b002      	add	sp, #8
 800c512:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c516:	f000 bdf9 	b.w	800d10c <_putc_r>
 800c51a:	bf00      	nop
 800c51c:	20000144 	.word	0x20000144

0800c520 <siprintf>:
 800c520:	b40e      	push	{r1, r2, r3}
 800c522:	b500      	push	{lr}
 800c524:	b09c      	sub	sp, #112	; 0x70
 800c526:	ab1d      	add	r3, sp, #116	; 0x74
 800c528:	9002      	str	r0, [sp, #8]
 800c52a:	9006      	str	r0, [sp, #24]
 800c52c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c530:	4809      	ldr	r0, [pc, #36]	; (800c558 <siprintf+0x38>)
 800c532:	9107      	str	r1, [sp, #28]
 800c534:	9104      	str	r1, [sp, #16]
 800c536:	4909      	ldr	r1, [pc, #36]	; (800c55c <siprintf+0x3c>)
 800c538:	f853 2b04 	ldr.w	r2, [r3], #4
 800c53c:	9105      	str	r1, [sp, #20]
 800c53e:	6800      	ldr	r0, [r0, #0]
 800c540:	9301      	str	r3, [sp, #4]
 800c542:	a902      	add	r1, sp, #8
 800c544:	f000 f9f4 	bl	800c930 <_svfiprintf_r>
 800c548:	9b02      	ldr	r3, [sp, #8]
 800c54a:	2200      	movs	r2, #0
 800c54c:	701a      	strb	r2, [r3, #0]
 800c54e:	b01c      	add	sp, #112	; 0x70
 800c550:	f85d eb04 	ldr.w	lr, [sp], #4
 800c554:	b003      	add	sp, #12
 800c556:	4770      	bx	lr
 800c558:	20000144 	.word	0x20000144
 800c55c:	ffff0208 	.word	0xffff0208

0800c560 <std>:
 800c560:	2300      	movs	r3, #0
 800c562:	b510      	push	{r4, lr}
 800c564:	4604      	mov	r4, r0
 800c566:	e9c0 3300 	strd	r3, r3, [r0]
 800c56a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c56e:	6083      	str	r3, [r0, #8]
 800c570:	8181      	strh	r1, [r0, #12]
 800c572:	6643      	str	r3, [r0, #100]	; 0x64
 800c574:	81c2      	strh	r2, [r0, #14]
 800c576:	6183      	str	r3, [r0, #24]
 800c578:	4619      	mov	r1, r3
 800c57a:	2208      	movs	r2, #8
 800c57c:	305c      	adds	r0, #92	; 0x5c
 800c57e:	f7ff ff99 	bl	800c4b4 <memset>
 800c582:	4b05      	ldr	r3, [pc, #20]	; (800c598 <std+0x38>)
 800c584:	6263      	str	r3, [r4, #36]	; 0x24
 800c586:	4b05      	ldr	r3, [pc, #20]	; (800c59c <std+0x3c>)
 800c588:	62a3      	str	r3, [r4, #40]	; 0x28
 800c58a:	4b05      	ldr	r3, [pc, #20]	; (800c5a0 <std+0x40>)
 800c58c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c58e:	4b05      	ldr	r3, [pc, #20]	; (800c5a4 <std+0x44>)
 800c590:	6224      	str	r4, [r4, #32]
 800c592:	6323      	str	r3, [r4, #48]	; 0x30
 800c594:	bd10      	pop	{r4, pc}
 800c596:	bf00      	nop
 800c598:	0800d1bd 	.word	0x0800d1bd
 800c59c:	0800d1df 	.word	0x0800d1df
 800c5a0:	0800d217 	.word	0x0800d217
 800c5a4:	0800d23b 	.word	0x0800d23b

0800c5a8 <_cleanup_r>:
 800c5a8:	4901      	ldr	r1, [pc, #4]	; (800c5b0 <_cleanup_r+0x8>)
 800c5aa:	f000 b8af 	b.w	800c70c <_fwalk_reent>
 800c5ae:	bf00      	nop
 800c5b0:	0800d515 	.word	0x0800d515

0800c5b4 <__sfmoreglue>:
 800c5b4:	b570      	push	{r4, r5, r6, lr}
 800c5b6:	2268      	movs	r2, #104	; 0x68
 800c5b8:	1e4d      	subs	r5, r1, #1
 800c5ba:	4355      	muls	r5, r2
 800c5bc:	460e      	mov	r6, r1
 800c5be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c5c2:	f000 f8e5 	bl	800c790 <_malloc_r>
 800c5c6:	4604      	mov	r4, r0
 800c5c8:	b140      	cbz	r0, 800c5dc <__sfmoreglue+0x28>
 800c5ca:	2100      	movs	r1, #0
 800c5cc:	e9c0 1600 	strd	r1, r6, [r0]
 800c5d0:	300c      	adds	r0, #12
 800c5d2:	60a0      	str	r0, [r4, #8]
 800c5d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c5d8:	f7ff ff6c 	bl	800c4b4 <memset>
 800c5dc:	4620      	mov	r0, r4
 800c5de:	bd70      	pop	{r4, r5, r6, pc}

0800c5e0 <__sfp_lock_acquire>:
 800c5e0:	4801      	ldr	r0, [pc, #4]	; (800c5e8 <__sfp_lock_acquire+0x8>)
 800c5e2:	f000 b8b3 	b.w	800c74c <__retarget_lock_acquire_recursive>
 800c5e6:	bf00      	nop
 800c5e8:	20000e5d 	.word	0x20000e5d

0800c5ec <__sfp_lock_release>:
 800c5ec:	4801      	ldr	r0, [pc, #4]	; (800c5f4 <__sfp_lock_release+0x8>)
 800c5ee:	f000 b8ae 	b.w	800c74e <__retarget_lock_release_recursive>
 800c5f2:	bf00      	nop
 800c5f4:	20000e5d 	.word	0x20000e5d

0800c5f8 <__sinit_lock_acquire>:
 800c5f8:	4801      	ldr	r0, [pc, #4]	; (800c600 <__sinit_lock_acquire+0x8>)
 800c5fa:	f000 b8a7 	b.w	800c74c <__retarget_lock_acquire_recursive>
 800c5fe:	bf00      	nop
 800c600:	20000e5e 	.word	0x20000e5e

0800c604 <__sinit_lock_release>:
 800c604:	4801      	ldr	r0, [pc, #4]	; (800c60c <__sinit_lock_release+0x8>)
 800c606:	f000 b8a2 	b.w	800c74e <__retarget_lock_release_recursive>
 800c60a:	bf00      	nop
 800c60c:	20000e5e 	.word	0x20000e5e

0800c610 <__sinit>:
 800c610:	b510      	push	{r4, lr}
 800c612:	4604      	mov	r4, r0
 800c614:	f7ff fff0 	bl	800c5f8 <__sinit_lock_acquire>
 800c618:	69a3      	ldr	r3, [r4, #24]
 800c61a:	b11b      	cbz	r3, 800c624 <__sinit+0x14>
 800c61c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c620:	f7ff bff0 	b.w	800c604 <__sinit_lock_release>
 800c624:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c628:	6523      	str	r3, [r4, #80]	; 0x50
 800c62a:	4b13      	ldr	r3, [pc, #76]	; (800c678 <__sinit+0x68>)
 800c62c:	4a13      	ldr	r2, [pc, #76]	; (800c67c <__sinit+0x6c>)
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	62a2      	str	r2, [r4, #40]	; 0x28
 800c632:	42a3      	cmp	r3, r4
 800c634:	bf04      	itt	eq
 800c636:	2301      	moveq	r3, #1
 800c638:	61a3      	streq	r3, [r4, #24]
 800c63a:	4620      	mov	r0, r4
 800c63c:	f000 f820 	bl	800c680 <__sfp>
 800c640:	6060      	str	r0, [r4, #4]
 800c642:	4620      	mov	r0, r4
 800c644:	f000 f81c 	bl	800c680 <__sfp>
 800c648:	60a0      	str	r0, [r4, #8]
 800c64a:	4620      	mov	r0, r4
 800c64c:	f000 f818 	bl	800c680 <__sfp>
 800c650:	2200      	movs	r2, #0
 800c652:	60e0      	str	r0, [r4, #12]
 800c654:	2104      	movs	r1, #4
 800c656:	6860      	ldr	r0, [r4, #4]
 800c658:	f7ff ff82 	bl	800c560 <std>
 800c65c:	68a0      	ldr	r0, [r4, #8]
 800c65e:	2201      	movs	r2, #1
 800c660:	2109      	movs	r1, #9
 800c662:	f7ff ff7d 	bl	800c560 <std>
 800c666:	68e0      	ldr	r0, [r4, #12]
 800c668:	2202      	movs	r2, #2
 800c66a:	2112      	movs	r1, #18
 800c66c:	f7ff ff78 	bl	800c560 <std>
 800c670:	2301      	movs	r3, #1
 800c672:	61a3      	str	r3, [r4, #24]
 800c674:	e7d2      	b.n	800c61c <__sinit+0xc>
 800c676:	bf00      	nop
 800c678:	0801412c 	.word	0x0801412c
 800c67c:	0800c5a9 	.word	0x0800c5a9

0800c680 <__sfp>:
 800c680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c682:	4607      	mov	r7, r0
 800c684:	f7ff ffac 	bl	800c5e0 <__sfp_lock_acquire>
 800c688:	4b1e      	ldr	r3, [pc, #120]	; (800c704 <__sfp+0x84>)
 800c68a:	681e      	ldr	r6, [r3, #0]
 800c68c:	69b3      	ldr	r3, [r6, #24]
 800c68e:	b913      	cbnz	r3, 800c696 <__sfp+0x16>
 800c690:	4630      	mov	r0, r6
 800c692:	f7ff ffbd 	bl	800c610 <__sinit>
 800c696:	3648      	adds	r6, #72	; 0x48
 800c698:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c69c:	3b01      	subs	r3, #1
 800c69e:	d503      	bpl.n	800c6a8 <__sfp+0x28>
 800c6a0:	6833      	ldr	r3, [r6, #0]
 800c6a2:	b30b      	cbz	r3, 800c6e8 <__sfp+0x68>
 800c6a4:	6836      	ldr	r6, [r6, #0]
 800c6a6:	e7f7      	b.n	800c698 <__sfp+0x18>
 800c6a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c6ac:	b9d5      	cbnz	r5, 800c6e4 <__sfp+0x64>
 800c6ae:	4b16      	ldr	r3, [pc, #88]	; (800c708 <__sfp+0x88>)
 800c6b0:	60e3      	str	r3, [r4, #12]
 800c6b2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c6b6:	6665      	str	r5, [r4, #100]	; 0x64
 800c6b8:	f000 f847 	bl	800c74a <__retarget_lock_init_recursive>
 800c6bc:	f7ff ff96 	bl	800c5ec <__sfp_lock_release>
 800c6c0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c6c4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c6c8:	6025      	str	r5, [r4, #0]
 800c6ca:	61a5      	str	r5, [r4, #24]
 800c6cc:	2208      	movs	r2, #8
 800c6ce:	4629      	mov	r1, r5
 800c6d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c6d4:	f7ff feee 	bl	800c4b4 <memset>
 800c6d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c6dc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c6e0:	4620      	mov	r0, r4
 800c6e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c6e4:	3468      	adds	r4, #104	; 0x68
 800c6e6:	e7d9      	b.n	800c69c <__sfp+0x1c>
 800c6e8:	2104      	movs	r1, #4
 800c6ea:	4638      	mov	r0, r7
 800c6ec:	f7ff ff62 	bl	800c5b4 <__sfmoreglue>
 800c6f0:	4604      	mov	r4, r0
 800c6f2:	6030      	str	r0, [r6, #0]
 800c6f4:	2800      	cmp	r0, #0
 800c6f6:	d1d5      	bne.n	800c6a4 <__sfp+0x24>
 800c6f8:	f7ff ff78 	bl	800c5ec <__sfp_lock_release>
 800c6fc:	230c      	movs	r3, #12
 800c6fe:	603b      	str	r3, [r7, #0]
 800c700:	e7ee      	b.n	800c6e0 <__sfp+0x60>
 800c702:	bf00      	nop
 800c704:	0801412c 	.word	0x0801412c
 800c708:	ffff0001 	.word	0xffff0001

0800c70c <_fwalk_reent>:
 800c70c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c710:	4606      	mov	r6, r0
 800c712:	4688      	mov	r8, r1
 800c714:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c718:	2700      	movs	r7, #0
 800c71a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c71e:	f1b9 0901 	subs.w	r9, r9, #1
 800c722:	d505      	bpl.n	800c730 <_fwalk_reent+0x24>
 800c724:	6824      	ldr	r4, [r4, #0]
 800c726:	2c00      	cmp	r4, #0
 800c728:	d1f7      	bne.n	800c71a <_fwalk_reent+0xe>
 800c72a:	4638      	mov	r0, r7
 800c72c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c730:	89ab      	ldrh	r3, [r5, #12]
 800c732:	2b01      	cmp	r3, #1
 800c734:	d907      	bls.n	800c746 <_fwalk_reent+0x3a>
 800c736:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c73a:	3301      	adds	r3, #1
 800c73c:	d003      	beq.n	800c746 <_fwalk_reent+0x3a>
 800c73e:	4629      	mov	r1, r5
 800c740:	4630      	mov	r0, r6
 800c742:	47c0      	blx	r8
 800c744:	4307      	orrs	r7, r0
 800c746:	3568      	adds	r5, #104	; 0x68
 800c748:	e7e9      	b.n	800c71e <_fwalk_reent+0x12>

0800c74a <__retarget_lock_init_recursive>:
 800c74a:	4770      	bx	lr

0800c74c <__retarget_lock_acquire_recursive>:
 800c74c:	4770      	bx	lr

0800c74e <__retarget_lock_release_recursive>:
 800c74e:	4770      	bx	lr

0800c750 <sbrk_aligned>:
 800c750:	b570      	push	{r4, r5, r6, lr}
 800c752:	4e0e      	ldr	r6, [pc, #56]	; (800c78c <sbrk_aligned+0x3c>)
 800c754:	460c      	mov	r4, r1
 800c756:	6831      	ldr	r1, [r6, #0]
 800c758:	4605      	mov	r5, r0
 800c75a:	b911      	cbnz	r1, 800c762 <sbrk_aligned+0x12>
 800c75c:	f000 fd1e 	bl	800d19c <_sbrk_r>
 800c760:	6030      	str	r0, [r6, #0]
 800c762:	4621      	mov	r1, r4
 800c764:	4628      	mov	r0, r5
 800c766:	f000 fd19 	bl	800d19c <_sbrk_r>
 800c76a:	1c43      	adds	r3, r0, #1
 800c76c:	d00a      	beq.n	800c784 <sbrk_aligned+0x34>
 800c76e:	1cc4      	adds	r4, r0, #3
 800c770:	f024 0403 	bic.w	r4, r4, #3
 800c774:	42a0      	cmp	r0, r4
 800c776:	d007      	beq.n	800c788 <sbrk_aligned+0x38>
 800c778:	1a21      	subs	r1, r4, r0
 800c77a:	4628      	mov	r0, r5
 800c77c:	f000 fd0e 	bl	800d19c <_sbrk_r>
 800c780:	3001      	adds	r0, #1
 800c782:	d101      	bne.n	800c788 <sbrk_aligned+0x38>
 800c784:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c788:	4620      	mov	r0, r4
 800c78a:	bd70      	pop	{r4, r5, r6, pc}
 800c78c:	20000e64 	.word	0x20000e64

0800c790 <_malloc_r>:
 800c790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c794:	1ccd      	adds	r5, r1, #3
 800c796:	f025 0503 	bic.w	r5, r5, #3
 800c79a:	3508      	adds	r5, #8
 800c79c:	2d0c      	cmp	r5, #12
 800c79e:	bf38      	it	cc
 800c7a0:	250c      	movcc	r5, #12
 800c7a2:	2d00      	cmp	r5, #0
 800c7a4:	4607      	mov	r7, r0
 800c7a6:	db01      	blt.n	800c7ac <_malloc_r+0x1c>
 800c7a8:	42a9      	cmp	r1, r5
 800c7aa:	d905      	bls.n	800c7b8 <_malloc_r+0x28>
 800c7ac:	230c      	movs	r3, #12
 800c7ae:	603b      	str	r3, [r7, #0]
 800c7b0:	2600      	movs	r6, #0
 800c7b2:	4630      	mov	r0, r6
 800c7b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7b8:	4e2e      	ldr	r6, [pc, #184]	; (800c874 <_malloc_r+0xe4>)
 800c7ba:	f000 ff87 	bl	800d6cc <__malloc_lock>
 800c7be:	6833      	ldr	r3, [r6, #0]
 800c7c0:	461c      	mov	r4, r3
 800c7c2:	bb34      	cbnz	r4, 800c812 <_malloc_r+0x82>
 800c7c4:	4629      	mov	r1, r5
 800c7c6:	4638      	mov	r0, r7
 800c7c8:	f7ff ffc2 	bl	800c750 <sbrk_aligned>
 800c7cc:	1c43      	adds	r3, r0, #1
 800c7ce:	4604      	mov	r4, r0
 800c7d0:	d14d      	bne.n	800c86e <_malloc_r+0xde>
 800c7d2:	6834      	ldr	r4, [r6, #0]
 800c7d4:	4626      	mov	r6, r4
 800c7d6:	2e00      	cmp	r6, #0
 800c7d8:	d140      	bne.n	800c85c <_malloc_r+0xcc>
 800c7da:	6823      	ldr	r3, [r4, #0]
 800c7dc:	4631      	mov	r1, r6
 800c7de:	4638      	mov	r0, r7
 800c7e0:	eb04 0803 	add.w	r8, r4, r3
 800c7e4:	f000 fcda 	bl	800d19c <_sbrk_r>
 800c7e8:	4580      	cmp	r8, r0
 800c7ea:	d13a      	bne.n	800c862 <_malloc_r+0xd2>
 800c7ec:	6821      	ldr	r1, [r4, #0]
 800c7ee:	3503      	adds	r5, #3
 800c7f0:	1a6d      	subs	r5, r5, r1
 800c7f2:	f025 0503 	bic.w	r5, r5, #3
 800c7f6:	3508      	adds	r5, #8
 800c7f8:	2d0c      	cmp	r5, #12
 800c7fa:	bf38      	it	cc
 800c7fc:	250c      	movcc	r5, #12
 800c7fe:	4629      	mov	r1, r5
 800c800:	4638      	mov	r0, r7
 800c802:	f7ff ffa5 	bl	800c750 <sbrk_aligned>
 800c806:	3001      	adds	r0, #1
 800c808:	d02b      	beq.n	800c862 <_malloc_r+0xd2>
 800c80a:	6823      	ldr	r3, [r4, #0]
 800c80c:	442b      	add	r3, r5
 800c80e:	6023      	str	r3, [r4, #0]
 800c810:	e00e      	b.n	800c830 <_malloc_r+0xa0>
 800c812:	6822      	ldr	r2, [r4, #0]
 800c814:	1b52      	subs	r2, r2, r5
 800c816:	d41e      	bmi.n	800c856 <_malloc_r+0xc6>
 800c818:	2a0b      	cmp	r2, #11
 800c81a:	d916      	bls.n	800c84a <_malloc_r+0xba>
 800c81c:	1961      	adds	r1, r4, r5
 800c81e:	42a3      	cmp	r3, r4
 800c820:	6025      	str	r5, [r4, #0]
 800c822:	bf18      	it	ne
 800c824:	6059      	strne	r1, [r3, #4]
 800c826:	6863      	ldr	r3, [r4, #4]
 800c828:	bf08      	it	eq
 800c82a:	6031      	streq	r1, [r6, #0]
 800c82c:	5162      	str	r2, [r4, r5]
 800c82e:	604b      	str	r3, [r1, #4]
 800c830:	4638      	mov	r0, r7
 800c832:	f104 060b 	add.w	r6, r4, #11
 800c836:	f000 ff4f 	bl	800d6d8 <__malloc_unlock>
 800c83a:	f026 0607 	bic.w	r6, r6, #7
 800c83e:	1d23      	adds	r3, r4, #4
 800c840:	1af2      	subs	r2, r6, r3
 800c842:	d0b6      	beq.n	800c7b2 <_malloc_r+0x22>
 800c844:	1b9b      	subs	r3, r3, r6
 800c846:	50a3      	str	r3, [r4, r2]
 800c848:	e7b3      	b.n	800c7b2 <_malloc_r+0x22>
 800c84a:	6862      	ldr	r2, [r4, #4]
 800c84c:	42a3      	cmp	r3, r4
 800c84e:	bf0c      	ite	eq
 800c850:	6032      	streq	r2, [r6, #0]
 800c852:	605a      	strne	r2, [r3, #4]
 800c854:	e7ec      	b.n	800c830 <_malloc_r+0xa0>
 800c856:	4623      	mov	r3, r4
 800c858:	6864      	ldr	r4, [r4, #4]
 800c85a:	e7b2      	b.n	800c7c2 <_malloc_r+0x32>
 800c85c:	4634      	mov	r4, r6
 800c85e:	6876      	ldr	r6, [r6, #4]
 800c860:	e7b9      	b.n	800c7d6 <_malloc_r+0x46>
 800c862:	230c      	movs	r3, #12
 800c864:	603b      	str	r3, [r7, #0]
 800c866:	4638      	mov	r0, r7
 800c868:	f000 ff36 	bl	800d6d8 <__malloc_unlock>
 800c86c:	e7a1      	b.n	800c7b2 <_malloc_r+0x22>
 800c86e:	6025      	str	r5, [r4, #0]
 800c870:	e7de      	b.n	800c830 <_malloc_r+0xa0>
 800c872:	bf00      	nop
 800c874:	20000e60 	.word	0x20000e60

0800c878 <__ssputs_r>:
 800c878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c87c:	688e      	ldr	r6, [r1, #8]
 800c87e:	429e      	cmp	r6, r3
 800c880:	4682      	mov	sl, r0
 800c882:	460c      	mov	r4, r1
 800c884:	4690      	mov	r8, r2
 800c886:	461f      	mov	r7, r3
 800c888:	d838      	bhi.n	800c8fc <__ssputs_r+0x84>
 800c88a:	898a      	ldrh	r2, [r1, #12]
 800c88c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c890:	d032      	beq.n	800c8f8 <__ssputs_r+0x80>
 800c892:	6825      	ldr	r5, [r4, #0]
 800c894:	6909      	ldr	r1, [r1, #16]
 800c896:	eba5 0901 	sub.w	r9, r5, r1
 800c89a:	6965      	ldr	r5, [r4, #20]
 800c89c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c8a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c8a4:	3301      	adds	r3, #1
 800c8a6:	444b      	add	r3, r9
 800c8a8:	106d      	asrs	r5, r5, #1
 800c8aa:	429d      	cmp	r5, r3
 800c8ac:	bf38      	it	cc
 800c8ae:	461d      	movcc	r5, r3
 800c8b0:	0553      	lsls	r3, r2, #21
 800c8b2:	d531      	bpl.n	800c918 <__ssputs_r+0xa0>
 800c8b4:	4629      	mov	r1, r5
 800c8b6:	f7ff ff6b 	bl	800c790 <_malloc_r>
 800c8ba:	4606      	mov	r6, r0
 800c8bc:	b950      	cbnz	r0, 800c8d4 <__ssputs_r+0x5c>
 800c8be:	230c      	movs	r3, #12
 800c8c0:	f8ca 3000 	str.w	r3, [sl]
 800c8c4:	89a3      	ldrh	r3, [r4, #12]
 800c8c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c8ca:	81a3      	strh	r3, [r4, #12]
 800c8cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c8d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8d4:	6921      	ldr	r1, [r4, #16]
 800c8d6:	464a      	mov	r2, r9
 800c8d8:	f000 fed0 	bl	800d67c <memcpy>
 800c8dc:	89a3      	ldrh	r3, [r4, #12]
 800c8de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c8e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c8e6:	81a3      	strh	r3, [r4, #12]
 800c8e8:	6126      	str	r6, [r4, #16]
 800c8ea:	6165      	str	r5, [r4, #20]
 800c8ec:	444e      	add	r6, r9
 800c8ee:	eba5 0509 	sub.w	r5, r5, r9
 800c8f2:	6026      	str	r6, [r4, #0]
 800c8f4:	60a5      	str	r5, [r4, #8]
 800c8f6:	463e      	mov	r6, r7
 800c8f8:	42be      	cmp	r6, r7
 800c8fa:	d900      	bls.n	800c8fe <__ssputs_r+0x86>
 800c8fc:	463e      	mov	r6, r7
 800c8fe:	6820      	ldr	r0, [r4, #0]
 800c900:	4632      	mov	r2, r6
 800c902:	4641      	mov	r1, r8
 800c904:	f000 fec8 	bl	800d698 <memmove>
 800c908:	68a3      	ldr	r3, [r4, #8]
 800c90a:	1b9b      	subs	r3, r3, r6
 800c90c:	60a3      	str	r3, [r4, #8]
 800c90e:	6823      	ldr	r3, [r4, #0]
 800c910:	4433      	add	r3, r6
 800c912:	6023      	str	r3, [r4, #0]
 800c914:	2000      	movs	r0, #0
 800c916:	e7db      	b.n	800c8d0 <__ssputs_r+0x58>
 800c918:	462a      	mov	r2, r5
 800c91a:	f000 ff2f 	bl	800d77c <_realloc_r>
 800c91e:	4606      	mov	r6, r0
 800c920:	2800      	cmp	r0, #0
 800c922:	d1e1      	bne.n	800c8e8 <__ssputs_r+0x70>
 800c924:	6921      	ldr	r1, [r4, #16]
 800c926:	4650      	mov	r0, sl
 800c928:	f000 fedc 	bl	800d6e4 <_free_r>
 800c92c:	e7c7      	b.n	800c8be <__ssputs_r+0x46>
	...

0800c930 <_svfiprintf_r>:
 800c930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c934:	4698      	mov	r8, r3
 800c936:	898b      	ldrh	r3, [r1, #12]
 800c938:	061b      	lsls	r3, r3, #24
 800c93a:	b09d      	sub	sp, #116	; 0x74
 800c93c:	4607      	mov	r7, r0
 800c93e:	460d      	mov	r5, r1
 800c940:	4614      	mov	r4, r2
 800c942:	d50e      	bpl.n	800c962 <_svfiprintf_r+0x32>
 800c944:	690b      	ldr	r3, [r1, #16]
 800c946:	b963      	cbnz	r3, 800c962 <_svfiprintf_r+0x32>
 800c948:	2140      	movs	r1, #64	; 0x40
 800c94a:	f7ff ff21 	bl	800c790 <_malloc_r>
 800c94e:	6028      	str	r0, [r5, #0]
 800c950:	6128      	str	r0, [r5, #16]
 800c952:	b920      	cbnz	r0, 800c95e <_svfiprintf_r+0x2e>
 800c954:	230c      	movs	r3, #12
 800c956:	603b      	str	r3, [r7, #0]
 800c958:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c95c:	e0d1      	b.n	800cb02 <_svfiprintf_r+0x1d2>
 800c95e:	2340      	movs	r3, #64	; 0x40
 800c960:	616b      	str	r3, [r5, #20]
 800c962:	2300      	movs	r3, #0
 800c964:	9309      	str	r3, [sp, #36]	; 0x24
 800c966:	2320      	movs	r3, #32
 800c968:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c96c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c970:	2330      	movs	r3, #48	; 0x30
 800c972:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800cb1c <_svfiprintf_r+0x1ec>
 800c976:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c97a:	f04f 0901 	mov.w	r9, #1
 800c97e:	4623      	mov	r3, r4
 800c980:	469a      	mov	sl, r3
 800c982:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c986:	b10a      	cbz	r2, 800c98c <_svfiprintf_r+0x5c>
 800c988:	2a25      	cmp	r2, #37	; 0x25
 800c98a:	d1f9      	bne.n	800c980 <_svfiprintf_r+0x50>
 800c98c:	ebba 0b04 	subs.w	fp, sl, r4
 800c990:	d00b      	beq.n	800c9aa <_svfiprintf_r+0x7a>
 800c992:	465b      	mov	r3, fp
 800c994:	4622      	mov	r2, r4
 800c996:	4629      	mov	r1, r5
 800c998:	4638      	mov	r0, r7
 800c99a:	f7ff ff6d 	bl	800c878 <__ssputs_r>
 800c99e:	3001      	adds	r0, #1
 800c9a0:	f000 80aa 	beq.w	800caf8 <_svfiprintf_r+0x1c8>
 800c9a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c9a6:	445a      	add	r2, fp
 800c9a8:	9209      	str	r2, [sp, #36]	; 0x24
 800c9aa:	f89a 3000 	ldrb.w	r3, [sl]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	f000 80a2 	beq.w	800caf8 <_svfiprintf_r+0x1c8>
 800c9b4:	2300      	movs	r3, #0
 800c9b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c9ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c9be:	f10a 0a01 	add.w	sl, sl, #1
 800c9c2:	9304      	str	r3, [sp, #16]
 800c9c4:	9307      	str	r3, [sp, #28]
 800c9c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c9ca:	931a      	str	r3, [sp, #104]	; 0x68
 800c9cc:	4654      	mov	r4, sl
 800c9ce:	2205      	movs	r2, #5
 800c9d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9d4:	4851      	ldr	r0, [pc, #324]	; (800cb1c <_svfiprintf_r+0x1ec>)
 800c9d6:	f7f3 fbfb 	bl	80001d0 <memchr>
 800c9da:	9a04      	ldr	r2, [sp, #16]
 800c9dc:	b9d8      	cbnz	r0, 800ca16 <_svfiprintf_r+0xe6>
 800c9de:	06d0      	lsls	r0, r2, #27
 800c9e0:	bf44      	itt	mi
 800c9e2:	2320      	movmi	r3, #32
 800c9e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c9e8:	0711      	lsls	r1, r2, #28
 800c9ea:	bf44      	itt	mi
 800c9ec:	232b      	movmi	r3, #43	; 0x2b
 800c9ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c9f2:	f89a 3000 	ldrb.w	r3, [sl]
 800c9f6:	2b2a      	cmp	r3, #42	; 0x2a
 800c9f8:	d015      	beq.n	800ca26 <_svfiprintf_r+0xf6>
 800c9fa:	9a07      	ldr	r2, [sp, #28]
 800c9fc:	4654      	mov	r4, sl
 800c9fe:	2000      	movs	r0, #0
 800ca00:	f04f 0c0a 	mov.w	ip, #10
 800ca04:	4621      	mov	r1, r4
 800ca06:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ca0a:	3b30      	subs	r3, #48	; 0x30
 800ca0c:	2b09      	cmp	r3, #9
 800ca0e:	d94e      	bls.n	800caae <_svfiprintf_r+0x17e>
 800ca10:	b1b0      	cbz	r0, 800ca40 <_svfiprintf_r+0x110>
 800ca12:	9207      	str	r2, [sp, #28]
 800ca14:	e014      	b.n	800ca40 <_svfiprintf_r+0x110>
 800ca16:	eba0 0308 	sub.w	r3, r0, r8
 800ca1a:	fa09 f303 	lsl.w	r3, r9, r3
 800ca1e:	4313      	orrs	r3, r2
 800ca20:	9304      	str	r3, [sp, #16]
 800ca22:	46a2      	mov	sl, r4
 800ca24:	e7d2      	b.n	800c9cc <_svfiprintf_r+0x9c>
 800ca26:	9b03      	ldr	r3, [sp, #12]
 800ca28:	1d19      	adds	r1, r3, #4
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	9103      	str	r1, [sp, #12]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	bfbb      	ittet	lt
 800ca32:	425b      	neglt	r3, r3
 800ca34:	f042 0202 	orrlt.w	r2, r2, #2
 800ca38:	9307      	strge	r3, [sp, #28]
 800ca3a:	9307      	strlt	r3, [sp, #28]
 800ca3c:	bfb8      	it	lt
 800ca3e:	9204      	strlt	r2, [sp, #16]
 800ca40:	7823      	ldrb	r3, [r4, #0]
 800ca42:	2b2e      	cmp	r3, #46	; 0x2e
 800ca44:	d10c      	bne.n	800ca60 <_svfiprintf_r+0x130>
 800ca46:	7863      	ldrb	r3, [r4, #1]
 800ca48:	2b2a      	cmp	r3, #42	; 0x2a
 800ca4a:	d135      	bne.n	800cab8 <_svfiprintf_r+0x188>
 800ca4c:	9b03      	ldr	r3, [sp, #12]
 800ca4e:	1d1a      	adds	r2, r3, #4
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	9203      	str	r2, [sp, #12]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	bfb8      	it	lt
 800ca58:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ca5c:	3402      	adds	r4, #2
 800ca5e:	9305      	str	r3, [sp, #20]
 800ca60:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800cb2c <_svfiprintf_r+0x1fc>
 800ca64:	7821      	ldrb	r1, [r4, #0]
 800ca66:	2203      	movs	r2, #3
 800ca68:	4650      	mov	r0, sl
 800ca6a:	f7f3 fbb1 	bl	80001d0 <memchr>
 800ca6e:	b140      	cbz	r0, 800ca82 <_svfiprintf_r+0x152>
 800ca70:	2340      	movs	r3, #64	; 0x40
 800ca72:	eba0 000a 	sub.w	r0, r0, sl
 800ca76:	fa03 f000 	lsl.w	r0, r3, r0
 800ca7a:	9b04      	ldr	r3, [sp, #16]
 800ca7c:	4303      	orrs	r3, r0
 800ca7e:	3401      	adds	r4, #1
 800ca80:	9304      	str	r3, [sp, #16]
 800ca82:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca86:	4826      	ldr	r0, [pc, #152]	; (800cb20 <_svfiprintf_r+0x1f0>)
 800ca88:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ca8c:	2206      	movs	r2, #6
 800ca8e:	f7f3 fb9f 	bl	80001d0 <memchr>
 800ca92:	2800      	cmp	r0, #0
 800ca94:	d038      	beq.n	800cb08 <_svfiprintf_r+0x1d8>
 800ca96:	4b23      	ldr	r3, [pc, #140]	; (800cb24 <_svfiprintf_r+0x1f4>)
 800ca98:	bb1b      	cbnz	r3, 800cae2 <_svfiprintf_r+0x1b2>
 800ca9a:	9b03      	ldr	r3, [sp, #12]
 800ca9c:	3307      	adds	r3, #7
 800ca9e:	f023 0307 	bic.w	r3, r3, #7
 800caa2:	3308      	adds	r3, #8
 800caa4:	9303      	str	r3, [sp, #12]
 800caa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800caa8:	4433      	add	r3, r6
 800caaa:	9309      	str	r3, [sp, #36]	; 0x24
 800caac:	e767      	b.n	800c97e <_svfiprintf_r+0x4e>
 800caae:	fb0c 3202 	mla	r2, ip, r2, r3
 800cab2:	460c      	mov	r4, r1
 800cab4:	2001      	movs	r0, #1
 800cab6:	e7a5      	b.n	800ca04 <_svfiprintf_r+0xd4>
 800cab8:	2300      	movs	r3, #0
 800caba:	3401      	adds	r4, #1
 800cabc:	9305      	str	r3, [sp, #20]
 800cabe:	4619      	mov	r1, r3
 800cac0:	f04f 0c0a 	mov.w	ip, #10
 800cac4:	4620      	mov	r0, r4
 800cac6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800caca:	3a30      	subs	r2, #48	; 0x30
 800cacc:	2a09      	cmp	r2, #9
 800cace:	d903      	bls.n	800cad8 <_svfiprintf_r+0x1a8>
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d0c5      	beq.n	800ca60 <_svfiprintf_r+0x130>
 800cad4:	9105      	str	r1, [sp, #20]
 800cad6:	e7c3      	b.n	800ca60 <_svfiprintf_r+0x130>
 800cad8:	fb0c 2101 	mla	r1, ip, r1, r2
 800cadc:	4604      	mov	r4, r0
 800cade:	2301      	movs	r3, #1
 800cae0:	e7f0      	b.n	800cac4 <_svfiprintf_r+0x194>
 800cae2:	ab03      	add	r3, sp, #12
 800cae4:	9300      	str	r3, [sp, #0]
 800cae6:	462a      	mov	r2, r5
 800cae8:	4b0f      	ldr	r3, [pc, #60]	; (800cb28 <_svfiprintf_r+0x1f8>)
 800caea:	a904      	add	r1, sp, #16
 800caec:	4638      	mov	r0, r7
 800caee:	f3af 8000 	nop.w
 800caf2:	1c42      	adds	r2, r0, #1
 800caf4:	4606      	mov	r6, r0
 800caf6:	d1d6      	bne.n	800caa6 <_svfiprintf_r+0x176>
 800caf8:	89ab      	ldrh	r3, [r5, #12]
 800cafa:	065b      	lsls	r3, r3, #25
 800cafc:	f53f af2c 	bmi.w	800c958 <_svfiprintf_r+0x28>
 800cb00:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cb02:	b01d      	add	sp, #116	; 0x74
 800cb04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb08:	ab03      	add	r3, sp, #12
 800cb0a:	9300      	str	r3, [sp, #0]
 800cb0c:	462a      	mov	r2, r5
 800cb0e:	4b06      	ldr	r3, [pc, #24]	; (800cb28 <_svfiprintf_r+0x1f8>)
 800cb10:	a904      	add	r1, sp, #16
 800cb12:	4638      	mov	r0, r7
 800cb14:	f000 f9d4 	bl	800cec0 <_printf_i>
 800cb18:	e7eb      	b.n	800caf2 <_svfiprintf_r+0x1c2>
 800cb1a:	bf00      	nop
 800cb1c:	08014190 	.word	0x08014190
 800cb20:	0801419a 	.word	0x0801419a
 800cb24:	00000000 	.word	0x00000000
 800cb28:	0800c879 	.word	0x0800c879
 800cb2c:	08014196 	.word	0x08014196

0800cb30 <__sfputc_r>:
 800cb30:	6893      	ldr	r3, [r2, #8]
 800cb32:	3b01      	subs	r3, #1
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	b410      	push	{r4}
 800cb38:	6093      	str	r3, [r2, #8]
 800cb3a:	da08      	bge.n	800cb4e <__sfputc_r+0x1e>
 800cb3c:	6994      	ldr	r4, [r2, #24]
 800cb3e:	42a3      	cmp	r3, r4
 800cb40:	db01      	blt.n	800cb46 <__sfputc_r+0x16>
 800cb42:	290a      	cmp	r1, #10
 800cb44:	d103      	bne.n	800cb4e <__sfputc_r+0x1e>
 800cb46:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cb4a:	f000 bb7b 	b.w	800d244 <__swbuf_r>
 800cb4e:	6813      	ldr	r3, [r2, #0]
 800cb50:	1c58      	adds	r0, r3, #1
 800cb52:	6010      	str	r0, [r2, #0]
 800cb54:	7019      	strb	r1, [r3, #0]
 800cb56:	4608      	mov	r0, r1
 800cb58:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cb5c:	4770      	bx	lr

0800cb5e <__sfputs_r>:
 800cb5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb60:	4606      	mov	r6, r0
 800cb62:	460f      	mov	r7, r1
 800cb64:	4614      	mov	r4, r2
 800cb66:	18d5      	adds	r5, r2, r3
 800cb68:	42ac      	cmp	r4, r5
 800cb6a:	d101      	bne.n	800cb70 <__sfputs_r+0x12>
 800cb6c:	2000      	movs	r0, #0
 800cb6e:	e007      	b.n	800cb80 <__sfputs_r+0x22>
 800cb70:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb74:	463a      	mov	r2, r7
 800cb76:	4630      	mov	r0, r6
 800cb78:	f7ff ffda 	bl	800cb30 <__sfputc_r>
 800cb7c:	1c43      	adds	r3, r0, #1
 800cb7e:	d1f3      	bne.n	800cb68 <__sfputs_r+0xa>
 800cb80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cb84 <_vfiprintf_r>:
 800cb84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb88:	460d      	mov	r5, r1
 800cb8a:	b09d      	sub	sp, #116	; 0x74
 800cb8c:	4614      	mov	r4, r2
 800cb8e:	4698      	mov	r8, r3
 800cb90:	4606      	mov	r6, r0
 800cb92:	b118      	cbz	r0, 800cb9c <_vfiprintf_r+0x18>
 800cb94:	6983      	ldr	r3, [r0, #24]
 800cb96:	b90b      	cbnz	r3, 800cb9c <_vfiprintf_r+0x18>
 800cb98:	f7ff fd3a 	bl	800c610 <__sinit>
 800cb9c:	4b89      	ldr	r3, [pc, #548]	; (800cdc4 <_vfiprintf_r+0x240>)
 800cb9e:	429d      	cmp	r5, r3
 800cba0:	d11b      	bne.n	800cbda <_vfiprintf_r+0x56>
 800cba2:	6875      	ldr	r5, [r6, #4]
 800cba4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cba6:	07d9      	lsls	r1, r3, #31
 800cba8:	d405      	bmi.n	800cbb6 <_vfiprintf_r+0x32>
 800cbaa:	89ab      	ldrh	r3, [r5, #12]
 800cbac:	059a      	lsls	r2, r3, #22
 800cbae:	d402      	bmi.n	800cbb6 <_vfiprintf_r+0x32>
 800cbb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cbb2:	f7ff fdcb 	bl	800c74c <__retarget_lock_acquire_recursive>
 800cbb6:	89ab      	ldrh	r3, [r5, #12]
 800cbb8:	071b      	lsls	r3, r3, #28
 800cbba:	d501      	bpl.n	800cbc0 <_vfiprintf_r+0x3c>
 800cbbc:	692b      	ldr	r3, [r5, #16]
 800cbbe:	b9eb      	cbnz	r3, 800cbfc <_vfiprintf_r+0x78>
 800cbc0:	4629      	mov	r1, r5
 800cbc2:	4630      	mov	r0, r6
 800cbc4:	f000 fba2 	bl	800d30c <__swsetup_r>
 800cbc8:	b1c0      	cbz	r0, 800cbfc <_vfiprintf_r+0x78>
 800cbca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cbcc:	07dc      	lsls	r4, r3, #31
 800cbce:	d50e      	bpl.n	800cbee <_vfiprintf_r+0x6a>
 800cbd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cbd4:	b01d      	add	sp, #116	; 0x74
 800cbd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbda:	4b7b      	ldr	r3, [pc, #492]	; (800cdc8 <_vfiprintf_r+0x244>)
 800cbdc:	429d      	cmp	r5, r3
 800cbde:	d101      	bne.n	800cbe4 <_vfiprintf_r+0x60>
 800cbe0:	68b5      	ldr	r5, [r6, #8]
 800cbe2:	e7df      	b.n	800cba4 <_vfiprintf_r+0x20>
 800cbe4:	4b79      	ldr	r3, [pc, #484]	; (800cdcc <_vfiprintf_r+0x248>)
 800cbe6:	429d      	cmp	r5, r3
 800cbe8:	bf08      	it	eq
 800cbea:	68f5      	ldreq	r5, [r6, #12]
 800cbec:	e7da      	b.n	800cba4 <_vfiprintf_r+0x20>
 800cbee:	89ab      	ldrh	r3, [r5, #12]
 800cbf0:	0598      	lsls	r0, r3, #22
 800cbf2:	d4ed      	bmi.n	800cbd0 <_vfiprintf_r+0x4c>
 800cbf4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cbf6:	f7ff fdaa 	bl	800c74e <__retarget_lock_release_recursive>
 800cbfa:	e7e9      	b.n	800cbd0 <_vfiprintf_r+0x4c>
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	9309      	str	r3, [sp, #36]	; 0x24
 800cc00:	2320      	movs	r3, #32
 800cc02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cc06:	f8cd 800c 	str.w	r8, [sp, #12]
 800cc0a:	2330      	movs	r3, #48	; 0x30
 800cc0c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800cdd0 <_vfiprintf_r+0x24c>
 800cc10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cc14:	f04f 0901 	mov.w	r9, #1
 800cc18:	4623      	mov	r3, r4
 800cc1a:	469a      	mov	sl, r3
 800cc1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cc20:	b10a      	cbz	r2, 800cc26 <_vfiprintf_r+0xa2>
 800cc22:	2a25      	cmp	r2, #37	; 0x25
 800cc24:	d1f9      	bne.n	800cc1a <_vfiprintf_r+0x96>
 800cc26:	ebba 0b04 	subs.w	fp, sl, r4
 800cc2a:	d00b      	beq.n	800cc44 <_vfiprintf_r+0xc0>
 800cc2c:	465b      	mov	r3, fp
 800cc2e:	4622      	mov	r2, r4
 800cc30:	4629      	mov	r1, r5
 800cc32:	4630      	mov	r0, r6
 800cc34:	f7ff ff93 	bl	800cb5e <__sfputs_r>
 800cc38:	3001      	adds	r0, #1
 800cc3a:	f000 80aa 	beq.w	800cd92 <_vfiprintf_r+0x20e>
 800cc3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cc40:	445a      	add	r2, fp
 800cc42:	9209      	str	r2, [sp, #36]	; 0x24
 800cc44:	f89a 3000 	ldrb.w	r3, [sl]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	f000 80a2 	beq.w	800cd92 <_vfiprintf_r+0x20e>
 800cc4e:	2300      	movs	r3, #0
 800cc50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cc54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cc58:	f10a 0a01 	add.w	sl, sl, #1
 800cc5c:	9304      	str	r3, [sp, #16]
 800cc5e:	9307      	str	r3, [sp, #28]
 800cc60:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cc64:	931a      	str	r3, [sp, #104]	; 0x68
 800cc66:	4654      	mov	r4, sl
 800cc68:	2205      	movs	r2, #5
 800cc6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc6e:	4858      	ldr	r0, [pc, #352]	; (800cdd0 <_vfiprintf_r+0x24c>)
 800cc70:	f7f3 faae 	bl	80001d0 <memchr>
 800cc74:	9a04      	ldr	r2, [sp, #16]
 800cc76:	b9d8      	cbnz	r0, 800ccb0 <_vfiprintf_r+0x12c>
 800cc78:	06d1      	lsls	r1, r2, #27
 800cc7a:	bf44      	itt	mi
 800cc7c:	2320      	movmi	r3, #32
 800cc7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cc82:	0713      	lsls	r3, r2, #28
 800cc84:	bf44      	itt	mi
 800cc86:	232b      	movmi	r3, #43	; 0x2b
 800cc88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cc8c:	f89a 3000 	ldrb.w	r3, [sl]
 800cc90:	2b2a      	cmp	r3, #42	; 0x2a
 800cc92:	d015      	beq.n	800ccc0 <_vfiprintf_r+0x13c>
 800cc94:	9a07      	ldr	r2, [sp, #28]
 800cc96:	4654      	mov	r4, sl
 800cc98:	2000      	movs	r0, #0
 800cc9a:	f04f 0c0a 	mov.w	ip, #10
 800cc9e:	4621      	mov	r1, r4
 800cca0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cca4:	3b30      	subs	r3, #48	; 0x30
 800cca6:	2b09      	cmp	r3, #9
 800cca8:	d94e      	bls.n	800cd48 <_vfiprintf_r+0x1c4>
 800ccaa:	b1b0      	cbz	r0, 800ccda <_vfiprintf_r+0x156>
 800ccac:	9207      	str	r2, [sp, #28]
 800ccae:	e014      	b.n	800ccda <_vfiprintf_r+0x156>
 800ccb0:	eba0 0308 	sub.w	r3, r0, r8
 800ccb4:	fa09 f303 	lsl.w	r3, r9, r3
 800ccb8:	4313      	orrs	r3, r2
 800ccba:	9304      	str	r3, [sp, #16]
 800ccbc:	46a2      	mov	sl, r4
 800ccbe:	e7d2      	b.n	800cc66 <_vfiprintf_r+0xe2>
 800ccc0:	9b03      	ldr	r3, [sp, #12]
 800ccc2:	1d19      	adds	r1, r3, #4
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	9103      	str	r1, [sp, #12]
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	bfbb      	ittet	lt
 800cccc:	425b      	neglt	r3, r3
 800ccce:	f042 0202 	orrlt.w	r2, r2, #2
 800ccd2:	9307      	strge	r3, [sp, #28]
 800ccd4:	9307      	strlt	r3, [sp, #28]
 800ccd6:	bfb8      	it	lt
 800ccd8:	9204      	strlt	r2, [sp, #16]
 800ccda:	7823      	ldrb	r3, [r4, #0]
 800ccdc:	2b2e      	cmp	r3, #46	; 0x2e
 800ccde:	d10c      	bne.n	800ccfa <_vfiprintf_r+0x176>
 800cce0:	7863      	ldrb	r3, [r4, #1]
 800cce2:	2b2a      	cmp	r3, #42	; 0x2a
 800cce4:	d135      	bne.n	800cd52 <_vfiprintf_r+0x1ce>
 800cce6:	9b03      	ldr	r3, [sp, #12]
 800cce8:	1d1a      	adds	r2, r3, #4
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	9203      	str	r2, [sp, #12]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	bfb8      	it	lt
 800ccf2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ccf6:	3402      	adds	r4, #2
 800ccf8:	9305      	str	r3, [sp, #20]
 800ccfa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800cde0 <_vfiprintf_r+0x25c>
 800ccfe:	7821      	ldrb	r1, [r4, #0]
 800cd00:	2203      	movs	r2, #3
 800cd02:	4650      	mov	r0, sl
 800cd04:	f7f3 fa64 	bl	80001d0 <memchr>
 800cd08:	b140      	cbz	r0, 800cd1c <_vfiprintf_r+0x198>
 800cd0a:	2340      	movs	r3, #64	; 0x40
 800cd0c:	eba0 000a 	sub.w	r0, r0, sl
 800cd10:	fa03 f000 	lsl.w	r0, r3, r0
 800cd14:	9b04      	ldr	r3, [sp, #16]
 800cd16:	4303      	orrs	r3, r0
 800cd18:	3401      	adds	r4, #1
 800cd1a:	9304      	str	r3, [sp, #16]
 800cd1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd20:	482c      	ldr	r0, [pc, #176]	; (800cdd4 <_vfiprintf_r+0x250>)
 800cd22:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cd26:	2206      	movs	r2, #6
 800cd28:	f7f3 fa52 	bl	80001d0 <memchr>
 800cd2c:	2800      	cmp	r0, #0
 800cd2e:	d03f      	beq.n	800cdb0 <_vfiprintf_r+0x22c>
 800cd30:	4b29      	ldr	r3, [pc, #164]	; (800cdd8 <_vfiprintf_r+0x254>)
 800cd32:	bb1b      	cbnz	r3, 800cd7c <_vfiprintf_r+0x1f8>
 800cd34:	9b03      	ldr	r3, [sp, #12]
 800cd36:	3307      	adds	r3, #7
 800cd38:	f023 0307 	bic.w	r3, r3, #7
 800cd3c:	3308      	adds	r3, #8
 800cd3e:	9303      	str	r3, [sp, #12]
 800cd40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd42:	443b      	add	r3, r7
 800cd44:	9309      	str	r3, [sp, #36]	; 0x24
 800cd46:	e767      	b.n	800cc18 <_vfiprintf_r+0x94>
 800cd48:	fb0c 3202 	mla	r2, ip, r2, r3
 800cd4c:	460c      	mov	r4, r1
 800cd4e:	2001      	movs	r0, #1
 800cd50:	e7a5      	b.n	800cc9e <_vfiprintf_r+0x11a>
 800cd52:	2300      	movs	r3, #0
 800cd54:	3401      	adds	r4, #1
 800cd56:	9305      	str	r3, [sp, #20]
 800cd58:	4619      	mov	r1, r3
 800cd5a:	f04f 0c0a 	mov.w	ip, #10
 800cd5e:	4620      	mov	r0, r4
 800cd60:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cd64:	3a30      	subs	r2, #48	; 0x30
 800cd66:	2a09      	cmp	r2, #9
 800cd68:	d903      	bls.n	800cd72 <_vfiprintf_r+0x1ee>
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d0c5      	beq.n	800ccfa <_vfiprintf_r+0x176>
 800cd6e:	9105      	str	r1, [sp, #20]
 800cd70:	e7c3      	b.n	800ccfa <_vfiprintf_r+0x176>
 800cd72:	fb0c 2101 	mla	r1, ip, r1, r2
 800cd76:	4604      	mov	r4, r0
 800cd78:	2301      	movs	r3, #1
 800cd7a:	e7f0      	b.n	800cd5e <_vfiprintf_r+0x1da>
 800cd7c:	ab03      	add	r3, sp, #12
 800cd7e:	9300      	str	r3, [sp, #0]
 800cd80:	462a      	mov	r2, r5
 800cd82:	4b16      	ldr	r3, [pc, #88]	; (800cddc <_vfiprintf_r+0x258>)
 800cd84:	a904      	add	r1, sp, #16
 800cd86:	4630      	mov	r0, r6
 800cd88:	f3af 8000 	nop.w
 800cd8c:	4607      	mov	r7, r0
 800cd8e:	1c78      	adds	r0, r7, #1
 800cd90:	d1d6      	bne.n	800cd40 <_vfiprintf_r+0x1bc>
 800cd92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cd94:	07d9      	lsls	r1, r3, #31
 800cd96:	d405      	bmi.n	800cda4 <_vfiprintf_r+0x220>
 800cd98:	89ab      	ldrh	r3, [r5, #12]
 800cd9a:	059a      	lsls	r2, r3, #22
 800cd9c:	d402      	bmi.n	800cda4 <_vfiprintf_r+0x220>
 800cd9e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cda0:	f7ff fcd5 	bl	800c74e <__retarget_lock_release_recursive>
 800cda4:	89ab      	ldrh	r3, [r5, #12]
 800cda6:	065b      	lsls	r3, r3, #25
 800cda8:	f53f af12 	bmi.w	800cbd0 <_vfiprintf_r+0x4c>
 800cdac:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cdae:	e711      	b.n	800cbd4 <_vfiprintf_r+0x50>
 800cdb0:	ab03      	add	r3, sp, #12
 800cdb2:	9300      	str	r3, [sp, #0]
 800cdb4:	462a      	mov	r2, r5
 800cdb6:	4b09      	ldr	r3, [pc, #36]	; (800cddc <_vfiprintf_r+0x258>)
 800cdb8:	a904      	add	r1, sp, #16
 800cdba:	4630      	mov	r0, r6
 800cdbc:	f000 f880 	bl	800cec0 <_printf_i>
 800cdc0:	e7e4      	b.n	800cd8c <_vfiprintf_r+0x208>
 800cdc2:	bf00      	nop
 800cdc4:	08014150 	.word	0x08014150
 800cdc8:	08014170 	.word	0x08014170
 800cdcc:	08014130 	.word	0x08014130
 800cdd0:	08014190 	.word	0x08014190
 800cdd4:	0801419a 	.word	0x0801419a
 800cdd8:	00000000 	.word	0x00000000
 800cddc:	0800cb5f 	.word	0x0800cb5f
 800cde0:	08014196 	.word	0x08014196

0800cde4 <_printf_common>:
 800cde4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cde8:	4616      	mov	r6, r2
 800cdea:	4699      	mov	r9, r3
 800cdec:	688a      	ldr	r2, [r1, #8]
 800cdee:	690b      	ldr	r3, [r1, #16]
 800cdf0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cdf4:	4293      	cmp	r3, r2
 800cdf6:	bfb8      	it	lt
 800cdf8:	4613      	movlt	r3, r2
 800cdfa:	6033      	str	r3, [r6, #0]
 800cdfc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ce00:	4607      	mov	r7, r0
 800ce02:	460c      	mov	r4, r1
 800ce04:	b10a      	cbz	r2, 800ce0a <_printf_common+0x26>
 800ce06:	3301      	adds	r3, #1
 800ce08:	6033      	str	r3, [r6, #0]
 800ce0a:	6823      	ldr	r3, [r4, #0]
 800ce0c:	0699      	lsls	r1, r3, #26
 800ce0e:	bf42      	ittt	mi
 800ce10:	6833      	ldrmi	r3, [r6, #0]
 800ce12:	3302      	addmi	r3, #2
 800ce14:	6033      	strmi	r3, [r6, #0]
 800ce16:	6825      	ldr	r5, [r4, #0]
 800ce18:	f015 0506 	ands.w	r5, r5, #6
 800ce1c:	d106      	bne.n	800ce2c <_printf_common+0x48>
 800ce1e:	f104 0a19 	add.w	sl, r4, #25
 800ce22:	68e3      	ldr	r3, [r4, #12]
 800ce24:	6832      	ldr	r2, [r6, #0]
 800ce26:	1a9b      	subs	r3, r3, r2
 800ce28:	42ab      	cmp	r3, r5
 800ce2a:	dc26      	bgt.n	800ce7a <_printf_common+0x96>
 800ce2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ce30:	1e13      	subs	r3, r2, #0
 800ce32:	6822      	ldr	r2, [r4, #0]
 800ce34:	bf18      	it	ne
 800ce36:	2301      	movne	r3, #1
 800ce38:	0692      	lsls	r2, r2, #26
 800ce3a:	d42b      	bmi.n	800ce94 <_printf_common+0xb0>
 800ce3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ce40:	4649      	mov	r1, r9
 800ce42:	4638      	mov	r0, r7
 800ce44:	47c0      	blx	r8
 800ce46:	3001      	adds	r0, #1
 800ce48:	d01e      	beq.n	800ce88 <_printf_common+0xa4>
 800ce4a:	6823      	ldr	r3, [r4, #0]
 800ce4c:	68e5      	ldr	r5, [r4, #12]
 800ce4e:	6832      	ldr	r2, [r6, #0]
 800ce50:	f003 0306 	and.w	r3, r3, #6
 800ce54:	2b04      	cmp	r3, #4
 800ce56:	bf08      	it	eq
 800ce58:	1aad      	subeq	r5, r5, r2
 800ce5a:	68a3      	ldr	r3, [r4, #8]
 800ce5c:	6922      	ldr	r2, [r4, #16]
 800ce5e:	bf0c      	ite	eq
 800ce60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ce64:	2500      	movne	r5, #0
 800ce66:	4293      	cmp	r3, r2
 800ce68:	bfc4      	itt	gt
 800ce6a:	1a9b      	subgt	r3, r3, r2
 800ce6c:	18ed      	addgt	r5, r5, r3
 800ce6e:	2600      	movs	r6, #0
 800ce70:	341a      	adds	r4, #26
 800ce72:	42b5      	cmp	r5, r6
 800ce74:	d11a      	bne.n	800ceac <_printf_common+0xc8>
 800ce76:	2000      	movs	r0, #0
 800ce78:	e008      	b.n	800ce8c <_printf_common+0xa8>
 800ce7a:	2301      	movs	r3, #1
 800ce7c:	4652      	mov	r2, sl
 800ce7e:	4649      	mov	r1, r9
 800ce80:	4638      	mov	r0, r7
 800ce82:	47c0      	blx	r8
 800ce84:	3001      	adds	r0, #1
 800ce86:	d103      	bne.n	800ce90 <_printf_common+0xac>
 800ce88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ce8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce90:	3501      	adds	r5, #1
 800ce92:	e7c6      	b.n	800ce22 <_printf_common+0x3e>
 800ce94:	18e1      	adds	r1, r4, r3
 800ce96:	1c5a      	adds	r2, r3, #1
 800ce98:	2030      	movs	r0, #48	; 0x30
 800ce9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ce9e:	4422      	add	r2, r4
 800cea0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cea4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cea8:	3302      	adds	r3, #2
 800ceaa:	e7c7      	b.n	800ce3c <_printf_common+0x58>
 800ceac:	2301      	movs	r3, #1
 800ceae:	4622      	mov	r2, r4
 800ceb0:	4649      	mov	r1, r9
 800ceb2:	4638      	mov	r0, r7
 800ceb4:	47c0      	blx	r8
 800ceb6:	3001      	adds	r0, #1
 800ceb8:	d0e6      	beq.n	800ce88 <_printf_common+0xa4>
 800ceba:	3601      	adds	r6, #1
 800cebc:	e7d9      	b.n	800ce72 <_printf_common+0x8e>
	...

0800cec0 <_printf_i>:
 800cec0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cec4:	7e0f      	ldrb	r7, [r1, #24]
 800cec6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cec8:	2f78      	cmp	r7, #120	; 0x78
 800ceca:	4691      	mov	r9, r2
 800cecc:	4680      	mov	r8, r0
 800cece:	460c      	mov	r4, r1
 800ced0:	469a      	mov	sl, r3
 800ced2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ced6:	d807      	bhi.n	800cee8 <_printf_i+0x28>
 800ced8:	2f62      	cmp	r7, #98	; 0x62
 800ceda:	d80a      	bhi.n	800cef2 <_printf_i+0x32>
 800cedc:	2f00      	cmp	r7, #0
 800cede:	f000 80d8 	beq.w	800d092 <_printf_i+0x1d2>
 800cee2:	2f58      	cmp	r7, #88	; 0x58
 800cee4:	f000 80a3 	beq.w	800d02e <_printf_i+0x16e>
 800cee8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ceec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cef0:	e03a      	b.n	800cf68 <_printf_i+0xa8>
 800cef2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cef6:	2b15      	cmp	r3, #21
 800cef8:	d8f6      	bhi.n	800cee8 <_printf_i+0x28>
 800cefa:	a101      	add	r1, pc, #4	; (adr r1, 800cf00 <_printf_i+0x40>)
 800cefc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cf00:	0800cf59 	.word	0x0800cf59
 800cf04:	0800cf6d 	.word	0x0800cf6d
 800cf08:	0800cee9 	.word	0x0800cee9
 800cf0c:	0800cee9 	.word	0x0800cee9
 800cf10:	0800cee9 	.word	0x0800cee9
 800cf14:	0800cee9 	.word	0x0800cee9
 800cf18:	0800cf6d 	.word	0x0800cf6d
 800cf1c:	0800cee9 	.word	0x0800cee9
 800cf20:	0800cee9 	.word	0x0800cee9
 800cf24:	0800cee9 	.word	0x0800cee9
 800cf28:	0800cee9 	.word	0x0800cee9
 800cf2c:	0800d079 	.word	0x0800d079
 800cf30:	0800cf9d 	.word	0x0800cf9d
 800cf34:	0800d05b 	.word	0x0800d05b
 800cf38:	0800cee9 	.word	0x0800cee9
 800cf3c:	0800cee9 	.word	0x0800cee9
 800cf40:	0800d09b 	.word	0x0800d09b
 800cf44:	0800cee9 	.word	0x0800cee9
 800cf48:	0800cf9d 	.word	0x0800cf9d
 800cf4c:	0800cee9 	.word	0x0800cee9
 800cf50:	0800cee9 	.word	0x0800cee9
 800cf54:	0800d063 	.word	0x0800d063
 800cf58:	682b      	ldr	r3, [r5, #0]
 800cf5a:	1d1a      	adds	r2, r3, #4
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	602a      	str	r2, [r5, #0]
 800cf60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cf64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cf68:	2301      	movs	r3, #1
 800cf6a:	e0a3      	b.n	800d0b4 <_printf_i+0x1f4>
 800cf6c:	6820      	ldr	r0, [r4, #0]
 800cf6e:	6829      	ldr	r1, [r5, #0]
 800cf70:	0606      	lsls	r6, r0, #24
 800cf72:	f101 0304 	add.w	r3, r1, #4
 800cf76:	d50a      	bpl.n	800cf8e <_printf_i+0xce>
 800cf78:	680e      	ldr	r6, [r1, #0]
 800cf7a:	602b      	str	r3, [r5, #0]
 800cf7c:	2e00      	cmp	r6, #0
 800cf7e:	da03      	bge.n	800cf88 <_printf_i+0xc8>
 800cf80:	232d      	movs	r3, #45	; 0x2d
 800cf82:	4276      	negs	r6, r6
 800cf84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cf88:	485e      	ldr	r0, [pc, #376]	; (800d104 <_printf_i+0x244>)
 800cf8a:	230a      	movs	r3, #10
 800cf8c:	e019      	b.n	800cfc2 <_printf_i+0x102>
 800cf8e:	680e      	ldr	r6, [r1, #0]
 800cf90:	602b      	str	r3, [r5, #0]
 800cf92:	f010 0f40 	tst.w	r0, #64	; 0x40
 800cf96:	bf18      	it	ne
 800cf98:	b236      	sxthne	r6, r6
 800cf9a:	e7ef      	b.n	800cf7c <_printf_i+0xbc>
 800cf9c:	682b      	ldr	r3, [r5, #0]
 800cf9e:	6820      	ldr	r0, [r4, #0]
 800cfa0:	1d19      	adds	r1, r3, #4
 800cfa2:	6029      	str	r1, [r5, #0]
 800cfa4:	0601      	lsls	r1, r0, #24
 800cfa6:	d501      	bpl.n	800cfac <_printf_i+0xec>
 800cfa8:	681e      	ldr	r6, [r3, #0]
 800cfaa:	e002      	b.n	800cfb2 <_printf_i+0xf2>
 800cfac:	0646      	lsls	r6, r0, #25
 800cfae:	d5fb      	bpl.n	800cfa8 <_printf_i+0xe8>
 800cfb0:	881e      	ldrh	r6, [r3, #0]
 800cfb2:	4854      	ldr	r0, [pc, #336]	; (800d104 <_printf_i+0x244>)
 800cfb4:	2f6f      	cmp	r7, #111	; 0x6f
 800cfb6:	bf0c      	ite	eq
 800cfb8:	2308      	moveq	r3, #8
 800cfba:	230a      	movne	r3, #10
 800cfbc:	2100      	movs	r1, #0
 800cfbe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cfc2:	6865      	ldr	r5, [r4, #4]
 800cfc4:	60a5      	str	r5, [r4, #8]
 800cfc6:	2d00      	cmp	r5, #0
 800cfc8:	bfa2      	ittt	ge
 800cfca:	6821      	ldrge	r1, [r4, #0]
 800cfcc:	f021 0104 	bicge.w	r1, r1, #4
 800cfd0:	6021      	strge	r1, [r4, #0]
 800cfd2:	b90e      	cbnz	r6, 800cfd8 <_printf_i+0x118>
 800cfd4:	2d00      	cmp	r5, #0
 800cfd6:	d04d      	beq.n	800d074 <_printf_i+0x1b4>
 800cfd8:	4615      	mov	r5, r2
 800cfda:	fbb6 f1f3 	udiv	r1, r6, r3
 800cfde:	fb03 6711 	mls	r7, r3, r1, r6
 800cfe2:	5dc7      	ldrb	r7, [r0, r7]
 800cfe4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cfe8:	4637      	mov	r7, r6
 800cfea:	42bb      	cmp	r3, r7
 800cfec:	460e      	mov	r6, r1
 800cfee:	d9f4      	bls.n	800cfda <_printf_i+0x11a>
 800cff0:	2b08      	cmp	r3, #8
 800cff2:	d10b      	bne.n	800d00c <_printf_i+0x14c>
 800cff4:	6823      	ldr	r3, [r4, #0]
 800cff6:	07de      	lsls	r6, r3, #31
 800cff8:	d508      	bpl.n	800d00c <_printf_i+0x14c>
 800cffa:	6923      	ldr	r3, [r4, #16]
 800cffc:	6861      	ldr	r1, [r4, #4]
 800cffe:	4299      	cmp	r1, r3
 800d000:	bfde      	ittt	le
 800d002:	2330      	movle	r3, #48	; 0x30
 800d004:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d008:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800d00c:	1b52      	subs	r2, r2, r5
 800d00e:	6122      	str	r2, [r4, #16]
 800d010:	f8cd a000 	str.w	sl, [sp]
 800d014:	464b      	mov	r3, r9
 800d016:	aa03      	add	r2, sp, #12
 800d018:	4621      	mov	r1, r4
 800d01a:	4640      	mov	r0, r8
 800d01c:	f7ff fee2 	bl	800cde4 <_printf_common>
 800d020:	3001      	adds	r0, #1
 800d022:	d14c      	bne.n	800d0be <_printf_i+0x1fe>
 800d024:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d028:	b004      	add	sp, #16
 800d02a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d02e:	4835      	ldr	r0, [pc, #212]	; (800d104 <_printf_i+0x244>)
 800d030:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d034:	6829      	ldr	r1, [r5, #0]
 800d036:	6823      	ldr	r3, [r4, #0]
 800d038:	f851 6b04 	ldr.w	r6, [r1], #4
 800d03c:	6029      	str	r1, [r5, #0]
 800d03e:	061d      	lsls	r5, r3, #24
 800d040:	d514      	bpl.n	800d06c <_printf_i+0x1ac>
 800d042:	07df      	lsls	r7, r3, #31
 800d044:	bf44      	itt	mi
 800d046:	f043 0320 	orrmi.w	r3, r3, #32
 800d04a:	6023      	strmi	r3, [r4, #0]
 800d04c:	b91e      	cbnz	r6, 800d056 <_printf_i+0x196>
 800d04e:	6823      	ldr	r3, [r4, #0]
 800d050:	f023 0320 	bic.w	r3, r3, #32
 800d054:	6023      	str	r3, [r4, #0]
 800d056:	2310      	movs	r3, #16
 800d058:	e7b0      	b.n	800cfbc <_printf_i+0xfc>
 800d05a:	6823      	ldr	r3, [r4, #0]
 800d05c:	f043 0320 	orr.w	r3, r3, #32
 800d060:	6023      	str	r3, [r4, #0]
 800d062:	2378      	movs	r3, #120	; 0x78
 800d064:	4828      	ldr	r0, [pc, #160]	; (800d108 <_printf_i+0x248>)
 800d066:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d06a:	e7e3      	b.n	800d034 <_printf_i+0x174>
 800d06c:	0659      	lsls	r1, r3, #25
 800d06e:	bf48      	it	mi
 800d070:	b2b6      	uxthmi	r6, r6
 800d072:	e7e6      	b.n	800d042 <_printf_i+0x182>
 800d074:	4615      	mov	r5, r2
 800d076:	e7bb      	b.n	800cff0 <_printf_i+0x130>
 800d078:	682b      	ldr	r3, [r5, #0]
 800d07a:	6826      	ldr	r6, [r4, #0]
 800d07c:	6961      	ldr	r1, [r4, #20]
 800d07e:	1d18      	adds	r0, r3, #4
 800d080:	6028      	str	r0, [r5, #0]
 800d082:	0635      	lsls	r5, r6, #24
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	d501      	bpl.n	800d08c <_printf_i+0x1cc>
 800d088:	6019      	str	r1, [r3, #0]
 800d08a:	e002      	b.n	800d092 <_printf_i+0x1d2>
 800d08c:	0670      	lsls	r0, r6, #25
 800d08e:	d5fb      	bpl.n	800d088 <_printf_i+0x1c8>
 800d090:	8019      	strh	r1, [r3, #0]
 800d092:	2300      	movs	r3, #0
 800d094:	6123      	str	r3, [r4, #16]
 800d096:	4615      	mov	r5, r2
 800d098:	e7ba      	b.n	800d010 <_printf_i+0x150>
 800d09a:	682b      	ldr	r3, [r5, #0]
 800d09c:	1d1a      	adds	r2, r3, #4
 800d09e:	602a      	str	r2, [r5, #0]
 800d0a0:	681d      	ldr	r5, [r3, #0]
 800d0a2:	6862      	ldr	r2, [r4, #4]
 800d0a4:	2100      	movs	r1, #0
 800d0a6:	4628      	mov	r0, r5
 800d0a8:	f7f3 f892 	bl	80001d0 <memchr>
 800d0ac:	b108      	cbz	r0, 800d0b2 <_printf_i+0x1f2>
 800d0ae:	1b40      	subs	r0, r0, r5
 800d0b0:	6060      	str	r0, [r4, #4]
 800d0b2:	6863      	ldr	r3, [r4, #4]
 800d0b4:	6123      	str	r3, [r4, #16]
 800d0b6:	2300      	movs	r3, #0
 800d0b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d0bc:	e7a8      	b.n	800d010 <_printf_i+0x150>
 800d0be:	6923      	ldr	r3, [r4, #16]
 800d0c0:	462a      	mov	r2, r5
 800d0c2:	4649      	mov	r1, r9
 800d0c4:	4640      	mov	r0, r8
 800d0c6:	47d0      	blx	sl
 800d0c8:	3001      	adds	r0, #1
 800d0ca:	d0ab      	beq.n	800d024 <_printf_i+0x164>
 800d0cc:	6823      	ldr	r3, [r4, #0]
 800d0ce:	079b      	lsls	r3, r3, #30
 800d0d0:	d413      	bmi.n	800d0fa <_printf_i+0x23a>
 800d0d2:	68e0      	ldr	r0, [r4, #12]
 800d0d4:	9b03      	ldr	r3, [sp, #12]
 800d0d6:	4298      	cmp	r0, r3
 800d0d8:	bfb8      	it	lt
 800d0da:	4618      	movlt	r0, r3
 800d0dc:	e7a4      	b.n	800d028 <_printf_i+0x168>
 800d0de:	2301      	movs	r3, #1
 800d0e0:	4632      	mov	r2, r6
 800d0e2:	4649      	mov	r1, r9
 800d0e4:	4640      	mov	r0, r8
 800d0e6:	47d0      	blx	sl
 800d0e8:	3001      	adds	r0, #1
 800d0ea:	d09b      	beq.n	800d024 <_printf_i+0x164>
 800d0ec:	3501      	adds	r5, #1
 800d0ee:	68e3      	ldr	r3, [r4, #12]
 800d0f0:	9903      	ldr	r1, [sp, #12]
 800d0f2:	1a5b      	subs	r3, r3, r1
 800d0f4:	42ab      	cmp	r3, r5
 800d0f6:	dcf2      	bgt.n	800d0de <_printf_i+0x21e>
 800d0f8:	e7eb      	b.n	800d0d2 <_printf_i+0x212>
 800d0fa:	2500      	movs	r5, #0
 800d0fc:	f104 0619 	add.w	r6, r4, #25
 800d100:	e7f5      	b.n	800d0ee <_printf_i+0x22e>
 800d102:	bf00      	nop
 800d104:	080141a1 	.word	0x080141a1
 800d108:	080141b2 	.word	0x080141b2

0800d10c <_putc_r>:
 800d10c:	b570      	push	{r4, r5, r6, lr}
 800d10e:	460d      	mov	r5, r1
 800d110:	4614      	mov	r4, r2
 800d112:	4606      	mov	r6, r0
 800d114:	b118      	cbz	r0, 800d11e <_putc_r+0x12>
 800d116:	6983      	ldr	r3, [r0, #24]
 800d118:	b90b      	cbnz	r3, 800d11e <_putc_r+0x12>
 800d11a:	f7ff fa79 	bl	800c610 <__sinit>
 800d11e:	4b1c      	ldr	r3, [pc, #112]	; (800d190 <_putc_r+0x84>)
 800d120:	429c      	cmp	r4, r3
 800d122:	d124      	bne.n	800d16e <_putc_r+0x62>
 800d124:	6874      	ldr	r4, [r6, #4]
 800d126:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d128:	07d8      	lsls	r0, r3, #31
 800d12a:	d405      	bmi.n	800d138 <_putc_r+0x2c>
 800d12c:	89a3      	ldrh	r3, [r4, #12]
 800d12e:	0599      	lsls	r1, r3, #22
 800d130:	d402      	bmi.n	800d138 <_putc_r+0x2c>
 800d132:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d134:	f7ff fb0a 	bl	800c74c <__retarget_lock_acquire_recursive>
 800d138:	68a3      	ldr	r3, [r4, #8]
 800d13a:	3b01      	subs	r3, #1
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	60a3      	str	r3, [r4, #8]
 800d140:	da05      	bge.n	800d14e <_putc_r+0x42>
 800d142:	69a2      	ldr	r2, [r4, #24]
 800d144:	4293      	cmp	r3, r2
 800d146:	db1c      	blt.n	800d182 <_putc_r+0x76>
 800d148:	b2eb      	uxtb	r3, r5
 800d14a:	2b0a      	cmp	r3, #10
 800d14c:	d019      	beq.n	800d182 <_putc_r+0x76>
 800d14e:	6823      	ldr	r3, [r4, #0]
 800d150:	1c5a      	adds	r2, r3, #1
 800d152:	6022      	str	r2, [r4, #0]
 800d154:	701d      	strb	r5, [r3, #0]
 800d156:	b2ed      	uxtb	r5, r5
 800d158:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d15a:	07da      	lsls	r2, r3, #31
 800d15c:	d405      	bmi.n	800d16a <_putc_r+0x5e>
 800d15e:	89a3      	ldrh	r3, [r4, #12]
 800d160:	059b      	lsls	r3, r3, #22
 800d162:	d402      	bmi.n	800d16a <_putc_r+0x5e>
 800d164:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d166:	f7ff faf2 	bl	800c74e <__retarget_lock_release_recursive>
 800d16a:	4628      	mov	r0, r5
 800d16c:	bd70      	pop	{r4, r5, r6, pc}
 800d16e:	4b09      	ldr	r3, [pc, #36]	; (800d194 <_putc_r+0x88>)
 800d170:	429c      	cmp	r4, r3
 800d172:	d101      	bne.n	800d178 <_putc_r+0x6c>
 800d174:	68b4      	ldr	r4, [r6, #8]
 800d176:	e7d6      	b.n	800d126 <_putc_r+0x1a>
 800d178:	4b07      	ldr	r3, [pc, #28]	; (800d198 <_putc_r+0x8c>)
 800d17a:	429c      	cmp	r4, r3
 800d17c:	bf08      	it	eq
 800d17e:	68f4      	ldreq	r4, [r6, #12]
 800d180:	e7d1      	b.n	800d126 <_putc_r+0x1a>
 800d182:	4629      	mov	r1, r5
 800d184:	4622      	mov	r2, r4
 800d186:	4630      	mov	r0, r6
 800d188:	f000 f85c 	bl	800d244 <__swbuf_r>
 800d18c:	4605      	mov	r5, r0
 800d18e:	e7e3      	b.n	800d158 <_putc_r+0x4c>
 800d190:	08014150 	.word	0x08014150
 800d194:	08014170 	.word	0x08014170
 800d198:	08014130 	.word	0x08014130

0800d19c <_sbrk_r>:
 800d19c:	b538      	push	{r3, r4, r5, lr}
 800d19e:	4d06      	ldr	r5, [pc, #24]	; (800d1b8 <_sbrk_r+0x1c>)
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	4604      	mov	r4, r0
 800d1a4:	4608      	mov	r0, r1
 800d1a6:	602b      	str	r3, [r5, #0]
 800d1a8:	f7f5 f92e 	bl	8002408 <_sbrk>
 800d1ac:	1c43      	adds	r3, r0, #1
 800d1ae:	d102      	bne.n	800d1b6 <_sbrk_r+0x1a>
 800d1b0:	682b      	ldr	r3, [r5, #0]
 800d1b2:	b103      	cbz	r3, 800d1b6 <_sbrk_r+0x1a>
 800d1b4:	6023      	str	r3, [r4, #0]
 800d1b6:	bd38      	pop	{r3, r4, r5, pc}
 800d1b8:	20000e68 	.word	0x20000e68

0800d1bc <__sread>:
 800d1bc:	b510      	push	{r4, lr}
 800d1be:	460c      	mov	r4, r1
 800d1c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d1c4:	f000 fb0a 	bl	800d7dc <_read_r>
 800d1c8:	2800      	cmp	r0, #0
 800d1ca:	bfab      	itete	ge
 800d1cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d1ce:	89a3      	ldrhlt	r3, [r4, #12]
 800d1d0:	181b      	addge	r3, r3, r0
 800d1d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d1d6:	bfac      	ite	ge
 800d1d8:	6563      	strge	r3, [r4, #84]	; 0x54
 800d1da:	81a3      	strhlt	r3, [r4, #12]
 800d1dc:	bd10      	pop	{r4, pc}

0800d1de <__swrite>:
 800d1de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1e2:	461f      	mov	r7, r3
 800d1e4:	898b      	ldrh	r3, [r1, #12]
 800d1e6:	05db      	lsls	r3, r3, #23
 800d1e8:	4605      	mov	r5, r0
 800d1ea:	460c      	mov	r4, r1
 800d1ec:	4616      	mov	r6, r2
 800d1ee:	d505      	bpl.n	800d1fc <__swrite+0x1e>
 800d1f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d1f4:	2302      	movs	r3, #2
 800d1f6:	2200      	movs	r2, #0
 800d1f8:	f000 f9c8 	bl	800d58c <_lseek_r>
 800d1fc:	89a3      	ldrh	r3, [r4, #12]
 800d1fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d202:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d206:	81a3      	strh	r3, [r4, #12]
 800d208:	4632      	mov	r2, r6
 800d20a:	463b      	mov	r3, r7
 800d20c:	4628      	mov	r0, r5
 800d20e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d212:	f000 b869 	b.w	800d2e8 <_write_r>

0800d216 <__sseek>:
 800d216:	b510      	push	{r4, lr}
 800d218:	460c      	mov	r4, r1
 800d21a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d21e:	f000 f9b5 	bl	800d58c <_lseek_r>
 800d222:	1c43      	adds	r3, r0, #1
 800d224:	89a3      	ldrh	r3, [r4, #12]
 800d226:	bf15      	itete	ne
 800d228:	6560      	strne	r0, [r4, #84]	; 0x54
 800d22a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d22e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d232:	81a3      	strheq	r3, [r4, #12]
 800d234:	bf18      	it	ne
 800d236:	81a3      	strhne	r3, [r4, #12]
 800d238:	bd10      	pop	{r4, pc}

0800d23a <__sclose>:
 800d23a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d23e:	f000 b8d3 	b.w	800d3e8 <_close_r>
	...

0800d244 <__swbuf_r>:
 800d244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d246:	460e      	mov	r6, r1
 800d248:	4614      	mov	r4, r2
 800d24a:	4605      	mov	r5, r0
 800d24c:	b118      	cbz	r0, 800d256 <__swbuf_r+0x12>
 800d24e:	6983      	ldr	r3, [r0, #24]
 800d250:	b90b      	cbnz	r3, 800d256 <__swbuf_r+0x12>
 800d252:	f7ff f9dd 	bl	800c610 <__sinit>
 800d256:	4b21      	ldr	r3, [pc, #132]	; (800d2dc <__swbuf_r+0x98>)
 800d258:	429c      	cmp	r4, r3
 800d25a:	d12b      	bne.n	800d2b4 <__swbuf_r+0x70>
 800d25c:	686c      	ldr	r4, [r5, #4]
 800d25e:	69a3      	ldr	r3, [r4, #24]
 800d260:	60a3      	str	r3, [r4, #8]
 800d262:	89a3      	ldrh	r3, [r4, #12]
 800d264:	071a      	lsls	r2, r3, #28
 800d266:	d52f      	bpl.n	800d2c8 <__swbuf_r+0x84>
 800d268:	6923      	ldr	r3, [r4, #16]
 800d26a:	b36b      	cbz	r3, 800d2c8 <__swbuf_r+0x84>
 800d26c:	6923      	ldr	r3, [r4, #16]
 800d26e:	6820      	ldr	r0, [r4, #0]
 800d270:	1ac0      	subs	r0, r0, r3
 800d272:	6963      	ldr	r3, [r4, #20]
 800d274:	b2f6      	uxtb	r6, r6
 800d276:	4283      	cmp	r3, r0
 800d278:	4637      	mov	r7, r6
 800d27a:	dc04      	bgt.n	800d286 <__swbuf_r+0x42>
 800d27c:	4621      	mov	r1, r4
 800d27e:	4628      	mov	r0, r5
 800d280:	f000 f948 	bl	800d514 <_fflush_r>
 800d284:	bb30      	cbnz	r0, 800d2d4 <__swbuf_r+0x90>
 800d286:	68a3      	ldr	r3, [r4, #8]
 800d288:	3b01      	subs	r3, #1
 800d28a:	60a3      	str	r3, [r4, #8]
 800d28c:	6823      	ldr	r3, [r4, #0]
 800d28e:	1c5a      	adds	r2, r3, #1
 800d290:	6022      	str	r2, [r4, #0]
 800d292:	701e      	strb	r6, [r3, #0]
 800d294:	6963      	ldr	r3, [r4, #20]
 800d296:	3001      	adds	r0, #1
 800d298:	4283      	cmp	r3, r0
 800d29a:	d004      	beq.n	800d2a6 <__swbuf_r+0x62>
 800d29c:	89a3      	ldrh	r3, [r4, #12]
 800d29e:	07db      	lsls	r3, r3, #31
 800d2a0:	d506      	bpl.n	800d2b0 <__swbuf_r+0x6c>
 800d2a2:	2e0a      	cmp	r6, #10
 800d2a4:	d104      	bne.n	800d2b0 <__swbuf_r+0x6c>
 800d2a6:	4621      	mov	r1, r4
 800d2a8:	4628      	mov	r0, r5
 800d2aa:	f000 f933 	bl	800d514 <_fflush_r>
 800d2ae:	b988      	cbnz	r0, 800d2d4 <__swbuf_r+0x90>
 800d2b0:	4638      	mov	r0, r7
 800d2b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d2b4:	4b0a      	ldr	r3, [pc, #40]	; (800d2e0 <__swbuf_r+0x9c>)
 800d2b6:	429c      	cmp	r4, r3
 800d2b8:	d101      	bne.n	800d2be <__swbuf_r+0x7a>
 800d2ba:	68ac      	ldr	r4, [r5, #8]
 800d2bc:	e7cf      	b.n	800d25e <__swbuf_r+0x1a>
 800d2be:	4b09      	ldr	r3, [pc, #36]	; (800d2e4 <__swbuf_r+0xa0>)
 800d2c0:	429c      	cmp	r4, r3
 800d2c2:	bf08      	it	eq
 800d2c4:	68ec      	ldreq	r4, [r5, #12]
 800d2c6:	e7ca      	b.n	800d25e <__swbuf_r+0x1a>
 800d2c8:	4621      	mov	r1, r4
 800d2ca:	4628      	mov	r0, r5
 800d2cc:	f000 f81e 	bl	800d30c <__swsetup_r>
 800d2d0:	2800      	cmp	r0, #0
 800d2d2:	d0cb      	beq.n	800d26c <__swbuf_r+0x28>
 800d2d4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800d2d8:	e7ea      	b.n	800d2b0 <__swbuf_r+0x6c>
 800d2da:	bf00      	nop
 800d2dc:	08014150 	.word	0x08014150
 800d2e0:	08014170 	.word	0x08014170
 800d2e4:	08014130 	.word	0x08014130

0800d2e8 <_write_r>:
 800d2e8:	b538      	push	{r3, r4, r5, lr}
 800d2ea:	4d07      	ldr	r5, [pc, #28]	; (800d308 <_write_r+0x20>)
 800d2ec:	4604      	mov	r4, r0
 800d2ee:	4608      	mov	r0, r1
 800d2f0:	4611      	mov	r1, r2
 800d2f2:	2200      	movs	r2, #0
 800d2f4:	602a      	str	r2, [r5, #0]
 800d2f6:	461a      	mov	r2, r3
 800d2f8:	f7f5 f835 	bl	8002366 <_write>
 800d2fc:	1c43      	adds	r3, r0, #1
 800d2fe:	d102      	bne.n	800d306 <_write_r+0x1e>
 800d300:	682b      	ldr	r3, [r5, #0]
 800d302:	b103      	cbz	r3, 800d306 <_write_r+0x1e>
 800d304:	6023      	str	r3, [r4, #0]
 800d306:	bd38      	pop	{r3, r4, r5, pc}
 800d308:	20000e68 	.word	0x20000e68

0800d30c <__swsetup_r>:
 800d30c:	4b32      	ldr	r3, [pc, #200]	; (800d3d8 <__swsetup_r+0xcc>)
 800d30e:	b570      	push	{r4, r5, r6, lr}
 800d310:	681d      	ldr	r5, [r3, #0]
 800d312:	4606      	mov	r6, r0
 800d314:	460c      	mov	r4, r1
 800d316:	b125      	cbz	r5, 800d322 <__swsetup_r+0x16>
 800d318:	69ab      	ldr	r3, [r5, #24]
 800d31a:	b913      	cbnz	r3, 800d322 <__swsetup_r+0x16>
 800d31c:	4628      	mov	r0, r5
 800d31e:	f7ff f977 	bl	800c610 <__sinit>
 800d322:	4b2e      	ldr	r3, [pc, #184]	; (800d3dc <__swsetup_r+0xd0>)
 800d324:	429c      	cmp	r4, r3
 800d326:	d10f      	bne.n	800d348 <__swsetup_r+0x3c>
 800d328:	686c      	ldr	r4, [r5, #4]
 800d32a:	89a3      	ldrh	r3, [r4, #12]
 800d32c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d330:	0719      	lsls	r1, r3, #28
 800d332:	d42c      	bmi.n	800d38e <__swsetup_r+0x82>
 800d334:	06dd      	lsls	r5, r3, #27
 800d336:	d411      	bmi.n	800d35c <__swsetup_r+0x50>
 800d338:	2309      	movs	r3, #9
 800d33a:	6033      	str	r3, [r6, #0]
 800d33c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d340:	81a3      	strh	r3, [r4, #12]
 800d342:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d346:	e03e      	b.n	800d3c6 <__swsetup_r+0xba>
 800d348:	4b25      	ldr	r3, [pc, #148]	; (800d3e0 <__swsetup_r+0xd4>)
 800d34a:	429c      	cmp	r4, r3
 800d34c:	d101      	bne.n	800d352 <__swsetup_r+0x46>
 800d34e:	68ac      	ldr	r4, [r5, #8]
 800d350:	e7eb      	b.n	800d32a <__swsetup_r+0x1e>
 800d352:	4b24      	ldr	r3, [pc, #144]	; (800d3e4 <__swsetup_r+0xd8>)
 800d354:	429c      	cmp	r4, r3
 800d356:	bf08      	it	eq
 800d358:	68ec      	ldreq	r4, [r5, #12]
 800d35a:	e7e6      	b.n	800d32a <__swsetup_r+0x1e>
 800d35c:	0758      	lsls	r0, r3, #29
 800d35e:	d512      	bpl.n	800d386 <__swsetup_r+0x7a>
 800d360:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d362:	b141      	cbz	r1, 800d376 <__swsetup_r+0x6a>
 800d364:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d368:	4299      	cmp	r1, r3
 800d36a:	d002      	beq.n	800d372 <__swsetup_r+0x66>
 800d36c:	4630      	mov	r0, r6
 800d36e:	f000 f9b9 	bl	800d6e4 <_free_r>
 800d372:	2300      	movs	r3, #0
 800d374:	6363      	str	r3, [r4, #52]	; 0x34
 800d376:	89a3      	ldrh	r3, [r4, #12]
 800d378:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d37c:	81a3      	strh	r3, [r4, #12]
 800d37e:	2300      	movs	r3, #0
 800d380:	6063      	str	r3, [r4, #4]
 800d382:	6923      	ldr	r3, [r4, #16]
 800d384:	6023      	str	r3, [r4, #0]
 800d386:	89a3      	ldrh	r3, [r4, #12]
 800d388:	f043 0308 	orr.w	r3, r3, #8
 800d38c:	81a3      	strh	r3, [r4, #12]
 800d38e:	6923      	ldr	r3, [r4, #16]
 800d390:	b94b      	cbnz	r3, 800d3a6 <__swsetup_r+0x9a>
 800d392:	89a3      	ldrh	r3, [r4, #12]
 800d394:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d398:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d39c:	d003      	beq.n	800d3a6 <__swsetup_r+0x9a>
 800d39e:	4621      	mov	r1, r4
 800d3a0:	4630      	mov	r0, r6
 800d3a2:	f000 f92b 	bl	800d5fc <__smakebuf_r>
 800d3a6:	89a0      	ldrh	r0, [r4, #12]
 800d3a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d3ac:	f010 0301 	ands.w	r3, r0, #1
 800d3b0:	d00a      	beq.n	800d3c8 <__swsetup_r+0xbc>
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	60a3      	str	r3, [r4, #8]
 800d3b6:	6963      	ldr	r3, [r4, #20]
 800d3b8:	425b      	negs	r3, r3
 800d3ba:	61a3      	str	r3, [r4, #24]
 800d3bc:	6923      	ldr	r3, [r4, #16]
 800d3be:	b943      	cbnz	r3, 800d3d2 <__swsetup_r+0xc6>
 800d3c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d3c4:	d1ba      	bne.n	800d33c <__swsetup_r+0x30>
 800d3c6:	bd70      	pop	{r4, r5, r6, pc}
 800d3c8:	0781      	lsls	r1, r0, #30
 800d3ca:	bf58      	it	pl
 800d3cc:	6963      	ldrpl	r3, [r4, #20]
 800d3ce:	60a3      	str	r3, [r4, #8]
 800d3d0:	e7f4      	b.n	800d3bc <__swsetup_r+0xb0>
 800d3d2:	2000      	movs	r0, #0
 800d3d4:	e7f7      	b.n	800d3c6 <__swsetup_r+0xba>
 800d3d6:	bf00      	nop
 800d3d8:	20000144 	.word	0x20000144
 800d3dc:	08014150 	.word	0x08014150
 800d3e0:	08014170 	.word	0x08014170
 800d3e4:	08014130 	.word	0x08014130

0800d3e8 <_close_r>:
 800d3e8:	b538      	push	{r3, r4, r5, lr}
 800d3ea:	4d06      	ldr	r5, [pc, #24]	; (800d404 <_close_r+0x1c>)
 800d3ec:	2300      	movs	r3, #0
 800d3ee:	4604      	mov	r4, r0
 800d3f0:	4608      	mov	r0, r1
 800d3f2:	602b      	str	r3, [r5, #0]
 800d3f4:	f7f4 ffd3 	bl	800239e <_close>
 800d3f8:	1c43      	adds	r3, r0, #1
 800d3fa:	d102      	bne.n	800d402 <_close_r+0x1a>
 800d3fc:	682b      	ldr	r3, [r5, #0]
 800d3fe:	b103      	cbz	r3, 800d402 <_close_r+0x1a>
 800d400:	6023      	str	r3, [r4, #0]
 800d402:	bd38      	pop	{r3, r4, r5, pc}
 800d404:	20000e68 	.word	0x20000e68

0800d408 <__sflush_r>:
 800d408:	898a      	ldrh	r2, [r1, #12]
 800d40a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d40e:	4605      	mov	r5, r0
 800d410:	0710      	lsls	r0, r2, #28
 800d412:	460c      	mov	r4, r1
 800d414:	d458      	bmi.n	800d4c8 <__sflush_r+0xc0>
 800d416:	684b      	ldr	r3, [r1, #4]
 800d418:	2b00      	cmp	r3, #0
 800d41a:	dc05      	bgt.n	800d428 <__sflush_r+0x20>
 800d41c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d41e:	2b00      	cmp	r3, #0
 800d420:	dc02      	bgt.n	800d428 <__sflush_r+0x20>
 800d422:	2000      	movs	r0, #0
 800d424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d428:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d42a:	2e00      	cmp	r6, #0
 800d42c:	d0f9      	beq.n	800d422 <__sflush_r+0x1a>
 800d42e:	2300      	movs	r3, #0
 800d430:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d434:	682f      	ldr	r7, [r5, #0]
 800d436:	602b      	str	r3, [r5, #0]
 800d438:	d032      	beq.n	800d4a0 <__sflush_r+0x98>
 800d43a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d43c:	89a3      	ldrh	r3, [r4, #12]
 800d43e:	075a      	lsls	r2, r3, #29
 800d440:	d505      	bpl.n	800d44e <__sflush_r+0x46>
 800d442:	6863      	ldr	r3, [r4, #4]
 800d444:	1ac0      	subs	r0, r0, r3
 800d446:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d448:	b10b      	cbz	r3, 800d44e <__sflush_r+0x46>
 800d44a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d44c:	1ac0      	subs	r0, r0, r3
 800d44e:	2300      	movs	r3, #0
 800d450:	4602      	mov	r2, r0
 800d452:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d454:	6a21      	ldr	r1, [r4, #32]
 800d456:	4628      	mov	r0, r5
 800d458:	47b0      	blx	r6
 800d45a:	1c43      	adds	r3, r0, #1
 800d45c:	89a3      	ldrh	r3, [r4, #12]
 800d45e:	d106      	bne.n	800d46e <__sflush_r+0x66>
 800d460:	6829      	ldr	r1, [r5, #0]
 800d462:	291d      	cmp	r1, #29
 800d464:	d82c      	bhi.n	800d4c0 <__sflush_r+0xb8>
 800d466:	4a2a      	ldr	r2, [pc, #168]	; (800d510 <__sflush_r+0x108>)
 800d468:	40ca      	lsrs	r2, r1
 800d46a:	07d6      	lsls	r6, r2, #31
 800d46c:	d528      	bpl.n	800d4c0 <__sflush_r+0xb8>
 800d46e:	2200      	movs	r2, #0
 800d470:	6062      	str	r2, [r4, #4]
 800d472:	04d9      	lsls	r1, r3, #19
 800d474:	6922      	ldr	r2, [r4, #16]
 800d476:	6022      	str	r2, [r4, #0]
 800d478:	d504      	bpl.n	800d484 <__sflush_r+0x7c>
 800d47a:	1c42      	adds	r2, r0, #1
 800d47c:	d101      	bne.n	800d482 <__sflush_r+0x7a>
 800d47e:	682b      	ldr	r3, [r5, #0]
 800d480:	b903      	cbnz	r3, 800d484 <__sflush_r+0x7c>
 800d482:	6560      	str	r0, [r4, #84]	; 0x54
 800d484:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d486:	602f      	str	r7, [r5, #0]
 800d488:	2900      	cmp	r1, #0
 800d48a:	d0ca      	beq.n	800d422 <__sflush_r+0x1a>
 800d48c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d490:	4299      	cmp	r1, r3
 800d492:	d002      	beq.n	800d49a <__sflush_r+0x92>
 800d494:	4628      	mov	r0, r5
 800d496:	f000 f925 	bl	800d6e4 <_free_r>
 800d49a:	2000      	movs	r0, #0
 800d49c:	6360      	str	r0, [r4, #52]	; 0x34
 800d49e:	e7c1      	b.n	800d424 <__sflush_r+0x1c>
 800d4a0:	6a21      	ldr	r1, [r4, #32]
 800d4a2:	2301      	movs	r3, #1
 800d4a4:	4628      	mov	r0, r5
 800d4a6:	47b0      	blx	r6
 800d4a8:	1c41      	adds	r1, r0, #1
 800d4aa:	d1c7      	bne.n	800d43c <__sflush_r+0x34>
 800d4ac:	682b      	ldr	r3, [r5, #0]
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d0c4      	beq.n	800d43c <__sflush_r+0x34>
 800d4b2:	2b1d      	cmp	r3, #29
 800d4b4:	d001      	beq.n	800d4ba <__sflush_r+0xb2>
 800d4b6:	2b16      	cmp	r3, #22
 800d4b8:	d101      	bne.n	800d4be <__sflush_r+0xb6>
 800d4ba:	602f      	str	r7, [r5, #0]
 800d4bc:	e7b1      	b.n	800d422 <__sflush_r+0x1a>
 800d4be:	89a3      	ldrh	r3, [r4, #12]
 800d4c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d4c4:	81a3      	strh	r3, [r4, #12]
 800d4c6:	e7ad      	b.n	800d424 <__sflush_r+0x1c>
 800d4c8:	690f      	ldr	r7, [r1, #16]
 800d4ca:	2f00      	cmp	r7, #0
 800d4cc:	d0a9      	beq.n	800d422 <__sflush_r+0x1a>
 800d4ce:	0793      	lsls	r3, r2, #30
 800d4d0:	680e      	ldr	r6, [r1, #0]
 800d4d2:	bf08      	it	eq
 800d4d4:	694b      	ldreq	r3, [r1, #20]
 800d4d6:	600f      	str	r7, [r1, #0]
 800d4d8:	bf18      	it	ne
 800d4da:	2300      	movne	r3, #0
 800d4dc:	eba6 0807 	sub.w	r8, r6, r7
 800d4e0:	608b      	str	r3, [r1, #8]
 800d4e2:	f1b8 0f00 	cmp.w	r8, #0
 800d4e6:	dd9c      	ble.n	800d422 <__sflush_r+0x1a>
 800d4e8:	6a21      	ldr	r1, [r4, #32]
 800d4ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d4ec:	4643      	mov	r3, r8
 800d4ee:	463a      	mov	r2, r7
 800d4f0:	4628      	mov	r0, r5
 800d4f2:	47b0      	blx	r6
 800d4f4:	2800      	cmp	r0, #0
 800d4f6:	dc06      	bgt.n	800d506 <__sflush_r+0xfe>
 800d4f8:	89a3      	ldrh	r3, [r4, #12]
 800d4fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d4fe:	81a3      	strh	r3, [r4, #12]
 800d500:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d504:	e78e      	b.n	800d424 <__sflush_r+0x1c>
 800d506:	4407      	add	r7, r0
 800d508:	eba8 0800 	sub.w	r8, r8, r0
 800d50c:	e7e9      	b.n	800d4e2 <__sflush_r+0xda>
 800d50e:	bf00      	nop
 800d510:	20400001 	.word	0x20400001

0800d514 <_fflush_r>:
 800d514:	b538      	push	{r3, r4, r5, lr}
 800d516:	690b      	ldr	r3, [r1, #16]
 800d518:	4605      	mov	r5, r0
 800d51a:	460c      	mov	r4, r1
 800d51c:	b913      	cbnz	r3, 800d524 <_fflush_r+0x10>
 800d51e:	2500      	movs	r5, #0
 800d520:	4628      	mov	r0, r5
 800d522:	bd38      	pop	{r3, r4, r5, pc}
 800d524:	b118      	cbz	r0, 800d52e <_fflush_r+0x1a>
 800d526:	6983      	ldr	r3, [r0, #24]
 800d528:	b90b      	cbnz	r3, 800d52e <_fflush_r+0x1a>
 800d52a:	f7ff f871 	bl	800c610 <__sinit>
 800d52e:	4b14      	ldr	r3, [pc, #80]	; (800d580 <_fflush_r+0x6c>)
 800d530:	429c      	cmp	r4, r3
 800d532:	d11b      	bne.n	800d56c <_fflush_r+0x58>
 800d534:	686c      	ldr	r4, [r5, #4]
 800d536:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d0ef      	beq.n	800d51e <_fflush_r+0xa>
 800d53e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d540:	07d0      	lsls	r0, r2, #31
 800d542:	d404      	bmi.n	800d54e <_fflush_r+0x3a>
 800d544:	0599      	lsls	r1, r3, #22
 800d546:	d402      	bmi.n	800d54e <_fflush_r+0x3a>
 800d548:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d54a:	f7ff f8ff 	bl	800c74c <__retarget_lock_acquire_recursive>
 800d54e:	4628      	mov	r0, r5
 800d550:	4621      	mov	r1, r4
 800d552:	f7ff ff59 	bl	800d408 <__sflush_r>
 800d556:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d558:	07da      	lsls	r2, r3, #31
 800d55a:	4605      	mov	r5, r0
 800d55c:	d4e0      	bmi.n	800d520 <_fflush_r+0xc>
 800d55e:	89a3      	ldrh	r3, [r4, #12]
 800d560:	059b      	lsls	r3, r3, #22
 800d562:	d4dd      	bmi.n	800d520 <_fflush_r+0xc>
 800d564:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d566:	f7ff f8f2 	bl	800c74e <__retarget_lock_release_recursive>
 800d56a:	e7d9      	b.n	800d520 <_fflush_r+0xc>
 800d56c:	4b05      	ldr	r3, [pc, #20]	; (800d584 <_fflush_r+0x70>)
 800d56e:	429c      	cmp	r4, r3
 800d570:	d101      	bne.n	800d576 <_fflush_r+0x62>
 800d572:	68ac      	ldr	r4, [r5, #8]
 800d574:	e7df      	b.n	800d536 <_fflush_r+0x22>
 800d576:	4b04      	ldr	r3, [pc, #16]	; (800d588 <_fflush_r+0x74>)
 800d578:	429c      	cmp	r4, r3
 800d57a:	bf08      	it	eq
 800d57c:	68ec      	ldreq	r4, [r5, #12]
 800d57e:	e7da      	b.n	800d536 <_fflush_r+0x22>
 800d580:	08014150 	.word	0x08014150
 800d584:	08014170 	.word	0x08014170
 800d588:	08014130 	.word	0x08014130

0800d58c <_lseek_r>:
 800d58c:	b538      	push	{r3, r4, r5, lr}
 800d58e:	4d07      	ldr	r5, [pc, #28]	; (800d5ac <_lseek_r+0x20>)
 800d590:	4604      	mov	r4, r0
 800d592:	4608      	mov	r0, r1
 800d594:	4611      	mov	r1, r2
 800d596:	2200      	movs	r2, #0
 800d598:	602a      	str	r2, [r5, #0]
 800d59a:	461a      	mov	r2, r3
 800d59c:	f7f4 ff26 	bl	80023ec <_lseek>
 800d5a0:	1c43      	adds	r3, r0, #1
 800d5a2:	d102      	bne.n	800d5aa <_lseek_r+0x1e>
 800d5a4:	682b      	ldr	r3, [r5, #0]
 800d5a6:	b103      	cbz	r3, 800d5aa <_lseek_r+0x1e>
 800d5a8:	6023      	str	r3, [r4, #0]
 800d5aa:	bd38      	pop	{r3, r4, r5, pc}
 800d5ac:	20000e68 	.word	0x20000e68

0800d5b0 <__swhatbuf_r>:
 800d5b0:	b570      	push	{r4, r5, r6, lr}
 800d5b2:	460e      	mov	r6, r1
 800d5b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5b8:	2900      	cmp	r1, #0
 800d5ba:	b096      	sub	sp, #88	; 0x58
 800d5bc:	4614      	mov	r4, r2
 800d5be:	461d      	mov	r5, r3
 800d5c0:	da08      	bge.n	800d5d4 <__swhatbuf_r+0x24>
 800d5c2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d5c6:	2200      	movs	r2, #0
 800d5c8:	602a      	str	r2, [r5, #0]
 800d5ca:	061a      	lsls	r2, r3, #24
 800d5cc:	d410      	bmi.n	800d5f0 <__swhatbuf_r+0x40>
 800d5ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d5d2:	e00e      	b.n	800d5f2 <__swhatbuf_r+0x42>
 800d5d4:	466a      	mov	r2, sp
 800d5d6:	f000 f913 	bl	800d800 <_fstat_r>
 800d5da:	2800      	cmp	r0, #0
 800d5dc:	dbf1      	blt.n	800d5c2 <__swhatbuf_r+0x12>
 800d5de:	9a01      	ldr	r2, [sp, #4]
 800d5e0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d5e4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d5e8:	425a      	negs	r2, r3
 800d5ea:	415a      	adcs	r2, r3
 800d5ec:	602a      	str	r2, [r5, #0]
 800d5ee:	e7ee      	b.n	800d5ce <__swhatbuf_r+0x1e>
 800d5f0:	2340      	movs	r3, #64	; 0x40
 800d5f2:	2000      	movs	r0, #0
 800d5f4:	6023      	str	r3, [r4, #0]
 800d5f6:	b016      	add	sp, #88	; 0x58
 800d5f8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d5fc <__smakebuf_r>:
 800d5fc:	898b      	ldrh	r3, [r1, #12]
 800d5fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d600:	079d      	lsls	r5, r3, #30
 800d602:	4606      	mov	r6, r0
 800d604:	460c      	mov	r4, r1
 800d606:	d507      	bpl.n	800d618 <__smakebuf_r+0x1c>
 800d608:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d60c:	6023      	str	r3, [r4, #0]
 800d60e:	6123      	str	r3, [r4, #16]
 800d610:	2301      	movs	r3, #1
 800d612:	6163      	str	r3, [r4, #20]
 800d614:	b002      	add	sp, #8
 800d616:	bd70      	pop	{r4, r5, r6, pc}
 800d618:	ab01      	add	r3, sp, #4
 800d61a:	466a      	mov	r2, sp
 800d61c:	f7ff ffc8 	bl	800d5b0 <__swhatbuf_r>
 800d620:	9900      	ldr	r1, [sp, #0]
 800d622:	4605      	mov	r5, r0
 800d624:	4630      	mov	r0, r6
 800d626:	f7ff f8b3 	bl	800c790 <_malloc_r>
 800d62a:	b948      	cbnz	r0, 800d640 <__smakebuf_r+0x44>
 800d62c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d630:	059a      	lsls	r2, r3, #22
 800d632:	d4ef      	bmi.n	800d614 <__smakebuf_r+0x18>
 800d634:	f023 0303 	bic.w	r3, r3, #3
 800d638:	f043 0302 	orr.w	r3, r3, #2
 800d63c:	81a3      	strh	r3, [r4, #12]
 800d63e:	e7e3      	b.n	800d608 <__smakebuf_r+0xc>
 800d640:	4b0d      	ldr	r3, [pc, #52]	; (800d678 <__smakebuf_r+0x7c>)
 800d642:	62b3      	str	r3, [r6, #40]	; 0x28
 800d644:	89a3      	ldrh	r3, [r4, #12]
 800d646:	6020      	str	r0, [r4, #0]
 800d648:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d64c:	81a3      	strh	r3, [r4, #12]
 800d64e:	9b00      	ldr	r3, [sp, #0]
 800d650:	6163      	str	r3, [r4, #20]
 800d652:	9b01      	ldr	r3, [sp, #4]
 800d654:	6120      	str	r0, [r4, #16]
 800d656:	b15b      	cbz	r3, 800d670 <__smakebuf_r+0x74>
 800d658:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d65c:	4630      	mov	r0, r6
 800d65e:	f000 f8e1 	bl	800d824 <_isatty_r>
 800d662:	b128      	cbz	r0, 800d670 <__smakebuf_r+0x74>
 800d664:	89a3      	ldrh	r3, [r4, #12]
 800d666:	f023 0303 	bic.w	r3, r3, #3
 800d66a:	f043 0301 	orr.w	r3, r3, #1
 800d66e:	81a3      	strh	r3, [r4, #12]
 800d670:	89a0      	ldrh	r0, [r4, #12]
 800d672:	4305      	orrs	r5, r0
 800d674:	81a5      	strh	r5, [r4, #12]
 800d676:	e7cd      	b.n	800d614 <__smakebuf_r+0x18>
 800d678:	0800c5a9 	.word	0x0800c5a9

0800d67c <memcpy>:
 800d67c:	440a      	add	r2, r1
 800d67e:	4291      	cmp	r1, r2
 800d680:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800d684:	d100      	bne.n	800d688 <memcpy+0xc>
 800d686:	4770      	bx	lr
 800d688:	b510      	push	{r4, lr}
 800d68a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d68e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d692:	4291      	cmp	r1, r2
 800d694:	d1f9      	bne.n	800d68a <memcpy+0xe>
 800d696:	bd10      	pop	{r4, pc}

0800d698 <memmove>:
 800d698:	4288      	cmp	r0, r1
 800d69a:	b510      	push	{r4, lr}
 800d69c:	eb01 0402 	add.w	r4, r1, r2
 800d6a0:	d902      	bls.n	800d6a8 <memmove+0x10>
 800d6a2:	4284      	cmp	r4, r0
 800d6a4:	4623      	mov	r3, r4
 800d6a6:	d807      	bhi.n	800d6b8 <memmove+0x20>
 800d6a8:	1e43      	subs	r3, r0, #1
 800d6aa:	42a1      	cmp	r1, r4
 800d6ac:	d008      	beq.n	800d6c0 <memmove+0x28>
 800d6ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d6b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d6b6:	e7f8      	b.n	800d6aa <memmove+0x12>
 800d6b8:	4402      	add	r2, r0
 800d6ba:	4601      	mov	r1, r0
 800d6bc:	428a      	cmp	r2, r1
 800d6be:	d100      	bne.n	800d6c2 <memmove+0x2a>
 800d6c0:	bd10      	pop	{r4, pc}
 800d6c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d6c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d6ca:	e7f7      	b.n	800d6bc <memmove+0x24>

0800d6cc <__malloc_lock>:
 800d6cc:	4801      	ldr	r0, [pc, #4]	; (800d6d4 <__malloc_lock+0x8>)
 800d6ce:	f7ff b83d 	b.w	800c74c <__retarget_lock_acquire_recursive>
 800d6d2:	bf00      	nop
 800d6d4:	20000e5c 	.word	0x20000e5c

0800d6d8 <__malloc_unlock>:
 800d6d8:	4801      	ldr	r0, [pc, #4]	; (800d6e0 <__malloc_unlock+0x8>)
 800d6da:	f7ff b838 	b.w	800c74e <__retarget_lock_release_recursive>
 800d6de:	bf00      	nop
 800d6e0:	20000e5c 	.word	0x20000e5c

0800d6e4 <_free_r>:
 800d6e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d6e6:	2900      	cmp	r1, #0
 800d6e8:	d044      	beq.n	800d774 <_free_r+0x90>
 800d6ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d6ee:	9001      	str	r0, [sp, #4]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	f1a1 0404 	sub.w	r4, r1, #4
 800d6f6:	bfb8      	it	lt
 800d6f8:	18e4      	addlt	r4, r4, r3
 800d6fa:	f7ff ffe7 	bl	800d6cc <__malloc_lock>
 800d6fe:	4a1e      	ldr	r2, [pc, #120]	; (800d778 <_free_r+0x94>)
 800d700:	9801      	ldr	r0, [sp, #4]
 800d702:	6813      	ldr	r3, [r2, #0]
 800d704:	b933      	cbnz	r3, 800d714 <_free_r+0x30>
 800d706:	6063      	str	r3, [r4, #4]
 800d708:	6014      	str	r4, [r2, #0]
 800d70a:	b003      	add	sp, #12
 800d70c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d710:	f7ff bfe2 	b.w	800d6d8 <__malloc_unlock>
 800d714:	42a3      	cmp	r3, r4
 800d716:	d908      	bls.n	800d72a <_free_r+0x46>
 800d718:	6825      	ldr	r5, [r4, #0]
 800d71a:	1961      	adds	r1, r4, r5
 800d71c:	428b      	cmp	r3, r1
 800d71e:	bf01      	itttt	eq
 800d720:	6819      	ldreq	r1, [r3, #0]
 800d722:	685b      	ldreq	r3, [r3, #4]
 800d724:	1949      	addeq	r1, r1, r5
 800d726:	6021      	streq	r1, [r4, #0]
 800d728:	e7ed      	b.n	800d706 <_free_r+0x22>
 800d72a:	461a      	mov	r2, r3
 800d72c:	685b      	ldr	r3, [r3, #4]
 800d72e:	b10b      	cbz	r3, 800d734 <_free_r+0x50>
 800d730:	42a3      	cmp	r3, r4
 800d732:	d9fa      	bls.n	800d72a <_free_r+0x46>
 800d734:	6811      	ldr	r1, [r2, #0]
 800d736:	1855      	adds	r5, r2, r1
 800d738:	42a5      	cmp	r5, r4
 800d73a:	d10b      	bne.n	800d754 <_free_r+0x70>
 800d73c:	6824      	ldr	r4, [r4, #0]
 800d73e:	4421      	add	r1, r4
 800d740:	1854      	adds	r4, r2, r1
 800d742:	42a3      	cmp	r3, r4
 800d744:	6011      	str	r1, [r2, #0]
 800d746:	d1e0      	bne.n	800d70a <_free_r+0x26>
 800d748:	681c      	ldr	r4, [r3, #0]
 800d74a:	685b      	ldr	r3, [r3, #4]
 800d74c:	6053      	str	r3, [r2, #4]
 800d74e:	4421      	add	r1, r4
 800d750:	6011      	str	r1, [r2, #0]
 800d752:	e7da      	b.n	800d70a <_free_r+0x26>
 800d754:	d902      	bls.n	800d75c <_free_r+0x78>
 800d756:	230c      	movs	r3, #12
 800d758:	6003      	str	r3, [r0, #0]
 800d75a:	e7d6      	b.n	800d70a <_free_r+0x26>
 800d75c:	6825      	ldr	r5, [r4, #0]
 800d75e:	1961      	adds	r1, r4, r5
 800d760:	428b      	cmp	r3, r1
 800d762:	bf04      	itt	eq
 800d764:	6819      	ldreq	r1, [r3, #0]
 800d766:	685b      	ldreq	r3, [r3, #4]
 800d768:	6063      	str	r3, [r4, #4]
 800d76a:	bf04      	itt	eq
 800d76c:	1949      	addeq	r1, r1, r5
 800d76e:	6021      	streq	r1, [r4, #0]
 800d770:	6054      	str	r4, [r2, #4]
 800d772:	e7ca      	b.n	800d70a <_free_r+0x26>
 800d774:	b003      	add	sp, #12
 800d776:	bd30      	pop	{r4, r5, pc}
 800d778:	20000e60 	.word	0x20000e60

0800d77c <_realloc_r>:
 800d77c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d780:	4680      	mov	r8, r0
 800d782:	4614      	mov	r4, r2
 800d784:	460e      	mov	r6, r1
 800d786:	b921      	cbnz	r1, 800d792 <_realloc_r+0x16>
 800d788:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d78c:	4611      	mov	r1, r2
 800d78e:	f7fe bfff 	b.w	800c790 <_malloc_r>
 800d792:	b92a      	cbnz	r2, 800d7a0 <_realloc_r+0x24>
 800d794:	f7ff ffa6 	bl	800d6e4 <_free_r>
 800d798:	4625      	mov	r5, r4
 800d79a:	4628      	mov	r0, r5
 800d79c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7a0:	f000 f850 	bl	800d844 <_malloc_usable_size_r>
 800d7a4:	4284      	cmp	r4, r0
 800d7a6:	4607      	mov	r7, r0
 800d7a8:	d802      	bhi.n	800d7b0 <_realloc_r+0x34>
 800d7aa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d7ae:	d812      	bhi.n	800d7d6 <_realloc_r+0x5a>
 800d7b0:	4621      	mov	r1, r4
 800d7b2:	4640      	mov	r0, r8
 800d7b4:	f7fe ffec 	bl	800c790 <_malloc_r>
 800d7b8:	4605      	mov	r5, r0
 800d7ba:	2800      	cmp	r0, #0
 800d7bc:	d0ed      	beq.n	800d79a <_realloc_r+0x1e>
 800d7be:	42bc      	cmp	r4, r7
 800d7c0:	4622      	mov	r2, r4
 800d7c2:	4631      	mov	r1, r6
 800d7c4:	bf28      	it	cs
 800d7c6:	463a      	movcs	r2, r7
 800d7c8:	f7ff ff58 	bl	800d67c <memcpy>
 800d7cc:	4631      	mov	r1, r6
 800d7ce:	4640      	mov	r0, r8
 800d7d0:	f7ff ff88 	bl	800d6e4 <_free_r>
 800d7d4:	e7e1      	b.n	800d79a <_realloc_r+0x1e>
 800d7d6:	4635      	mov	r5, r6
 800d7d8:	e7df      	b.n	800d79a <_realloc_r+0x1e>
	...

0800d7dc <_read_r>:
 800d7dc:	b538      	push	{r3, r4, r5, lr}
 800d7de:	4d07      	ldr	r5, [pc, #28]	; (800d7fc <_read_r+0x20>)
 800d7e0:	4604      	mov	r4, r0
 800d7e2:	4608      	mov	r0, r1
 800d7e4:	4611      	mov	r1, r2
 800d7e6:	2200      	movs	r2, #0
 800d7e8:	602a      	str	r2, [r5, #0]
 800d7ea:	461a      	mov	r2, r3
 800d7ec:	f7f4 fd9e 	bl	800232c <_read>
 800d7f0:	1c43      	adds	r3, r0, #1
 800d7f2:	d102      	bne.n	800d7fa <_read_r+0x1e>
 800d7f4:	682b      	ldr	r3, [r5, #0]
 800d7f6:	b103      	cbz	r3, 800d7fa <_read_r+0x1e>
 800d7f8:	6023      	str	r3, [r4, #0]
 800d7fa:	bd38      	pop	{r3, r4, r5, pc}
 800d7fc:	20000e68 	.word	0x20000e68

0800d800 <_fstat_r>:
 800d800:	b538      	push	{r3, r4, r5, lr}
 800d802:	4d07      	ldr	r5, [pc, #28]	; (800d820 <_fstat_r+0x20>)
 800d804:	2300      	movs	r3, #0
 800d806:	4604      	mov	r4, r0
 800d808:	4608      	mov	r0, r1
 800d80a:	4611      	mov	r1, r2
 800d80c:	602b      	str	r3, [r5, #0]
 800d80e:	f7f4 fdd2 	bl	80023b6 <_fstat>
 800d812:	1c43      	adds	r3, r0, #1
 800d814:	d102      	bne.n	800d81c <_fstat_r+0x1c>
 800d816:	682b      	ldr	r3, [r5, #0]
 800d818:	b103      	cbz	r3, 800d81c <_fstat_r+0x1c>
 800d81a:	6023      	str	r3, [r4, #0]
 800d81c:	bd38      	pop	{r3, r4, r5, pc}
 800d81e:	bf00      	nop
 800d820:	20000e68 	.word	0x20000e68

0800d824 <_isatty_r>:
 800d824:	b538      	push	{r3, r4, r5, lr}
 800d826:	4d06      	ldr	r5, [pc, #24]	; (800d840 <_isatty_r+0x1c>)
 800d828:	2300      	movs	r3, #0
 800d82a:	4604      	mov	r4, r0
 800d82c:	4608      	mov	r0, r1
 800d82e:	602b      	str	r3, [r5, #0]
 800d830:	f7f4 fdd1 	bl	80023d6 <_isatty>
 800d834:	1c43      	adds	r3, r0, #1
 800d836:	d102      	bne.n	800d83e <_isatty_r+0x1a>
 800d838:	682b      	ldr	r3, [r5, #0]
 800d83a:	b103      	cbz	r3, 800d83e <_isatty_r+0x1a>
 800d83c:	6023      	str	r3, [r4, #0]
 800d83e:	bd38      	pop	{r3, r4, r5, pc}
 800d840:	20000e68 	.word	0x20000e68

0800d844 <_malloc_usable_size_r>:
 800d844:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d848:	1f18      	subs	r0, r3, #4
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	bfbc      	itt	lt
 800d84e:	580b      	ldrlt	r3, [r1, r0]
 800d850:	18c0      	addlt	r0, r0, r3
 800d852:	4770      	bx	lr

0800d854 <_init>:
 800d854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d856:	bf00      	nop
 800d858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d85a:	bc08      	pop	{r3}
 800d85c:	469e      	mov	lr, r3
 800d85e:	4770      	bx	lr

0800d860 <_fini>:
 800d860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d862:	bf00      	nop
 800d864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d866:	bc08      	pop	{r3}
 800d868:	469e      	mov	lr, r3
 800d86a:	4770      	bx	lr
