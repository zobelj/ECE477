
F407_Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000914c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  080092d4  080092d4  000192d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009374  08009374  0002011c  2**0
                  CONTENTS
  4 .ARM          00000008  08009374  08009374  00019374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800937c  0800937c  0002011c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800937c  0800937c  0001937c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009380  08009380  00019380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000011c  20000000  08009384  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002011c  2**0
                  CONTENTS
 10 .bss          00000bec  2000011c  2000011c  0002011c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000d08  20000d08  0002011c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016f00  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000032bd  00000000  00000000  0003704c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013f0  00000000  00000000  0003a310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000012a0  00000000  00000000  0003b700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000056ad  00000000  00000000  0003c9a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018b8d  00000000  00000000  0004204d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d101f  00000000  00000000  0005abda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012bbf9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005490  00000000  00000000  0012bc4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000011c 	.word	0x2000011c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080092bc 	.word	0x080092bc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000120 	.word	0x20000120
 80001c4:	080092bc 	.word	0x080092bc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <scan_keypad>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* Local Keypad Scanning */
void scan_keypad() {
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
  set_rows();
 80004d2:	f000 f861 	bl	8000598 <set_rows>

  // read the columns
  int local_cols = get_cols();
 80004d6:	f000 f8d9 	bl	800068c <get_cols>
 80004da:	6038      	str	r0, [r7, #0]
  //int local_cols = all_cols & 0x0F;
  //int expander_cols = (all_cols & 0xF0) >> 4;

  // scan local cols
  for(int i = 0; i < nCols1; i++) {
 80004dc:	2300      	movs	r3, #0
 80004de:	607b      	str	r3, [r7, #4]
 80004e0:	e041      	b.n	8000566 <scan_keypad+0x9a>
    if(local_cols & (1 << i)) {
 80004e2:	683a      	ldr	r2, [r7, #0]
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	fa42 f303 	asr.w	r3, r2, r3
 80004ea:	f003 0301 	and.w	r3, r3, #1
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d02a      	beq.n	8000548 <scan_keypad+0x7c>
    	if (keypresses1[row][i] != 1) {
 80004f2:	4b22      	ldr	r3, [pc, #136]	; (800057c <scan_keypad+0xb0>)
 80004f4:	681a      	ldr	r2, [r3, #0]
 80004f6:	4922      	ldr	r1, [pc, #136]	; (8000580 <scan_keypad+0xb4>)
 80004f8:	4613      	mov	r3, r2
 80004fa:	005b      	lsls	r3, r3, #1
 80004fc:	4413      	add	r3, r2
 80004fe:	005b      	lsls	r3, r3, #1
 8000500:	18ca      	adds	r2, r1, r3
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	4413      	add	r3, r2
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	2b01      	cmp	r3, #1
 800050a:	d029      	beq.n	8000560 <scan_keypad+0x94>
    		keypresses1[row][i] = 1;
 800050c:	4b1b      	ldr	r3, [pc, #108]	; (800057c <scan_keypad+0xb0>)
 800050e:	681a      	ldr	r2, [r3, #0]
 8000510:	491b      	ldr	r1, [pc, #108]	; (8000580 <scan_keypad+0xb4>)
 8000512:	4613      	mov	r3, r2
 8000514:	005b      	lsls	r3, r3, #1
 8000516:	4413      	add	r3, r2
 8000518:	005b      	lsls	r3, r3, #1
 800051a:	18ca      	adds	r2, r1, r3
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	4413      	add	r3, r2
 8000520:	2201      	movs	r2, #1
 8000522:	701a      	strb	r2, [r3, #0]
    	    // WPM timer not enabled
    	    if (!(TIM1->CR1 && TIM_CR1_CEN)) {
 8000524:	4b17      	ldr	r3, [pc, #92]	; (8000584 <scan_keypad+0xb8>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	2b00      	cmp	r3, #0
 800052a:	d102      	bne.n	8000532 <scan_keypad+0x66>
    	    	HAL_TIM_Base_Start_IT(&htim7);
 800052c:	4816      	ldr	r0, [pc, #88]	; (8000588 <scan_keypad+0xbc>)
 800052e:	f004 fcb1 	bl	8004e94 <HAL_TIM_Base_Start_IT>
    	    }
    	    charCount++;
 8000532:	4b16      	ldr	r3, [pc, #88]	; (800058c <scan_keypad+0xc0>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	3301      	adds	r3, #1
 8000538:	4a14      	ldr	r2, [pc, #80]	; (800058c <scan_keypad+0xc0>)
 800053a:	6013      	str	r3, [r2, #0]
    	    charsInCycle++;
 800053c:	4b14      	ldr	r3, [pc, #80]	; (8000590 <scan_keypad+0xc4>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	3301      	adds	r3, #1
 8000542:	4a13      	ldr	r2, [pc, #76]	; (8000590 <scan_keypad+0xc4>)
 8000544:	6013      	str	r3, [r2, #0]
 8000546:	e00b      	b.n	8000560 <scan_keypad+0x94>
    	}
    }
    else {
      keypresses1[row][i] = 0;
 8000548:	4b0c      	ldr	r3, [pc, #48]	; (800057c <scan_keypad+0xb0>)
 800054a:	681a      	ldr	r2, [r3, #0]
 800054c:	490c      	ldr	r1, [pc, #48]	; (8000580 <scan_keypad+0xb4>)
 800054e:	4613      	mov	r3, r2
 8000550:	005b      	lsls	r3, r3, #1
 8000552:	4413      	add	r3, r2
 8000554:	005b      	lsls	r3, r3, #1
 8000556:	18ca      	adds	r2, r1, r3
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	4413      	add	r3, r2
 800055c:	2200      	movs	r2, #0
 800055e:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < nCols1; i++) {
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	3301      	adds	r3, #1
 8000564:	607b      	str	r3, [r7, #4]
 8000566:	4b0b      	ldr	r3, [pc, #44]	; (8000594 <scan_keypad+0xc8>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	687a      	ldr	r2, [r7, #4]
 800056c:	429a      	cmp	r2, r3
 800056e:	dbb8      	blt.n	80004e2 <scan_keypad+0x16>
//      keypresses2[row][i] = 0;
//    }
//
//  }

}
 8000570:	bf00      	nop
 8000572:	bf00      	nop
 8000574:	3708      	adds	r7, #8
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	200002f8 	.word	0x200002f8
 8000580:	20000138 	.word	0x20000138
 8000584:	40010000 	.word	0x40010000
 8000588:	200002a8 	.word	0x200002a8
 800058c:	200002f0 	.word	0x200002f0
 8000590:	200002f4 	.word	0x200002f4
 8000594:	20000004 	.word	0x20000004

08000598 <set_rows>:

void set_rows() {
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  // update row value
  row = (row + 1) % nRows1;
 800059c:	4b38      	ldr	r3, [pc, #224]	; (8000680 <set_rows+0xe8>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	3301      	adds	r3, #1
 80005a2:	4a38      	ldr	r2, [pc, #224]	; (8000684 <set_rows+0xec>)
 80005a4:	6812      	ldr	r2, [r2, #0]
 80005a6:	fb93 f1f2 	sdiv	r1, r3, r2
 80005aa:	fb01 f202 	mul.w	r2, r1, r2
 80005ae:	1a9b      	subs	r3, r3, r2
 80005b0:	4a33      	ldr	r2, [pc, #204]	; (8000680 <set_rows+0xe8>)
 80005b2:	6013      	str	r3, [r2, #0]

  // use global variable row to set the correct row to low and last row back to high
  switch(row) {
 80005b4:	4b32      	ldr	r3, [pc, #200]	; (8000680 <set_rows+0xe8>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	2b06      	cmp	r3, #6
 80005ba:	d85e      	bhi.n	800067a <set_rows+0xe2>
 80005bc:	a201      	add	r2, pc, #4	; (adr r2, 80005c4 <set_rows+0x2c>)
 80005be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005c2:	bf00      	nop
 80005c4:	080005e1 	.word	0x080005e1
 80005c8:	080005f7 	.word	0x080005f7
 80005cc:	0800060d 	.word	0x0800060d
 80005d0:	08000623 	.word	0x08000623
 80005d4:	08000639 	.word	0x08000639
 80005d8:	0800064f 	.word	0x0800064f
 80005dc:	08000665 	.word	0x08000665
    case 0:
      HAL_GPIO_WritePin(GPIOD, ROW6_Pin, GPIO_PIN_SET);
 80005e0:	2201      	movs	r2, #1
 80005e2:	2140      	movs	r1, #64	; 0x40
 80005e4:	4828      	ldr	r0, [pc, #160]	; (8000688 <set_rows+0xf0>)
 80005e6:	f001 f953 	bl	8001890 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOD, ROW0_Pin, GPIO_PIN_RESET);
 80005ea:	2200      	movs	r2, #0
 80005ec:	2101      	movs	r1, #1
 80005ee:	4826      	ldr	r0, [pc, #152]	; (8000688 <set_rows+0xf0>)
 80005f0:	f001 f94e 	bl	8001890 <HAL_GPIO_WritePin>
      break;
 80005f4:	e041      	b.n	800067a <set_rows+0xe2>
    case 1:
      HAL_GPIO_WritePin(GPIOD, ROW0_Pin, GPIO_PIN_SET);
 80005f6:	2201      	movs	r2, #1
 80005f8:	2101      	movs	r1, #1
 80005fa:	4823      	ldr	r0, [pc, #140]	; (8000688 <set_rows+0xf0>)
 80005fc:	f001 f948 	bl	8001890 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOD, ROW1_Pin, GPIO_PIN_RESET);
 8000600:	2200      	movs	r2, #0
 8000602:	2102      	movs	r1, #2
 8000604:	4820      	ldr	r0, [pc, #128]	; (8000688 <set_rows+0xf0>)
 8000606:	f001 f943 	bl	8001890 <HAL_GPIO_WritePin>
      break;
 800060a:	e036      	b.n	800067a <set_rows+0xe2>
    case 2:
      HAL_GPIO_WritePin(GPIOD, ROW1_Pin, GPIO_PIN_SET);
 800060c:	2201      	movs	r2, #1
 800060e:	2102      	movs	r1, #2
 8000610:	481d      	ldr	r0, [pc, #116]	; (8000688 <set_rows+0xf0>)
 8000612:	f001 f93d 	bl	8001890 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOD, ROW2_Pin, GPIO_PIN_RESET);
 8000616:	2200      	movs	r2, #0
 8000618:	2104      	movs	r1, #4
 800061a:	481b      	ldr	r0, [pc, #108]	; (8000688 <set_rows+0xf0>)
 800061c:	f001 f938 	bl	8001890 <HAL_GPIO_WritePin>
      break;
 8000620:	e02b      	b.n	800067a <set_rows+0xe2>
    case 3:
      HAL_GPIO_WritePin(GPIOD, ROW2_Pin, GPIO_PIN_SET);
 8000622:	2201      	movs	r2, #1
 8000624:	2104      	movs	r1, #4
 8000626:	4818      	ldr	r0, [pc, #96]	; (8000688 <set_rows+0xf0>)
 8000628:	f001 f932 	bl	8001890 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOD, ROW3_Pin, GPIO_PIN_RESET);
 800062c:	2200      	movs	r2, #0
 800062e:	2108      	movs	r1, #8
 8000630:	4815      	ldr	r0, [pc, #84]	; (8000688 <set_rows+0xf0>)
 8000632:	f001 f92d 	bl	8001890 <HAL_GPIO_WritePin>
      break;
 8000636:	e020      	b.n	800067a <set_rows+0xe2>
    case 4:
      HAL_GPIO_WritePin(GPIOD, ROW3_Pin, GPIO_PIN_SET);
 8000638:	2201      	movs	r2, #1
 800063a:	2108      	movs	r1, #8
 800063c:	4812      	ldr	r0, [pc, #72]	; (8000688 <set_rows+0xf0>)
 800063e:	f001 f927 	bl	8001890 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOD, ROW4_Pin, GPIO_PIN_RESET);
 8000642:	2200      	movs	r2, #0
 8000644:	2110      	movs	r1, #16
 8000646:	4810      	ldr	r0, [pc, #64]	; (8000688 <set_rows+0xf0>)
 8000648:	f001 f922 	bl	8001890 <HAL_GPIO_WritePin>
      break;
 800064c:	e015      	b.n	800067a <set_rows+0xe2>
    case 5:
      HAL_GPIO_WritePin(GPIOD, ROW4_Pin, GPIO_PIN_SET);
 800064e:	2201      	movs	r2, #1
 8000650:	2110      	movs	r1, #16
 8000652:	480d      	ldr	r0, [pc, #52]	; (8000688 <set_rows+0xf0>)
 8000654:	f001 f91c 	bl	8001890 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, ROW5_Pin, GPIO_PIN_RESET);
 8000658:	2200      	movs	r2, #0
 800065a:	2120      	movs	r1, #32
 800065c:	480a      	ldr	r0, [pc, #40]	; (8000688 <set_rows+0xf0>)
 800065e:	f001 f917 	bl	8001890 <HAL_GPIO_WritePin>
	  break;
 8000662:	e00a      	b.n	800067a <set_rows+0xe2>
    case 6:
      HAL_GPIO_WritePin(GPIOD, ROW5_Pin, GPIO_PIN_SET);
 8000664:	2201      	movs	r2, #1
 8000666:	2120      	movs	r1, #32
 8000668:	4807      	ldr	r0, [pc, #28]	; (8000688 <set_rows+0xf0>)
 800066a:	f001 f911 	bl	8001890 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, ROW6_Pin, GPIO_PIN_RESET);
 800066e:	2200      	movs	r2, #0
 8000670:	2140      	movs	r1, #64	; 0x40
 8000672:	4805      	ldr	r0, [pc, #20]	; (8000688 <set_rows+0xf0>)
 8000674:	f001 f90c 	bl	8001890 <HAL_GPIO_WritePin>
	  break;
 8000678:	bf00      	nop
  // TODO: change this logic to work with all 7 rows on Side B.
  // Code below works for the breadboard prototype
  // set current row to low and others to high on gpio expander keypad
//  uint8_t data[2] = {0x0A, ~( 8 >> row )};
//  HAL_I2C_Master_Transmit(&hi2c2, GPIOEX_ADDR, data, 2, 1000);
}
 800067a:	bf00      	nop
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	200002f8 	.word	0x200002f8
 8000684:	20000000 	.word	0x20000000
 8000688:	40020c00 	.word	0x40020c00

0800068c <get_cols>:

int get_cols() {
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0
  // get the value of all columns as one int from the GPIO register
  // PD7-4
  int local_cols = ~(GPIOD->IDR >> 7) & 0x3F;
 8000692:	4b07      	ldr	r3, [pc, #28]	; (80006b0 <get_cols+0x24>)
 8000694:	691b      	ldr	r3, [r3, #16]
 8000696:	09db      	lsrs	r3, r3, #7
 8000698:	43db      	mvns	r3, r3
 800069a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800069e:	607b      	str	r3, [r7, #4]
//  HAL_I2C_Master_Transmit(&hi2c2, GPIOEX_ADDR, data, 1, 1000);
//  HAL_I2C_Master_Receive(&hi2c2, GPIOEX_ADDR, data, 1, 1000);

  //int expander_cols = data[0] & 0xF0;

  return local_cols;// | expander_cols;
 80006a0:	687b      	ldr	r3, [r7, #4]
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	370c      	adds	r7, #12
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	40020c00 	.word	0x40020c00

080006b4 <record_keys>:

/* USB Functions */
void record_keys() {
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
  // reset keyboardhid to 0
  memset(&keyboardhid, 0, sizeof(keyboardHID));
 80006ba:	2208      	movs	r2, #8
 80006bc:	2100      	movs	r1, #0
 80006be:	481d      	ldr	r0, [pc, #116]	; (8000734 <record_keys+0x80>)
 80006c0:	f008 fdf4 	bl	80092ac <memset>
  keycodeNum = 1;
 80006c4:	4b1c      	ldr	r3, [pc, #112]	; (8000738 <record_keys+0x84>)
 80006c6:	2201      	movs	r2, #1
 80006c8:	601a      	str	r2, [r3, #0]

  // Add local keypresses
  for(int i = 0; i < nRows1; i++) {
 80006ca:	2300      	movs	r3, #0
 80006cc:	607b      	str	r3, [r7, #4]
 80006ce:	e027      	b.n	8000720 <record_keys+0x6c>
	  for(int j = 0; j < nCols1; j++) {
 80006d0:	2300      	movs	r3, #0
 80006d2:	603b      	str	r3, [r7, #0]
 80006d4:	e01c      	b.n	8000710 <record_keys+0x5c>
		  if(keypresses1[i][j] == 1) {
 80006d6:	4919      	ldr	r1, [pc, #100]	; (800073c <record_keys+0x88>)
 80006d8:	687a      	ldr	r2, [r7, #4]
 80006da:	4613      	mov	r3, r2
 80006dc:	005b      	lsls	r3, r3, #1
 80006de:	4413      	add	r3, r2
 80006e0:	005b      	lsls	r3, r3, #1
 80006e2:	18ca      	adds	r2, r1, r3
 80006e4:	683b      	ldr	r3, [r7, #0]
 80006e6:	4413      	add	r3, r2
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	2b01      	cmp	r3, #1
 80006ec:	d10d      	bne.n	800070a <record_keys+0x56>
			  add_keypress(layout1[i][j]);
 80006ee:	4914      	ldr	r1, [pc, #80]	; (8000740 <record_keys+0x8c>)
 80006f0:	687a      	ldr	r2, [r7, #4]
 80006f2:	4613      	mov	r3, r2
 80006f4:	005b      	lsls	r3, r3, #1
 80006f6:	4413      	add	r3, r2
 80006f8:	005b      	lsls	r3, r3, #1
 80006fa:	683a      	ldr	r2, [r7, #0]
 80006fc:	4413      	add	r3, r2
 80006fe:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000702:	b2db      	uxtb	r3, r3
 8000704:	4618      	mov	r0, r3
 8000706:	f000 f821 	bl	800074c <add_keypress>
	  for(int j = 0; j < nCols1; j++) {
 800070a:	683b      	ldr	r3, [r7, #0]
 800070c:	3301      	adds	r3, #1
 800070e:	603b      	str	r3, [r7, #0]
 8000710:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <record_keys+0x90>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	683a      	ldr	r2, [r7, #0]
 8000716:	429a      	cmp	r2, r3
 8000718:	dbdd      	blt.n	80006d6 <record_keys+0x22>
  for(int i = 0; i < nRows1; i++) {
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	3301      	adds	r3, #1
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	4b09      	ldr	r3, [pc, #36]	; (8000748 <record_keys+0x94>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	687a      	ldr	r2, [r7, #4]
 8000726:	429a      	cmp	r2, r3
 8000728:	dbd2      	blt.n	80006d0 <record_keys+0x1c>
//  for(int i = 0; i < 4; i++) {
//	  if(rotary_keypresses[i] == 1)
//		  add_keypress(rotary_keys[i]);
//  }

}
 800072a:	bf00      	nop
 800072c:	bf00      	nop
 800072e:	3708      	adds	r7, #8
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	200002fc 	.word	0x200002fc
 8000738:	20000008 	.word	0x20000008
 800073c:	20000138 	.word	0x20000138
 8000740:	08009310 	.word	0x08009310
 8000744:	20000004 	.word	0x20000004
 8000748:	20000000 	.word	0x20000000

0800074c <add_keypress>:

void add_keypress(char key) {
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	71fb      	strb	r3, [r7, #7]

	if(key == (char)KEY_LSHIFT) {
 8000756:	79fb      	ldrb	r3, [r7, #7]
 8000758:	2b01      	cmp	r3, #1
 800075a:	d103      	bne.n	8000764 <add_keypress+0x18>
		keyboardhid.MODIFIER = 2;
 800075c:	4b1d      	ldr	r3, [pc, #116]	; (80007d4 <add_keypress+0x88>)
 800075e:	2202      	movs	r2, #2
 8000760:	701a      	strb	r2, [r3, #0]
		return;
 8000762:	e031      	b.n	80007c8 <add_keypress+0x7c>
	}

	switch(keycodeNum) {
 8000764:	4b1c      	ldr	r3, [pc, #112]	; (80007d8 <add_keypress+0x8c>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	3b01      	subs	r3, #1
 800076a:	2b05      	cmp	r3, #5
 800076c:	d826      	bhi.n	80007bc <add_keypress+0x70>
 800076e:	a201      	add	r2, pc, #4	; (adr r2, 8000774 <add_keypress+0x28>)
 8000770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000774:	0800078d 	.word	0x0800078d
 8000778:	08000795 	.word	0x08000795
 800077c:	0800079d 	.word	0x0800079d
 8000780:	080007a5 	.word	0x080007a5
 8000784:	080007ad 	.word	0x080007ad
 8000788:	080007b5 	.word	0x080007b5
			case 1:
			  keyboardhid.KEYCODE1 = key;
 800078c:	4a11      	ldr	r2, [pc, #68]	; (80007d4 <add_keypress+0x88>)
 800078e:	79fb      	ldrb	r3, [r7, #7]
 8000790:	7093      	strb	r3, [r2, #2]
			  break;
 8000792:	e014      	b.n	80007be <add_keypress+0x72>
			case 2:
			  keyboardhid.KEYCODE2 = key;
 8000794:	4a0f      	ldr	r2, [pc, #60]	; (80007d4 <add_keypress+0x88>)
 8000796:	79fb      	ldrb	r3, [r7, #7]
 8000798:	70d3      	strb	r3, [r2, #3]
			  break;
 800079a:	e010      	b.n	80007be <add_keypress+0x72>
			case 3:
			  keyboardhid.KEYCODE3 = key;
 800079c:	4a0d      	ldr	r2, [pc, #52]	; (80007d4 <add_keypress+0x88>)
 800079e:	79fb      	ldrb	r3, [r7, #7]
 80007a0:	7113      	strb	r3, [r2, #4]
			  break;
 80007a2:	e00c      	b.n	80007be <add_keypress+0x72>
			case 4:
			  keyboardhid.KEYCODE4 = key;
 80007a4:	4a0b      	ldr	r2, [pc, #44]	; (80007d4 <add_keypress+0x88>)
 80007a6:	79fb      	ldrb	r3, [r7, #7]
 80007a8:	7153      	strb	r3, [r2, #5]
			  break;
 80007aa:	e008      	b.n	80007be <add_keypress+0x72>
			case 5:
			  keyboardhid.KEYCODE5 = key;
 80007ac:	4a09      	ldr	r2, [pc, #36]	; (80007d4 <add_keypress+0x88>)
 80007ae:	79fb      	ldrb	r3, [r7, #7]
 80007b0:	7193      	strb	r3, [r2, #6]
			  break;
 80007b2:	e004      	b.n	80007be <add_keypress+0x72>
			case 6:
			  keyboardhid.KEYCODE6 = key;
 80007b4:	4a07      	ldr	r2, [pc, #28]	; (80007d4 <add_keypress+0x88>)
 80007b6:	79fb      	ldrb	r3, [r7, #7]
 80007b8:	71d3      	strb	r3, [r2, #7]
			  break;
 80007ba:	e000      	b.n	80007be <add_keypress+0x72>
			default:
				break;
 80007bc:	bf00      	nop
		  }
		  keycodeNum++;
 80007be:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <add_keypress+0x8c>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	3301      	adds	r3, #1
 80007c4:	4a04      	ldr	r2, [pc, #16]	; (80007d8 <add_keypress+0x8c>)
 80007c6:	6013      	str	r3, [r2, #0]

}
 80007c8:	370c      	adds	r7, #12
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	200002fc 	.word	0x200002fc
 80007d8:	20000008 	.word	0x20000008

080007dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007e0:	f000 fb58 	bl	8000e94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007e4:	f000 f818 	bl	8000818 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007e8:	f000 f956 	bl	8000a98 <MX_GPIO_Init>
  MX_DMA_Init();
 80007ec:	f000 f934 	bl	8000a58 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 80007f0:	f008 f900 	bl	80089f4 <MX_USB_DEVICE_Init>
  MX_TIM4_Init();
 80007f4:	f000 f878 	bl	80008e8 <MX_TIM4_Init>
  MX_TIM6_Init();
 80007f8:	f000 f8c2 	bl	8000980 <MX_TIM6_Init>
  MX_TIM7_Init();
 80007fc:	f000 f8f6 	bl	80009ec <MX_TIM7_Init>
//  sprintf(writeBuff, "Number of turns: ");
//  ILI9341_DrawText(writeBuff, FONT4, 25, 110, BLACK, WHITE);
//  switch_lcd();

  // start the timer interrupt
  HAL_TIM_Base_Start_IT(&htim4);
 8000800:	4803      	ldr	r0, [pc, #12]	; (8000810 <main+0x34>)
 8000802:	f004 fb47 	bl	8004e94 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 8000806:	4803      	ldr	r0, [pc, #12]	; (8000814 <main+0x38>)
 8000808:	f004 fb44 	bl	8004e94 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */

  //char buffer1[10];
  //char buffer2[10];

  while (1)
 800080c:	e7fe      	b.n	800080c <main+0x30>
 800080e:	bf00      	nop
 8000810:	20000218 	.word	0x20000218
 8000814:	20000260 	.word	0x20000260

08000818 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b094      	sub	sp, #80	; 0x50
 800081c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800081e:	f107 0320 	add.w	r3, r7, #32
 8000822:	2230      	movs	r2, #48	; 0x30
 8000824:	2100      	movs	r1, #0
 8000826:	4618      	mov	r0, r3
 8000828:	f008 fd40 	bl	80092ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800082c:	f107 030c 	add.w	r3, r7, #12
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800083c:	2300      	movs	r3, #0
 800083e:	60bb      	str	r3, [r7, #8]
 8000840:	4b27      	ldr	r3, [pc, #156]	; (80008e0 <SystemClock_Config+0xc8>)
 8000842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000844:	4a26      	ldr	r2, [pc, #152]	; (80008e0 <SystemClock_Config+0xc8>)
 8000846:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800084a:	6413      	str	r3, [r2, #64]	; 0x40
 800084c:	4b24      	ldr	r3, [pc, #144]	; (80008e0 <SystemClock_Config+0xc8>)
 800084e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000850:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000854:	60bb      	str	r3, [r7, #8]
 8000856:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000858:	2300      	movs	r3, #0
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	4b21      	ldr	r3, [pc, #132]	; (80008e4 <SystemClock_Config+0xcc>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a20      	ldr	r2, [pc, #128]	; (80008e4 <SystemClock_Config+0xcc>)
 8000862:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000866:	6013      	str	r3, [r2, #0]
 8000868:	4b1e      	ldr	r3, [pc, #120]	; (80008e4 <SystemClock_Config+0xcc>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000870:	607b      	str	r3, [r7, #4]
 8000872:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000874:	2301      	movs	r3, #1
 8000876:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000878:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800087c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800087e:	2302      	movs	r3, #2
 8000880:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000882:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000886:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000888:	2304      	movs	r3, #4
 800088a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800088c:	2348      	movs	r3, #72	; 0x48
 800088e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000890:	2302      	movs	r3, #2
 8000892:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000894:	2303      	movs	r3, #3
 8000896:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000898:	f107 0320 	add.w	r3, r7, #32
 800089c:	4618      	mov	r0, r3
 800089e:	f003 fe39 	bl	8004514 <HAL_RCC_OscConfig>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008a8:	f000 f9c0 	bl	8000c2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ac:	230f      	movs	r3, #15
 80008ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008b0:	2302      	movs	r3, #2
 80008b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008b4:	2300      	movs	r3, #0
 80008b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008be:	2300      	movs	r3, #0
 80008c0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008c2:	f107 030c 	add.w	r3, r7, #12
 80008c6:	2102      	movs	r1, #2
 80008c8:	4618      	mov	r0, r3
 80008ca:	f004 f89b 	bl	8004a04 <HAL_RCC_ClockConfig>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80008d4:	f000 f9aa 	bl	8000c2c <Error_Handler>
  }
}
 80008d8:	bf00      	nop
 80008da:	3750      	adds	r7, #80	; 0x50
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	40023800 	.word	0x40023800
 80008e4:	40007000 	.word	0x40007000

080008e8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b086      	sub	sp, #24
 80008ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008ee:	f107 0308 	add.w	r3, r7, #8
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	605a      	str	r2, [r3, #4]
 80008f8:	609a      	str	r2, [r3, #8]
 80008fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008fc:	463b      	mov	r3, r7
 80008fe:	2200      	movs	r2, #0
 8000900:	601a      	str	r2, [r3, #0]
 8000902:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000904:	4b1c      	ldr	r3, [pc, #112]	; (8000978 <MX_TIM4_Init+0x90>)
 8000906:	4a1d      	ldr	r2, [pc, #116]	; (800097c <MX_TIM4_Init+0x94>)
 8000908:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 160-1;
 800090a:	4b1b      	ldr	r3, [pc, #108]	; (8000978 <MX_TIM4_Init+0x90>)
 800090c:	229f      	movs	r2, #159	; 0x9f
 800090e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000910:	4b19      	ldr	r3, [pc, #100]	; (8000978 <MX_TIM4_Init+0x90>)
 8000912:	2200      	movs	r2, #0
 8000914:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8000916:	4b18      	ldr	r3, [pc, #96]	; (8000978 <MX_TIM4_Init+0x90>)
 8000918:	2263      	movs	r2, #99	; 0x63
 800091a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800091c:	4b16      	ldr	r3, [pc, #88]	; (8000978 <MX_TIM4_Init+0x90>)
 800091e:	2200      	movs	r2, #0
 8000920:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000922:	4b15      	ldr	r3, [pc, #84]	; (8000978 <MX_TIM4_Init+0x90>)
 8000924:	2200      	movs	r2, #0
 8000926:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000928:	4813      	ldr	r0, [pc, #76]	; (8000978 <MX_TIM4_Init+0x90>)
 800092a:	f004 fa63 	bl	8004df4 <HAL_TIM_Base_Init>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 8000934:	f000 f97a 	bl	8000c2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000938:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800093c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800093e:	f107 0308 	add.w	r3, r7, #8
 8000942:	4619      	mov	r1, r3
 8000944:	480c      	ldr	r0, [pc, #48]	; (8000978 <MX_TIM4_Init+0x90>)
 8000946:	f004 fc1d 	bl	8005184 <HAL_TIM_ConfigClockSource>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 8000950:	f000 f96c 	bl	8000c2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000954:	2300      	movs	r3, #0
 8000956:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000958:	2300      	movs	r3, #0
 800095a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800095c:	463b      	mov	r3, r7
 800095e:	4619      	mov	r1, r3
 8000960:	4805      	ldr	r0, [pc, #20]	; (8000978 <MX_TIM4_Init+0x90>)
 8000962:	f004 fe39 	bl	80055d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 800096c:	f000 f95e 	bl	8000c2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000970:	bf00      	nop
 8000972:	3718      	adds	r7, #24
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	20000218 	.word	0x20000218
 800097c:	40000800 	.word	0x40000800

08000980 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000986:	463b      	mov	r3, r7
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800098e:	4b15      	ldr	r3, [pc, #84]	; (80009e4 <MX_TIM6_Init+0x64>)
 8000990:	4a15      	ldr	r2, [pc, #84]	; (80009e8 <MX_TIM6_Init+0x68>)
 8000992:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1600-1;
 8000994:	4b13      	ldr	r3, [pc, #76]	; (80009e4 <MX_TIM6_Init+0x64>)
 8000996:	f240 623f 	movw	r2, #1599	; 0x63f
 800099a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800099c:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <MX_TIM6_Init+0x64>)
 800099e:	2200      	movs	r2, #0
 80009a0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 20-1;
 80009a2:	4b10      	ldr	r3, [pc, #64]	; (80009e4 <MX_TIM6_Init+0x64>)
 80009a4:	2213      	movs	r2, #19
 80009a6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009a8:	4b0e      	ldr	r3, [pc, #56]	; (80009e4 <MX_TIM6_Init+0x64>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80009ae:	480d      	ldr	r0, [pc, #52]	; (80009e4 <MX_TIM6_Init+0x64>)
 80009b0:	f004 fa20 	bl	8004df4 <HAL_TIM_Base_Init>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80009ba:	f000 f937 	bl	8000c2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009be:	2300      	movs	r3, #0
 80009c0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009c2:	2300      	movs	r3, #0
 80009c4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80009c6:	463b      	mov	r3, r7
 80009c8:	4619      	mov	r1, r3
 80009ca:	4806      	ldr	r0, [pc, #24]	; (80009e4 <MX_TIM6_Init+0x64>)
 80009cc:	f004 fe04 	bl	80055d8 <HAL_TIMEx_MasterConfigSynchronization>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80009d6:	f000 f929 	bl	8000c2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80009da:	bf00      	nop
 80009dc:	3708      	adds	r7, #8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	20000260 	.word	0x20000260
 80009e8:	40001000 	.word	0x40001000

080009ec <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009f2:	463b      	mov	r3, r7
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80009fa:	4b15      	ldr	r3, [pc, #84]	; (8000a50 <MX_TIM7_Init+0x64>)
 80009fc:	4a15      	ldr	r2, [pc, #84]	; (8000a54 <MX_TIM7_Init+0x68>)
 80009fe:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 36000-1;
 8000a00:	4b13      	ldr	r3, [pc, #76]	; (8000a50 <MX_TIM7_Init+0x64>)
 8000a02:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8000a06:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a08:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <MX_TIM7_Init+0x64>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 4000-1;
 8000a0e:	4b10      	ldr	r3, [pc, #64]	; (8000a50 <MX_TIM7_Init+0x64>)
 8000a10:	f640 729f 	movw	r2, #3999	; 0xf9f
 8000a14:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a16:	4b0e      	ldr	r3, [pc, #56]	; (8000a50 <MX_TIM7_Init+0x64>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000a1c:	480c      	ldr	r0, [pc, #48]	; (8000a50 <MX_TIM7_Init+0x64>)
 8000a1e:	f004 f9e9 	bl	8004df4 <HAL_TIM_Base_Init>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000a28:	f000 f900 	bl	8000c2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a30:	2300      	movs	r3, #0
 8000a32:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000a34:	463b      	mov	r3, r7
 8000a36:	4619      	mov	r1, r3
 8000a38:	4805      	ldr	r0, [pc, #20]	; (8000a50 <MX_TIM7_Init+0x64>)
 8000a3a:	f004 fdcd 	bl	80055d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000a44:	f000 f8f2 	bl	8000c2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000a48:	bf00      	nop
 8000a4a:	3708      	adds	r7, #8
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	200002a8 	.word	0x200002a8
 8000a54:	40001400 	.word	0x40001400

08000a58 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	607b      	str	r3, [r7, #4]
 8000a62:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <MX_DMA_Init+0x3c>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	4a0b      	ldr	r2, [pc, #44]	; (8000a94 <MX_DMA_Init+0x3c>)
 8000a68:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6e:	4b09      	ldr	r3, [pc, #36]	; (8000a94 <MX_DMA_Init+0x3c>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a76:	607b      	str	r3, [r7, #4]
 8000a78:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	203b      	movs	r0, #59	; 0x3b
 8000a80:	f000 fb79 	bl	8001176 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000a84:	203b      	movs	r0, #59	; 0x3b
 8000a86:	f000 fb92 	bl	80011ae <HAL_NVIC_EnableIRQ>

}
 8000a8a:	bf00      	nop
 8000a8c:	3708      	adds	r7, #8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40023800 	.word	0x40023800

08000a98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b08a      	sub	sp, #40	; 0x28
 8000a9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9e:	f107 0314 	add.w	r3, r7, #20
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	601a      	str	r2, [r3, #0]
 8000aa6:	605a      	str	r2, [r3, #4]
 8000aa8:	609a      	str	r2, [r3, #8]
 8000aaa:	60da      	str	r2, [r3, #12]
 8000aac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	613b      	str	r3, [r7, #16]
 8000ab2:	4b49      	ldr	r3, [pc, #292]	; (8000bd8 <MX_GPIO_Init+0x140>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a48      	ldr	r2, [pc, #288]	; (8000bd8 <MX_GPIO_Init+0x140>)
 8000ab8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b46      	ldr	r3, [pc, #280]	; (8000bd8 <MX_GPIO_Init+0x140>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ac6:	613b      	str	r3, [r7, #16]
 8000ac8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	60fb      	str	r3, [r7, #12]
 8000ace:	4b42      	ldr	r3, [pc, #264]	; (8000bd8 <MX_GPIO_Init+0x140>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	4a41      	ldr	r2, [pc, #260]	; (8000bd8 <MX_GPIO_Init+0x140>)
 8000ad4:	f043 0301 	orr.w	r3, r3, #1
 8000ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ada:	4b3f      	ldr	r3, [pc, #252]	; (8000bd8 <MX_GPIO_Init+0x140>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	f003 0301 	and.w	r3, r3, #1
 8000ae2:	60fb      	str	r3, [r7, #12]
 8000ae4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	60bb      	str	r3, [r7, #8]
 8000aea:	4b3b      	ldr	r3, [pc, #236]	; (8000bd8 <MX_GPIO_Init+0x140>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	4a3a      	ldr	r2, [pc, #232]	; (8000bd8 <MX_GPIO_Init+0x140>)
 8000af0:	f043 0302 	orr.w	r3, r3, #2
 8000af4:	6313      	str	r3, [r2, #48]	; 0x30
 8000af6:	4b38      	ldr	r3, [pc, #224]	; (8000bd8 <MX_GPIO_Init+0x140>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	f003 0302 	and.w	r3, r3, #2
 8000afe:	60bb      	str	r3, [r7, #8]
 8000b00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	607b      	str	r3, [r7, #4]
 8000b06:	4b34      	ldr	r3, [pc, #208]	; (8000bd8 <MX_GPIO_Init+0x140>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	4a33      	ldr	r2, [pc, #204]	; (8000bd8 <MX_GPIO_Init+0x140>)
 8000b0c:	f043 0308 	orr.w	r3, r3, #8
 8000b10:	6313      	str	r3, [r2, #48]	; 0x30
 8000b12:	4b31      	ldr	r3, [pc, #196]	; (8000bd8 <MX_GPIO_Init+0x140>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	f003 0308 	and.w	r3, r3, #8
 8000b1a:	607b      	str	r3, [r7, #4]
 8000b1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	603b      	str	r3, [r7, #0]
 8000b22:	4b2d      	ldr	r3, [pc, #180]	; (8000bd8 <MX_GPIO_Init+0x140>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	4a2c      	ldr	r2, [pc, #176]	; (8000bd8 <MX_GPIO_Init+0x140>)
 8000b28:	f043 0304 	orr.w	r3, r3, #4
 8000b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2e:	4b2a      	ldr	r3, [pc, #168]	; (8000bd8 <MX_GPIO_Init+0x140>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	f003 0304 	and.w	r3, r3, #4
 8000b36:	603b      	str	r3, [r7, #0]
 8000b38:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD1_DC_Pin|LCD1_CS_Pin|LCD2_DC_Pin, GPIO_PIN_RESET);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	f44f 7160 	mov.w	r1, #896	; 0x380
 8000b40:	4826      	ldr	r0, [pc, #152]	; (8000bdc <MX_GPIO_Init+0x144>)
 8000b42:	f000 fea5 	bl	8001890 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD2_CS_Pin|LCD2_RST_Pin|LCD1_RST_Pin, GPIO_PIN_RESET);
 8000b46:	2200      	movs	r2, #0
 8000b48:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000b4c:	4824      	ldr	r0, [pc, #144]	; (8000be0 <MX_GPIO_Init+0x148>)
 8000b4e:	f000 fe9f 	bl	8001890 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ROW0_Pin|ROW1_Pin|ROW2_Pin|ROW3_Pin
 8000b52:	2200      	movs	r2, #0
 8000b54:	217f      	movs	r1, #127	; 0x7f
 8000b56:	4823      	ldr	r0, [pc, #140]	; (8000be4 <MX_GPIO_Init+0x14c>)
 8000b58:	f000 fe9a 	bl	8001890 <HAL_GPIO_WritePin>
                          |ROW4_Pin|ROW5_Pin|ROW6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : COL1_Pin COL2_Pin COL3_Pin COL4_Pin
                           COL5_Pin ENC_A_Pin ENC_B_Pin ENC_SW_Pin
                           COL0_Pin */
  GPIO_InitStruct.Pin = COL1_Pin|COL2_Pin|COL3_Pin|COL4_Pin
 8000b5c:	f64f 7380 	movw	r3, #65408	; 0xff80
 8000b60:	617b      	str	r3, [r7, #20]
                          |COL5_Pin|ENC_A_Pin|ENC_B_Pin|ENC_SW_Pin
                          |COL0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b62:	2300      	movs	r3, #0
 8000b64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b6a:	f107 0314 	add.w	r3, r7, #20
 8000b6e:	4619      	mov	r1, r3
 8000b70:	481c      	ldr	r0, [pc, #112]	; (8000be4 <MX_GPIO_Init+0x14c>)
 8000b72:	f000 fcf1 	bl	8001558 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD1_DC_Pin LCD1_CS_Pin LCD2_DC_Pin */
  GPIO_InitStruct.Pin = LCD1_DC_Pin|LCD1_CS_Pin|LCD2_DC_Pin;
 8000b76:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000b7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b84:	2300      	movs	r3, #0
 8000b86:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b88:	f107 0314 	add.w	r3, r7, #20
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4813      	ldr	r0, [pc, #76]	; (8000bdc <MX_GPIO_Init+0x144>)
 8000b90:	f000 fce2 	bl	8001558 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD2_CS_Pin LCD2_RST_Pin LCD1_RST_Pin */
  GPIO_InitStruct.Pin = LCD2_CS_Pin|LCD2_RST_Pin|LCD1_RST_Pin;
 8000b94:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000b98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba6:	f107 0314 	add.w	r3, r7, #20
 8000baa:	4619      	mov	r1, r3
 8000bac:	480c      	ldr	r0, [pc, #48]	; (8000be0 <MX_GPIO_Init+0x148>)
 8000bae:	f000 fcd3 	bl	8001558 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROW0_Pin ROW1_Pin ROW2_Pin ROW3_Pin
                           ROW4_Pin ROW5_Pin ROW6_Pin */
  GPIO_InitStruct.Pin = ROW0_Pin|ROW1_Pin|ROW2_Pin|ROW3_Pin
 8000bb2:	237f      	movs	r3, #127	; 0x7f
 8000bb4:	617b      	str	r3, [r7, #20]
                          |ROW4_Pin|ROW5_Pin|ROW6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bc2:	f107 0314 	add.w	r3, r7, #20
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4806      	ldr	r0, [pc, #24]	; (8000be4 <MX_GPIO_Init+0x14c>)
 8000bca:	f000 fcc5 	bl	8001558 <HAL_GPIO_Init>

}
 8000bce:	bf00      	nop
 8000bd0:	3728      	adds	r7, #40	; 0x28
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40023800 	.word	0x40023800
 8000bdc:	40020800 	.word	0x40020800
 8000be0:	40020000 	.word	0x40020000
 8000be4:	40020c00 	.word	0x40020c00

08000be8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

// Callback: timer has reset
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]

	// Send USB data
	if (htim == &htim4) {
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	4a0a      	ldr	r2, [pc, #40]	; (8000c1c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d107      	bne.n	8000c08 <HAL_TIM_PeriodElapsedCallback+0x20>
	    // send HID report
		record_keys();
 8000bf8:	f7ff fd5c 	bl	80006b4 <record_keys>
		USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*) &keyboardhid, sizeof(keyboardhid));
 8000bfc:	2208      	movs	r2, #8
 8000bfe:	4908      	ldr	r1, [pc, #32]	; (8000c20 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000c00:	4808      	ldr	r0, [pc, #32]	; (8000c24 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000c02:	f006 fb7d 	bl	8007300 <USBD_HID_SendReport>
//		numCycles++;
//		wpm = (charCount / 5.0f) / ((2.0f * numCycles) / 60.0f);
//		charsInCycle = 0;

	}
}
 8000c06:	e005      	b.n	8000c14 <HAL_TIM_PeriodElapsedCallback+0x2c>
	else if (htim == &htim6) {
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	4a07      	ldr	r2, [pc, #28]	; (8000c28 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	d101      	bne.n	8000c14 <HAL_TIM_PeriodElapsedCallback+0x2c>
		scan_keypad();
 8000c10:	f7ff fc5c 	bl	80004cc <scan_keypad>
}
 8000c14:	bf00      	nop
 8000c16:	3708      	adds	r7, #8
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	20000218 	.word	0x20000218
 8000c20:	200002fc 	.word	0x200002fc
 8000c24:	2000030c 	.word	0x2000030c
 8000c28:	20000260 	.word	0x20000260

08000c2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c30:	b672      	cpsid	i
}
 8000c32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c34:	e7fe      	b.n	8000c34 <Error_Handler+0x8>
	...

08000c38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	607b      	str	r3, [r7, #4]
 8000c42:	4b10      	ldr	r3, [pc, #64]	; (8000c84 <HAL_MspInit+0x4c>)
 8000c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c46:	4a0f      	ldr	r2, [pc, #60]	; (8000c84 <HAL_MspInit+0x4c>)
 8000c48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c4e:	4b0d      	ldr	r3, [pc, #52]	; (8000c84 <HAL_MspInit+0x4c>)
 8000c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c56:	607b      	str	r3, [r7, #4]
 8000c58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	603b      	str	r3, [r7, #0]
 8000c5e:	4b09      	ldr	r3, [pc, #36]	; (8000c84 <HAL_MspInit+0x4c>)
 8000c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c62:	4a08      	ldr	r2, [pc, #32]	; (8000c84 <HAL_MspInit+0x4c>)
 8000c64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c68:	6413      	str	r3, [r2, #64]	; 0x40
 8000c6a:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <HAL_MspInit+0x4c>)
 8000c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c72:	603b      	str	r3, [r7, #0]
 8000c74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c76:	bf00      	nop
 8000c78:	370c      	adds	r7, #12
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	40023800 	.word	0x40023800

08000c88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b086      	sub	sp, #24
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a2a      	ldr	r2, [pc, #168]	; (8000d40 <HAL_TIM_Base_MspInit+0xb8>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d116      	bne.n	8000cc8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	617b      	str	r3, [r7, #20]
 8000c9e:	4b29      	ldr	r3, [pc, #164]	; (8000d44 <HAL_TIM_Base_MspInit+0xbc>)
 8000ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca2:	4a28      	ldr	r2, [pc, #160]	; (8000d44 <HAL_TIM_Base_MspInit+0xbc>)
 8000ca4:	f043 0304 	orr.w	r3, r3, #4
 8000ca8:	6413      	str	r3, [r2, #64]	; 0x40
 8000caa:	4b26      	ldr	r3, [pc, #152]	; (8000d44 <HAL_TIM_Base_MspInit+0xbc>)
 8000cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cae:	f003 0304 	and.w	r3, r3, #4
 8000cb2:	617b      	str	r3, [r7, #20]
 8000cb4:	697b      	ldr	r3, [r7, #20]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	2100      	movs	r1, #0
 8000cba:	201e      	movs	r0, #30
 8000cbc:	f000 fa5b 	bl	8001176 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000cc0:	201e      	movs	r0, #30
 8000cc2:	f000 fa74 	bl	80011ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8000cc6:	e036      	b.n	8000d36 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM6)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a1e      	ldr	r2, [pc, #120]	; (8000d48 <HAL_TIM_Base_MspInit+0xc0>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d116      	bne.n	8000d00 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	613b      	str	r3, [r7, #16]
 8000cd6:	4b1b      	ldr	r3, [pc, #108]	; (8000d44 <HAL_TIM_Base_MspInit+0xbc>)
 8000cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cda:	4a1a      	ldr	r2, [pc, #104]	; (8000d44 <HAL_TIM_Base_MspInit+0xbc>)
 8000cdc:	f043 0310 	orr.w	r3, r3, #16
 8000ce0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ce2:	4b18      	ldr	r3, [pc, #96]	; (8000d44 <HAL_TIM_Base_MspInit+0xbc>)
 8000ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce6:	f003 0310 	and.w	r3, r3, #16
 8000cea:	613b      	str	r3, [r7, #16]
 8000cec:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	2036      	movs	r0, #54	; 0x36
 8000cf4:	f000 fa3f 	bl	8001176 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cf8:	2036      	movs	r0, #54	; 0x36
 8000cfa:	f000 fa58 	bl	80011ae <HAL_NVIC_EnableIRQ>
}
 8000cfe:	e01a      	b.n	8000d36 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM7)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a11      	ldr	r2, [pc, #68]	; (8000d4c <HAL_TIM_Base_MspInit+0xc4>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d115      	bne.n	8000d36 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	60fb      	str	r3, [r7, #12]
 8000d0e:	4b0d      	ldr	r3, [pc, #52]	; (8000d44 <HAL_TIM_Base_MspInit+0xbc>)
 8000d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d12:	4a0c      	ldr	r2, [pc, #48]	; (8000d44 <HAL_TIM_Base_MspInit+0xbc>)
 8000d14:	f043 0320 	orr.w	r3, r3, #32
 8000d18:	6413      	str	r3, [r2, #64]	; 0x40
 8000d1a:	4b0a      	ldr	r3, [pc, #40]	; (8000d44 <HAL_TIM_Base_MspInit+0xbc>)
 8000d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1e:	f003 0320 	and.w	r3, r3, #32
 8000d22:	60fb      	str	r3, [r7, #12]
 8000d24:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8000d26:	2200      	movs	r2, #0
 8000d28:	2100      	movs	r1, #0
 8000d2a:	2037      	movs	r0, #55	; 0x37
 8000d2c:	f000 fa23 	bl	8001176 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000d30:	2037      	movs	r0, #55	; 0x37
 8000d32:	f000 fa3c 	bl	80011ae <HAL_NVIC_EnableIRQ>
}
 8000d36:	bf00      	nop
 8000d38:	3718      	adds	r7, #24
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	40000800 	.word	0x40000800
 8000d44:	40023800 	.word	0x40023800
 8000d48:	40001000 	.word	0x40001000
 8000d4c:	40001400 	.word	0x40001400

08000d50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d54:	e7fe      	b.n	8000d54 <NMI_Handler+0x4>

08000d56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d56:	b480      	push	{r7}
 8000d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d5a:	e7fe      	b.n	8000d5a <HardFault_Handler+0x4>

08000d5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d60:	e7fe      	b.n	8000d60 <MemManage_Handler+0x4>

08000d62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d62:	b480      	push	{r7}
 8000d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d66:	e7fe      	b.n	8000d66 <BusFault_Handler+0x4>

08000d68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d6c:	e7fe      	b.n	8000d6c <UsageFault_Handler+0x4>

08000d6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d72:	bf00      	nop
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr

08000d7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d80:	bf00      	nop
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr

08000d8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d9c:	f000 f8cc 	bl	8000f38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000da0:	bf00      	nop
 8000da2:	bd80      	pop	{r7, pc}

08000da4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000da8:	4802      	ldr	r0, [pc, #8]	; (8000db4 <TIM4_IRQHandler+0x10>)
 8000daa:	f004 f8e3 	bl	8004f74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000dae:	bf00      	nop
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	20000218 	.word	0x20000218

08000db8 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8000dbc:	4802      	ldr	r0, [pc, #8]	; (8000dc8 <I2C2_EV_IRQHandler+0x10>)
 8000dbe:	f000 fd80 	bl	80018c2 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	20000164 	.word	0x20000164

08000dcc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000dd0:	4802      	ldr	r0, [pc, #8]	; (8000ddc <TIM6_DAC_IRQHandler+0x10>)
 8000dd2:	f004 f8cf 	bl	8004f74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20000260 	.word	0x20000260

08000de0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000de4:	4802      	ldr	r0, [pc, #8]	; (8000df0 <TIM7_IRQHandler+0x10>)
 8000de6:	f004 f8c5 	bl	8004f74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000dea:	bf00      	nop
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	200002a8 	.word	0x200002a8

08000df4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000df8:	4802      	ldr	r0, [pc, #8]	; (8000e04 <DMA2_Stream3_IRQHandler+0x10>)
 8000dfa:	f000 fa15 	bl	8001228 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	200001b8 	.word	0x200001b8

08000e08 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000e0c:	4802      	ldr	r0, [pc, #8]	; (8000e18 <OTG_FS_IRQHandler+0x10>)
 8000e0e:	f002 fa6c 	bl	80032ea <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	200007e8 	.word	0x200007e8

08000e1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e20:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <SystemInit+0x20>)
 8000e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e26:	4a05      	ldr	r2, [pc, #20]	; (8000e3c <SystemInit+0x20>)
 8000e28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e78 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e44:	480d      	ldr	r0, [pc, #52]	; (8000e7c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e46:	490e      	ldr	r1, [pc, #56]	; (8000e80 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e48:	4a0e      	ldr	r2, [pc, #56]	; (8000e84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e4c:	e002      	b.n	8000e54 <LoopCopyDataInit>

08000e4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e52:	3304      	adds	r3, #4

08000e54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e58:	d3f9      	bcc.n	8000e4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e5a:	4a0b      	ldr	r2, [pc, #44]	; (8000e88 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e5c:	4c0b      	ldr	r4, [pc, #44]	; (8000e8c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e60:	e001      	b.n	8000e66 <LoopFillZerobss>

08000e62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e64:	3204      	adds	r2, #4

08000e66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e68:	d3fb      	bcc.n	8000e62 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e6a:	f7ff ffd7 	bl	8000e1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e6e:	f008 f9f9 	bl	8009264 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e72:	f7ff fcb3 	bl	80007dc <main>
  bx  lr    
 8000e76:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e78:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e80:	2000011c 	.word	0x2000011c
  ldr r2, =_sidata
 8000e84:	08009384 	.word	0x08009384
  ldr r2, =_sbss
 8000e88:	2000011c 	.word	0x2000011c
  ldr r4, =_ebss
 8000e8c:	20000d08 	.word	0x20000d08

08000e90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e90:	e7fe      	b.n	8000e90 <ADC_IRQHandler>
	...

08000e94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e98:	4b0e      	ldr	r3, [pc, #56]	; (8000ed4 <HAL_Init+0x40>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a0d      	ldr	r2, [pc, #52]	; (8000ed4 <HAL_Init+0x40>)
 8000e9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ea2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ea4:	4b0b      	ldr	r3, [pc, #44]	; (8000ed4 <HAL_Init+0x40>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a0a      	ldr	r2, [pc, #40]	; (8000ed4 <HAL_Init+0x40>)
 8000eaa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000eae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eb0:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <HAL_Init+0x40>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a07      	ldr	r2, [pc, #28]	; (8000ed4 <HAL_Init+0x40>)
 8000eb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ebc:	2003      	movs	r0, #3
 8000ebe:	f000 f94f 	bl	8001160 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ec2:	200f      	movs	r0, #15
 8000ec4:	f000 f808 	bl	8000ed8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ec8:	f7ff feb6 	bl	8000c38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ecc:	2300      	movs	r3, #0
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40023c00 	.word	0x40023c00

08000ed8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ee0:	4b12      	ldr	r3, [pc, #72]	; (8000f2c <HAL_InitTick+0x54>)
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	4b12      	ldr	r3, [pc, #72]	; (8000f30 <HAL_InitTick+0x58>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	4619      	mov	r1, r3
 8000eea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eee:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f000 f967 	bl	80011ca <HAL_SYSTICK_Config>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
 8000f04:	e00e      	b.n	8000f24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2b0f      	cmp	r3, #15
 8000f0a:	d80a      	bhi.n	8000f22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	6879      	ldr	r1, [r7, #4]
 8000f10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f14:	f000 f92f 	bl	8001176 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f18:	4a06      	ldr	r2, [pc, #24]	; (8000f34 <HAL_InitTick+0x5c>)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	e000      	b.n	8000f24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f22:	2301      	movs	r3, #1
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3708      	adds	r7, #8
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	2000000c 	.word	0x2000000c
 8000f30:	20000014 	.word	0x20000014
 8000f34:	20000010 	.word	0x20000010

08000f38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f3c:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <HAL_IncTick+0x20>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	461a      	mov	r2, r3
 8000f42:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <HAL_IncTick+0x24>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4413      	add	r3, r2
 8000f48:	4a04      	ldr	r2, [pc, #16]	; (8000f5c <HAL_IncTick+0x24>)
 8000f4a:	6013      	str	r3, [r2, #0]
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	20000014 	.word	0x20000014
 8000f5c:	20000304 	.word	0x20000304

08000f60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  return uwTick;
 8000f64:	4b03      	ldr	r3, [pc, #12]	; (8000f74 <HAL_GetTick+0x14>)
 8000f66:	681b      	ldr	r3, [r3, #0]
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	20000304 	.word	0x20000304

08000f78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f80:	f7ff ffee 	bl	8000f60 <HAL_GetTick>
 8000f84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f90:	d005      	beq.n	8000f9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f92:	4b0a      	ldr	r3, [pc, #40]	; (8000fbc <HAL_Delay+0x44>)
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	461a      	mov	r2, r3
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f9e:	bf00      	nop
 8000fa0:	f7ff ffde 	bl	8000f60 <HAL_GetTick>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	68fa      	ldr	r2, [r7, #12]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	d8f7      	bhi.n	8000fa0 <HAL_Delay+0x28>
  {
  }
}
 8000fb0:	bf00      	nop
 8000fb2:	bf00      	nop
 8000fb4:	3710      	adds	r7, #16
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20000014 	.word	0x20000014

08000fc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f003 0307 	and.w	r3, r3, #7
 8000fce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fd0:	4b0c      	ldr	r3, [pc, #48]	; (8001004 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fd6:	68ba      	ldr	r2, [r7, #8]
 8000fd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fdc:	4013      	ands	r3, r2
 8000fde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fe8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ff0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ff2:	4a04      	ldr	r2, [pc, #16]	; (8001004 <__NVIC_SetPriorityGrouping+0x44>)
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	60d3      	str	r3, [r2, #12]
}
 8000ff8:	bf00      	nop
 8000ffa:	3714      	adds	r7, #20
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800100c:	4b04      	ldr	r3, [pc, #16]	; (8001020 <__NVIC_GetPriorityGrouping+0x18>)
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	0a1b      	lsrs	r3, r3, #8
 8001012:	f003 0307 	and.w	r3, r3, #7
}
 8001016:	4618      	mov	r0, r3
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800102e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001032:	2b00      	cmp	r3, #0
 8001034:	db0b      	blt.n	800104e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	f003 021f 	and.w	r2, r3, #31
 800103c:	4907      	ldr	r1, [pc, #28]	; (800105c <__NVIC_EnableIRQ+0x38>)
 800103e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001042:	095b      	lsrs	r3, r3, #5
 8001044:	2001      	movs	r0, #1
 8001046:	fa00 f202 	lsl.w	r2, r0, r2
 800104a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800104e:	bf00      	nop
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	e000e100 	.word	0xe000e100

08001060 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	4603      	mov	r3, r0
 8001068:	6039      	str	r1, [r7, #0]
 800106a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800106c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001070:	2b00      	cmp	r3, #0
 8001072:	db0a      	blt.n	800108a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	b2da      	uxtb	r2, r3
 8001078:	490c      	ldr	r1, [pc, #48]	; (80010ac <__NVIC_SetPriority+0x4c>)
 800107a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107e:	0112      	lsls	r2, r2, #4
 8001080:	b2d2      	uxtb	r2, r2
 8001082:	440b      	add	r3, r1
 8001084:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001088:	e00a      	b.n	80010a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	b2da      	uxtb	r2, r3
 800108e:	4908      	ldr	r1, [pc, #32]	; (80010b0 <__NVIC_SetPriority+0x50>)
 8001090:	79fb      	ldrb	r3, [r7, #7]
 8001092:	f003 030f 	and.w	r3, r3, #15
 8001096:	3b04      	subs	r3, #4
 8001098:	0112      	lsls	r2, r2, #4
 800109a:	b2d2      	uxtb	r2, r2
 800109c:	440b      	add	r3, r1
 800109e:	761a      	strb	r2, [r3, #24]
}
 80010a0:	bf00      	nop
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr
 80010ac:	e000e100 	.word	0xe000e100
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b089      	sub	sp, #36	; 0x24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	60f8      	str	r0, [r7, #12]
 80010bc:	60b9      	str	r1, [r7, #8]
 80010be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	f003 0307 	and.w	r3, r3, #7
 80010c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	f1c3 0307 	rsb	r3, r3, #7
 80010ce:	2b04      	cmp	r3, #4
 80010d0:	bf28      	it	cs
 80010d2:	2304      	movcs	r3, #4
 80010d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	3304      	adds	r3, #4
 80010da:	2b06      	cmp	r3, #6
 80010dc:	d902      	bls.n	80010e4 <NVIC_EncodePriority+0x30>
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	3b03      	subs	r3, #3
 80010e2:	e000      	b.n	80010e6 <NVIC_EncodePriority+0x32>
 80010e4:	2300      	movs	r3, #0
 80010e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	fa02 f303 	lsl.w	r3, r2, r3
 80010f2:	43da      	mvns	r2, r3
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	401a      	ands	r2, r3
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	fa01 f303 	lsl.w	r3, r1, r3
 8001106:	43d9      	mvns	r1, r3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800110c:	4313      	orrs	r3, r2
         );
}
 800110e:	4618      	mov	r0, r3
 8001110:	3724      	adds	r7, #36	; 0x24
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
	...

0800111c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	3b01      	subs	r3, #1
 8001128:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800112c:	d301      	bcc.n	8001132 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800112e:	2301      	movs	r3, #1
 8001130:	e00f      	b.n	8001152 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001132:	4a0a      	ldr	r2, [pc, #40]	; (800115c <SysTick_Config+0x40>)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	3b01      	subs	r3, #1
 8001138:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800113a:	210f      	movs	r1, #15
 800113c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001140:	f7ff ff8e 	bl	8001060 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001144:	4b05      	ldr	r3, [pc, #20]	; (800115c <SysTick_Config+0x40>)
 8001146:	2200      	movs	r2, #0
 8001148:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800114a:	4b04      	ldr	r3, [pc, #16]	; (800115c <SysTick_Config+0x40>)
 800114c:	2207      	movs	r2, #7
 800114e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001150:	2300      	movs	r3, #0
}
 8001152:	4618      	mov	r0, r3
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	e000e010 	.word	0xe000e010

08001160 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f7ff ff29 	bl	8000fc0 <__NVIC_SetPriorityGrouping>
}
 800116e:	bf00      	nop
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001176:	b580      	push	{r7, lr}
 8001178:	b086      	sub	sp, #24
 800117a:	af00      	add	r7, sp, #0
 800117c:	4603      	mov	r3, r0
 800117e:	60b9      	str	r1, [r7, #8]
 8001180:	607a      	str	r2, [r7, #4]
 8001182:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001184:	2300      	movs	r3, #0
 8001186:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001188:	f7ff ff3e 	bl	8001008 <__NVIC_GetPriorityGrouping>
 800118c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800118e:	687a      	ldr	r2, [r7, #4]
 8001190:	68b9      	ldr	r1, [r7, #8]
 8001192:	6978      	ldr	r0, [r7, #20]
 8001194:	f7ff ff8e 	bl	80010b4 <NVIC_EncodePriority>
 8001198:	4602      	mov	r2, r0
 800119a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800119e:	4611      	mov	r1, r2
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff ff5d 	bl	8001060 <__NVIC_SetPriority>
}
 80011a6:	bf00      	nop
 80011a8:	3718      	adds	r7, #24
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b082      	sub	sp, #8
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	4603      	mov	r3, r0
 80011b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff ff31 	bl	8001024 <__NVIC_EnableIRQ>
}
 80011c2:	bf00      	nop
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b082      	sub	sp, #8
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f7ff ffa2 	bl	800111c <SysTick_Config>
 80011d8:	4603      	mov	r3, r0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011e2:	b480      	push	{r7}
 80011e4:	b083      	sub	sp, #12
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	d004      	beq.n	8001200 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2280      	movs	r2, #128	; 0x80
 80011fa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80011fc:	2301      	movs	r3, #1
 80011fe:	e00c      	b.n	800121a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2205      	movs	r2, #5
 8001204:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f022 0201 	bic.w	r2, r2, #1
 8001216:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001218:	2300      	movs	r3, #0
}
 800121a:	4618      	mov	r0, r3
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
	...

08001228 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001230:	2300      	movs	r3, #0
 8001232:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001234:	4b8e      	ldr	r3, [pc, #568]	; (8001470 <HAL_DMA_IRQHandler+0x248>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a8e      	ldr	r2, [pc, #568]	; (8001474 <HAL_DMA_IRQHandler+0x24c>)
 800123a:	fba2 2303 	umull	r2, r3, r2, r3
 800123e:	0a9b      	lsrs	r3, r3, #10
 8001240:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001246:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001252:	2208      	movs	r2, #8
 8001254:	409a      	lsls	r2, r3
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	4013      	ands	r3, r2
 800125a:	2b00      	cmp	r3, #0
 800125c:	d01a      	beq.n	8001294 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f003 0304 	and.w	r3, r3, #4
 8001268:	2b00      	cmp	r3, #0
 800126a:	d013      	beq.n	8001294 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f022 0204 	bic.w	r2, r2, #4
 800127a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001280:	2208      	movs	r2, #8
 8001282:	409a      	lsls	r2, r3
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800128c:	f043 0201 	orr.w	r2, r3, #1
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001298:	2201      	movs	r2, #1
 800129a:	409a      	lsls	r2, r3
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	4013      	ands	r3, r2
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d012      	beq.n	80012ca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	695b      	ldr	r3, [r3, #20]
 80012aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d00b      	beq.n	80012ca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012b6:	2201      	movs	r2, #1
 80012b8:	409a      	lsls	r2, r3
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012c2:	f043 0202 	orr.w	r2, r3, #2
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012ce:	2204      	movs	r2, #4
 80012d0:	409a      	lsls	r2, r3
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	4013      	ands	r3, r2
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d012      	beq.n	8001300 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f003 0302 	and.w	r3, r3, #2
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d00b      	beq.n	8001300 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012ec:	2204      	movs	r2, #4
 80012ee:	409a      	lsls	r2, r3
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012f8:	f043 0204 	orr.w	r2, r3, #4
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001304:	2210      	movs	r2, #16
 8001306:	409a      	lsls	r2, r3
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	4013      	ands	r3, r2
 800130c:	2b00      	cmp	r3, #0
 800130e:	d043      	beq.n	8001398 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 0308 	and.w	r3, r3, #8
 800131a:	2b00      	cmp	r3, #0
 800131c:	d03c      	beq.n	8001398 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001322:	2210      	movs	r2, #16
 8001324:	409a      	lsls	r2, r3
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001334:	2b00      	cmp	r3, #0
 8001336:	d018      	beq.n	800136a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d108      	bne.n	8001358 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134a:	2b00      	cmp	r3, #0
 800134c:	d024      	beq.n	8001398 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	4798      	blx	r3
 8001356:	e01f      	b.n	8001398 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800135c:	2b00      	cmp	r3, #0
 800135e:	d01b      	beq.n	8001398 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	4798      	blx	r3
 8001368:	e016      	b.n	8001398 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001374:	2b00      	cmp	r3, #0
 8001376:	d107      	bne.n	8001388 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f022 0208 	bic.w	r2, r2, #8
 8001386:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138c:	2b00      	cmp	r3, #0
 800138e:	d003      	beq.n	8001398 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800139c:	2220      	movs	r2, #32
 800139e:	409a      	lsls	r2, r3
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	4013      	ands	r3, r2
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	f000 808f 	beq.w	80014c8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f003 0310 	and.w	r3, r3, #16
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	f000 8087 	beq.w	80014c8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013be:	2220      	movs	r2, #32
 80013c0:	409a      	lsls	r2, r3
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	2b05      	cmp	r3, #5
 80013d0:	d136      	bne.n	8001440 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f022 0216 	bic.w	r2, r2, #22
 80013e0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	695a      	ldr	r2, [r3, #20]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013f0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d103      	bne.n	8001402 <HAL_DMA_IRQHandler+0x1da>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d007      	beq.n	8001412 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f022 0208 	bic.w	r2, r2, #8
 8001410:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001416:	223f      	movs	r2, #63	; 0x3f
 8001418:	409a      	lsls	r2, r3
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2201      	movs	r2, #1
 8001422:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2200      	movs	r2, #0
 800142a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001432:	2b00      	cmp	r3, #0
 8001434:	d07e      	beq.n	8001534 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	4798      	blx	r3
        }
        return;
 800143e:	e079      	b.n	8001534 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d01d      	beq.n	800148a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001458:	2b00      	cmp	r3, #0
 800145a:	d10d      	bne.n	8001478 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001460:	2b00      	cmp	r3, #0
 8001462:	d031      	beq.n	80014c8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	4798      	blx	r3
 800146c:	e02c      	b.n	80014c8 <HAL_DMA_IRQHandler+0x2a0>
 800146e:	bf00      	nop
 8001470:	2000000c 	.word	0x2000000c
 8001474:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800147c:	2b00      	cmp	r3, #0
 800147e:	d023      	beq.n	80014c8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	4798      	blx	r3
 8001488:	e01e      	b.n	80014c8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001494:	2b00      	cmp	r3, #0
 8001496:	d10f      	bne.n	80014b8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f022 0210 	bic.w	r2, r2, #16
 80014a6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2201      	movs	r2, #1
 80014ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2200      	movs	r2, #0
 80014b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d003      	beq.n	80014c8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d032      	beq.n	8001536 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014d4:	f003 0301 	and.w	r3, r3, #1
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d022      	beq.n	8001522 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2205      	movs	r2, #5
 80014e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f022 0201 	bic.w	r2, r2, #1
 80014f2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	3301      	adds	r3, #1
 80014f8:	60bb      	str	r3, [r7, #8]
 80014fa:	697a      	ldr	r2, [r7, #20]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d307      	bcc.n	8001510 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	2b00      	cmp	r3, #0
 800150c:	d1f2      	bne.n	80014f4 <HAL_DMA_IRQHandler+0x2cc>
 800150e:	e000      	b.n	8001512 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001510:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2201      	movs	r2, #1
 8001516:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2200      	movs	r2, #0
 800151e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001526:	2b00      	cmp	r3, #0
 8001528:	d005      	beq.n	8001536 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	4798      	blx	r3
 8001532:	e000      	b.n	8001536 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001534:	bf00      	nop
    }
  }
}
 8001536:	3718      	adds	r7, #24
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}

0800153c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800154a:	b2db      	uxtb	r3, r3
}
 800154c:	4618      	mov	r0, r3
 800154e:	370c      	adds	r7, #12
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001558:	b480      	push	{r7}
 800155a:	b089      	sub	sp, #36	; 0x24
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001562:	2300      	movs	r3, #0
 8001564:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001566:	2300      	movs	r3, #0
 8001568:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800156a:	2300      	movs	r3, #0
 800156c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800156e:	2300      	movs	r3, #0
 8001570:	61fb      	str	r3, [r7, #28]
 8001572:	e16b      	b.n	800184c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001574:	2201      	movs	r2, #1
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	fa02 f303 	lsl.w	r3, r2, r3
 800157c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	697a      	ldr	r2, [r7, #20]
 8001584:	4013      	ands	r3, r2
 8001586:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001588:	693a      	ldr	r2, [r7, #16]
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	429a      	cmp	r2, r3
 800158e:	f040 815a 	bne.w	8001846 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f003 0303 	and.w	r3, r3, #3
 800159a:	2b01      	cmp	r3, #1
 800159c:	d005      	beq.n	80015aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d130      	bne.n	800160c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	2203      	movs	r2, #3
 80015b6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ba:	43db      	mvns	r3, r3
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	4013      	ands	r3, r2
 80015c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	68da      	ldr	r2, [r3, #12]
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	fa02 f303 	lsl.w	r3, r2, r3
 80015ce:	69ba      	ldr	r2, [r7, #24]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	69ba      	ldr	r2, [r7, #24]
 80015d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015e0:	2201      	movs	r2, #1
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	43db      	mvns	r3, r3
 80015ea:	69ba      	ldr	r2, [r7, #24]
 80015ec:	4013      	ands	r3, r2
 80015ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	091b      	lsrs	r3, r3, #4
 80015f6:	f003 0201 	and.w	r2, r3, #1
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	4313      	orrs	r3, r2
 8001604:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f003 0303 	and.w	r3, r3, #3
 8001614:	2b03      	cmp	r3, #3
 8001616:	d017      	beq.n	8001648 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	2203      	movs	r2, #3
 8001624:	fa02 f303 	lsl.w	r3, r2, r3
 8001628:	43db      	mvns	r3, r3
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	4013      	ands	r3, r2
 800162e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	689a      	ldr	r2, [r3, #8]
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	4313      	orrs	r3, r2
 8001640:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f003 0303 	and.w	r3, r3, #3
 8001650:	2b02      	cmp	r3, #2
 8001652:	d123      	bne.n	800169c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	08da      	lsrs	r2, r3, #3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	3208      	adds	r2, #8
 800165c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001660:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	f003 0307 	and.w	r3, r3, #7
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	220f      	movs	r2, #15
 800166c:	fa02 f303 	lsl.w	r3, r2, r3
 8001670:	43db      	mvns	r3, r3
 8001672:	69ba      	ldr	r2, [r7, #24]
 8001674:	4013      	ands	r3, r2
 8001676:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	691a      	ldr	r2, [r3, #16]
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	f003 0307 	and.w	r3, r3, #7
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	fa02 f303 	lsl.w	r3, r2, r3
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	4313      	orrs	r3, r2
 800168c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	08da      	lsrs	r2, r3, #3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	3208      	adds	r2, #8
 8001696:	69b9      	ldr	r1, [r7, #24]
 8001698:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	2203      	movs	r2, #3
 80016a8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ac:	43db      	mvns	r3, r3
 80016ae:	69ba      	ldr	r2, [r7, #24]
 80016b0:	4013      	ands	r3, r2
 80016b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f003 0203 	and.w	r2, r3, #3
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	005b      	lsls	r3, r3, #1
 80016c0:	fa02 f303 	lsl.w	r3, r2, r3
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	f000 80b4 	beq.w	8001846 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016de:	2300      	movs	r3, #0
 80016e0:	60fb      	str	r3, [r7, #12]
 80016e2:	4b60      	ldr	r3, [pc, #384]	; (8001864 <HAL_GPIO_Init+0x30c>)
 80016e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e6:	4a5f      	ldr	r2, [pc, #380]	; (8001864 <HAL_GPIO_Init+0x30c>)
 80016e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016ec:	6453      	str	r3, [r2, #68]	; 0x44
 80016ee:	4b5d      	ldr	r3, [pc, #372]	; (8001864 <HAL_GPIO_Init+0x30c>)
 80016f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016fa:	4a5b      	ldr	r2, [pc, #364]	; (8001868 <HAL_GPIO_Init+0x310>)
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	089b      	lsrs	r3, r3, #2
 8001700:	3302      	adds	r3, #2
 8001702:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001706:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	f003 0303 	and.w	r3, r3, #3
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	220f      	movs	r2, #15
 8001712:	fa02 f303 	lsl.w	r3, r2, r3
 8001716:	43db      	mvns	r3, r3
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	4013      	ands	r3, r2
 800171c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4a52      	ldr	r2, [pc, #328]	; (800186c <HAL_GPIO_Init+0x314>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d02b      	beq.n	800177e <HAL_GPIO_Init+0x226>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4a51      	ldr	r2, [pc, #324]	; (8001870 <HAL_GPIO_Init+0x318>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d025      	beq.n	800177a <HAL_GPIO_Init+0x222>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4a50      	ldr	r2, [pc, #320]	; (8001874 <HAL_GPIO_Init+0x31c>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d01f      	beq.n	8001776 <HAL_GPIO_Init+0x21e>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4a4f      	ldr	r2, [pc, #316]	; (8001878 <HAL_GPIO_Init+0x320>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d019      	beq.n	8001772 <HAL_GPIO_Init+0x21a>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4a4e      	ldr	r2, [pc, #312]	; (800187c <HAL_GPIO_Init+0x324>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d013      	beq.n	800176e <HAL_GPIO_Init+0x216>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4a4d      	ldr	r2, [pc, #308]	; (8001880 <HAL_GPIO_Init+0x328>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d00d      	beq.n	800176a <HAL_GPIO_Init+0x212>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4a4c      	ldr	r2, [pc, #304]	; (8001884 <HAL_GPIO_Init+0x32c>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d007      	beq.n	8001766 <HAL_GPIO_Init+0x20e>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a4b      	ldr	r2, [pc, #300]	; (8001888 <HAL_GPIO_Init+0x330>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d101      	bne.n	8001762 <HAL_GPIO_Init+0x20a>
 800175e:	2307      	movs	r3, #7
 8001760:	e00e      	b.n	8001780 <HAL_GPIO_Init+0x228>
 8001762:	2308      	movs	r3, #8
 8001764:	e00c      	b.n	8001780 <HAL_GPIO_Init+0x228>
 8001766:	2306      	movs	r3, #6
 8001768:	e00a      	b.n	8001780 <HAL_GPIO_Init+0x228>
 800176a:	2305      	movs	r3, #5
 800176c:	e008      	b.n	8001780 <HAL_GPIO_Init+0x228>
 800176e:	2304      	movs	r3, #4
 8001770:	e006      	b.n	8001780 <HAL_GPIO_Init+0x228>
 8001772:	2303      	movs	r3, #3
 8001774:	e004      	b.n	8001780 <HAL_GPIO_Init+0x228>
 8001776:	2302      	movs	r3, #2
 8001778:	e002      	b.n	8001780 <HAL_GPIO_Init+0x228>
 800177a:	2301      	movs	r3, #1
 800177c:	e000      	b.n	8001780 <HAL_GPIO_Init+0x228>
 800177e:	2300      	movs	r3, #0
 8001780:	69fa      	ldr	r2, [r7, #28]
 8001782:	f002 0203 	and.w	r2, r2, #3
 8001786:	0092      	lsls	r2, r2, #2
 8001788:	4093      	lsls	r3, r2
 800178a:	69ba      	ldr	r2, [r7, #24]
 800178c:	4313      	orrs	r3, r2
 800178e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001790:	4935      	ldr	r1, [pc, #212]	; (8001868 <HAL_GPIO_Init+0x310>)
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	089b      	lsrs	r3, r3, #2
 8001796:	3302      	adds	r3, #2
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800179e:	4b3b      	ldr	r3, [pc, #236]	; (800188c <HAL_GPIO_Init+0x334>)
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	43db      	mvns	r3, r3
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	4013      	ands	r3, r2
 80017ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d003      	beq.n	80017c2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80017ba:	69ba      	ldr	r2, [r7, #24]
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	4313      	orrs	r3, r2
 80017c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017c2:	4a32      	ldr	r2, [pc, #200]	; (800188c <HAL_GPIO_Init+0x334>)
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017c8:	4b30      	ldr	r3, [pc, #192]	; (800188c <HAL_GPIO_Init+0x334>)
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	43db      	mvns	r3, r3
 80017d2:	69ba      	ldr	r2, [r7, #24]
 80017d4:	4013      	ands	r3, r2
 80017d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d003      	beq.n	80017ec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80017e4:	69ba      	ldr	r2, [r7, #24]
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017ec:	4a27      	ldr	r2, [pc, #156]	; (800188c <HAL_GPIO_Init+0x334>)
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017f2:	4b26      	ldr	r3, [pc, #152]	; (800188c <HAL_GPIO_Init+0x334>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	43db      	mvns	r3, r3
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	4013      	ands	r3, r2
 8001800:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d003      	beq.n	8001816 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800180e:	69ba      	ldr	r2, [r7, #24]
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	4313      	orrs	r3, r2
 8001814:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001816:	4a1d      	ldr	r2, [pc, #116]	; (800188c <HAL_GPIO_Init+0x334>)
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800181c:	4b1b      	ldr	r3, [pc, #108]	; (800188c <HAL_GPIO_Init+0x334>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	43db      	mvns	r3, r3
 8001826:	69ba      	ldr	r2, [r7, #24]
 8001828:	4013      	ands	r3, r2
 800182a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001834:	2b00      	cmp	r3, #0
 8001836:	d003      	beq.n	8001840 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	4313      	orrs	r3, r2
 800183e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001840:	4a12      	ldr	r2, [pc, #72]	; (800188c <HAL_GPIO_Init+0x334>)
 8001842:	69bb      	ldr	r3, [r7, #24]
 8001844:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	3301      	adds	r3, #1
 800184a:	61fb      	str	r3, [r7, #28]
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	2b0f      	cmp	r3, #15
 8001850:	f67f ae90 	bls.w	8001574 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001854:	bf00      	nop
 8001856:	bf00      	nop
 8001858:	3724      	adds	r7, #36	; 0x24
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	40023800 	.word	0x40023800
 8001868:	40013800 	.word	0x40013800
 800186c:	40020000 	.word	0x40020000
 8001870:	40020400 	.word	0x40020400
 8001874:	40020800 	.word	0x40020800
 8001878:	40020c00 	.word	0x40020c00
 800187c:	40021000 	.word	0x40021000
 8001880:	40021400 	.word	0x40021400
 8001884:	40021800 	.word	0x40021800
 8001888:	40021c00 	.word	0x40021c00
 800188c:	40013c00 	.word	0x40013c00

08001890 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	460b      	mov	r3, r1
 800189a:	807b      	strh	r3, [r7, #2]
 800189c:	4613      	mov	r3, r2
 800189e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018a0:	787b      	ldrb	r3, [r7, #1]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d003      	beq.n	80018ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018a6:	887a      	ldrh	r2, [r7, #2]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018ac:	e003      	b.n	80018b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018ae:	887b      	ldrh	r3, [r7, #2]
 80018b0:	041a      	lsls	r2, r3, #16
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	619a      	str	r2, [r3, #24]
}
 80018b6:	bf00      	nop
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr

080018c2 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b088      	sub	sp, #32
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80018ca:	2300      	movs	r3, #0
 80018cc:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018da:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80018e2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018ea:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80018ec:	7bfb      	ldrb	r3, [r7, #15]
 80018ee:	2b10      	cmp	r3, #16
 80018f0:	d003      	beq.n	80018fa <HAL_I2C_EV_IRQHandler+0x38>
 80018f2:	7bfb      	ldrb	r3, [r7, #15]
 80018f4:	2b40      	cmp	r3, #64	; 0x40
 80018f6:	f040 80c1 	bne.w	8001a7c <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	695b      	ldr	r3, [r3, #20]
 8001908:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	f003 0301 	and.w	r3, r3, #1
 8001910:	2b00      	cmp	r3, #0
 8001912:	d10d      	bne.n	8001930 <HAL_I2C_EV_IRQHandler+0x6e>
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800191a:	d003      	beq.n	8001924 <HAL_I2C_EV_IRQHandler+0x62>
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001922:	d101      	bne.n	8001928 <HAL_I2C_EV_IRQHandler+0x66>
 8001924:	2301      	movs	r3, #1
 8001926:	e000      	b.n	800192a <HAL_I2C_EV_IRQHandler+0x68>
 8001928:	2300      	movs	r3, #0
 800192a:	2b01      	cmp	r3, #1
 800192c:	f000 8132 	beq.w	8001b94 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	2b00      	cmp	r3, #0
 8001938:	d00c      	beq.n	8001954 <HAL_I2C_EV_IRQHandler+0x92>
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	0a5b      	lsrs	r3, r3, #9
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	2b00      	cmp	r3, #0
 8001944:	d006      	beq.n	8001954 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f001 fb64 	bl	8003014 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f000 fcdc 	bl	800230a <I2C_Master_SB>
 8001952:	e092      	b.n	8001a7a <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	08db      	lsrs	r3, r3, #3
 8001958:	f003 0301 	and.w	r3, r3, #1
 800195c:	2b00      	cmp	r3, #0
 800195e:	d009      	beq.n	8001974 <HAL_I2C_EV_IRQHandler+0xb2>
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	0a5b      	lsrs	r3, r3, #9
 8001964:	f003 0301 	and.w	r3, r3, #1
 8001968:	2b00      	cmp	r3, #0
 800196a:	d003      	beq.n	8001974 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f000 fd52 	bl	8002416 <I2C_Master_ADD10>
 8001972:	e082      	b.n	8001a7a <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	085b      	lsrs	r3, r3, #1
 8001978:	f003 0301 	and.w	r3, r3, #1
 800197c:	2b00      	cmp	r3, #0
 800197e:	d009      	beq.n	8001994 <HAL_I2C_EV_IRQHandler+0xd2>
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	0a5b      	lsrs	r3, r3, #9
 8001984:	f003 0301 	and.w	r3, r3, #1
 8001988:	2b00      	cmp	r3, #0
 800198a:	d003      	beq.n	8001994 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f000 fd6c 	bl	800246a <I2C_Master_ADDR>
 8001992:	e072      	b.n	8001a7a <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	089b      	lsrs	r3, r3, #2
 8001998:	f003 0301 	and.w	r3, r3, #1
 800199c:	2b00      	cmp	r3, #0
 800199e:	d03b      	beq.n	8001a18 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80019ae:	f000 80f3 	beq.w	8001b98 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	09db      	lsrs	r3, r3, #7
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d00f      	beq.n	80019de <HAL_I2C_EV_IRQHandler+0x11c>
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	0a9b      	lsrs	r3, r3, #10
 80019c2:	f003 0301 	and.w	r3, r3, #1
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d009      	beq.n	80019de <HAL_I2C_EV_IRQHandler+0x11c>
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	089b      	lsrs	r3, r3, #2
 80019ce:	f003 0301 	and.w	r3, r3, #1
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d103      	bne.n	80019de <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f000 f94c 	bl	8001c74 <I2C_MasterTransmit_TXE>
 80019dc:	e04d      	b.n	8001a7a <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	089b      	lsrs	r3, r3, #2
 80019e2:	f003 0301 	and.w	r3, r3, #1
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	f000 80d6 	beq.w	8001b98 <HAL_I2C_EV_IRQHandler+0x2d6>
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	0a5b      	lsrs	r3, r3, #9
 80019f0:	f003 0301 	and.w	r3, r3, #1
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	f000 80cf 	beq.w	8001b98 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80019fa:	7bbb      	ldrb	r3, [r7, #14]
 80019fc:	2b21      	cmp	r3, #33	; 0x21
 80019fe:	d103      	bne.n	8001a08 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f000 f9d3 	bl	8001dac <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a06:	e0c7      	b.n	8001b98 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001a08:	7bfb      	ldrb	r3, [r7, #15]
 8001a0a:	2b40      	cmp	r3, #64	; 0x40
 8001a0c:	f040 80c4 	bne.w	8001b98 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f000 fa41 	bl	8001e98 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a16:	e0bf      	b.n	8001b98 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a26:	f000 80b7 	beq.w	8001b98 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	099b      	lsrs	r3, r3, #6
 8001a2e:	f003 0301 	and.w	r3, r3, #1
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d00f      	beq.n	8001a56 <HAL_I2C_EV_IRQHandler+0x194>
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	0a9b      	lsrs	r3, r3, #10
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d009      	beq.n	8001a56 <HAL_I2C_EV_IRQHandler+0x194>
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	089b      	lsrs	r3, r3, #2
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d103      	bne.n	8001a56 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f000 fab6 	bl	8001fc0 <I2C_MasterReceive_RXNE>
 8001a54:	e011      	b.n	8001a7a <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	089b      	lsrs	r3, r3, #2
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	f000 809a 	beq.w	8001b98 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	0a5b      	lsrs	r3, r3, #9
 8001a68:	f003 0301 	and.w	r3, r3, #1
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	f000 8093 	beq.w	8001b98 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f000 fb5f 	bl	8002136 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a78:	e08e      	b.n	8001b98 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001a7a:	e08d      	b.n	8001b98 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d004      	beq.n	8001a8e <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	695b      	ldr	r3, [r3, #20]
 8001a8a:	61fb      	str	r3, [r7, #28]
 8001a8c:	e007      	b.n	8001a9e <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	695b      	ldr	r3, [r3, #20]
 8001a9c:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	085b      	lsrs	r3, r3, #1
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d012      	beq.n	8001ad0 <HAL_I2C_EV_IRQHandler+0x20e>
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	0a5b      	lsrs	r3, r3, #9
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d00c      	beq.n	8001ad0 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d003      	beq.n	8001ac6 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001ac6:	69b9      	ldr	r1, [r7, #24]
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f000 ff1d 	bl	8002908 <I2C_Slave_ADDR>
 8001ace:	e066      	b.n	8001b9e <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	091b      	lsrs	r3, r3, #4
 8001ad4:	f003 0301 	and.w	r3, r3, #1
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d009      	beq.n	8001af0 <HAL_I2C_EV_IRQHandler+0x22e>
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	0a5b      	lsrs	r3, r3, #9
 8001ae0:	f003 0301 	and.w	r3, r3, #1
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d003      	beq.n	8001af0 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f000 ff57 	bl	800299c <I2C_Slave_STOPF>
 8001aee:	e056      	b.n	8001b9e <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001af0:	7bbb      	ldrb	r3, [r7, #14]
 8001af2:	2b21      	cmp	r3, #33	; 0x21
 8001af4:	d002      	beq.n	8001afc <HAL_I2C_EV_IRQHandler+0x23a>
 8001af6:	7bbb      	ldrb	r3, [r7, #14]
 8001af8:	2b29      	cmp	r3, #41	; 0x29
 8001afa:	d125      	bne.n	8001b48 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	09db      	lsrs	r3, r3, #7
 8001b00:	f003 0301 	and.w	r3, r3, #1
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d00f      	beq.n	8001b28 <HAL_I2C_EV_IRQHandler+0x266>
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	0a9b      	lsrs	r3, r3, #10
 8001b0c:	f003 0301 	and.w	r3, r3, #1
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d009      	beq.n	8001b28 <HAL_I2C_EV_IRQHandler+0x266>
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	089b      	lsrs	r3, r3, #2
 8001b18:	f003 0301 	and.w	r3, r3, #1
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d103      	bne.n	8001b28 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f000 fe33 	bl	800278c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001b26:	e039      	b.n	8001b9c <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	089b      	lsrs	r3, r3, #2
 8001b2c:	f003 0301 	and.w	r3, r3, #1
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d033      	beq.n	8001b9c <HAL_I2C_EV_IRQHandler+0x2da>
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	0a5b      	lsrs	r3, r3, #9
 8001b38:	f003 0301 	and.w	r3, r3, #1
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d02d      	beq.n	8001b9c <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f000 fe60 	bl	8002806 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001b46:	e029      	b.n	8001b9c <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	099b      	lsrs	r3, r3, #6
 8001b4c:	f003 0301 	and.w	r3, r3, #1
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d00f      	beq.n	8001b74 <HAL_I2C_EV_IRQHandler+0x2b2>
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	0a9b      	lsrs	r3, r3, #10
 8001b58:	f003 0301 	and.w	r3, r3, #1
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d009      	beq.n	8001b74 <HAL_I2C_EV_IRQHandler+0x2b2>
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	089b      	lsrs	r3, r3, #2
 8001b64:	f003 0301 	and.w	r3, r3, #1
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d103      	bne.n	8001b74 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f000 fe6b 	bl	8002848 <I2C_SlaveReceive_RXNE>
 8001b72:	e014      	b.n	8001b9e <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	089b      	lsrs	r3, r3, #2
 8001b78:	f003 0301 	and.w	r3, r3, #1
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d00e      	beq.n	8001b9e <HAL_I2C_EV_IRQHandler+0x2dc>
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	0a5b      	lsrs	r3, r3, #9
 8001b84:	f003 0301 	and.w	r3, r3, #1
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d008      	beq.n	8001b9e <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f000 fe99 	bl	80028c4 <I2C_SlaveReceive_BTF>
 8001b92:	e004      	b.n	8001b9e <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8001b94:	bf00      	nop
 8001b96:	e002      	b.n	8001b9e <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001b98:	bf00      	nop
 8001b9a:	e000      	b.n	8001b9e <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001b9c:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001b9e:	3720      	adds	r7, #32
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001bac:	bf00      	nop
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001bc0:	bf00      	nop
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001bd4:	bf00      	nop
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001be8:	bf00      	nop
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	70fb      	strb	r3, [r7, #3]
 8001c00:	4613      	mov	r3, r2
 8001c02:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001c04:	bf00      	nop
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8001c18:	bf00      	nop
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001c2c:	bf00      	nop
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001c40:	bf00      	nop
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001c54:	bf00      	nop
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001c68:	bf00      	nop
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr

08001c74 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c82:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c8a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c90:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d150      	bne.n	8001d3c <I2C_MasterTransmit_TXE+0xc8>
 8001c9a:	7bfb      	ldrb	r3, [r7, #15]
 8001c9c:	2b21      	cmp	r3, #33	; 0x21
 8001c9e:	d14d      	bne.n	8001d3c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	2b08      	cmp	r3, #8
 8001ca4:	d01d      	beq.n	8001ce2 <I2C_MasterTransmit_TXE+0x6e>
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	2b20      	cmp	r3, #32
 8001caa:	d01a      	beq.n	8001ce2 <I2C_MasterTransmit_TXE+0x6e>
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001cb2:	d016      	beq.n	8001ce2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	685a      	ldr	r2, [r3, #4]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001cc2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2211      	movs	r2, #17
 8001cc8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2220      	movs	r2, #32
 8001cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f7ff ff62 	bl	8001ba4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001ce0:	e060      	b.n	8001da4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	685a      	ldr	r2, [r3, #4]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001cf0:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d00:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2220      	movs	r2, #32
 8001d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	2b40      	cmp	r3, #64	; 0x40
 8001d1a:	d107      	bne.n	8001d2c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f7ff ff7d 	bl	8001c24 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001d2a:	e03b      	b.n	8001da4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f7ff ff35 	bl	8001ba4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001d3a:	e033      	b.n	8001da4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001d3c:	7bfb      	ldrb	r3, [r7, #15]
 8001d3e:	2b21      	cmp	r3, #33	; 0x21
 8001d40:	d005      	beq.n	8001d4e <I2C_MasterTransmit_TXE+0xda>
 8001d42:	7bbb      	ldrb	r3, [r7, #14]
 8001d44:	2b40      	cmp	r3, #64	; 0x40
 8001d46:	d12d      	bne.n	8001da4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001d48:	7bfb      	ldrb	r3, [r7, #15]
 8001d4a:	2b22      	cmp	r3, #34	; 0x22
 8001d4c:	d12a      	bne.n	8001da4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d108      	bne.n	8001d6a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	685a      	ldr	r2, [r3, #4]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d66:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8001d68:	e01c      	b.n	8001da4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	2b40      	cmp	r3, #64	; 0x40
 8001d74:	d103      	bne.n	8001d7e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f000 f88e 	bl	8001e98 <I2C_MemoryTransmit_TXE_BTF>
}
 8001d7c:	e012      	b.n	8001da4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d82:	781a      	ldrb	r2, [r3, #0]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8e:	1c5a      	adds	r2, r3, #1
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	b29a      	uxth	r2, r3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001da2:	e7ff      	b.n	8001da4 <I2C_MasterTransmit_TXE+0x130>
 8001da4:	bf00      	nop
 8001da6:	3710      	adds	r7, #16
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	2b21      	cmp	r3, #33	; 0x21
 8001dc4:	d164      	bne.n	8001e90 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d012      	beq.n	8001df6 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd4:	781a      	ldrb	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de0:	1c5a      	adds	r2, r3, #1
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dea:	b29b      	uxth	r3, r3
 8001dec:	3b01      	subs	r3, #1
 8001dee:	b29a      	uxth	r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8001df4:	e04c      	b.n	8001e90 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2b08      	cmp	r3, #8
 8001dfa:	d01d      	beq.n	8001e38 <I2C_MasterTransmit_BTF+0x8c>
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2b20      	cmp	r3, #32
 8001e00:	d01a      	beq.n	8001e38 <I2C_MasterTransmit_BTF+0x8c>
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001e08:	d016      	beq.n	8001e38 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	685a      	ldr	r2, [r3, #4]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001e18:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2211      	movs	r2, #17
 8001e1e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2200      	movs	r2, #0
 8001e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2220      	movs	r2, #32
 8001e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f7ff feb7 	bl	8001ba4 <HAL_I2C_MasterTxCpltCallback>
}
 8001e36:	e02b      	b.n	8001e90 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	685a      	ldr	r2, [r3, #4]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001e46:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e56:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2220      	movs	r2, #32
 8001e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	2b40      	cmp	r3, #64	; 0x40
 8001e70:	d107      	bne.n	8001e82 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f7ff fed2 	bl	8001c24 <HAL_I2C_MemTxCpltCallback>
}
 8001e80:	e006      	b.n	8001e90 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f7ff fe8a 	bl	8001ba4 <HAL_I2C_MasterTxCpltCallback>
}
 8001e90:	bf00      	nop
 8001e92:	3710      	adds	r7, #16
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ea6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d11d      	bne.n	8001eec <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d10b      	bne.n	8001ed0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ebc:	b2da      	uxtb	r2, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ec8:	1c9a      	adds	r2, r3, #2
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8001ece:	e073      	b.n	8001fb8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	121b      	asrs	r3, r3, #8
 8001ed8:	b2da      	uxtb	r2, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ee4:	1c5a      	adds	r2, r3, #1
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001eea:	e065      	b.n	8001fb8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d10b      	bne.n	8001f0c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ef8:	b2da      	uxtb	r2, r3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f04:	1c5a      	adds	r2, r3, #1
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001f0a:	e055      	b.n	8001fb8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d151      	bne.n	8001fb8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8001f14:	7bfb      	ldrb	r3, [r7, #15]
 8001f16:	2b22      	cmp	r3, #34	; 0x22
 8001f18:	d10d      	bne.n	8001f36 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f28:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f2e:	1c5a      	adds	r2, r3, #1
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001f34:	e040      	b.n	8001fb8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d015      	beq.n	8001f6c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8001f40:	7bfb      	ldrb	r3, [r7, #15]
 8001f42:	2b21      	cmp	r3, #33	; 0x21
 8001f44:	d112      	bne.n	8001f6c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4a:	781a      	ldrb	r2, [r3, #0]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f56:	1c5a      	adds	r2, r3, #1
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	3b01      	subs	r3, #1
 8001f64:	b29a      	uxth	r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001f6a:	e025      	b.n	8001fb8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d120      	bne.n	8001fb8 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8001f76:	7bfb      	ldrb	r3, [r7, #15]
 8001f78:	2b21      	cmp	r3, #33	; 0x21
 8001f7a:	d11d      	bne.n	8001fb8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	685a      	ldr	r2, [r3, #4]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001f8a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f9a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2220      	movs	r2, #32
 8001fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f7ff fe36 	bl	8001c24 <HAL_I2C_MemTxCpltCallback>
}
 8001fb8:	bf00      	nop
 8001fba:	3710      	adds	r7, #16
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	2b22      	cmp	r3, #34	; 0x22
 8001fd2:	f040 80ac 	bne.w	800212e <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2b03      	cmp	r3, #3
 8001fe2:	d921      	bls.n	8002028 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	691a      	ldr	r2, [r3, #16]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fee:	b2d2      	uxtb	r2, r2
 8001ff0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff6:	1c5a      	adds	r2, r3, #1
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002000:	b29b      	uxth	r3, r3
 8002002:	3b01      	subs	r3, #1
 8002004:	b29a      	uxth	r2, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800200e:	b29b      	uxth	r3, r3
 8002010:	2b03      	cmp	r3, #3
 8002012:	f040 808c 	bne.w	800212e <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	685a      	ldr	r2, [r3, #4]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002024:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8002026:	e082      	b.n	800212e <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800202c:	2b02      	cmp	r3, #2
 800202e:	d075      	beq.n	800211c <I2C_MasterReceive_RXNE+0x15c>
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2b01      	cmp	r3, #1
 8002034:	d002      	beq.n	800203c <I2C_MasterReceive_RXNE+0x7c>
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d16f      	bne.n	800211c <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f000 ffb7 	bl	8002fb0 <I2C_WaitOnSTOPRequestThroughIT>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d142      	bne.n	80020ce <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002056:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	685a      	ldr	r2, [r3, #4]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002066:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	691a      	ldr	r2, [r3, #16]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002072:	b2d2      	uxtb	r2, r2
 8002074:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207a:	1c5a      	adds	r2, r3, #1
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002084:	b29b      	uxth	r3, r3
 8002086:	3b01      	subs	r3, #1
 8002088:	b29a      	uxth	r2, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2220      	movs	r2, #32
 8002092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800209c:	b2db      	uxtb	r3, r3
 800209e:	2b40      	cmp	r3, #64	; 0x40
 80020a0:	d10a      	bne.n	80020b8 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f7ff fdc1 	bl	8001c38 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80020b6:	e03a      	b.n	800212e <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2200      	movs	r2, #0
 80020bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2212      	movs	r2, #18
 80020c4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f7ff fd76 	bl	8001bb8 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80020cc:	e02f      	b.n	800212e <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	685a      	ldr	r2, [r3, #4]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80020dc:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	691a      	ldr	r2, [r3, #16]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e8:	b2d2      	uxtb	r2, r2
 80020ea:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f0:	1c5a      	adds	r2, r3, #1
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	3b01      	subs	r3, #1
 80020fe:	b29a      	uxth	r2, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2220      	movs	r2, #32
 8002108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2200      	movs	r2, #0
 8002110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f7ff fd99 	bl	8001c4c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800211a:	e008      	b.n	800212e <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	685a      	ldr	r2, [r3, #4]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800212a:	605a      	str	r2, [r3, #4]
}
 800212c:	e7ff      	b.n	800212e <I2C_MasterReceive_RXNE+0x16e>
 800212e:	bf00      	nop
 8002130:	3710      	adds	r7, #16
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002136:	b580      	push	{r7, lr}
 8002138:	b084      	sub	sp, #16
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002142:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002148:	b29b      	uxth	r3, r3
 800214a:	2b04      	cmp	r3, #4
 800214c:	d11b      	bne.n	8002186 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	685a      	ldr	r2, [r3, #4]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800215c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	691a      	ldr	r2, [r3, #16]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002168:	b2d2      	uxtb	r2, r2
 800216a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002170:	1c5a      	adds	r2, r3, #1
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800217a:	b29b      	uxth	r3, r3
 800217c:	3b01      	subs	r3, #1
 800217e:	b29a      	uxth	r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002184:	e0bd      	b.n	8002302 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800218a:	b29b      	uxth	r3, r3
 800218c:	2b03      	cmp	r3, #3
 800218e:	d129      	bne.n	80021e4 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	685a      	ldr	r2, [r3, #4]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800219e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2b04      	cmp	r3, #4
 80021a4:	d00a      	beq.n	80021bc <I2C_MasterReceive_BTF+0x86>
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d007      	beq.n	80021bc <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021ba:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	691a      	ldr	r2, [r3, #16]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c6:	b2d2      	uxtb	r2, r2
 80021c8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ce:	1c5a      	adds	r2, r3, #1
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021d8:	b29b      	uxth	r3, r3
 80021da:	3b01      	subs	r3, #1
 80021dc:	b29a      	uxth	r2, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80021e2:	e08e      	b.n	8002302 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021e8:	b29b      	uxth	r3, r3
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d176      	bne.n	80022dc <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d002      	beq.n	80021fa <I2C_MasterReceive_BTF+0xc4>
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2b10      	cmp	r3, #16
 80021f8:	d108      	bne.n	800220c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002208:	601a      	str	r2, [r3, #0]
 800220a:	e019      	b.n	8002240 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2b04      	cmp	r3, #4
 8002210:	d002      	beq.n	8002218 <I2C_MasterReceive_BTF+0xe2>
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2b02      	cmp	r3, #2
 8002216:	d108      	bne.n	800222a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002226:	601a      	str	r2, [r3, #0]
 8002228:	e00a      	b.n	8002240 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2b10      	cmp	r3, #16
 800222e:	d007      	beq.n	8002240 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800223e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	691a      	ldr	r2, [r3, #16]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224a:	b2d2      	uxtb	r2, r2
 800224c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002252:	1c5a      	adds	r2, r3, #1
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800225c:	b29b      	uxth	r3, r3
 800225e:	3b01      	subs	r3, #1
 8002260:	b29a      	uxth	r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	691a      	ldr	r2, [r3, #16]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002270:	b2d2      	uxtb	r2, r2
 8002272:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002278:	1c5a      	adds	r2, r3, #1
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002282:	b29b      	uxth	r3, r3
 8002284:	3b01      	subs	r3, #1
 8002286:	b29a      	uxth	r2, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	685a      	ldr	r2, [r3, #4]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800229a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2220      	movs	r2, #32
 80022a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	2b40      	cmp	r3, #64	; 0x40
 80022ae:	d10a      	bne.n	80022c6 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2200      	movs	r2, #0
 80022b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f7ff fcba 	bl	8001c38 <HAL_I2C_MemRxCpltCallback>
}
 80022c4:	e01d      	b.n	8002302 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2212      	movs	r2, #18
 80022d2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f7ff fc6f 	bl	8001bb8 <HAL_I2C_MasterRxCpltCallback>
}
 80022da:	e012      	b.n	8002302 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	691a      	ldr	r2, [r3, #16]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e6:	b2d2      	uxtb	r2, r2
 80022e8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ee:	1c5a      	adds	r2, r3, #1
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	3b01      	subs	r3, #1
 80022fc:	b29a      	uxth	r2, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002302:	bf00      	nop
 8002304:	3710      	adds	r7, #16
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}

0800230a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800230a:	b480      	push	{r7}
 800230c:	b083      	sub	sp, #12
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002318:	b2db      	uxtb	r3, r3
 800231a:	2b40      	cmp	r3, #64	; 0x40
 800231c:	d117      	bne.n	800234e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002322:	2b00      	cmp	r3, #0
 8002324:	d109      	bne.n	800233a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232a:	b2db      	uxtb	r3, r3
 800232c:	461a      	mov	r2, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002336:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002338:	e067      	b.n	800240a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800233e:	b2db      	uxtb	r3, r3
 8002340:	f043 0301 	orr.w	r3, r3, #1
 8002344:	b2da      	uxtb	r2, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	611a      	str	r2, [r3, #16]
}
 800234c:	e05d      	b.n	800240a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002356:	d133      	bne.n	80023c0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800235e:	b2db      	uxtb	r3, r3
 8002360:	2b21      	cmp	r3, #33	; 0x21
 8002362:	d109      	bne.n	8002378 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002368:	b2db      	uxtb	r3, r3
 800236a:	461a      	mov	r2, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002374:	611a      	str	r2, [r3, #16]
 8002376:	e008      	b.n	800238a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800237c:	b2db      	uxtb	r3, r3
 800237e:	f043 0301 	orr.w	r3, r3, #1
 8002382:	b2da      	uxtb	r2, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800238e:	2b00      	cmp	r3, #0
 8002390:	d004      	beq.n	800239c <I2C_Master_SB+0x92>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002398:	2b00      	cmp	r3, #0
 800239a:	d108      	bne.n	80023ae <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d032      	beq.n	800240a <I2C_Master_SB+0x100>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d02d      	beq.n	800240a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	685a      	ldr	r2, [r3, #4]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023bc:	605a      	str	r2, [r3, #4]
}
 80023be:	e024      	b.n	800240a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d10e      	bne.n	80023e6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	11db      	asrs	r3, r3, #7
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	f003 0306 	and.w	r3, r3, #6
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	f063 030f 	orn	r3, r3, #15
 80023dc:	b2da      	uxtb	r2, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	611a      	str	r2, [r3, #16]
}
 80023e4:	e011      	b.n	800240a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d10d      	bne.n	800240a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	11db      	asrs	r3, r3, #7
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	f003 0306 	and.w	r3, r3, #6
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	f063 030e 	orn	r3, r3, #14
 8002402:	b2da      	uxtb	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	611a      	str	r2, [r3, #16]
}
 800240a:	bf00      	nop
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr

08002416 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002416:	b480      	push	{r7}
 8002418:	b083      	sub	sp, #12
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002422:	b2da      	uxtb	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800242e:	2b00      	cmp	r3, #0
 8002430:	d004      	beq.n	800243c <I2C_Master_ADD10+0x26>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002436:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002438:	2b00      	cmp	r3, #0
 800243a:	d108      	bne.n	800244e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002440:	2b00      	cmp	r3, #0
 8002442:	d00c      	beq.n	800245e <I2C_Master_ADD10+0x48>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800244a:	2b00      	cmp	r3, #0
 800244c:	d007      	beq.n	800245e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	685a      	ldr	r2, [r3, #4]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800245c:	605a      	str	r2, [r3, #4]
  }
}
 800245e:	bf00      	nop
 8002460:	370c      	adds	r7, #12
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr

0800246a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800246a:	b480      	push	{r7}
 800246c:	b091      	sub	sp, #68	; 0x44
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002478:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002480:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002486:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800248e:	b2db      	uxtb	r3, r3
 8002490:	2b22      	cmp	r3, #34	; 0x22
 8002492:	f040 8169 	bne.w	8002768 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800249a:	2b00      	cmp	r3, #0
 800249c:	d10f      	bne.n	80024be <I2C_Master_ADDR+0x54>
 800249e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80024a2:	2b40      	cmp	r3, #64	; 0x40
 80024a4:	d10b      	bne.n	80024be <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024a6:	2300      	movs	r3, #0
 80024a8:	633b      	str	r3, [r7, #48]	; 0x30
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	695b      	ldr	r3, [r3, #20]
 80024b0:	633b      	str	r3, [r7, #48]	; 0x30
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	699b      	ldr	r3, [r3, #24]
 80024b8:	633b      	str	r3, [r7, #48]	; 0x30
 80024ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024bc:	e160      	b.n	8002780 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d11d      	bne.n	8002502 <I2C_Master_ADDR+0x98>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	691b      	ldr	r3, [r3, #16]
 80024ca:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80024ce:	d118      	bne.n	8002502 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024d0:	2300      	movs	r3, #0
 80024d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	695b      	ldr	r3, [r3, #20]
 80024da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	699b      	ldr	r3, [r3, #24]
 80024e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024f4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024fa:	1c5a      	adds	r2, r3, #1
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	651a      	str	r2, [r3, #80]	; 0x50
 8002500:	e13e      	b.n	8002780 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002506:	b29b      	uxth	r3, r3
 8002508:	2b00      	cmp	r3, #0
 800250a:	d113      	bne.n	8002534 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800250c:	2300      	movs	r3, #0
 800250e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	695b      	ldr	r3, [r3, #20]
 8002516:	62bb      	str	r3, [r7, #40]	; 0x28
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	699b      	ldr	r3, [r3, #24]
 800251e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002520:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002530:	601a      	str	r2, [r3, #0]
 8002532:	e115      	b.n	8002760 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002538:	b29b      	uxth	r3, r3
 800253a:	2b01      	cmp	r3, #1
 800253c:	f040 808a 	bne.w	8002654 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002542:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002546:	d137      	bne.n	80025b8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002556:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002562:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002566:	d113      	bne.n	8002590 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002576:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002578:	2300      	movs	r3, #0
 800257a:	627b      	str	r3, [r7, #36]	; 0x24
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	695b      	ldr	r3, [r3, #20]
 8002582:	627b      	str	r3, [r7, #36]	; 0x24
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	699b      	ldr	r3, [r3, #24]
 800258a:	627b      	str	r3, [r7, #36]	; 0x24
 800258c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258e:	e0e7      	b.n	8002760 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002590:	2300      	movs	r3, #0
 8002592:	623b      	str	r3, [r7, #32]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	695b      	ldr	r3, [r3, #20]
 800259a:	623b      	str	r3, [r7, #32]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	699b      	ldr	r3, [r3, #24]
 80025a2:	623b      	str	r3, [r7, #32]
 80025a4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025b4:	601a      	str	r2, [r3, #0]
 80025b6:	e0d3      	b.n	8002760 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80025b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025ba:	2b08      	cmp	r3, #8
 80025bc:	d02e      	beq.n	800261c <I2C_Master_ADDR+0x1b2>
 80025be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025c0:	2b20      	cmp	r3, #32
 80025c2:	d02b      	beq.n	800261c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80025c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025c6:	2b12      	cmp	r3, #18
 80025c8:	d102      	bne.n	80025d0 <I2C_Master_ADDR+0x166>
 80025ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d125      	bne.n	800261c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80025d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025d2:	2b04      	cmp	r3, #4
 80025d4:	d00e      	beq.n	80025f4 <I2C_Master_ADDR+0x18a>
 80025d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d00b      	beq.n	80025f4 <I2C_Master_ADDR+0x18a>
 80025dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025de:	2b10      	cmp	r3, #16
 80025e0:	d008      	beq.n	80025f4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025f0:	601a      	str	r2, [r3, #0]
 80025f2:	e007      	b.n	8002604 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002602:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002604:	2300      	movs	r3, #0
 8002606:	61fb      	str	r3, [r7, #28]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	695b      	ldr	r3, [r3, #20]
 800260e:	61fb      	str	r3, [r7, #28]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	699b      	ldr	r3, [r3, #24]
 8002616:	61fb      	str	r3, [r7, #28]
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	e0a1      	b.n	8002760 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800262a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800262c:	2300      	movs	r3, #0
 800262e:	61bb      	str	r3, [r7, #24]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	695b      	ldr	r3, [r3, #20]
 8002636:	61bb      	str	r3, [r7, #24]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	699b      	ldr	r3, [r3, #24]
 800263e:	61bb      	str	r3, [r7, #24]
 8002640:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002650:	601a      	str	r2, [r3, #0]
 8002652:	e085      	b.n	8002760 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002658:	b29b      	uxth	r3, r3
 800265a:	2b02      	cmp	r3, #2
 800265c:	d14d      	bne.n	80026fa <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800265e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002660:	2b04      	cmp	r3, #4
 8002662:	d016      	beq.n	8002692 <I2C_Master_ADDR+0x228>
 8002664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002666:	2b02      	cmp	r3, #2
 8002668:	d013      	beq.n	8002692 <I2C_Master_ADDR+0x228>
 800266a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800266c:	2b10      	cmp	r3, #16
 800266e:	d010      	beq.n	8002692 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800267e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800268e:	601a      	str	r2, [r3, #0]
 8002690:	e007      	b.n	80026a2 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80026a0:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026b0:	d117      	bne.n	80026e2 <I2C_Master_ADDR+0x278>
 80026b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80026b8:	d00b      	beq.n	80026d2 <I2C_Master_ADDR+0x268>
 80026ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d008      	beq.n	80026d2 <I2C_Master_ADDR+0x268>
 80026c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026c2:	2b08      	cmp	r3, #8
 80026c4:	d005      	beq.n	80026d2 <I2C_Master_ADDR+0x268>
 80026c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026c8:	2b10      	cmp	r3, #16
 80026ca:	d002      	beq.n	80026d2 <I2C_Master_ADDR+0x268>
 80026cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026ce:	2b20      	cmp	r3, #32
 80026d0:	d107      	bne.n	80026e2 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	685a      	ldr	r2, [r3, #4]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80026e0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026e2:	2300      	movs	r3, #0
 80026e4:	617b      	str	r3, [r7, #20]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	695b      	ldr	r3, [r3, #20]
 80026ec:	617b      	str	r3, [r7, #20]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	699b      	ldr	r3, [r3, #24]
 80026f4:	617b      	str	r3, [r7, #20]
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	e032      	b.n	8002760 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002708:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002714:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002718:	d117      	bne.n	800274a <I2C_Master_ADDR+0x2e0>
 800271a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800271c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002720:	d00b      	beq.n	800273a <I2C_Master_ADDR+0x2d0>
 8002722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002724:	2b01      	cmp	r3, #1
 8002726:	d008      	beq.n	800273a <I2C_Master_ADDR+0x2d0>
 8002728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800272a:	2b08      	cmp	r3, #8
 800272c:	d005      	beq.n	800273a <I2C_Master_ADDR+0x2d0>
 800272e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002730:	2b10      	cmp	r3, #16
 8002732:	d002      	beq.n	800273a <I2C_Master_ADDR+0x2d0>
 8002734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002736:	2b20      	cmp	r3, #32
 8002738:	d107      	bne.n	800274a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	685a      	ldr	r2, [r3, #4]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002748:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800274a:	2300      	movs	r3, #0
 800274c:	613b      	str	r3, [r7, #16]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	695b      	ldr	r3, [r3, #20]
 8002754:	613b      	str	r3, [r7, #16]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	699b      	ldr	r3, [r3, #24]
 800275c:	613b      	str	r3, [r7, #16]
 800275e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002766:	e00b      	b.n	8002780 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002768:	2300      	movs	r3, #0
 800276a:	60fb      	str	r3, [r7, #12]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	695b      	ldr	r3, [r3, #20]
 8002772:	60fb      	str	r3, [r7, #12]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	699b      	ldr	r3, [r3, #24]
 800277a:	60fb      	str	r3, [r7, #12]
 800277c:	68fb      	ldr	r3, [r7, #12]
}
 800277e:	e7ff      	b.n	8002780 <I2C_Master_ADDR+0x316>
 8002780:	bf00      	nop
 8002782:	3744      	adds	r7, #68	; 0x44
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr

0800278c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800279a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d02b      	beq.n	80027fe <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027aa:	781a      	ldrb	r2, [r3, #0]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b6:	1c5a      	adds	r2, r3, #1
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	3b01      	subs	r3, #1
 80027c4:	b29a      	uxth	r2, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d114      	bne.n	80027fe <I2C_SlaveTransmit_TXE+0x72>
 80027d4:	7bfb      	ldrb	r3, [r7, #15]
 80027d6:	2b29      	cmp	r3, #41	; 0x29
 80027d8:	d111      	bne.n	80027fe <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	685a      	ldr	r2, [r3, #4]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027e8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2221      	movs	r2, #33	; 0x21
 80027ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2228      	movs	r2, #40	; 0x28
 80027f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f7ff f9e7 	bl	8001bcc <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80027fe:	bf00      	nop
 8002800:	3710      	adds	r7, #16
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002806:	b480      	push	{r7}
 8002808:	b083      	sub	sp, #12
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002812:	b29b      	uxth	r3, r3
 8002814:	2b00      	cmp	r3, #0
 8002816:	d011      	beq.n	800283c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281c:	781a      	ldrb	r2, [r3, #0]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002828:	1c5a      	adds	r2, r3, #1
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002832:	b29b      	uxth	r3, r3
 8002834:	3b01      	subs	r3, #1
 8002836:	b29a      	uxth	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800283c:	bf00      	nop
 800283e:	370c      	adds	r7, #12
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr

08002848 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002856:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800285c:	b29b      	uxth	r3, r3
 800285e:	2b00      	cmp	r3, #0
 8002860:	d02c      	beq.n	80028bc <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	691a      	ldr	r2, [r3, #16]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286c:	b2d2      	uxtb	r2, r2
 800286e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002874:	1c5a      	adds	r2, r3, #1
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800287e:	b29b      	uxth	r3, r3
 8002880:	3b01      	subs	r3, #1
 8002882:	b29a      	uxth	r2, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800288c:	b29b      	uxth	r3, r3
 800288e:	2b00      	cmp	r3, #0
 8002890:	d114      	bne.n	80028bc <I2C_SlaveReceive_RXNE+0x74>
 8002892:	7bfb      	ldrb	r3, [r7, #15]
 8002894:	2b2a      	cmp	r3, #42	; 0x2a
 8002896:	d111      	bne.n	80028bc <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	685a      	ldr	r2, [r3, #4]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028a6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2222      	movs	r2, #34	; 0x22
 80028ac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2228      	movs	r2, #40	; 0x28
 80028b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f7ff f992 	bl	8001be0 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80028bc:	bf00      	nop
 80028be:	3710      	adds	r7, #16
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d012      	beq.n	80028fc <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	691a      	ldr	r2, [r3, #16]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e0:	b2d2      	uxtb	r2, r2
 80028e2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e8:	1c5a      	adds	r2, r3, #1
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	3b01      	subs	r3, #1
 80028f6:	b29a      	uxth	r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80028fc:	bf00      	nop
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002912:	2300      	movs	r3, #0
 8002914:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800291c:	b2db      	uxtb	r3, r3
 800291e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002922:	2b28      	cmp	r3, #40	; 0x28
 8002924:	d127      	bne.n	8002976 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	685a      	ldr	r2, [r3, #4]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002934:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	089b      	lsrs	r3, r3, #2
 800293a:	f003 0301 	and.w	r3, r3, #1
 800293e:	2b00      	cmp	r3, #0
 8002940:	d101      	bne.n	8002946 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002942:	2301      	movs	r3, #1
 8002944:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	09db      	lsrs	r3, r3, #7
 800294a:	f003 0301 	and.w	r3, r3, #1
 800294e:	2b00      	cmp	r3, #0
 8002950:	d103      	bne.n	800295a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	81bb      	strh	r3, [r7, #12]
 8002958:	e002      	b.n	8002960 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002968:	89ba      	ldrh	r2, [r7, #12]
 800296a:	7bfb      	ldrb	r3, [r7, #15]
 800296c:	4619      	mov	r1, r3
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f7ff f940 	bl	8001bf4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002974:	e00e      	b.n	8002994 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002976:	2300      	movs	r3, #0
 8002978:	60bb      	str	r3, [r7, #8]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	695b      	ldr	r3, [r3, #20]
 8002980:	60bb      	str	r3, [r7, #8]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	699b      	ldr	r3, [r3, #24]
 8002988:	60bb      	str	r3, [r7, #8]
 800298a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8002994:	bf00      	nop
 8002996:	3710      	adds	r7, #16
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}

0800299c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029aa:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	685a      	ldr	r2, [r3, #4]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80029ba:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80029bc:	2300      	movs	r3, #0
 80029be:	60bb      	str	r3, [r7, #8]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	695b      	ldr	r3, [r3, #20]
 80029c6:	60bb      	str	r3, [r7, #8]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f042 0201 	orr.w	r2, r2, #1
 80029d6:	601a      	str	r2, [r3, #0]
 80029d8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029e8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029f8:	d172      	bne.n	8002ae0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80029fa:	7bfb      	ldrb	r3, [r7, #15]
 80029fc:	2b22      	cmp	r3, #34	; 0x22
 80029fe:	d002      	beq.n	8002a06 <I2C_Slave_STOPF+0x6a>
 8002a00:	7bfb      	ldrb	r3, [r7, #15]
 8002a02:	2b2a      	cmp	r3, #42	; 0x2a
 8002a04:	d135      	bne.n	8002a72 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	b29a      	uxth	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d005      	beq.n	8002a2a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a22:	f043 0204 	orr.w	r2, r3, #4
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	685a      	ldr	r2, [r3, #4]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a38:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f7fe fd7c 	bl	800153c <HAL_DMA_GetState>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d049      	beq.n	8002ade <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a4e:	4a69      	ldr	r2, [pc, #420]	; (8002bf4 <I2C_Slave_STOPF+0x258>)
 8002a50:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7fe fbc3 	bl	80011e2 <HAL_DMA_Abort_IT>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d03d      	beq.n	8002ade <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a6c:	4610      	mov	r0, r2
 8002a6e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002a70:	e035      	b.n	8002ade <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	b29a      	uxth	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d005      	beq.n	8002a96 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8e:	f043 0204 	orr.w	r2, r3, #4
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	685a      	ldr	r2, [r3, #4]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002aa4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7fe fd46 	bl	800153c <HAL_DMA_GetState>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d014      	beq.n	8002ae0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aba:	4a4e      	ldr	r2, [pc, #312]	; (8002bf4 <I2C_Slave_STOPF+0x258>)
 8002abc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7fe fb8d 	bl	80011e2 <HAL_DMA_Abort_IT>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d008      	beq.n	8002ae0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ad2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002ad8:	4610      	mov	r0, r2
 8002ada:	4798      	blx	r3
 8002adc:	e000      	b.n	8002ae0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002ade:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ae4:	b29b      	uxth	r3, r3
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d03e      	beq.n	8002b68 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	695b      	ldr	r3, [r3, #20]
 8002af0:	f003 0304 	and.w	r3, r3, #4
 8002af4:	2b04      	cmp	r3, #4
 8002af6:	d112      	bne.n	8002b1e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	691a      	ldr	r2, [r3, #16]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b02:	b2d2      	uxtb	r2, r2
 8002b04:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0a:	1c5a      	adds	r2, r3, #1
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	3b01      	subs	r3, #1
 8002b18:	b29a      	uxth	r2, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	695b      	ldr	r3, [r3, #20]
 8002b24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b28:	2b40      	cmp	r3, #64	; 0x40
 8002b2a:	d112      	bne.n	8002b52 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	691a      	ldr	r2, [r3, #16]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b36:	b2d2      	uxtb	r2, r2
 8002b38:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3e:	1c5a      	adds	r2, r3, #1
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	3b01      	subs	r3, #1
 8002b4c:	b29a      	uxth	r2, r3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d005      	beq.n	8002b68 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b60:	f043 0204 	orr.w	r2, r3, #4
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d003      	beq.n	8002b78 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f000 f843 	bl	8002bfc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002b76:	e039      	b.n	8002bec <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002b78:	7bfb      	ldrb	r3, [r7, #15]
 8002b7a:	2b2a      	cmp	r3, #42	; 0x2a
 8002b7c:	d109      	bne.n	8002b92 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2228      	movs	r2, #40	; 0x28
 8002b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f7ff f827 	bl	8001be0 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	2b28      	cmp	r3, #40	; 0x28
 8002b9c:	d111      	bne.n	8002bc2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a15      	ldr	r2, [pc, #84]	; (8002bf8 <I2C_Slave_STOPF+0x25c>)
 8002ba2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2220      	movs	r2, #32
 8002bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f7ff f828 	bl	8001c10 <HAL_I2C_ListenCpltCallback>
}
 8002bc0:	e014      	b.n	8002bec <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc6:	2b22      	cmp	r3, #34	; 0x22
 8002bc8:	d002      	beq.n	8002bd0 <I2C_Slave_STOPF+0x234>
 8002bca:	7bfb      	ldrb	r3, [r7, #15]
 8002bcc:	2b22      	cmp	r3, #34	; 0x22
 8002bce:	d10d      	bne.n	8002bec <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2220      	movs	r2, #32
 8002bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f7fe fffa 	bl	8001be0 <HAL_I2C_SlaveRxCpltCallback>
}
 8002bec:	bf00      	nop
 8002bee:	3710      	adds	r7, #16
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	08002e61 	.word	0x08002e61
 8002bf8:	ffff0000 	.word	0xffff0000

08002bfc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c0a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c12:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002c14:	7bbb      	ldrb	r3, [r7, #14]
 8002c16:	2b10      	cmp	r3, #16
 8002c18:	d002      	beq.n	8002c20 <I2C_ITError+0x24>
 8002c1a:	7bbb      	ldrb	r3, [r7, #14]
 8002c1c:	2b40      	cmp	r3, #64	; 0x40
 8002c1e:	d10a      	bne.n	8002c36 <I2C_ITError+0x3a>
 8002c20:	7bfb      	ldrb	r3, [r7, #15]
 8002c22:	2b22      	cmp	r3, #34	; 0x22
 8002c24:	d107      	bne.n	8002c36 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c34:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002c36:	7bfb      	ldrb	r3, [r7, #15]
 8002c38:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002c3c:	2b28      	cmp	r3, #40	; 0x28
 8002c3e:	d107      	bne.n	8002c50 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2200      	movs	r2, #0
 8002c44:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2228      	movs	r2, #40	; 0x28
 8002c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002c4e:	e015      	b.n	8002c7c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c5e:	d00a      	beq.n	8002c76 <I2C_ITError+0x7a>
 8002c60:	7bfb      	ldrb	r3, [r7, #15]
 8002c62:	2b60      	cmp	r3, #96	; 0x60
 8002c64:	d007      	beq.n	8002c76 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2220      	movs	r2, #32
 8002c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c8a:	d162      	bne.n	8002d52 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	685a      	ldr	r2, [r3, #4]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c9a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ca0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d020      	beq.n	8002cec <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cae:	4a6a      	ldr	r2, [pc, #424]	; (8002e58 <I2C_ITError+0x25c>)
 8002cb0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7fe fa93 	bl	80011e2 <HAL_DMA_Abort_IT>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	f000 8089 	beq.w	8002dd6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f022 0201 	bic.w	r2, r2, #1
 8002cd2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2220      	movs	r2, #32
 8002cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ce0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002ce6:	4610      	mov	r0, r2
 8002ce8:	4798      	blx	r3
 8002cea:	e074      	b.n	8002dd6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf0:	4a59      	ldr	r2, [pc, #356]	; (8002e58 <I2C_ITError+0x25c>)
 8002cf2:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f7fe fa72 	bl	80011e2 <HAL_DMA_Abort_IT>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d068      	beq.n	8002dd6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	695b      	ldr	r3, [r3, #20]
 8002d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d0e:	2b40      	cmp	r3, #64	; 0x40
 8002d10:	d10b      	bne.n	8002d2a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	691a      	ldr	r2, [r3, #16]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1c:	b2d2      	uxtb	r2, r2
 8002d1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d24:	1c5a      	adds	r2, r3, #1
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f022 0201 	bic.w	r2, r2, #1
 8002d38:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2220      	movs	r2, #32
 8002d3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d4c:	4610      	mov	r0, r2
 8002d4e:	4798      	blx	r3
 8002d50:	e041      	b.n	8002dd6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	2b60      	cmp	r3, #96	; 0x60
 8002d5c:	d125      	bne.n	8002daa <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2220      	movs	r2, #32
 8002d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	695b      	ldr	r3, [r3, #20]
 8002d72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d76:	2b40      	cmp	r3, #64	; 0x40
 8002d78:	d10b      	bne.n	8002d92 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	691a      	ldr	r2, [r3, #16]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d84:	b2d2      	uxtb	r2, r2
 8002d86:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8c:	1c5a      	adds	r2, r3, #1
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f022 0201 	bic.w	r2, r2, #1
 8002da0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f7fe ff5c 	bl	8001c60 <HAL_I2C_AbortCpltCallback>
 8002da8:	e015      	b.n	8002dd6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	695b      	ldr	r3, [r3, #20]
 8002db0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002db4:	2b40      	cmp	r3, #64	; 0x40
 8002db6:	d10b      	bne.n	8002dd0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	691a      	ldr	r2, [r3, #16]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc2:	b2d2      	uxtb	r2, r2
 8002dc4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dca:	1c5a      	adds	r2, r3, #1
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f7fe ff3b 	bl	8001c4c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dda:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	f003 0301 	and.w	r3, r3, #1
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d10e      	bne.n	8002e04 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d109      	bne.n	8002e04 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d104      	bne.n	8002e04 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d007      	beq.n	8002e14 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	685a      	ldr	r2, [r3, #4]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002e12:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e1a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e20:	f003 0304 	and.w	r3, r3, #4
 8002e24:	2b04      	cmp	r3, #4
 8002e26:	d113      	bne.n	8002e50 <I2C_ITError+0x254>
 8002e28:	7bfb      	ldrb	r3, [r7, #15]
 8002e2a:	2b28      	cmp	r3, #40	; 0x28
 8002e2c:	d110      	bne.n	8002e50 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a0a      	ldr	r2, [pc, #40]	; (8002e5c <I2C_ITError+0x260>)
 8002e32:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2220      	movs	r2, #32
 8002e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f7fe fee0 	bl	8001c10 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002e50:	bf00      	nop
 8002e52:	3710      	adds	r7, #16
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	08002e61 	.word	0x08002e61
 8002e5c:	ffff0000 	.word	0xffff0000

08002e60 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b086      	sub	sp, #24
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e70:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e78:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002e7a:	4b4b      	ldr	r3, [pc, #300]	; (8002fa8 <I2C_DMAAbort+0x148>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	08db      	lsrs	r3, r3, #3
 8002e80:	4a4a      	ldr	r2, [pc, #296]	; (8002fac <I2C_DMAAbort+0x14c>)
 8002e82:	fba2 2303 	umull	r2, r3, r2, r3
 8002e86:	0a1a      	lsrs	r2, r3, #8
 8002e88:	4613      	mov	r3, r2
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	4413      	add	r3, r2
 8002e8e:	00da      	lsls	r2, r3, #3
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d106      	bne.n	8002ea8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9e:	f043 0220 	orr.w	r2, r3, #32
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8002ea6:	e00a      	b.n	8002ebe <I2C_DMAAbort+0x5e>
    }
    count--;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	3b01      	subs	r3, #1
 8002eac:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002eb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ebc:	d0ea      	beq.n	8002e94 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d003      	beq.n	8002ece <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eca:	2200      	movs	r2, #0
 8002ecc:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d003      	beq.n	8002ede <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eda:	2200      	movs	r2, #0
 8002edc:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002eec:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d003      	beq.n	8002f04 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f00:	2200      	movs	r2, #0
 8002f02:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d003      	beq.n	8002f14 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f10:	2200      	movs	r2, #0
 8002f12:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f022 0201 	bic.w	r2, r2, #1
 8002f22:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	2b60      	cmp	r3, #96	; 0x60
 8002f2e:	d10e      	bne.n	8002f4e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	2220      	movs	r2, #32
 8002f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	2200      	movs	r2, #0
 8002f44:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002f46:	6978      	ldr	r0, [r7, #20]
 8002f48:	f7fe fe8a 	bl	8001c60 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002f4c:	e027      	b.n	8002f9e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002f4e:	7cfb      	ldrb	r3, [r7, #19]
 8002f50:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002f54:	2b28      	cmp	r3, #40	; 0x28
 8002f56:	d117      	bne.n	8002f88 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f042 0201 	orr.w	r2, r2, #1
 8002f66:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f76:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	2228      	movs	r2, #40	; 0x28
 8002f82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002f86:	e007      	b.n	8002f98 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	2220      	movs	r2, #32
 8002f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8002f98:	6978      	ldr	r0, [r7, #20]
 8002f9a:	f7fe fe57 	bl	8001c4c <HAL_I2C_ErrorCallback>
}
 8002f9e:	bf00      	nop
 8002fa0:	3718      	adds	r7, #24
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	2000000c 	.word	0x2000000c
 8002fac:	14f8b589 	.word	0x14f8b589

08002fb0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b085      	sub	sp, #20
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8002fbc:	4b13      	ldr	r3, [pc, #76]	; (800300c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	08db      	lsrs	r3, r3, #3
 8002fc2:	4a13      	ldr	r2, [pc, #76]	; (8003010 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8002fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc8:	0a1a      	lsrs	r2, r3, #8
 8002fca:	4613      	mov	r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	4413      	add	r3, r2
 8002fd0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	3b01      	subs	r3, #1
 8002fd6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d107      	bne.n	8002fee <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe2:	f043 0220 	orr.w	r2, r3, #32
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e008      	b.n	8003000 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ff8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ffc:	d0e9      	beq.n	8002fd2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	4618      	mov	r0, r3
 8003002:	3714      	adds	r7, #20
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr
 800300c:	2000000c 	.word	0x2000000c
 8003010:	14f8b589 	.word	0x14f8b589

08003014 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003020:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003024:	d103      	bne.n	800302e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2201      	movs	r2, #1
 800302a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800302c:	e007      	b.n	800303e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003032:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003036:	d102      	bne.n	800303e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2208      	movs	r2, #8
 800303c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800303e:	bf00      	nop
 8003040:	370c      	adds	r7, #12
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr

0800304a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800304a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800304c:	b08f      	sub	sp, #60	; 0x3c
 800304e:	af0a      	add	r7, sp, #40	; 0x28
 8003050:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d101      	bne.n	800305c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e10f      	b.n	800327c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003068:	b2db      	uxtb	r3, r3
 800306a:	2b00      	cmp	r3, #0
 800306c:	d106      	bne.n	800307c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f005 fdf2 	bl	8008c60 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2203      	movs	r2, #3
 8003080:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800308c:	2b00      	cmp	r3, #0
 800308e:	d102      	bne.n	8003096 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4618      	mov	r0, r3
 800309c:	f002 fc41 	bl	8005922 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	603b      	str	r3, [r7, #0]
 80030a6:	687e      	ldr	r6, [r7, #4]
 80030a8:	466d      	mov	r5, sp
 80030aa:	f106 0410 	add.w	r4, r6, #16
 80030ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80030ba:	e885 0003 	stmia.w	r5, {r0, r1}
 80030be:	1d33      	adds	r3, r6, #4
 80030c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030c2:	6838      	ldr	r0, [r7, #0]
 80030c4:	f002 fb18 	bl	80056f8 <USB_CoreInit>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d005      	beq.n	80030da <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2202      	movs	r2, #2
 80030d2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e0d0      	b.n	800327c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2100      	movs	r1, #0
 80030e0:	4618      	mov	r0, r3
 80030e2:	f002 fc2f 	bl	8005944 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030e6:	2300      	movs	r3, #0
 80030e8:	73fb      	strb	r3, [r7, #15]
 80030ea:	e04a      	b.n	8003182 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80030ec:	7bfa      	ldrb	r2, [r7, #15]
 80030ee:	6879      	ldr	r1, [r7, #4]
 80030f0:	4613      	mov	r3, r2
 80030f2:	00db      	lsls	r3, r3, #3
 80030f4:	4413      	add	r3, r2
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	440b      	add	r3, r1
 80030fa:	333d      	adds	r3, #61	; 0x3d
 80030fc:	2201      	movs	r2, #1
 80030fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003100:	7bfa      	ldrb	r2, [r7, #15]
 8003102:	6879      	ldr	r1, [r7, #4]
 8003104:	4613      	mov	r3, r2
 8003106:	00db      	lsls	r3, r3, #3
 8003108:	4413      	add	r3, r2
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	440b      	add	r3, r1
 800310e:	333c      	adds	r3, #60	; 0x3c
 8003110:	7bfa      	ldrb	r2, [r7, #15]
 8003112:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003114:	7bfa      	ldrb	r2, [r7, #15]
 8003116:	7bfb      	ldrb	r3, [r7, #15]
 8003118:	b298      	uxth	r0, r3
 800311a:	6879      	ldr	r1, [r7, #4]
 800311c:	4613      	mov	r3, r2
 800311e:	00db      	lsls	r3, r3, #3
 8003120:	4413      	add	r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	440b      	add	r3, r1
 8003126:	3344      	adds	r3, #68	; 0x44
 8003128:	4602      	mov	r2, r0
 800312a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800312c:	7bfa      	ldrb	r2, [r7, #15]
 800312e:	6879      	ldr	r1, [r7, #4]
 8003130:	4613      	mov	r3, r2
 8003132:	00db      	lsls	r3, r3, #3
 8003134:	4413      	add	r3, r2
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	440b      	add	r3, r1
 800313a:	3340      	adds	r3, #64	; 0x40
 800313c:	2200      	movs	r2, #0
 800313e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003140:	7bfa      	ldrb	r2, [r7, #15]
 8003142:	6879      	ldr	r1, [r7, #4]
 8003144:	4613      	mov	r3, r2
 8003146:	00db      	lsls	r3, r3, #3
 8003148:	4413      	add	r3, r2
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	440b      	add	r3, r1
 800314e:	3348      	adds	r3, #72	; 0x48
 8003150:	2200      	movs	r2, #0
 8003152:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003154:	7bfa      	ldrb	r2, [r7, #15]
 8003156:	6879      	ldr	r1, [r7, #4]
 8003158:	4613      	mov	r3, r2
 800315a:	00db      	lsls	r3, r3, #3
 800315c:	4413      	add	r3, r2
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	440b      	add	r3, r1
 8003162:	334c      	adds	r3, #76	; 0x4c
 8003164:	2200      	movs	r2, #0
 8003166:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003168:	7bfa      	ldrb	r2, [r7, #15]
 800316a:	6879      	ldr	r1, [r7, #4]
 800316c:	4613      	mov	r3, r2
 800316e:	00db      	lsls	r3, r3, #3
 8003170:	4413      	add	r3, r2
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	440b      	add	r3, r1
 8003176:	3354      	adds	r3, #84	; 0x54
 8003178:	2200      	movs	r2, #0
 800317a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800317c:	7bfb      	ldrb	r3, [r7, #15]
 800317e:	3301      	adds	r3, #1
 8003180:	73fb      	strb	r3, [r7, #15]
 8003182:	7bfa      	ldrb	r2, [r7, #15]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	429a      	cmp	r2, r3
 800318a:	d3af      	bcc.n	80030ec <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800318c:	2300      	movs	r3, #0
 800318e:	73fb      	strb	r3, [r7, #15]
 8003190:	e044      	b.n	800321c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003192:	7bfa      	ldrb	r2, [r7, #15]
 8003194:	6879      	ldr	r1, [r7, #4]
 8003196:	4613      	mov	r3, r2
 8003198:	00db      	lsls	r3, r3, #3
 800319a:	4413      	add	r3, r2
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	440b      	add	r3, r1
 80031a0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80031a4:	2200      	movs	r2, #0
 80031a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80031a8:	7bfa      	ldrb	r2, [r7, #15]
 80031aa:	6879      	ldr	r1, [r7, #4]
 80031ac:	4613      	mov	r3, r2
 80031ae:	00db      	lsls	r3, r3, #3
 80031b0:	4413      	add	r3, r2
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	440b      	add	r3, r1
 80031b6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80031ba:	7bfa      	ldrb	r2, [r7, #15]
 80031bc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80031be:	7bfa      	ldrb	r2, [r7, #15]
 80031c0:	6879      	ldr	r1, [r7, #4]
 80031c2:	4613      	mov	r3, r2
 80031c4:	00db      	lsls	r3, r3, #3
 80031c6:	4413      	add	r3, r2
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	440b      	add	r3, r1
 80031cc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80031d0:	2200      	movs	r2, #0
 80031d2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80031d4:	7bfa      	ldrb	r2, [r7, #15]
 80031d6:	6879      	ldr	r1, [r7, #4]
 80031d8:	4613      	mov	r3, r2
 80031da:	00db      	lsls	r3, r3, #3
 80031dc:	4413      	add	r3, r2
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	440b      	add	r3, r1
 80031e2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80031e6:	2200      	movs	r2, #0
 80031e8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80031ea:	7bfa      	ldrb	r2, [r7, #15]
 80031ec:	6879      	ldr	r1, [r7, #4]
 80031ee:	4613      	mov	r3, r2
 80031f0:	00db      	lsls	r3, r3, #3
 80031f2:	4413      	add	r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	440b      	add	r3, r1
 80031f8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80031fc:	2200      	movs	r2, #0
 80031fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003200:	7bfa      	ldrb	r2, [r7, #15]
 8003202:	6879      	ldr	r1, [r7, #4]
 8003204:	4613      	mov	r3, r2
 8003206:	00db      	lsls	r3, r3, #3
 8003208:	4413      	add	r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	440b      	add	r3, r1
 800320e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003212:	2200      	movs	r2, #0
 8003214:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003216:	7bfb      	ldrb	r3, [r7, #15]
 8003218:	3301      	adds	r3, #1
 800321a:	73fb      	strb	r3, [r7, #15]
 800321c:	7bfa      	ldrb	r2, [r7, #15]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	429a      	cmp	r2, r3
 8003224:	d3b5      	bcc.n	8003192 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	603b      	str	r3, [r7, #0]
 800322c:	687e      	ldr	r6, [r7, #4]
 800322e:	466d      	mov	r5, sp
 8003230:	f106 0410 	add.w	r4, r6, #16
 8003234:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003236:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003238:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800323a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800323c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003240:	e885 0003 	stmia.w	r5, {r0, r1}
 8003244:	1d33      	adds	r3, r6, #4
 8003246:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003248:	6838      	ldr	r0, [r7, #0]
 800324a:	f002 fbc7 	bl	80059dc <USB_DevInit>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d005      	beq.n	8003260 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2202      	movs	r2, #2
 8003258:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e00d      	b.n	800327c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4618      	mov	r0, r3
 8003276:	f003 fd16 	bl	8006ca6 <USB_DevDisconnect>

  return HAL_OK;
 800327a:	2300      	movs	r3, #0
}
 800327c:	4618      	mov	r0, r3
 800327e:	3714      	adds	r7, #20
 8003280:	46bd      	mov	sp, r7
 8003282:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003284 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b084      	sub	sp, #16
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003298:	2b01      	cmp	r3, #1
 800329a:	d101      	bne.n	80032a0 <HAL_PCD_Start+0x1c>
 800329c:	2302      	movs	r3, #2
 800329e:	e020      	b.n	80032e2 <HAL_PCD_Start+0x5e>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2201      	movs	r2, #1
 80032a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d109      	bne.n	80032c4 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d005      	beq.n	80032c4 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032bc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4618      	mov	r0, r3
 80032ca:	f002 fb19 	bl	8005900 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4618      	mov	r0, r3
 80032d4:	f003 fcc6 	bl	8006c64 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80032e0:	2300      	movs	r3, #0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3710      	adds	r7, #16
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}

080032ea <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80032ea:	b590      	push	{r4, r7, lr}
 80032ec:	b08d      	sub	sp, #52	; 0x34
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032f8:	6a3b      	ldr	r3, [r7, #32]
 80032fa:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4618      	mov	r0, r3
 8003302:	f003 fd84 	bl	8006e0e <USB_GetMode>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	f040 848a 	bne.w	8003c22 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4618      	mov	r0, r3
 8003314:	f003 fce8 	bl	8006ce8 <USB_ReadInterrupts>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	f000 8480 	beq.w	8003c20 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	0a1b      	lsrs	r3, r3, #8
 800332a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4618      	mov	r0, r3
 800333a:	f003 fcd5 	bl	8006ce8 <USB_ReadInterrupts>
 800333e:	4603      	mov	r3, r0
 8003340:	f003 0302 	and.w	r3, r3, #2
 8003344:	2b02      	cmp	r3, #2
 8003346:	d107      	bne.n	8003358 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	695a      	ldr	r2, [r3, #20]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f002 0202 	and.w	r2, r2, #2
 8003356:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4618      	mov	r0, r3
 800335e:	f003 fcc3 	bl	8006ce8 <USB_ReadInterrupts>
 8003362:	4603      	mov	r3, r0
 8003364:	f003 0310 	and.w	r3, r3, #16
 8003368:	2b10      	cmp	r3, #16
 800336a:	d161      	bne.n	8003430 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	699a      	ldr	r2, [r3, #24]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f022 0210 	bic.w	r2, r2, #16
 800337a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800337c:	6a3b      	ldr	r3, [r7, #32]
 800337e:	6a1b      	ldr	r3, [r3, #32]
 8003380:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003382:	69bb      	ldr	r3, [r7, #24]
 8003384:	f003 020f 	and.w	r2, r3, #15
 8003388:	4613      	mov	r3, r2
 800338a:	00db      	lsls	r3, r3, #3
 800338c:	4413      	add	r3, r2
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	4413      	add	r3, r2
 8003398:	3304      	adds	r3, #4
 800339a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	0c5b      	lsrs	r3, r3, #17
 80033a0:	f003 030f 	and.w	r3, r3, #15
 80033a4:	2b02      	cmp	r3, #2
 80033a6:	d124      	bne.n	80033f2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80033a8:	69ba      	ldr	r2, [r7, #24]
 80033aa:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80033ae:	4013      	ands	r3, r2
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d035      	beq.n	8003420 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	091b      	lsrs	r3, r3, #4
 80033bc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80033be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	461a      	mov	r2, r3
 80033c6:	6a38      	ldr	r0, [r7, #32]
 80033c8:	f003 fafa 	bl	80069c0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	691a      	ldr	r2, [r3, #16]
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	091b      	lsrs	r3, r3, #4
 80033d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033d8:	441a      	add	r2, r3
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	6a1a      	ldr	r2, [r3, #32]
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	091b      	lsrs	r3, r3, #4
 80033e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033ea:	441a      	add	r2, r3
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	621a      	str	r2, [r3, #32]
 80033f0:	e016      	b.n	8003420 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	0c5b      	lsrs	r3, r3, #17
 80033f6:	f003 030f 	and.w	r3, r3, #15
 80033fa:	2b06      	cmp	r3, #6
 80033fc:	d110      	bne.n	8003420 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003404:	2208      	movs	r2, #8
 8003406:	4619      	mov	r1, r3
 8003408:	6a38      	ldr	r0, [r7, #32]
 800340a:	f003 fad9 	bl	80069c0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	6a1a      	ldr	r2, [r3, #32]
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	091b      	lsrs	r3, r3, #4
 8003416:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800341a:	441a      	add	r2, r3
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	699a      	ldr	r2, [r3, #24]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f042 0210 	orr.w	r2, r2, #16
 800342e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4618      	mov	r0, r3
 8003436:	f003 fc57 	bl	8006ce8 <USB_ReadInterrupts>
 800343a:	4603      	mov	r3, r0
 800343c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003440:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003444:	f040 80a7 	bne.w	8003596 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003448:	2300      	movs	r3, #0
 800344a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4618      	mov	r0, r3
 8003452:	f003 fc5c 	bl	8006d0e <USB_ReadDevAllOutEpInterrupt>
 8003456:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003458:	e099      	b.n	800358e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800345a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800345c:	f003 0301 	and.w	r3, r3, #1
 8003460:	2b00      	cmp	r3, #0
 8003462:	f000 808e 	beq.w	8003582 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800346c:	b2d2      	uxtb	r2, r2
 800346e:	4611      	mov	r1, r2
 8003470:	4618      	mov	r0, r3
 8003472:	f003 fc80 	bl	8006d76 <USB_ReadDevOutEPInterrupt>
 8003476:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	2b00      	cmp	r3, #0
 8003480:	d00c      	beq.n	800349c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003484:	015a      	lsls	r2, r3, #5
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	4413      	add	r3, r2
 800348a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800348e:	461a      	mov	r2, r3
 8003490:	2301      	movs	r3, #1
 8003492:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003494:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f000 feaa 	bl	80041f0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	f003 0308 	and.w	r3, r3, #8
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d00c      	beq.n	80034c0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80034a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a8:	015a      	lsls	r2, r3, #5
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	4413      	add	r3, r2
 80034ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034b2:	461a      	mov	r2, r3
 80034b4:	2308      	movs	r3, #8
 80034b6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80034b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f000 ff80 	bl	80043c0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	f003 0310 	and.w	r3, r3, #16
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d008      	beq.n	80034dc <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80034ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034cc:	015a      	lsls	r2, r3, #5
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	4413      	add	r3, r2
 80034d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034d6:	461a      	mov	r2, r3
 80034d8:	2310      	movs	r3, #16
 80034da:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	f003 0302 	and.w	r3, r3, #2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d030      	beq.n	8003548 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80034e6:	6a3b      	ldr	r3, [r7, #32]
 80034e8:	695b      	ldr	r3, [r3, #20]
 80034ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ee:	2b80      	cmp	r3, #128	; 0x80
 80034f0:	d109      	bne.n	8003506 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	69fa      	ldr	r2, [r7, #28]
 80034fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003500:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003504:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003506:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003508:	4613      	mov	r3, r2
 800350a:	00db      	lsls	r3, r3, #3
 800350c:	4413      	add	r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	4413      	add	r3, r2
 8003518:	3304      	adds	r3, #4
 800351a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	78db      	ldrb	r3, [r3, #3]
 8003520:	2b01      	cmp	r3, #1
 8003522:	d108      	bne.n	8003536 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	2200      	movs	r2, #0
 8003528:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800352a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352c:	b2db      	uxtb	r3, r3
 800352e:	4619      	mov	r1, r3
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f005 fc9b 	bl	8008e6c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003538:	015a      	lsls	r2, r3, #5
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	4413      	add	r3, r2
 800353e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003542:	461a      	mov	r2, r3
 8003544:	2302      	movs	r3, #2
 8003546:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	f003 0320 	and.w	r3, r3, #32
 800354e:	2b00      	cmp	r3, #0
 8003550:	d008      	beq.n	8003564 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003554:	015a      	lsls	r2, r3, #5
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	4413      	add	r3, r2
 800355a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800355e:	461a      	mov	r2, r3
 8003560:	2320      	movs	r3, #32
 8003562:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d009      	beq.n	8003582 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800356e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003570:	015a      	lsls	r2, r3, #5
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	4413      	add	r3, r2
 8003576:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800357a:	461a      	mov	r2, r3
 800357c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003580:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003584:	3301      	adds	r3, #1
 8003586:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800358a:	085b      	lsrs	r3, r3, #1
 800358c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800358e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003590:	2b00      	cmp	r3, #0
 8003592:	f47f af62 	bne.w	800345a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4618      	mov	r0, r3
 800359c:	f003 fba4 	bl	8006ce8 <USB_ReadInterrupts>
 80035a0:	4603      	mov	r3, r0
 80035a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035a6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80035aa:	f040 80db 	bne.w	8003764 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4618      	mov	r0, r3
 80035b4:	f003 fbc5 	bl	8006d42 <USB_ReadDevAllInEpInterrupt>
 80035b8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80035ba:	2300      	movs	r3, #0
 80035bc:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80035be:	e0cd      	b.n	800375c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80035c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035c2:	f003 0301 	and.w	r3, r3, #1
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	f000 80c2 	beq.w	8003750 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035d2:	b2d2      	uxtb	r2, r2
 80035d4:	4611      	mov	r1, r2
 80035d6:	4618      	mov	r0, r3
 80035d8:	f003 fbeb 	bl	8006db2 <USB_ReadDevInEPInterrupt>
 80035dc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	f003 0301 	and.w	r3, r3, #1
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d057      	beq.n	8003698 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80035e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ea:	f003 030f 	and.w	r3, r3, #15
 80035ee:	2201      	movs	r2, #1
 80035f0:	fa02 f303 	lsl.w	r3, r2, r3
 80035f4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	43db      	mvns	r3, r3
 8003602:	69f9      	ldr	r1, [r7, #28]
 8003604:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003608:	4013      	ands	r3, r2
 800360a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800360c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360e:	015a      	lsls	r2, r3, #5
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	4413      	add	r3, r2
 8003614:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003618:	461a      	mov	r2, r3
 800361a:	2301      	movs	r3, #1
 800361c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	2b01      	cmp	r3, #1
 8003624:	d132      	bne.n	800368c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003626:	6879      	ldr	r1, [r7, #4]
 8003628:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800362a:	4613      	mov	r3, r2
 800362c:	00db      	lsls	r3, r3, #3
 800362e:	4413      	add	r3, r2
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	440b      	add	r3, r1
 8003634:	334c      	adds	r3, #76	; 0x4c
 8003636:	6819      	ldr	r1, [r3, #0]
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800363c:	4613      	mov	r3, r2
 800363e:	00db      	lsls	r3, r3, #3
 8003640:	4413      	add	r3, r2
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	4403      	add	r3, r0
 8003646:	3348      	adds	r3, #72	; 0x48
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4419      	add	r1, r3
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003650:	4613      	mov	r3, r2
 8003652:	00db      	lsls	r3, r3, #3
 8003654:	4413      	add	r3, r2
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	4403      	add	r3, r0
 800365a:	334c      	adds	r3, #76	; 0x4c
 800365c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800365e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003660:	2b00      	cmp	r3, #0
 8003662:	d113      	bne.n	800368c <HAL_PCD_IRQHandler+0x3a2>
 8003664:	6879      	ldr	r1, [r7, #4]
 8003666:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003668:	4613      	mov	r3, r2
 800366a:	00db      	lsls	r3, r3, #3
 800366c:	4413      	add	r3, r2
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	440b      	add	r3, r1
 8003672:	3354      	adds	r3, #84	; 0x54
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d108      	bne.n	800368c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6818      	ldr	r0, [r3, #0]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003684:	461a      	mov	r2, r3
 8003686:	2101      	movs	r1, #1
 8003688:	f003 fbf2 	bl	8006e70 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800368c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368e:	b2db      	uxtb	r3, r3
 8003690:	4619      	mov	r1, r3
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f005 fb65 	bl	8008d62 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	f003 0308 	and.w	r3, r3, #8
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d008      	beq.n	80036b4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80036a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a4:	015a      	lsls	r2, r3, #5
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	4413      	add	r3, r2
 80036aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036ae:	461a      	mov	r2, r3
 80036b0:	2308      	movs	r3, #8
 80036b2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	f003 0310 	and.w	r3, r3, #16
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d008      	beq.n	80036d0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80036be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c0:	015a      	lsls	r2, r3, #5
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	4413      	add	r3, r2
 80036c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036ca:	461a      	mov	r2, r3
 80036cc:	2310      	movs	r3, #16
 80036ce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d008      	beq.n	80036ec <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80036da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036dc:	015a      	lsls	r2, r3, #5
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	4413      	add	r3, r2
 80036e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036e6:	461a      	mov	r2, r3
 80036e8:	2340      	movs	r3, #64	; 0x40
 80036ea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	f003 0302 	and.w	r3, r3, #2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d023      	beq.n	800373e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80036f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036f8:	6a38      	ldr	r0, [r7, #32]
 80036fa:	f002 fad3 	bl	8005ca4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80036fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003700:	4613      	mov	r3, r2
 8003702:	00db      	lsls	r3, r3, #3
 8003704:	4413      	add	r3, r2
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	3338      	adds	r3, #56	; 0x38
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	4413      	add	r3, r2
 800370e:	3304      	adds	r3, #4
 8003710:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	78db      	ldrb	r3, [r3, #3]
 8003716:	2b01      	cmp	r3, #1
 8003718:	d108      	bne.n	800372c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	2200      	movs	r2, #0
 800371e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003722:	b2db      	uxtb	r3, r3
 8003724:	4619      	mov	r1, r3
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f005 fbb2 	bl	8008e90 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800372c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372e:	015a      	lsls	r2, r3, #5
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	4413      	add	r3, r2
 8003734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003738:	461a      	mov	r2, r3
 800373a:	2302      	movs	r3, #2
 800373c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003744:	2b00      	cmp	r3, #0
 8003746:	d003      	beq.n	8003750 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003748:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f000 fcc3 	bl	80040d6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003752:	3301      	adds	r3, #1
 8003754:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003758:	085b      	lsrs	r3, r3, #1
 800375a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800375c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800375e:	2b00      	cmp	r3, #0
 8003760:	f47f af2e 	bne.w	80035c0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4618      	mov	r0, r3
 800376a:	f003 fabd 	bl	8006ce8 <USB_ReadInterrupts>
 800376e:	4603      	mov	r3, r0
 8003770:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003774:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003778:	d122      	bne.n	80037c0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	69fa      	ldr	r2, [r7, #28]
 8003784:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003788:	f023 0301 	bic.w	r3, r3, #1
 800378c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003794:	2b01      	cmp	r3, #1
 8003796:	d108      	bne.n	80037aa <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80037a0:	2100      	movs	r1, #0
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 feaa 	bl	80044fc <HAL_PCDEx_LPM_Callback>
 80037a8:	e002      	b.n	80037b0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f005 fb50 	bl	8008e50 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	695a      	ldr	r2, [r3, #20]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80037be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4618      	mov	r0, r3
 80037c6:	f003 fa8f 	bl	8006ce8 <USB_ReadInterrupts>
 80037ca:	4603      	mov	r3, r0
 80037cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037d4:	d112      	bne.n	80037fc <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	f003 0301 	and.w	r3, r3, #1
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d102      	bne.n	80037ec <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f005 fb0c 	bl	8008e04 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	695a      	ldr	r2, [r3, #20]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80037fa:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4618      	mov	r0, r3
 8003802:	f003 fa71 	bl	8006ce8 <USB_ReadInterrupts>
 8003806:	4603      	mov	r3, r0
 8003808:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800380c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003810:	f040 80b7 	bne.w	8003982 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	69fa      	ldr	r2, [r7, #28]
 800381e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003822:	f023 0301 	bic.w	r3, r3, #1
 8003826:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2110      	movs	r1, #16
 800382e:	4618      	mov	r0, r3
 8003830:	f002 fa38 	bl	8005ca4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003834:	2300      	movs	r3, #0
 8003836:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003838:	e046      	b.n	80038c8 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800383a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800383c:	015a      	lsls	r2, r3, #5
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	4413      	add	r3, r2
 8003842:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003846:	461a      	mov	r2, r3
 8003848:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800384c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800384e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003850:	015a      	lsls	r2, r3, #5
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	4413      	add	r3, r2
 8003856:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800385e:	0151      	lsls	r1, r2, #5
 8003860:	69fa      	ldr	r2, [r7, #28]
 8003862:	440a      	add	r2, r1
 8003864:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003868:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800386c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800386e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003870:	015a      	lsls	r2, r3, #5
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	4413      	add	r3, r2
 8003876:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800387a:	461a      	mov	r2, r3
 800387c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003880:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003884:	015a      	lsls	r2, r3, #5
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	4413      	add	r3, r2
 800388a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003892:	0151      	lsls	r1, r2, #5
 8003894:	69fa      	ldr	r2, [r7, #28]
 8003896:	440a      	add	r2, r1
 8003898:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800389c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80038a0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80038a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038a4:	015a      	lsls	r2, r3, #5
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	4413      	add	r3, r2
 80038aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038b2:	0151      	lsls	r1, r2, #5
 80038b4:	69fa      	ldr	r2, [r7, #28]
 80038b6:	440a      	add	r2, r1
 80038b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80038bc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80038c0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038c4:	3301      	adds	r3, #1
 80038c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d3b3      	bcc.n	800383a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038d8:	69db      	ldr	r3, [r3, #28]
 80038da:	69fa      	ldr	r2, [r7, #28]
 80038dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038e0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80038e4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d016      	beq.n	800391c <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038f8:	69fa      	ldr	r2, [r7, #28]
 80038fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038fe:	f043 030b 	orr.w	r3, r3, #11
 8003902:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800390c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800390e:	69fa      	ldr	r2, [r7, #28]
 8003910:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003914:	f043 030b 	orr.w	r3, r3, #11
 8003918:	6453      	str	r3, [r2, #68]	; 0x44
 800391a:	e015      	b.n	8003948 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003922:	695b      	ldr	r3, [r3, #20]
 8003924:	69fa      	ldr	r2, [r7, #28]
 8003926:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800392a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800392e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003932:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800393a:	691b      	ldr	r3, [r3, #16]
 800393c:	69fa      	ldr	r2, [r7, #28]
 800393e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003942:	f043 030b 	orr.w	r3, r3, #11
 8003946:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	69fa      	ldr	r2, [r7, #28]
 8003952:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003956:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800395a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6818      	ldr	r0, [r3, #0]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	691b      	ldr	r3, [r3, #16]
 8003964:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800396c:	461a      	mov	r2, r3
 800396e:	f003 fa7f 	bl	8006e70 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	695a      	ldr	r2, [r3, #20]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003980:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4618      	mov	r0, r3
 8003988:	f003 f9ae 	bl	8006ce8 <USB_ReadInterrupts>
 800398c:	4603      	mov	r3, r0
 800398e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003992:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003996:	d124      	bne.n	80039e2 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4618      	mov	r0, r3
 800399e:	f003 fa44 	bl	8006e2a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4618      	mov	r0, r3
 80039a8:	f002 f9f9 	bl	8005d9e <USB_GetDevSpeed>
 80039ac:	4603      	mov	r3, r0
 80039ae:	461a      	mov	r2, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681c      	ldr	r4, [r3, #0]
 80039b8:	f001 fa10 	bl	8004ddc <HAL_RCC_GetHCLKFreq>
 80039bc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	461a      	mov	r2, r3
 80039c6:	4620      	mov	r0, r4
 80039c8:	f001 fef8 	bl	80057bc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f005 f9f0 	bl	8008db2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	695a      	ldr	r2, [r3, #20]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80039e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4618      	mov	r0, r3
 80039e8:	f003 f97e 	bl	8006ce8 <USB_ReadInterrupts>
 80039ec:	4603      	mov	r3, r0
 80039ee:	f003 0308 	and.w	r3, r3, #8
 80039f2:	2b08      	cmp	r3, #8
 80039f4:	d10a      	bne.n	8003a0c <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f005 f9cd 	bl	8008d96 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	695a      	ldr	r2, [r3, #20]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f002 0208 	and.w	r2, r2, #8
 8003a0a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4618      	mov	r0, r3
 8003a12:	f003 f969 	bl	8006ce8 <USB_ReadInterrupts>
 8003a16:	4603      	mov	r3, r0
 8003a18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a1c:	2b80      	cmp	r3, #128	; 0x80
 8003a1e:	d122      	bne.n	8003a66 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003a20:	6a3b      	ldr	r3, [r7, #32]
 8003a22:	699b      	ldr	r3, [r3, #24]
 8003a24:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a28:	6a3b      	ldr	r3, [r7, #32]
 8003a2a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	627b      	str	r3, [r7, #36]	; 0x24
 8003a30:	e014      	b.n	8003a5c <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003a32:	6879      	ldr	r1, [r7, #4]
 8003a34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a36:	4613      	mov	r3, r2
 8003a38:	00db      	lsls	r3, r3, #3
 8003a3a:	4413      	add	r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	440b      	add	r3, r1
 8003a40:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d105      	bne.n	8003a56 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	4619      	mov	r1, r3
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f000 fb0f 	bl	8004074 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a58:	3301      	adds	r3, #1
 8003a5a:	627b      	str	r3, [r7, #36]	; 0x24
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d3e5      	bcc.n	8003a32 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f003 f93c 	bl	8006ce8 <USB_ReadInterrupts>
 8003a70:	4603      	mov	r3, r0
 8003a72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a7a:	d13b      	bne.n	8003af4 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	627b      	str	r3, [r7, #36]	; 0x24
 8003a80:	e02b      	b.n	8003ada <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a84:	015a      	lsls	r2, r3, #5
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	4413      	add	r3, r2
 8003a8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a92:	6879      	ldr	r1, [r7, #4]
 8003a94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a96:	4613      	mov	r3, r2
 8003a98:	00db      	lsls	r3, r3, #3
 8003a9a:	4413      	add	r3, r2
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	440b      	add	r3, r1
 8003aa0:	3340      	adds	r3, #64	; 0x40
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d115      	bne.n	8003ad4 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003aa8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	da12      	bge.n	8003ad4 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003aae:	6879      	ldr	r1, [r7, #4]
 8003ab0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ab2:	4613      	mov	r3, r2
 8003ab4:	00db      	lsls	r3, r3, #3
 8003ab6:	4413      	add	r3, r2
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	440b      	add	r3, r1
 8003abc:	333f      	adds	r3, #63	; 0x3f
 8003abe:	2201      	movs	r2, #1
 8003ac0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	4619      	mov	r1, r3
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 fad0 	bl	8004074 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad6:	3301      	adds	r3, #1
 8003ad8:	627b      	str	r3, [r7, #36]	; 0x24
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d3ce      	bcc.n	8003a82 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	695a      	ldr	r2, [r3, #20]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003af2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4618      	mov	r0, r3
 8003afa:	f003 f8f5 	bl	8006ce8 <USB_ReadInterrupts>
 8003afe:	4603      	mov	r3, r0
 8003b00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b04:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b08:	d155      	bne.n	8003bb6 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b0e:	e045      	b.n	8003b9c <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b12:	015a      	lsls	r2, r3, #5
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	4413      	add	r3, r2
 8003b18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003b20:	6879      	ldr	r1, [r7, #4]
 8003b22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b24:	4613      	mov	r3, r2
 8003b26:	00db      	lsls	r3, r3, #3
 8003b28:	4413      	add	r3, r2
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	440b      	add	r3, r1
 8003b2e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d12e      	bne.n	8003b96 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003b38:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	da2b      	bge.n	8003b96 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003b3e:	69bb      	ldr	r3, [r7, #24]
 8003b40:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003b4a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d121      	bne.n	8003b96 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003b52:	6879      	ldr	r1, [r7, #4]
 8003b54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b56:	4613      	mov	r3, r2
 8003b58:	00db      	lsls	r3, r3, #3
 8003b5a:	4413      	add	r3, r2
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	440b      	add	r3, r1
 8003b60:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003b64:	2201      	movs	r2, #1
 8003b66:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003b68:	6a3b      	ldr	r3, [r7, #32]
 8003b6a:	699b      	ldr	r3, [r3, #24]
 8003b6c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003b70:	6a3b      	ldr	r3, [r7, #32]
 8003b72:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003b74:	6a3b      	ldr	r3, [r7, #32]
 8003b76:	695b      	ldr	r3, [r3, #20]
 8003b78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d10a      	bne.n	8003b96 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	69fa      	ldr	r2, [r7, #28]
 8003b8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b92:	6053      	str	r3, [r2, #4]
            break;
 8003b94:	e007      	b.n	8003ba6 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b98:	3301      	adds	r3, #1
 8003b9a:	627b      	str	r3, [r7, #36]	; 0x24
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d3b4      	bcc.n	8003b10 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	695a      	ldr	r2, [r3, #20]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003bb4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f003 f894 	bl	8006ce8 <USB_ReadInterrupts>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003bc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bca:	d10a      	bne.n	8003be2 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f005 f971 	bl	8008eb4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	695a      	ldr	r2, [r3, #20]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003be0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4618      	mov	r0, r3
 8003be8:	f003 f87e 	bl	8006ce8 <USB_ReadInterrupts>
 8003bec:	4603      	mov	r3, r0
 8003bee:	f003 0304 	and.w	r3, r3, #4
 8003bf2:	2b04      	cmp	r3, #4
 8003bf4:	d115      	bne.n	8003c22 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003bfe:	69bb      	ldr	r3, [r7, #24]
 8003c00:	f003 0304 	and.w	r3, r3, #4
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d002      	beq.n	8003c0e <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f005 f961 	bl	8008ed0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	6859      	ldr	r1, [r3, #4]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	69ba      	ldr	r2, [r7, #24]
 8003c1a:	430a      	orrs	r2, r1
 8003c1c:	605a      	str	r2, [r3, #4]
 8003c1e:	e000      	b.n	8003c22 <HAL_PCD_IRQHandler+0x938>
      return;
 8003c20:	bf00      	nop
    }
  }
}
 8003c22:	3734      	adds	r7, #52	; 0x34
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd90      	pop	{r4, r7, pc}

08003c28 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b082      	sub	sp, #8
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	460b      	mov	r3, r1
 8003c32:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d101      	bne.n	8003c42 <HAL_PCD_SetAddress+0x1a>
 8003c3e:	2302      	movs	r3, #2
 8003c40:	e013      	b.n	8003c6a <HAL_PCD_SetAddress+0x42>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2201      	movs	r2, #1
 8003c46:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	78fa      	ldrb	r2, [r7, #3]
 8003c4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	78fa      	ldrb	r2, [r7, #3]
 8003c58:	4611      	mov	r1, r2
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f002 ffdc 	bl	8006c18 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3708      	adds	r7, #8
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}

08003c72 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003c72:	b580      	push	{r7, lr}
 8003c74:	b084      	sub	sp, #16
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
 8003c7a:	4608      	mov	r0, r1
 8003c7c:	4611      	mov	r1, r2
 8003c7e:	461a      	mov	r2, r3
 8003c80:	4603      	mov	r3, r0
 8003c82:	70fb      	strb	r3, [r7, #3]
 8003c84:	460b      	mov	r3, r1
 8003c86:	803b      	strh	r3, [r7, #0]
 8003c88:	4613      	mov	r3, r2
 8003c8a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003c90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	da0f      	bge.n	8003cb8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c98:	78fb      	ldrb	r3, [r7, #3]
 8003c9a:	f003 020f 	and.w	r2, r3, #15
 8003c9e:	4613      	mov	r3, r2
 8003ca0:	00db      	lsls	r3, r3, #3
 8003ca2:	4413      	add	r3, r2
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	3338      	adds	r3, #56	; 0x38
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	4413      	add	r3, r2
 8003cac:	3304      	adds	r3, #4
 8003cae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	705a      	strb	r2, [r3, #1]
 8003cb6:	e00f      	b.n	8003cd8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003cb8:	78fb      	ldrb	r3, [r7, #3]
 8003cba:	f003 020f 	and.w	r2, r3, #15
 8003cbe:	4613      	mov	r3, r2
 8003cc0:	00db      	lsls	r3, r3, #3
 8003cc2:	4413      	add	r3, r2
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	4413      	add	r3, r2
 8003cce:	3304      	adds	r3, #4
 8003cd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003cd8:	78fb      	ldrb	r3, [r7, #3]
 8003cda:	f003 030f 	and.w	r3, r3, #15
 8003cde:	b2da      	uxtb	r2, r3
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003ce4:	883a      	ldrh	r2, [r7, #0]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	78ba      	ldrb	r2, [r7, #2]
 8003cee:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	785b      	ldrb	r3, [r3, #1]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d004      	beq.n	8003d02 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	b29a      	uxth	r2, r3
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003d02:	78bb      	ldrb	r3, [r7, #2]
 8003d04:	2b02      	cmp	r3, #2
 8003d06:	d102      	bne.n	8003d0e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d101      	bne.n	8003d1c <HAL_PCD_EP_Open+0xaa>
 8003d18:	2302      	movs	r3, #2
 8003d1a:	e00e      	b.n	8003d3a <HAL_PCD_EP_Open+0xc8>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	68f9      	ldr	r1, [r7, #12]
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f002 f85c 	bl	8005de8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003d38:	7afb      	ldrb	r3, [r7, #11]
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3710      	adds	r7, #16
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}

08003d42 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d42:	b580      	push	{r7, lr}
 8003d44:	b084      	sub	sp, #16
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	6078      	str	r0, [r7, #4]
 8003d4a:	460b      	mov	r3, r1
 8003d4c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003d4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	da0f      	bge.n	8003d76 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d56:	78fb      	ldrb	r3, [r7, #3]
 8003d58:	f003 020f 	and.w	r2, r3, #15
 8003d5c:	4613      	mov	r3, r2
 8003d5e:	00db      	lsls	r3, r3, #3
 8003d60:	4413      	add	r3, r2
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	3338      	adds	r3, #56	; 0x38
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	4413      	add	r3, r2
 8003d6a:	3304      	adds	r3, #4
 8003d6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2201      	movs	r2, #1
 8003d72:	705a      	strb	r2, [r3, #1]
 8003d74:	e00f      	b.n	8003d96 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d76:	78fb      	ldrb	r3, [r7, #3]
 8003d78:	f003 020f 	and.w	r2, r3, #15
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	00db      	lsls	r3, r3, #3
 8003d80:	4413      	add	r3, r2
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	4413      	add	r3, r2
 8003d8c:	3304      	adds	r3, #4
 8003d8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2200      	movs	r2, #0
 8003d94:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003d96:	78fb      	ldrb	r3, [r7, #3]
 8003d98:	f003 030f 	and.w	r3, r3, #15
 8003d9c:	b2da      	uxtb	r2, r3
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d101      	bne.n	8003db0 <HAL_PCD_EP_Close+0x6e>
 8003dac:	2302      	movs	r3, #2
 8003dae:	e00e      	b.n	8003dce <HAL_PCD_EP_Close+0x8c>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	68f9      	ldr	r1, [r7, #12]
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f002 f89a 	bl	8005ef8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003dcc:	2300      	movs	r3, #0
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3710      	adds	r7, #16
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}

08003dd6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003dd6:	b580      	push	{r7, lr}
 8003dd8:	b086      	sub	sp, #24
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	60f8      	str	r0, [r7, #12]
 8003dde:	607a      	str	r2, [r7, #4]
 8003de0:	603b      	str	r3, [r7, #0]
 8003de2:	460b      	mov	r3, r1
 8003de4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003de6:	7afb      	ldrb	r3, [r7, #11]
 8003de8:	f003 020f 	and.w	r2, r3, #15
 8003dec:	4613      	mov	r3, r2
 8003dee:	00db      	lsls	r3, r3, #3
 8003df0:	4413      	add	r3, r2
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003df8:	68fa      	ldr	r2, [r7, #12]
 8003dfa:	4413      	add	r3, r2
 8003dfc:	3304      	adds	r3, #4
 8003dfe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	683a      	ldr	r2, [r7, #0]
 8003e0a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	2200      	movs	r2, #0
 8003e16:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e18:	7afb      	ldrb	r3, [r7, #11]
 8003e1a:	f003 030f 	and.w	r3, r3, #15
 8003e1e:	b2da      	uxtb	r2, r3
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	691b      	ldr	r3, [r3, #16]
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d102      	bne.n	8003e32 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003e32:	7afb      	ldrb	r3, [r7, #11]
 8003e34:	f003 030f 	and.w	r3, r3, #15
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d109      	bne.n	8003e50 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6818      	ldr	r0, [r3, #0]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	691b      	ldr	r3, [r3, #16]
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	461a      	mov	r2, r3
 8003e48:	6979      	ldr	r1, [r7, #20]
 8003e4a:	f002 fb79 	bl	8006540 <USB_EP0StartXfer>
 8003e4e:	e008      	b.n	8003e62 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6818      	ldr	r0, [r3, #0]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	691b      	ldr	r3, [r3, #16]
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	6979      	ldr	r1, [r7, #20]
 8003e5e:	f002 f927 	bl	80060b0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003e62:	2300      	movs	r3, #0
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3718      	adds	r7, #24
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}

08003e6c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b086      	sub	sp, #24
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	607a      	str	r2, [r7, #4]
 8003e76:	603b      	str	r3, [r7, #0]
 8003e78:	460b      	mov	r3, r1
 8003e7a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e7c:	7afb      	ldrb	r3, [r7, #11]
 8003e7e:	f003 020f 	and.w	r2, r3, #15
 8003e82:	4613      	mov	r3, r2
 8003e84:	00db      	lsls	r3, r3, #3
 8003e86:	4413      	add	r3, r2
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	3338      	adds	r3, #56	; 0x38
 8003e8c:	68fa      	ldr	r2, [r7, #12]
 8003e8e:	4413      	add	r3, r2
 8003e90:	3304      	adds	r3, #4
 8003e92:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	683a      	ldr	r2, [r7, #0]
 8003e9e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003eac:	7afb      	ldrb	r3, [r7, #11]
 8003eae:	f003 030f 	and.w	r3, r3, #15
 8003eb2:	b2da      	uxtb	r2, r3
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	691b      	ldr	r3, [r3, #16]
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d102      	bne.n	8003ec6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003ec6:	7afb      	ldrb	r3, [r7, #11]
 8003ec8:	f003 030f 	and.w	r3, r3, #15
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d109      	bne.n	8003ee4 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	6818      	ldr	r0, [r3, #0]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	691b      	ldr	r3, [r3, #16]
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	461a      	mov	r2, r3
 8003edc:	6979      	ldr	r1, [r7, #20]
 8003ede:	f002 fb2f 	bl	8006540 <USB_EP0StartXfer>
 8003ee2:	e008      	b.n	8003ef6 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6818      	ldr	r0, [r3, #0]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	691b      	ldr	r3, [r3, #16]
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	461a      	mov	r2, r3
 8003ef0:	6979      	ldr	r1, [r7, #20]
 8003ef2:	f002 f8dd 	bl	80060b0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003ef6:	2300      	movs	r3, #0
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3718      	adds	r7, #24
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}

08003f00 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b084      	sub	sp, #16
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	460b      	mov	r3, r1
 8003f0a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003f0c:	78fb      	ldrb	r3, [r7, #3]
 8003f0e:	f003 020f 	and.w	r2, r3, #15
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d901      	bls.n	8003f1e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e050      	b.n	8003fc0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003f1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	da0f      	bge.n	8003f46 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f26:	78fb      	ldrb	r3, [r7, #3]
 8003f28:	f003 020f 	and.w	r2, r3, #15
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	00db      	lsls	r3, r3, #3
 8003f30:	4413      	add	r3, r2
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	3338      	adds	r3, #56	; 0x38
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	4413      	add	r3, r2
 8003f3a:	3304      	adds	r3, #4
 8003f3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2201      	movs	r2, #1
 8003f42:	705a      	strb	r2, [r3, #1]
 8003f44:	e00d      	b.n	8003f62 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003f46:	78fa      	ldrb	r2, [r7, #3]
 8003f48:	4613      	mov	r3, r2
 8003f4a:	00db      	lsls	r3, r3, #3
 8003f4c:	4413      	add	r3, r2
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	4413      	add	r3, r2
 8003f58:	3304      	adds	r3, #4
 8003f5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2201      	movs	r2, #1
 8003f66:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f68:	78fb      	ldrb	r3, [r7, #3]
 8003f6a:	f003 030f 	and.w	r3, r3, #15
 8003f6e:	b2da      	uxtb	r2, r3
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d101      	bne.n	8003f82 <HAL_PCD_EP_SetStall+0x82>
 8003f7e:	2302      	movs	r3, #2
 8003f80:	e01e      	b.n	8003fc0 <HAL_PCD_EP_SetStall+0xc0>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2201      	movs	r2, #1
 8003f86:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	68f9      	ldr	r1, [r7, #12]
 8003f90:	4618      	mov	r0, r3
 8003f92:	f002 fd6d 	bl	8006a70 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003f96:	78fb      	ldrb	r3, [r7, #3]
 8003f98:	f003 030f 	and.w	r3, r3, #15
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d10a      	bne.n	8003fb6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6818      	ldr	r0, [r3, #0]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	691b      	ldr	r3, [r3, #16]
 8003fa8:	b2d9      	uxtb	r1, r3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	f002 ff5d 	bl	8006e70 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003fbe:	2300      	movs	r3, #0
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3710      	adds	r7, #16
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}

08003fc8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	460b      	mov	r3, r1
 8003fd2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003fd4:	78fb      	ldrb	r3, [r7, #3]
 8003fd6:	f003 020f 	and.w	r2, r3, #15
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d901      	bls.n	8003fe6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e042      	b.n	800406c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003fe6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	da0f      	bge.n	800400e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fee:	78fb      	ldrb	r3, [r7, #3]
 8003ff0:	f003 020f 	and.w	r2, r3, #15
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	00db      	lsls	r3, r3, #3
 8003ff8:	4413      	add	r3, r2
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	3338      	adds	r3, #56	; 0x38
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	4413      	add	r3, r2
 8004002:	3304      	adds	r3, #4
 8004004:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2201      	movs	r2, #1
 800400a:	705a      	strb	r2, [r3, #1]
 800400c:	e00f      	b.n	800402e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800400e:	78fb      	ldrb	r3, [r7, #3]
 8004010:	f003 020f 	and.w	r2, r3, #15
 8004014:	4613      	mov	r3, r2
 8004016:	00db      	lsls	r3, r3, #3
 8004018:	4413      	add	r3, r2
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	4413      	add	r3, r2
 8004024:	3304      	adds	r3, #4
 8004026:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2200      	movs	r2, #0
 800402c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2200      	movs	r2, #0
 8004032:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004034:	78fb      	ldrb	r3, [r7, #3]
 8004036:	f003 030f 	and.w	r3, r3, #15
 800403a:	b2da      	uxtb	r2, r3
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004046:	2b01      	cmp	r3, #1
 8004048:	d101      	bne.n	800404e <HAL_PCD_EP_ClrStall+0x86>
 800404a:	2302      	movs	r3, #2
 800404c:	e00e      	b.n	800406c <HAL_PCD_EP_ClrStall+0xa4>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2201      	movs	r2, #1
 8004052:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	68f9      	ldr	r1, [r7, #12]
 800405c:	4618      	mov	r0, r3
 800405e:	f002 fd75 	bl	8006b4c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800406a:	2300      	movs	r3, #0
}
 800406c:	4618      	mov	r0, r3
 800406e:	3710      	adds	r7, #16
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}

08004074 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	460b      	mov	r3, r1
 800407e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004080:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004084:	2b00      	cmp	r3, #0
 8004086:	da0c      	bge.n	80040a2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004088:	78fb      	ldrb	r3, [r7, #3]
 800408a:	f003 020f 	and.w	r2, r3, #15
 800408e:	4613      	mov	r3, r2
 8004090:	00db      	lsls	r3, r3, #3
 8004092:	4413      	add	r3, r2
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	3338      	adds	r3, #56	; 0x38
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	4413      	add	r3, r2
 800409c:	3304      	adds	r3, #4
 800409e:	60fb      	str	r3, [r7, #12]
 80040a0:	e00c      	b.n	80040bc <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040a2:	78fb      	ldrb	r3, [r7, #3]
 80040a4:	f003 020f 	and.w	r2, r3, #15
 80040a8:	4613      	mov	r3, r2
 80040aa:	00db      	lsls	r3, r3, #3
 80040ac:	4413      	add	r3, r2
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	4413      	add	r3, r2
 80040b8:	3304      	adds	r3, #4
 80040ba:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	68f9      	ldr	r1, [r7, #12]
 80040c2:	4618      	mov	r0, r3
 80040c4:	f002 fb94 	bl	80067f0 <USB_EPStopXfer>
 80040c8:	4603      	mov	r3, r0
 80040ca:	72fb      	strb	r3, [r7, #11]

  return ret;
 80040cc:	7afb      	ldrb	r3, [r7, #11]
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3710      	adds	r7, #16
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}

080040d6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80040d6:	b580      	push	{r7, lr}
 80040d8:	b08a      	sub	sp, #40	; 0x28
 80040da:	af02      	add	r7, sp, #8
 80040dc:	6078      	str	r0, [r7, #4]
 80040de:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80040ea:	683a      	ldr	r2, [r7, #0]
 80040ec:	4613      	mov	r3, r2
 80040ee:	00db      	lsls	r3, r3, #3
 80040f0:	4413      	add	r3, r2
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	3338      	adds	r3, #56	; 0x38
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	4413      	add	r3, r2
 80040fa:	3304      	adds	r3, #4
 80040fc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	6a1a      	ldr	r2, [r3, #32]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	699b      	ldr	r3, [r3, #24]
 8004106:	429a      	cmp	r2, r3
 8004108:	d901      	bls.n	800410e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e06c      	b.n	80041e8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	699a      	ldr	r2, [r3, #24]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	6a1b      	ldr	r3, [r3, #32]
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	69fa      	ldr	r2, [r7, #28]
 8004120:	429a      	cmp	r2, r3
 8004122:	d902      	bls.n	800412a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800412a:	69fb      	ldr	r3, [r7, #28]
 800412c:	3303      	adds	r3, #3
 800412e:	089b      	lsrs	r3, r3, #2
 8004130:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004132:	e02b      	b.n	800418c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	699a      	ldr	r2, [r3, #24]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6a1b      	ldr	r3, [r3, #32]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	69fa      	ldr	r2, [r7, #28]
 8004146:	429a      	cmp	r2, r3
 8004148:	d902      	bls.n	8004150 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	68db      	ldr	r3, [r3, #12]
 800414e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	3303      	adds	r3, #3
 8004154:	089b      	lsrs	r3, r3, #2
 8004156:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6919      	ldr	r1, [r3, #16]
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	b2da      	uxtb	r2, r3
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004168:	b2db      	uxtb	r3, r3
 800416a:	9300      	str	r3, [sp, #0]
 800416c:	4603      	mov	r3, r0
 800416e:	6978      	ldr	r0, [r7, #20]
 8004170:	f002 fbe8 	bl	8006944 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	691a      	ldr	r2, [r3, #16]
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	441a      	add	r2, r3
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6a1a      	ldr	r2, [r3, #32]
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	441a      	add	r2, r3
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	015a      	lsls	r2, r3, #5
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	4413      	add	r3, r2
 8004194:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004198:	699b      	ldr	r3, [r3, #24]
 800419a:	b29b      	uxth	r3, r3
 800419c:	69ba      	ldr	r2, [r7, #24]
 800419e:	429a      	cmp	r2, r3
 80041a0:	d809      	bhi.n	80041b6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	6a1a      	ldr	r2, [r3, #32]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d203      	bcs.n	80041b6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	699b      	ldr	r3, [r3, #24]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d1be      	bne.n	8004134 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	699a      	ldr	r2, [r3, #24]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	6a1b      	ldr	r3, [r3, #32]
 80041be:	429a      	cmp	r2, r3
 80041c0:	d811      	bhi.n	80041e6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	f003 030f 	and.w	r3, r3, #15
 80041c8:	2201      	movs	r2, #1
 80041ca:	fa02 f303 	lsl.w	r3, r2, r3
 80041ce:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	43db      	mvns	r3, r3
 80041dc:	6939      	ldr	r1, [r7, #16]
 80041de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041e2:	4013      	ands	r3, r2
 80041e4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80041e6:	2300      	movs	r3, #0
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3720      	adds	r7, #32
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b088      	sub	sp, #32
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004200:	69fb      	ldr	r3, [r7, #28]
 8004202:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	333c      	adds	r3, #60	; 0x3c
 8004208:	3304      	adds	r3, #4
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	015a      	lsls	r2, r3, #5
 8004212:	69bb      	ldr	r3, [r7, #24]
 8004214:	4413      	add	r3, r2
 8004216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	2b01      	cmp	r3, #1
 8004224:	d17b      	bne.n	800431e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	f003 0308 	and.w	r3, r3, #8
 800422c:	2b00      	cmp	r3, #0
 800422e:	d015      	beq.n	800425c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	4a61      	ldr	r2, [pc, #388]	; (80043b8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004234:	4293      	cmp	r3, r2
 8004236:	f240 80b9 	bls.w	80043ac <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004240:	2b00      	cmp	r3, #0
 8004242:	f000 80b3 	beq.w	80043ac <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	015a      	lsls	r2, r3, #5
 800424a:	69bb      	ldr	r3, [r7, #24]
 800424c:	4413      	add	r3, r2
 800424e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004252:	461a      	mov	r2, r3
 8004254:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004258:	6093      	str	r3, [r2, #8]
 800425a:	e0a7      	b.n	80043ac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	f003 0320 	and.w	r3, r3, #32
 8004262:	2b00      	cmp	r3, #0
 8004264:	d009      	beq.n	800427a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	015a      	lsls	r2, r3, #5
 800426a:	69bb      	ldr	r3, [r7, #24]
 800426c:	4413      	add	r3, r2
 800426e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004272:	461a      	mov	r2, r3
 8004274:	2320      	movs	r3, #32
 8004276:	6093      	str	r3, [r2, #8]
 8004278:	e098      	b.n	80043ac <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004280:	2b00      	cmp	r3, #0
 8004282:	f040 8093 	bne.w	80043ac <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	4a4b      	ldr	r2, [pc, #300]	; (80043b8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d90f      	bls.n	80042ae <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004294:	2b00      	cmp	r3, #0
 8004296:	d00a      	beq.n	80042ae <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	015a      	lsls	r2, r3, #5
 800429c:	69bb      	ldr	r3, [r7, #24]
 800429e:	4413      	add	r3, r2
 80042a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042a4:	461a      	mov	r2, r3
 80042a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042aa:	6093      	str	r3, [r2, #8]
 80042ac:	e07e      	b.n	80043ac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80042ae:	683a      	ldr	r2, [r7, #0]
 80042b0:	4613      	mov	r3, r2
 80042b2:	00db      	lsls	r3, r3, #3
 80042b4:	4413      	add	r3, r2
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	4413      	add	r3, r2
 80042c0:	3304      	adds	r3, #4
 80042c2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	69da      	ldr	r2, [r3, #28]
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	0159      	lsls	r1, r3, #5
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	440b      	add	r3, r1
 80042d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042d4:	691b      	ldr	r3, [r3, #16]
 80042d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042da:	1ad2      	subs	r2, r2, r3
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d114      	bne.n	8004310 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	699b      	ldr	r3, [r3, #24]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d109      	bne.n	8004302 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6818      	ldr	r0, [r3, #0]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80042f8:	461a      	mov	r2, r3
 80042fa:	2101      	movs	r1, #1
 80042fc:	f002 fdb8 	bl	8006e70 <USB_EP0_OutStart>
 8004300:	e006      	b.n	8004310 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	691a      	ldr	r2, [r3, #16]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	6a1b      	ldr	r3, [r3, #32]
 800430a:	441a      	add	r2, r3
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	b2db      	uxtb	r3, r3
 8004314:	4619      	mov	r1, r3
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f004 fd08 	bl	8008d2c <HAL_PCD_DataOutStageCallback>
 800431c:	e046      	b.n	80043ac <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	4a26      	ldr	r2, [pc, #152]	; (80043bc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d124      	bne.n	8004370 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d00a      	beq.n	8004346 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	015a      	lsls	r2, r3, #5
 8004334:	69bb      	ldr	r3, [r7, #24]
 8004336:	4413      	add	r3, r2
 8004338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800433c:	461a      	mov	r2, r3
 800433e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004342:	6093      	str	r3, [r2, #8]
 8004344:	e032      	b.n	80043ac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	f003 0320 	and.w	r3, r3, #32
 800434c:	2b00      	cmp	r3, #0
 800434e:	d008      	beq.n	8004362 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	015a      	lsls	r2, r3, #5
 8004354:	69bb      	ldr	r3, [r7, #24]
 8004356:	4413      	add	r3, r2
 8004358:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800435c:	461a      	mov	r2, r3
 800435e:	2320      	movs	r3, #32
 8004360:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	b2db      	uxtb	r3, r3
 8004366:	4619      	mov	r1, r3
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f004 fcdf 	bl	8008d2c <HAL_PCD_DataOutStageCallback>
 800436e:	e01d      	b.n	80043ac <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d114      	bne.n	80043a0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004376:	6879      	ldr	r1, [r7, #4]
 8004378:	683a      	ldr	r2, [r7, #0]
 800437a:	4613      	mov	r3, r2
 800437c:	00db      	lsls	r3, r3, #3
 800437e:	4413      	add	r3, r2
 8004380:	009b      	lsls	r3, r3, #2
 8004382:	440b      	add	r3, r1
 8004384:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d108      	bne.n	80043a0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6818      	ldr	r0, [r3, #0]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004398:	461a      	mov	r2, r3
 800439a:	2100      	movs	r1, #0
 800439c:	f002 fd68 	bl	8006e70 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	4619      	mov	r1, r3
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f004 fcc0 	bl	8008d2c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3720      	adds	r7, #32
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	4f54300a 	.word	0x4f54300a
 80043bc:	4f54310a 	.word	0x4f54310a

080043c0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b086      	sub	sp, #24
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	333c      	adds	r3, #60	; 0x3c
 80043d8:	3304      	adds	r3, #4
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	015a      	lsls	r2, r3, #5
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	4413      	add	r3, r2
 80043e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	4a15      	ldr	r2, [pc, #84]	; (8004448 <PCD_EP_OutSetupPacket_int+0x88>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d90e      	bls.n	8004414 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d009      	beq.n	8004414 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	015a      	lsls	r2, r3, #5
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	4413      	add	r3, r2
 8004408:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800440c:	461a      	mov	r2, r3
 800440e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004412:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f004 fc77 	bl	8008d08 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	4a0a      	ldr	r2, [pc, #40]	; (8004448 <PCD_EP_OutSetupPacket_int+0x88>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d90c      	bls.n	800443c <PCD_EP_OutSetupPacket_int+0x7c>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	691b      	ldr	r3, [r3, #16]
 8004426:	2b01      	cmp	r3, #1
 8004428:	d108      	bne.n	800443c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6818      	ldr	r0, [r3, #0]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004434:	461a      	mov	r2, r3
 8004436:	2101      	movs	r1, #1
 8004438:	f002 fd1a 	bl	8006e70 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3718      	adds	r7, #24
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	4f54300a 	.word	0x4f54300a

0800444c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800444c:	b480      	push	{r7}
 800444e:	b085      	sub	sp, #20
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	460b      	mov	r3, r1
 8004456:	70fb      	strb	r3, [r7, #3]
 8004458:	4613      	mov	r3, r2
 800445a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004462:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004464:	78fb      	ldrb	r3, [r7, #3]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d107      	bne.n	800447a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800446a:	883b      	ldrh	r3, [r7, #0]
 800446c:	0419      	lsls	r1, r3, #16
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	68ba      	ldr	r2, [r7, #8]
 8004474:	430a      	orrs	r2, r1
 8004476:	629a      	str	r2, [r3, #40]	; 0x28
 8004478:	e028      	b.n	80044cc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004480:	0c1b      	lsrs	r3, r3, #16
 8004482:	68ba      	ldr	r2, [r7, #8]
 8004484:	4413      	add	r3, r2
 8004486:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004488:	2300      	movs	r3, #0
 800448a:	73fb      	strb	r3, [r7, #15]
 800448c:	e00d      	b.n	80044aa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	7bfb      	ldrb	r3, [r7, #15]
 8004494:	3340      	adds	r3, #64	; 0x40
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	4413      	add	r3, r2
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	0c1b      	lsrs	r3, r3, #16
 800449e:	68ba      	ldr	r2, [r7, #8]
 80044a0:	4413      	add	r3, r2
 80044a2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80044a4:	7bfb      	ldrb	r3, [r7, #15]
 80044a6:	3301      	adds	r3, #1
 80044a8:	73fb      	strb	r3, [r7, #15]
 80044aa:	7bfa      	ldrb	r2, [r7, #15]
 80044ac:	78fb      	ldrb	r3, [r7, #3]
 80044ae:	3b01      	subs	r3, #1
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d3ec      	bcc.n	800448e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80044b4:	883b      	ldrh	r3, [r7, #0]
 80044b6:	0418      	lsls	r0, r3, #16
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6819      	ldr	r1, [r3, #0]
 80044bc:	78fb      	ldrb	r3, [r7, #3]
 80044be:	3b01      	subs	r3, #1
 80044c0:	68ba      	ldr	r2, [r7, #8]
 80044c2:	4302      	orrs	r2, r0
 80044c4:	3340      	adds	r3, #64	; 0x40
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	440b      	add	r3, r1
 80044ca:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80044cc:	2300      	movs	r3, #0
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3714      	adds	r7, #20
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr

080044da <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80044da:	b480      	push	{r7}
 80044dc:	b083      	sub	sp, #12
 80044de:	af00      	add	r7, sp, #0
 80044e0:	6078      	str	r0, [r7, #4]
 80044e2:	460b      	mov	r3, r1
 80044e4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	887a      	ldrh	r2, [r7, #2]
 80044ec:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80044ee:	2300      	movs	r3, #0
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	370c      	adds	r7, #12
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr

080044fc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b083      	sub	sp, #12
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	460b      	mov	r3, r1
 8004506:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004508:	bf00      	nop
 800450a:	370c      	adds	r7, #12
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b086      	sub	sp, #24
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d101      	bne.n	8004526 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e267      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0301 	and.w	r3, r3, #1
 800452e:	2b00      	cmp	r3, #0
 8004530:	d075      	beq.n	800461e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004532:	4b88      	ldr	r3, [pc, #544]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	f003 030c 	and.w	r3, r3, #12
 800453a:	2b04      	cmp	r3, #4
 800453c:	d00c      	beq.n	8004558 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800453e:	4b85      	ldr	r3, [pc, #532]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004546:	2b08      	cmp	r3, #8
 8004548:	d112      	bne.n	8004570 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800454a:	4b82      	ldr	r3, [pc, #520]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004552:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004556:	d10b      	bne.n	8004570 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004558:	4b7e      	ldr	r3, [pc, #504]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004560:	2b00      	cmp	r3, #0
 8004562:	d05b      	beq.n	800461c <HAL_RCC_OscConfig+0x108>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d157      	bne.n	800461c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e242      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004578:	d106      	bne.n	8004588 <HAL_RCC_OscConfig+0x74>
 800457a:	4b76      	ldr	r3, [pc, #472]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a75      	ldr	r2, [pc, #468]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 8004580:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004584:	6013      	str	r3, [r2, #0]
 8004586:	e01d      	b.n	80045c4 <HAL_RCC_OscConfig+0xb0>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004590:	d10c      	bne.n	80045ac <HAL_RCC_OscConfig+0x98>
 8004592:	4b70      	ldr	r3, [pc, #448]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a6f      	ldr	r2, [pc, #444]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 8004598:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800459c:	6013      	str	r3, [r2, #0]
 800459e:	4b6d      	ldr	r3, [pc, #436]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a6c      	ldr	r2, [pc, #432]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 80045a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045a8:	6013      	str	r3, [r2, #0]
 80045aa:	e00b      	b.n	80045c4 <HAL_RCC_OscConfig+0xb0>
 80045ac:	4b69      	ldr	r3, [pc, #420]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a68      	ldr	r2, [pc, #416]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 80045b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045b6:	6013      	str	r3, [r2, #0]
 80045b8:	4b66      	ldr	r3, [pc, #408]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a65      	ldr	r2, [pc, #404]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 80045be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d013      	beq.n	80045f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045cc:	f7fc fcc8 	bl	8000f60 <HAL_GetTick>
 80045d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045d2:	e008      	b.n	80045e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045d4:	f7fc fcc4 	bl	8000f60 <HAL_GetTick>
 80045d8:	4602      	mov	r2, r0
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	2b64      	cmp	r3, #100	; 0x64
 80045e0:	d901      	bls.n	80045e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	e207      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045e6:	4b5b      	ldr	r3, [pc, #364]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d0f0      	beq.n	80045d4 <HAL_RCC_OscConfig+0xc0>
 80045f2:	e014      	b.n	800461e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045f4:	f7fc fcb4 	bl	8000f60 <HAL_GetTick>
 80045f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045fa:	e008      	b.n	800460e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045fc:	f7fc fcb0 	bl	8000f60 <HAL_GetTick>
 8004600:	4602      	mov	r2, r0
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	2b64      	cmp	r3, #100	; 0x64
 8004608:	d901      	bls.n	800460e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e1f3      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800460e:	4b51      	ldr	r3, [pc, #324]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d1f0      	bne.n	80045fc <HAL_RCC_OscConfig+0xe8>
 800461a:	e000      	b.n	800461e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800461c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0302 	and.w	r3, r3, #2
 8004626:	2b00      	cmp	r3, #0
 8004628:	d063      	beq.n	80046f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800462a:	4b4a      	ldr	r3, [pc, #296]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	f003 030c 	and.w	r3, r3, #12
 8004632:	2b00      	cmp	r3, #0
 8004634:	d00b      	beq.n	800464e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004636:	4b47      	ldr	r3, [pc, #284]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800463e:	2b08      	cmp	r3, #8
 8004640:	d11c      	bne.n	800467c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004642:	4b44      	ldr	r3, [pc, #272]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d116      	bne.n	800467c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800464e:	4b41      	ldr	r3, [pc, #260]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0302 	and.w	r3, r3, #2
 8004656:	2b00      	cmp	r3, #0
 8004658:	d005      	beq.n	8004666 <HAL_RCC_OscConfig+0x152>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	2b01      	cmp	r3, #1
 8004660:	d001      	beq.n	8004666 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e1c7      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004666:	4b3b      	ldr	r3, [pc, #236]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	691b      	ldr	r3, [r3, #16]
 8004672:	00db      	lsls	r3, r3, #3
 8004674:	4937      	ldr	r1, [pc, #220]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 8004676:	4313      	orrs	r3, r2
 8004678:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800467a:	e03a      	b.n	80046f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d020      	beq.n	80046c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004684:	4b34      	ldr	r3, [pc, #208]	; (8004758 <HAL_RCC_OscConfig+0x244>)
 8004686:	2201      	movs	r2, #1
 8004688:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800468a:	f7fc fc69 	bl	8000f60 <HAL_GetTick>
 800468e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004690:	e008      	b.n	80046a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004692:	f7fc fc65 	bl	8000f60 <HAL_GetTick>
 8004696:	4602      	mov	r2, r0
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	1ad3      	subs	r3, r2, r3
 800469c:	2b02      	cmp	r3, #2
 800469e:	d901      	bls.n	80046a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80046a0:	2303      	movs	r3, #3
 80046a2:	e1a8      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046a4:	4b2b      	ldr	r3, [pc, #172]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 0302 	and.w	r3, r3, #2
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d0f0      	beq.n	8004692 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046b0:	4b28      	ldr	r3, [pc, #160]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	691b      	ldr	r3, [r3, #16]
 80046bc:	00db      	lsls	r3, r3, #3
 80046be:	4925      	ldr	r1, [pc, #148]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	600b      	str	r3, [r1, #0]
 80046c4:	e015      	b.n	80046f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046c6:	4b24      	ldr	r3, [pc, #144]	; (8004758 <HAL_RCC_OscConfig+0x244>)
 80046c8:	2200      	movs	r2, #0
 80046ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046cc:	f7fc fc48 	bl	8000f60 <HAL_GetTick>
 80046d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046d2:	e008      	b.n	80046e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046d4:	f7fc fc44 	bl	8000f60 <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	2b02      	cmp	r3, #2
 80046e0:	d901      	bls.n	80046e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e187      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046e6:	4b1b      	ldr	r3, [pc, #108]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 0302 	and.w	r3, r3, #2
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d1f0      	bne.n	80046d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 0308 	and.w	r3, r3, #8
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d036      	beq.n	800476c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	695b      	ldr	r3, [r3, #20]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d016      	beq.n	8004734 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004706:	4b15      	ldr	r3, [pc, #84]	; (800475c <HAL_RCC_OscConfig+0x248>)
 8004708:	2201      	movs	r2, #1
 800470a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800470c:	f7fc fc28 	bl	8000f60 <HAL_GetTick>
 8004710:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004712:	e008      	b.n	8004726 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004714:	f7fc fc24 	bl	8000f60 <HAL_GetTick>
 8004718:	4602      	mov	r2, r0
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	2b02      	cmp	r3, #2
 8004720:	d901      	bls.n	8004726 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	e167      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004726:	4b0b      	ldr	r3, [pc, #44]	; (8004754 <HAL_RCC_OscConfig+0x240>)
 8004728:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800472a:	f003 0302 	and.w	r3, r3, #2
 800472e:	2b00      	cmp	r3, #0
 8004730:	d0f0      	beq.n	8004714 <HAL_RCC_OscConfig+0x200>
 8004732:	e01b      	b.n	800476c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004734:	4b09      	ldr	r3, [pc, #36]	; (800475c <HAL_RCC_OscConfig+0x248>)
 8004736:	2200      	movs	r2, #0
 8004738:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800473a:	f7fc fc11 	bl	8000f60 <HAL_GetTick>
 800473e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004740:	e00e      	b.n	8004760 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004742:	f7fc fc0d 	bl	8000f60 <HAL_GetTick>
 8004746:	4602      	mov	r2, r0
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	2b02      	cmp	r3, #2
 800474e:	d907      	bls.n	8004760 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004750:	2303      	movs	r3, #3
 8004752:	e150      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
 8004754:	40023800 	.word	0x40023800
 8004758:	42470000 	.word	0x42470000
 800475c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004760:	4b88      	ldr	r3, [pc, #544]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 8004762:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004764:	f003 0302 	and.w	r3, r3, #2
 8004768:	2b00      	cmp	r3, #0
 800476a:	d1ea      	bne.n	8004742 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 0304 	and.w	r3, r3, #4
 8004774:	2b00      	cmp	r3, #0
 8004776:	f000 8097 	beq.w	80048a8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800477a:	2300      	movs	r3, #0
 800477c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800477e:	4b81      	ldr	r3, [pc, #516]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 8004780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d10f      	bne.n	80047aa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800478a:	2300      	movs	r3, #0
 800478c:	60bb      	str	r3, [r7, #8]
 800478e:	4b7d      	ldr	r3, [pc, #500]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 8004790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004792:	4a7c      	ldr	r2, [pc, #496]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 8004794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004798:	6413      	str	r3, [r2, #64]	; 0x40
 800479a:	4b7a      	ldr	r3, [pc, #488]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 800479c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047a2:	60bb      	str	r3, [r7, #8]
 80047a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047a6:	2301      	movs	r3, #1
 80047a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047aa:	4b77      	ldr	r3, [pc, #476]	; (8004988 <HAL_RCC_OscConfig+0x474>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d118      	bne.n	80047e8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047b6:	4b74      	ldr	r3, [pc, #464]	; (8004988 <HAL_RCC_OscConfig+0x474>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a73      	ldr	r2, [pc, #460]	; (8004988 <HAL_RCC_OscConfig+0x474>)
 80047bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047c2:	f7fc fbcd 	bl	8000f60 <HAL_GetTick>
 80047c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047c8:	e008      	b.n	80047dc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047ca:	f7fc fbc9 	bl	8000f60 <HAL_GetTick>
 80047ce:	4602      	mov	r2, r0
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	1ad3      	subs	r3, r2, r3
 80047d4:	2b02      	cmp	r3, #2
 80047d6:	d901      	bls.n	80047dc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80047d8:	2303      	movs	r3, #3
 80047da:	e10c      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047dc:	4b6a      	ldr	r3, [pc, #424]	; (8004988 <HAL_RCC_OscConfig+0x474>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d0f0      	beq.n	80047ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d106      	bne.n	80047fe <HAL_RCC_OscConfig+0x2ea>
 80047f0:	4b64      	ldr	r3, [pc, #400]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 80047f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047f4:	4a63      	ldr	r2, [pc, #396]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 80047f6:	f043 0301 	orr.w	r3, r3, #1
 80047fa:	6713      	str	r3, [r2, #112]	; 0x70
 80047fc:	e01c      	b.n	8004838 <HAL_RCC_OscConfig+0x324>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	2b05      	cmp	r3, #5
 8004804:	d10c      	bne.n	8004820 <HAL_RCC_OscConfig+0x30c>
 8004806:	4b5f      	ldr	r3, [pc, #380]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 8004808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800480a:	4a5e      	ldr	r2, [pc, #376]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 800480c:	f043 0304 	orr.w	r3, r3, #4
 8004810:	6713      	str	r3, [r2, #112]	; 0x70
 8004812:	4b5c      	ldr	r3, [pc, #368]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 8004814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004816:	4a5b      	ldr	r2, [pc, #364]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 8004818:	f043 0301 	orr.w	r3, r3, #1
 800481c:	6713      	str	r3, [r2, #112]	; 0x70
 800481e:	e00b      	b.n	8004838 <HAL_RCC_OscConfig+0x324>
 8004820:	4b58      	ldr	r3, [pc, #352]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 8004822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004824:	4a57      	ldr	r2, [pc, #348]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 8004826:	f023 0301 	bic.w	r3, r3, #1
 800482a:	6713      	str	r3, [r2, #112]	; 0x70
 800482c:	4b55      	ldr	r3, [pc, #340]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 800482e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004830:	4a54      	ldr	r2, [pc, #336]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 8004832:	f023 0304 	bic.w	r3, r3, #4
 8004836:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d015      	beq.n	800486c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004840:	f7fc fb8e 	bl	8000f60 <HAL_GetTick>
 8004844:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004846:	e00a      	b.n	800485e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004848:	f7fc fb8a 	bl	8000f60 <HAL_GetTick>
 800484c:	4602      	mov	r2, r0
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	f241 3288 	movw	r2, #5000	; 0x1388
 8004856:	4293      	cmp	r3, r2
 8004858:	d901      	bls.n	800485e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	e0cb      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800485e:	4b49      	ldr	r3, [pc, #292]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 8004860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004862:	f003 0302 	and.w	r3, r3, #2
 8004866:	2b00      	cmp	r3, #0
 8004868:	d0ee      	beq.n	8004848 <HAL_RCC_OscConfig+0x334>
 800486a:	e014      	b.n	8004896 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800486c:	f7fc fb78 	bl	8000f60 <HAL_GetTick>
 8004870:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004872:	e00a      	b.n	800488a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004874:	f7fc fb74 	bl	8000f60 <HAL_GetTick>
 8004878:	4602      	mov	r2, r0
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	1ad3      	subs	r3, r2, r3
 800487e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004882:	4293      	cmp	r3, r2
 8004884:	d901      	bls.n	800488a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	e0b5      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800488a:	4b3e      	ldr	r3, [pc, #248]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 800488c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800488e:	f003 0302 	and.w	r3, r3, #2
 8004892:	2b00      	cmp	r3, #0
 8004894:	d1ee      	bne.n	8004874 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004896:	7dfb      	ldrb	r3, [r7, #23]
 8004898:	2b01      	cmp	r3, #1
 800489a:	d105      	bne.n	80048a8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800489c:	4b39      	ldr	r3, [pc, #228]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 800489e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a0:	4a38      	ldr	r2, [pc, #224]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 80048a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048a6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	699b      	ldr	r3, [r3, #24]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	f000 80a1 	beq.w	80049f4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80048b2:	4b34      	ldr	r3, [pc, #208]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	f003 030c 	and.w	r3, r3, #12
 80048ba:	2b08      	cmp	r3, #8
 80048bc:	d05c      	beq.n	8004978 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	699b      	ldr	r3, [r3, #24]
 80048c2:	2b02      	cmp	r3, #2
 80048c4:	d141      	bne.n	800494a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048c6:	4b31      	ldr	r3, [pc, #196]	; (800498c <HAL_RCC_OscConfig+0x478>)
 80048c8:	2200      	movs	r2, #0
 80048ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048cc:	f7fc fb48 	bl	8000f60 <HAL_GetTick>
 80048d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048d2:	e008      	b.n	80048e6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048d4:	f7fc fb44 	bl	8000f60 <HAL_GetTick>
 80048d8:	4602      	mov	r2, r0
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	2b02      	cmp	r3, #2
 80048e0:	d901      	bls.n	80048e6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80048e2:	2303      	movs	r3, #3
 80048e4:	e087      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048e6:	4b27      	ldr	r3, [pc, #156]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d1f0      	bne.n	80048d4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	69da      	ldr	r2, [r3, #28]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a1b      	ldr	r3, [r3, #32]
 80048fa:	431a      	orrs	r2, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004900:	019b      	lsls	r3, r3, #6
 8004902:	431a      	orrs	r2, r3
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004908:	085b      	lsrs	r3, r3, #1
 800490a:	3b01      	subs	r3, #1
 800490c:	041b      	lsls	r3, r3, #16
 800490e:	431a      	orrs	r2, r3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004914:	061b      	lsls	r3, r3, #24
 8004916:	491b      	ldr	r1, [pc, #108]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 8004918:	4313      	orrs	r3, r2
 800491a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800491c:	4b1b      	ldr	r3, [pc, #108]	; (800498c <HAL_RCC_OscConfig+0x478>)
 800491e:	2201      	movs	r2, #1
 8004920:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004922:	f7fc fb1d 	bl	8000f60 <HAL_GetTick>
 8004926:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004928:	e008      	b.n	800493c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800492a:	f7fc fb19 	bl	8000f60 <HAL_GetTick>
 800492e:	4602      	mov	r2, r0
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	1ad3      	subs	r3, r2, r3
 8004934:	2b02      	cmp	r3, #2
 8004936:	d901      	bls.n	800493c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004938:	2303      	movs	r3, #3
 800493a:	e05c      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800493c:	4b11      	ldr	r3, [pc, #68]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004944:	2b00      	cmp	r3, #0
 8004946:	d0f0      	beq.n	800492a <HAL_RCC_OscConfig+0x416>
 8004948:	e054      	b.n	80049f4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800494a:	4b10      	ldr	r3, [pc, #64]	; (800498c <HAL_RCC_OscConfig+0x478>)
 800494c:	2200      	movs	r2, #0
 800494e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004950:	f7fc fb06 	bl	8000f60 <HAL_GetTick>
 8004954:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004956:	e008      	b.n	800496a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004958:	f7fc fb02 	bl	8000f60 <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	2b02      	cmp	r3, #2
 8004964:	d901      	bls.n	800496a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e045      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800496a:	4b06      	ldr	r3, [pc, #24]	; (8004984 <HAL_RCC_OscConfig+0x470>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d1f0      	bne.n	8004958 <HAL_RCC_OscConfig+0x444>
 8004976:	e03d      	b.n	80049f4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	699b      	ldr	r3, [r3, #24]
 800497c:	2b01      	cmp	r3, #1
 800497e:	d107      	bne.n	8004990 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	e038      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
 8004984:	40023800 	.word	0x40023800
 8004988:	40007000 	.word	0x40007000
 800498c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004990:	4b1b      	ldr	r3, [pc, #108]	; (8004a00 <HAL_RCC_OscConfig+0x4ec>)
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	699b      	ldr	r3, [r3, #24]
 800499a:	2b01      	cmp	r3, #1
 800499c:	d028      	beq.n	80049f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d121      	bne.n	80049f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d11a      	bne.n	80049f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049ba:	68fa      	ldr	r2, [r7, #12]
 80049bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80049c0:	4013      	ands	r3, r2
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80049c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d111      	bne.n	80049f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d6:	085b      	lsrs	r3, r3, #1
 80049d8:	3b01      	subs	r3, #1
 80049da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049dc:	429a      	cmp	r2, r3
 80049de:	d107      	bne.n	80049f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d001      	beq.n	80049f4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e000      	b.n	80049f6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80049f4:	2300      	movs	r3, #0
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3718      	adds	r7, #24
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop
 8004a00:	40023800 	.word	0x40023800

08004a04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d101      	bne.n	8004a18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	e0cc      	b.n	8004bb2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a18:	4b68      	ldr	r3, [pc, #416]	; (8004bbc <HAL_RCC_ClockConfig+0x1b8>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 0307 	and.w	r3, r3, #7
 8004a20:	683a      	ldr	r2, [r7, #0]
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d90c      	bls.n	8004a40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a26:	4b65      	ldr	r3, [pc, #404]	; (8004bbc <HAL_RCC_ClockConfig+0x1b8>)
 8004a28:	683a      	ldr	r2, [r7, #0]
 8004a2a:	b2d2      	uxtb	r2, r2
 8004a2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a2e:	4b63      	ldr	r3, [pc, #396]	; (8004bbc <HAL_RCC_ClockConfig+0x1b8>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 0307 	and.w	r3, r3, #7
 8004a36:	683a      	ldr	r2, [r7, #0]
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d001      	beq.n	8004a40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e0b8      	b.n	8004bb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 0302 	and.w	r3, r3, #2
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d020      	beq.n	8004a8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 0304 	and.w	r3, r3, #4
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d005      	beq.n	8004a64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a58:	4b59      	ldr	r3, [pc, #356]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	4a58      	ldr	r2, [pc, #352]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0308 	and.w	r3, r3, #8
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d005      	beq.n	8004a7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a70:	4b53      	ldr	r3, [pc, #332]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	4a52      	ldr	r2, [pc, #328]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a7c:	4b50      	ldr	r3, [pc, #320]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	494d      	ldr	r1, [pc, #308]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 0301 	and.w	r3, r3, #1
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d044      	beq.n	8004b24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d107      	bne.n	8004ab2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004aa2:	4b47      	ldr	r3, [pc, #284]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d119      	bne.n	8004ae2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e07f      	b.n	8004bb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	d003      	beq.n	8004ac2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004abe:	2b03      	cmp	r3, #3
 8004ac0:	d107      	bne.n	8004ad2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ac2:	4b3f      	ldr	r3, [pc, #252]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d109      	bne.n	8004ae2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e06f      	b.n	8004bb2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ad2:	4b3b      	ldr	r3, [pc, #236]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 0302 	and.w	r3, r3, #2
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d101      	bne.n	8004ae2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e067      	b.n	8004bb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ae2:	4b37      	ldr	r3, [pc, #220]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	f023 0203 	bic.w	r2, r3, #3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	4934      	ldr	r1, [pc, #208]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004af0:	4313      	orrs	r3, r2
 8004af2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004af4:	f7fc fa34 	bl	8000f60 <HAL_GetTick>
 8004af8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004afa:	e00a      	b.n	8004b12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004afc:	f7fc fa30 	bl	8000f60 <HAL_GetTick>
 8004b00:	4602      	mov	r2, r0
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d901      	bls.n	8004b12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b0e:	2303      	movs	r3, #3
 8004b10:	e04f      	b.n	8004bb2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b12:	4b2b      	ldr	r3, [pc, #172]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	f003 020c 	and.w	r2, r3, #12
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d1eb      	bne.n	8004afc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b24:	4b25      	ldr	r3, [pc, #148]	; (8004bbc <HAL_RCC_ClockConfig+0x1b8>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0307 	and.w	r3, r3, #7
 8004b2c:	683a      	ldr	r2, [r7, #0]
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d20c      	bcs.n	8004b4c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b32:	4b22      	ldr	r3, [pc, #136]	; (8004bbc <HAL_RCC_ClockConfig+0x1b8>)
 8004b34:	683a      	ldr	r2, [r7, #0]
 8004b36:	b2d2      	uxtb	r2, r2
 8004b38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b3a:	4b20      	ldr	r3, [pc, #128]	; (8004bbc <HAL_RCC_ClockConfig+0x1b8>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 0307 	and.w	r3, r3, #7
 8004b42:	683a      	ldr	r2, [r7, #0]
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d001      	beq.n	8004b4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e032      	b.n	8004bb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 0304 	and.w	r3, r3, #4
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d008      	beq.n	8004b6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b58:	4b19      	ldr	r3, [pc, #100]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	4916      	ldr	r1, [pc, #88]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b66:	4313      	orrs	r3, r2
 8004b68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 0308 	and.w	r3, r3, #8
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d009      	beq.n	8004b8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b76:	4b12      	ldr	r3, [pc, #72]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	00db      	lsls	r3, r3, #3
 8004b84:	490e      	ldr	r1, [pc, #56]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b86:	4313      	orrs	r3, r2
 8004b88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b8a:	f000 f821 	bl	8004bd0 <HAL_RCC_GetSysClockFreq>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	4b0b      	ldr	r3, [pc, #44]	; (8004bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	091b      	lsrs	r3, r3, #4
 8004b96:	f003 030f 	and.w	r3, r3, #15
 8004b9a:	490a      	ldr	r1, [pc, #40]	; (8004bc4 <HAL_RCC_ClockConfig+0x1c0>)
 8004b9c:	5ccb      	ldrb	r3, [r1, r3]
 8004b9e:	fa22 f303 	lsr.w	r3, r2, r3
 8004ba2:	4a09      	ldr	r2, [pc, #36]	; (8004bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8004ba4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004ba6:	4b09      	ldr	r3, [pc, #36]	; (8004bcc <HAL_RCC_ClockConfig+0x1c8>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4618      	mov	r0, r3
 8004bac:	f7fc f994 	bl	8000ed8 <HAL_InitTick>

  return HAL_OK;
 8004bb0:	2300      	movs	r3, #0
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3710      	adds	r7, #16
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
 8004bba:	bf00      	nop
 8004bbc:	40023c00 	.word	0x40023c00
 8004bc0:	40023800 	.word	0x40023800
 8004bc4:	08009364 	.word	0x08009364
 8004bc8:	2000000c 	.word	0x2000000c
 8004bcc:	20000010 	.word	0x20000010

08004bd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bd4:	b094      	sub	sp, #80	; 0x50
 8004bd6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	647b      	str	r3, [r7, #68]	; 0x44
 8004bdc:	2300      	movs	r3, #0
 8004bde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004be0:	2300      	movs	r3, #0
 8004be2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004be4:	2300      	movs	r3, #0
 8004be6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004be8:	4b79      	ldr	r3, [pc, #484]	; (8004dd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	f003 030c 	and.w	r3, r3, #12
 8004bf0:	2b08      	cmp	r3, #8
 8004bf2:	d00d      	beq.n	8004c10 <HAL_RCC_GetSysClockFreq+0x40>
 8004bf4:	2b08      	cmp	r3, #8
 8004bf6:	f200 80e1 	bhi.w	8004dbc <HAL_RCC_GetSysClockFreq+0x1ec>
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d002      	beq.n	8004c04 <HAL_RCC_GetSysClockFreq+0x34>
 8004bfe:	2b04      	cmp	r3, #4
 8004c00:	d003      	beq.n	8004c0a <HAL_RCC_GetSysClockFreq+0x3a>
 8004c02:	e0db      	b.n	8004dbc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c04:	4b73      	ldr	r3, [pc, #460]	; (8004dd4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c06:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004c08:	e0db      	b.n	8004dc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c0a:	4b73      	ldr	r3, [pc, #460]	; (8004dd8 <HAL_RCC_GetSysClockFreq+0x208>)
 8004c0c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c0e:	e0d8      	b.n	8004dc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c10:	4b6f      	ldr	r3, [pc, #444]	; (8004dd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c18:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c1a:	4b6d      	ldr	r3, [pc, #436]	; (8004dd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d063      	beq.n	8004cee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c26:	4b6a      	ldr	r3, [pc, #424]	; (8004dd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	099b      	lsrs	r3, r3, #6
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c30:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c38:	633b      	str	r3, [r7, #48]	; 0x30
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	637b      	str	r3, [r7, #52]	; 0x34
 8004c3e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004c42:	4622      	mov	r2, r4
 8004c44:	462b      	mov	r3, r5
 8004c46:	f04f 0000 	mov.w	r0, #0
 8004c4a:	f04f 0100 	mov.w	r1, #0
 8004c4e:	0159      	lsls	r1, r3, #5
 8004c50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c54:	0150      	lsls	r0, r2, #5
 8004c56:	4602      	mov	r2, r0
 8004c58:	460b      	mov	r3, r1
 8004c5a:	4621      	mov	r1, r4
 8004c5c:	1a51      	subs	r1, r2, r1
 8004c5e:	6139      	str	r1, [r7, #16]
 8004c60:	4629      	mov	r1, r5
 8004c62:	eb63 0301 	sbc.w	r3, r3, r1
 8004c66:	617b      	str	r3, [r7, #20]
 8004c68:	f04f 0200 	mov.w	r2, #0
 8004c6c:	f04f 0300 	mov.w	r3, #0
 8004c70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c74:	4659      	mov	r1, fp
 8004c76:	018b      	lsls	r3, r1, #6
 8004c78:	4651      	mov	r1, sl
 8004c7a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c7e:	4651      	mov	r1, sl
 8004c80:	018a      	lsls	r2, r1, #6
 8004c82:	4651      	mov	r1, sl
 8004c84:	ebb2 0801 	subs.w	r8, r2, r1
 8004c88:	4659      	mov	r1, fp
 8004c8a:	eb63 0901 	sbc.w	r9, r3, r1
 8004c8e:	f04f 0200 	mov.w	r2, #0
 8004c92:	f04f 0300 	mov.w	r3, #0
 8004c96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ca2:	4690      	mov	r8, r2
 8004ca4:	4699      	mov	r9, r3
 8004ca6:	4623      	mov	r3, r4
 8004ca8:	eb18 0303 	adds.w	r3, r8, r3
 8004cac:	60bb      	str	r3, [r7, #8]
 8004cae:	462b      	mov	r3, r5
 8004cb0:	eb49 0303 	adc.w	r3, r9, r3
 8004cb4:	60fb      	str	r3, [r7, #12]
 8004cb6:	f04f 0200 	mov.w	r2, #0
 8004cba:	f04f 0300 	mov.w	r3, #0
 8004cbe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004cc2:	4629      	mov	r1, r5
 8004cc4:	024b      	lsls	r3, r1, #9
 8004cc6:	4621      	mov	r1, r4
 8004cc8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004ccc:	4621      	mov	r1, r4
 8004cce:	024a      	lsls	r2, r1, #9
 8004cd0:	4610      	mov	r0, r2
 8004cd2:	4619      	mov	r1, r3
 8004cd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cda:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004cdc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ce0:	f7fb fa72 	bl	80001c8 <__aeabi_uldivmod>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	460b      	mov	r3, r1
 8004ce8:	4613      	mov	r3, r2
 8004cea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cec:	e058      	b.n	8004da0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cee:	4b38      	ldr	r3, [pc, #224]	; (8004dd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	099b      	lsrs	r3, r3, #6
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	4611      	mov	r1, r2
 8004cfa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004cfe:	623b      	str	r3, [r7, #32]
 8004d00:	2300      	movs	r3, #0
 8004d02:	627b      	str	r3, [r7, #36]	; 0x24
 8004d04:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004d08:	4642      	mov	r2, r8
 8004d0a:	464b      	mov	r3, r9
 8004d0c:	f04f 0000 	mov.w	r0, #0
 8004d10:	f04f 0100 	mov.w	r1, #0
 8004d14:	0159      	lsls	r1, r3, #5
 8004d16:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d1a:	0150      	lsls	r0, r2, #5
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	460b      	mov	r3, r1
 8004d20:	4641      	mov	r1, r8
 8004d22:	ebb2 0a01 	subs.w	sl, r2, r1
 8004d26:	4649      	mov	r1, r9
 8004d28:	eb63 0b01 	sbc.w	fp, r3, r1
 8004d2c:	f04f 0200 	mov.w	r2, #0
 8004d30:	f04f 0300 	mov.w	r3, #0
 8004d34:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004d38:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004d3c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004d40:	ebb2 040a 	subs.w	r4, r2, sl
 8004d44:	eb63 050b 	sbc.w	r5, r3, fp
 8004d48:	f04f 0200 	mov.w	r2, #0
 8004d4c:	f04f 0300 	mov.w	r3, #0
 8004d50:	00eb      	lsls	r3, r5, #3
 8004d52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d56:	00e2      	lsls	r2, r4, #3
 8004d58:	4614      	mov	r4, r2
 8004d5a:	461d      	mov	r5, r3
 8004d5c:	4643      	mov	r3, r8
 8004d5e:	18e3      	adds	r3, r4, r3
 8004d60:	603b      	str	r3, [r7, #0]
 8004d62:	464b      	mov	r3, r9
 8004d64:	eb45 0303 	adc.w	r3, r5, r3
 8004d68:	607b      	str	r3, [r7, #4]
 8004d6a:	f04f 0200 	mov.w	r2, #0
 8004d6e:	f04f 0300 	mov.w	r3, #0
 8004d72:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d76:	4629      	mov	r1, r5
 8004d78:	028b      	lsls	r3, r1, #10
 8004d7a:	4621      	mov	r1, r4
 8004d7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d80:	4621      	mov	r1, r4
 8004d82:	028a      	lsls	r2, r1, #10
 8004d84:	4610      	mov	r0, r2
 8004d86:	4619      	mov	r1, r3
 8004d88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	61bb      	str	r3, [r7, #24]
 8004d8e:	61fa      	str	r2, [r7, #28]
 8004d90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d94:	f7fb fa18 	bl	80001c8 <__aeabi_uldivmod>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	460b      	mov	r3, r1
 8004d9c:	4613      	mov	r3, r2
 8004d9e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004da0:	4b0b      	ldr	r3, [pc, #44]	; (8004dd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	0c1b      	lsrs	r3, r3, #16
 8004da6:	f003 0303 	and.w	r3, r3, #3
 8004daa:	3301      	adds	r3, #1
 8004dac:	005b      	lsls	r3, r3, #1
 8004dae:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004db0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004db2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004db8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004dba:	e002      	b.n	8004dc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004dbc:	4b05      	ldr	r3, [pc, #20]	; (8004dd4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004dbe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004dc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004dc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3750      	adds	r7, #80	; 0x50
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004dce:	bf00      	nop
 8004dd0:	40023800 	.word	0x40023800
 8004dd4:	00f42400 	.word	0x00f42400
 8004dd8:	007a1200 	.word	0x007a1200

08004ddc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004de0:	4b03      	ldr	r3, [pc, #12]	; (8004df0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004de2:	681b      	ldr	r3, [r3, #0]
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr
 8004dee:	bf00      	nop
 8004df0:	2000000c 	.word	0x2000000c

08004df4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b082      	sub	sp, #8
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d101      	bne.n	8004e06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	e041      	b.n	8004e8a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d106      	bne.n	8004e20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f7fb ff34 	bl	8000c88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2202      	movs	r2, #2
 8004e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	3304      	adds	r3, #4
 8004e30:	4619      	mov	r1, r3
 8004e32:	4610      	mov	r0, r2
 8004e34:	f000 fa96 	bl	8005364 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e88:	2300      	movs	r3, #0
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3708      	adds	r7, #8
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
	...

08004e94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b085      	sub	sp, #20
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ea2:	b2db      	uxtb	r3, r3
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d001      	beq.n	8004eac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e04e      	b.n	8004f4a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2202      	movs	r2, #2
 8004eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	68da      	ldr	r2, [r3, #12]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f042 0201 	orr.w	r2, r2, #1
 8004ec2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a23      	ldr	r2, [pc, #140]	; (8004f58 <HAL_TIM_Base_Start_IT+0xc4>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d022      	beq.n	8004f14 <HAL_TIM_Base_Start_IT+0x80>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ed6:	d01d      	beq.n	8004f14 <HAL_TIM_Base_Start_IT+0x80>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a1f      	ldr	r2, [pc, #124]	; (8004f5c <HAL_TIM_Base_Start_IT+0xc8>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d018      	beq.n	8004f14 <HAL_TIM_Base_Start_IT+0x80>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a1e      	ldr	r2, [pc, #120]	; (8004f60 <HAL_TIM_Base_Start_IT+0xcc>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d013      	beq.n	8004f14 <HAL_TIM_Base_Start_IT+0x80>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a1c      	ldr	r2, [pc, #112]	; (8004f64 <HAL_TIM_Base_Start_IT+0xd0>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d00e      	beq.n	8004f14 <HAL_TIM_Base_Start_IT+0x80>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a1b      	ldr	r2, [pc, #108]	; (8004f68 <HAL_TIM_Base_Start_IT+0xd4>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d009      	beq.n	8004f14 <HAL_TIM_Base_Start_IT+0x80>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a19      	ldr	r2, [pc, #100]	; (8004f6c <HAL_TIM_Base_Start_IT+0xd8>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d004      	beq.n	8004f14 <HAL_TIM_Base_Start_IT+0x80>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a18      	ldr	r2, [pc, #96]	; (8004f70 <HAL_TIM_Base_Start_IT+0xdc>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d111      	bne.n	8004f38 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	f003 0307 	and.w	r3, r3, #7
 8004f1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2b06      	cmp	r3, #6
 8004f24:	d010      	beq.n	8004f48 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f042 0201 	orr.w	r2, r2, #1
 8004f34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f36:	e007      	b.n	8004f48 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f042 0201 	orr.w	r2, r2, #1
 8004f46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f48:	2300      	movs	r3, #0
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3714      	adds	r7, #20
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr
 8004f56:	bf00      	nop
 8004f58:	40010000 	.word	0x40010000
 8004f5c:	40000400 	.word	0x40000400
 8004f60:	40000800 	.word	0x40000800
 8004f64:	40000c00 	.word	0x40000c00
 8004f68:	40010400 	.word	0x40010400
 8004f6c:	40014000 	.word	0x40014000
 8004f70:	40001800 	.word	0x40001800

08004f74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b082      	sub	sp, #8
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	691b      	ldr	r3, [r3, #16]
 8004f82:	f003 0302 	and.w	r3, r3, #2
 8004f86:	2b02      	cmp	r3, #2
 8004f88:	d122      	bne.n	8004fd0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	68db      	ldr	r3, [r3, #12]
 8004f90:	f003 0302 	and.w	r3, r3, #2
 8004f94:	2b02      	cmp	r3, #2
 8004f96:	d11b      	bne.n	8004fd0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f06f 0202 	mvn.w	r2, #2
 8004fa0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	699b      	ldr	r3, [r3, #24]
 8004fae:	f003 0303 	and.w	r3, r3, #3
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d003      	beq.n	8004fbe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f000 f9b5 	bl	8005326 <HAL_TIM_IC_CaptureCallback>
 8004fbc:	e005      	b.n	8004fca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f000 f9a7 	bl	8005312 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f000 f9b8 	bl	800533a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	691b      	ldr	r3, [r3, #16]
 8004fd6:	f003 0304 	and.w	r3, r3, #4
 8004fda:	2b04      	cmp	r3, #4
 8004fdc:	d122      	bne.n	8005024 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	f003 0304 	and.w	r3, r3, #4
 8004fe8:	2b04      	cmp	r3, #4
 8004fea:	d11b      	bne.n	8005024 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f06f 0204 	mvn.w	r2, #4
 8004ff4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2202      	movs	r2, #2
 8004ffa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	699b      	ldr	r3, [r3, #24]
 8005002:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005006:	2b00      	cmp	r3, #0
 8005008:	d003      	beq.n	8005012 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f000 f98b 	bl	8005326 <HAL_TIM_IC_CaptureCallback>
 8005010:	e005      	b.n	800501e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 f97d 	bl	8005312 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f000 f98e 	bl	800533a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	691b      	ldr	r3, [r3, #16]
 800502a:	f003 0308 	and.w	r3, r3, #8
 800502e:	2b08      	cmp	r3, #8
 8005030:	d122      	bne.n	8005078 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	f003 0308 	and.w	r3, r3, #8
 800503c:	2b08      	cmp	r3, #8
 800503e:	d11b      	bne.n	8005078 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f06f 0208 	mvn.w	r2, #8
 8005048:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2204      	movs	r2, #4
 800504e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	69db      	ldr	r3, [r3, #28]
 8005056:	f003 0303 	and.w	r3, r3, #3
 800505a:	2b00      	cmp	r3, #0
 800505c:	d003      	beq.n	8005066 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f000 f961 	bl	8005326 <HAL_TIM_IC_CaptureCallback>
 8005064:	e005      	b.n	8005072 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f000 f953 	bl	8005312 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f000 f964 	bl	800533a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	691b      	ldr	r3, [r3, #16]
 800507e:	f003 0310 	and.w	r3, r3, #16
 8005082:	2b10      	cmp	r3, #16
 8005084:	d122      	bne.n	80050cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	f003 0310 	and.w	r3, r3, #16
 8005090:	2b10      	cmp	r3, #16
 8005092:	d11b      	bne.n	80050cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f06f 0210 	mvn.w	r2, #16
 800509c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2208      	movs	r2, #8
 80050a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	69db      	ldr	r3, [r3, #28]
 80050aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d003      	beq.n	80050ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f000 f937 	bl	8005326 <HAL_TIM_IC_CaptureCallback>
 80050b8:	e005      	b.n	80050c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f000 f929 	bl	8005312 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f000 f93a 	bl	800533a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	691b      	ldr	r3, [r3, #16]
 80050d2:	f003 0301 	and.w	r3, r3, #1
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d10e      	bne.n	80050f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	68db      	ldr	r3, [r3, #12]
 80050e0:	f003 0301 	and.w	r3, r3, #1
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d107      	bne.n	80050f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f06f 0201 	mvn.w	r2, #1
 80050f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f7fb fd78 	bl	8000be8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	691b      	ldr	r3, [r3, #16]
 80050fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005102:	2b80      	cmp	r3, #128	; 0x80
 8005104:	d10e      	bne.n	8005124 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005110:	2b80      	cmp	r3, #128	; 0x80
 8005112:	d107      	bne.n	8005124 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800511c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f000 fae0 	bl	80056e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	691b      	ldr	r3, [r3, #16]
 800512a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800512e:	2b40      	cmp	r3, #64	; 0x40
 8005130:	d10e      	bne.n	8005150 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800513c:	2b40      	cmp	r3, #64	; 0x40
 800513e:	d107      	bne.n	8005150 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005148:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f000 f8ff 	bl	800534e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	691b      	ldr	r3, [r3, #16]
 8005156:	f003 0320 	and.w	r3, r3, #32
 800515a:	2b20      	cmp	r3, #32
 800515c:	d10e      	bne.n	800517c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	f003 0320 	and.w	r3, r3, #32
 8005168:	2b20      	cmp	r3, #32
 800516a:	d107      	bne.n	800517c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f06f 0220 	mvn.w	r2, #32
 8005174:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f000 faaa 	bl	80056d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800517c:	bf00      	nop
 800517e:	3708      	adds	r7, #8
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}

08005184 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b084      	sub	sp, #16
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800518e:	2300      	movs	r3, #0
 8005190:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005198:	2b01      	cmp	r3, #1
 800519a:	d101      	bne.n	80051a0 <HAL_TIM_ConfigClockSource+0x1c>
 800519c:	2302      	movs	r3, #2
 800519e:	e0b4      	b.n	800530a <HAL_TIM_ConfigClockSource+0x186>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2202      	movs	r2, #2
 80051ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80051be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	68ba      	ldr	r2, [r7, #8]
 80051ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051d8:	d03e      	beq.n	8005258 <HAL_TIM_ConfigClockSource+0xd4>
 80051da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051de:	f200 8087 	bhi.w	80052f0 <HAL_TIM_ConfigClockSource+0x16c>
 80051e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051e6:	f000 8086 	beq.w	80052f6 <HAL_TIM_ConfigClockSource+0x172>
 80051ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051ee:	d87f      	bhi.n	80052f0 <HAL_TIM_ConfigClockSource+0x16c>
 80051f0:	2b70      	cmp	r3, #112	; 0x70
 80051f2:	d01a      	beq.n	800522a <HAL_TIM_ConfigClockSource+0xa6>
 80051f4:	2b70      	cmp	r3, #112	; 0x70
 80051f6:	d87b      	bhi.n	80052f0 <HAL_TIM_ConfigClockSource+0x16c>
 80051f8:	2b60      	cmp	r3, #96	; 0x60
 80051fa:	d050      	beq.n	800529e <HAL_TIM_ConfigClockSource+0x11a>
 80051fc:	2b60      	cmp	r3, #96	; 0x60
 80051fe:	d877      	bhi.n	80052f0 <HAL_TIM_ConfigClockSource+0x16c>
 8005200:	2b50      	cmp	r3, #80	; 0x50
 8005202:	d03c      	beq.n	800527e <HAL_TIM_ConfigClockSource+0xfa>
 8005204:	2b50      	cmp	r3, #80	; 0x50
 8005206:	d873      	bhi.n	80052f0 <HAL_TIM_ConfigClockSource+0x16c>
 8005208:	2b40      	cmp	r3, #64	; 0x40
 800520a:	d058      	beq.n	80052be <HAL_TIM_ConfigClockSource+0x13a>
 800520c:	2b40      	cmp	r3, #64	; 0x40
 800520e:	d86f      	bhi.n	80052f0 <HAL_TIM_ConfigClockSource+0x16c>
 8005210:	2b30      	cmp	r3, #48	; 0x30
 8005212:	d064      	beq.n	80052de <HAL_TIM_ConfigClockSource+0x15a>
 8005214:	2b30      	cmp	r3, #48	; 0x30
 8005216:	d86b      	bhi.n	80052f0 <HAL_TIM_ConfigClockSource+0x16c>
 8005218:	2b20      	cmp	r3, #32
 800521a:	d060      	beq.n	80052de <HAL_TIM_ConfigClockSource+0x15a>
 800521c:	2b20      	cmp	r3, #32
 800521e:	d867      	bhi.n	80052f0 <HAL_TIM_ConfigClockSource+0x16c>
 8005220:	2b00      	cmp	r3, #0
 8005222:	d05c      	beq.n	80052de <HAL_TIM_ConfigClockSource+0x15a>
 8005224:	2b10      	cmp	r3, #16
 8005226:	d05a      	beq.n	80052de <HAL_TIM_ConfigClockSource+0x15a>
 8005228:	e062      	b.n	80052f0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6818      	ldr	r0, [r3, #0]
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	6899      	ldr	r1, [r3, #8]
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	685a      	ldr	r2, [r3, #4]
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	68db      	ldr	r3, [r3, #12]
 800523a:	f000 f9ad 	bl	8005598 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800524c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	68ba      	ldr	r2, [r7, #8]
 8005254:	609a      	str	r2, [r3, #8]
      break;
 8005256:	e04f      	b.n	80052f8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6818      	ldr	r0, [r3, #0]
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	6899      	ldr	r1, [r3, #8]
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	685a      	ldr	r2, [r3, #4]
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	f000 f996 	bl	8005598 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	689a      	ldr	r2, [r3, #8]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800527a:	609a      	str	r2, [r3, #8]
      break;
 800527c:	e03c      	b.n	80052f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6818      	ldr	r0, [r3, #0]
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	6859      	ldr	r1, [r3, #4]
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	68db      	ldr	r3, [r3, #12]
 800528a:	461a      	mov	r2, r3
 800528c:	f000 f90a 	bl	80054a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	2150      	movs	r1, #80	; 0x50
 8005296:	4618      	mov	r0, r3
 8005298:	f000 f963 	bl	8005562 <TIM_ITRx_SetConfig>
      break;
 800529c:	e02c      	b.n	80052f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6818      	ldr	r0, [r3, #0]
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	6859      	ldr	r1, [r3, #4]
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	461a      	mov	r2, r3
 80052ac:	f000 f929 	bl	8005502 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	2160      	movs	r1, #96	; 0x60
 80052b6:	4618      	mov	r0, r3
 80052b8:	f000 f953 	bl	8005562 <TIM_ITRx_SetConfig>
      break;
 80052bc:	e01c      	b.n	80052f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6818      	ldr	r0, [r3, #0]
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	6859      	ldr	r1, [r3, #4]
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	461a      	mov	r2, r3
 80052cc:	f000 f8ea 	bl	80054a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	2140      	movs	r1, #64	; 0x40
 80052d6:	4618      	mov	r0, r3
 80052d8:	f000 f943 	bl	8005562 <TIM_ITRx_SetConfig>
      break;
 80052dc:	e00c      	b.n	80052f8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4619      	mov	r1, r3
 80052e8:	4610      	mov	r0, r2
 80052ea:	f000 f93a 	bl	8005562 <TIM_ITRx_SetConfig>
      break;
 80052ee:	e003      	b.n	80052f8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	73fb      	strb	r3, [r7, #15]
      break;
 80052f4:	e000      	b.n	80052f8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80052f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2201      	movs	r2, #1
 80052fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2200      	movs	r2, #0
 8005304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005308:	7bfb      	ldrb	r3, [r7, #15]
}
 800530a:	4618      	mov	r0, r3
 800530c:	3710      	adds	r7, #16
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}

08005312 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005312:	b480      	push	{r7}
 8005314:	b083      	sub	sp, #12
 8005316:	af00      	add	r7, sp, #0
 8005318:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800531a:	bf00      	nop
 800531c:	370c      	adds	r7, #12
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr

08005326 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005326:	b480      	push	{r7}
 8005328:	b083      	sub	sp, #12
 800532a:	af00      	add	r7, sp, #0
 800532c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800532e:	bf00      	nop
 8005330:	370c      	adds	r7, #12
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr

0800533a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800533a:	b480      	push	{r7}
 800533c:	b083      	sub	sp, #12
 800533e:	af00      	add	r7, sp, #0
 8005340:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005342:	bf00      	nop
 8005344:	370c      	adds	r7, #12
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr

0800534e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800534e:	b480      	push	{r7}
 8005350:	b083      	sub	sp, #12
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005356:	bf00      	nop
 8005358:	370c      	adds	r7, #12
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr
	...

08005364 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005364:	b480      	push	{r7}
 8005366:	b085      	sub	sp, #20
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	4a40      	ldr	r2, [pc, #256]	; (8005478 <TIM_Base_SetConfig+0x114>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d013      	beq.n	80053a4 <TIM_Base_SetConfig+0x40>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005382:	d00f      	beq.n	80053a4 <TIM_Base_SetConfig+0x40>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	4a3d      	ldr	r2, [pc, #244]	; (800547c <TIM_Base_SetConfig+0x118>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d00b      	beq.n	80053a4 <TIM_Base_SetConfig+0x40>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	4a3c      	ldr	r2, [pc, #240]	; (8005480 <TIM_Base_SetConfig+0x11c>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d007      	beq.n	80053a4 <TIM_Base_SetConfig+0x40>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4a3b      	ldr	r2, [pc, #236]	; (8005484 <TIM_Base_SetConfig+0x120>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d003      	beq.n	80053a4 <TIM_Base_SetConfig+0x40>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4a3a      	ldr	r2, [pc, #232]	; (8005488 <TIM_Base_SetConfig+0x124>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d108      	bne.n	80053b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	68fa      	ldr	r2, [r7, #12]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4a2f      	ldr	r2, [pc, #188]	; (8005478 <TIM_Base_SetConfig+0x114>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d02b      	beq.n	8005416 <TIM_Base_SetConfig+0xb2>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053c4:	d027      	beq.n	8005416 <TIM_Base_SetConfig+0xb2>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4a2c      	ldr	r2, [pc, #176]	; (800547c <TIM_Base_SetConfig+0x118>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d023      	beq.n	8005416 <TIM_Base_SetConfig+0xb2>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a2b      	ldr	r2, [pc, #172]	; (8005480 <TIM_Base_SetConfig+0x11c>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d01f      	beq.n	8005416 <TIM_Base_SetConfig+0xb2>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4a2a      	ldr	r2, [pc, #168]	; (8005484 <TIM_Base_SetConfig+0x120>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d01b      	beq.n	8005416 <TIM_Base_SetConfig+0xb2>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4a29      	ldr	r2, [pc, #164]	; (8005488 <TIM_Base_SetConfig+0x124>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d017      	beq.n	8005416 <TIM_Base_SetConfig+0xb2>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	4a28      	ldr	r2, [pc, #160]	; (800548c <TIM_Base_SetConfig+0x128>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d013      	beq.n	8005416 <TIM_Base_SetConfig+0xb2>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4a27      	ldr	r2, [pc, #156]	; (8005490 <TIM_Base_SetConfig+0x12c>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d00f      	beq.n	8005416 <TIM_Base_SetConfig+0xb2>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4a26      	ldr	r2, [pc, #152]	; (8005494 <TIM_Base_SetConfig+0x130>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d00b      	beq.n	8005416 <TIM_Base_SetConfig+0xb2>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	4a25      	ldr	r2, [pc, #148]	; (8005498 <TIM_Base_SetConfig+0x134>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d007      	beq.n	8005416 <TIM_Base_SetConfig+0xb2>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	4a24      	ldr	r2, [pc, #144]	; (800549c <TIM_Base_SetConfig+0x138>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d003      	beq.n	8005416 <TIM_Base_SetConfig+0xb2>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	4a23      	ldr	r2, [pc, #140]	; (80054a0 <TIM_Base_SetConfig+0x13c>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d108      	bne.n	8005428 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800541c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	68fa      	ldr	r2, [r7, #12]
 8005424:	4313      	orrs	r3, r2
 8005426:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	695b      	ldr	r3, [r3, #20]
 8005432:	4313      	orrs	r3, r2
 8005434:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	68fa      	ldr	r2, [r7, #12]
 800543a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	689a      	ldr	r2, [r3, #8]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	4a0a      	ldr	r2, [pc, #40]	; (8005478 <TIM_Base_SetConfig+0x114>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d003      	beq.n	800545c <TIM_Base_SetConfig+0xf8>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	4a0c      	ldr	r2, [pc, #48]	; (8005488 <TIM_Base_SetConfig+0x124>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d103      	bne.n	8005464 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	691a      	ldr	r2, [r3, #16]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2201      	movs	r2, #1
 8005468:	615a      	str	r2, [r3, #20]
}
 800546a:	bf00      	nop
 800546c:	3714      	adds	r7, #20
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr
 8005476:	bf00      	nop
 8005478:	40010000 	.word	0x40010000
 800547c:	40000400 	.word	0x40000400
 8005480:	40000800 	.word	0x40000800
 8005484:	40000c00 	.word	0x40000c00
 8005488:	40010400 	.word	0x40010400
 800548c:	40014000 	.word	0x40014000
 8005490:	40014400 	.word	0x40014400
 8005494:	40014800 	.word	0x40014800
 8005498:	40001800 	.word	0x40001800
 800549c:	40001c00 	.word	0x40001c00
 80054a0:	40002000 	.word	0x40002000

080054a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b087      	sub	sp, #28
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	60f8      	str	r0, [r7, #12]
 80054ac:	60b9      	str	r1, [r7, #8]
 80054ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	6a1b      	ldr	r3, [r3, #32]
 80054b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	6a1b      	ldr	r3, [r3, #32]
 80054ba:	f023 0201 	bic.w	r2, r3, #1
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	699b      	ldr	r3, [r3, #24]
 80054c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	011b      	lsls	r3, r3, #4
 80054d4:	693a      	ldr	r2, [r7, #16]
 80054d6:	4313      	orrs	r3, r2
 80054d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	f023 030a 	bic.w	r3, r3, #10
 80054e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80054e2:	697a      	ldr	r2, [r7, #20]
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	4313      	orrs	r3, r2
 80054e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	693a      	ldr	r2, [r7, #16]
 80054ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	697a      	ldr	r2, [r7, #20]
 80054f4:	621a      	str	r2, [r3, #32]
}
 80054f6:	bf00      	nop
 80054f8:	371c      	adds	r7, #28
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr

08005502 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005502:	b480      	push	{r7}
 8005504:	b087      	sub	sp, #28
 8005506:	af00      	add	r7, sp, #0
 8005508:	60f8      	str	r0, [r7, #12]
 800550a:	60b9      	str	r1, [r7, #8]
 800550c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	6a1b      	ldr	r3, [r3, #32]
 8005512:	f023 0210 	bic.w	r2, r3, #16
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	699b      	ldr	r3, [r3, #24]
 800551e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	6a1b      	ldr	r3, [r3, #32]
 8005524:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800552c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	031b      	lsls	r3, r3, #12
 8005532:	697a      	ldr	r2, [r7, #20]
 8005534:	4313      	orrs	r3, r2
 8005536:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800553e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	011b      	lsls	r3, r3, #4
 8005544:	693a      	ldr	r2, [r7, #16]
 8005546:	4313      	orrs	r3, r2
 8005548:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	697a      	ldr	r2, [r7, #20]
 800554e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	693a      	ldr	r2, [r7, #16]
 8005554:	621a      	str	r2, [r3, #32]
}
 8005556:	bf00      	nop
 8005558:	371c      	adds	r7, #28
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr

08005562 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005562:	b480      	push	{r7}
 8005564:	b085      	sub	sp, #20
 8005566:	af00      	add	r7, sp, #0
 8005568:	6078      	str	r0, [r7, #4]
 800556a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005578:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800557a:	683a      	ldr	r2, [r7, #0]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	4313      	orrs	r3, r2
 8005580:	f043 0307 	orr.w	r3, r3, #7
 8005584:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	68fa      	ldr	r2, [r7, #12]
 800558a:	609a      	str	r2, [r3, #8]
}
 800558c:	bf00      	nop
 800558e:	3714      	adds	r7, #20
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr

08005598 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005598:	b480      	push	{r7}
 800559a:	b087      	sub	sp, #28
 800559c:	af00      	add	r7, sp, #0
 800559e:	60f8      	str	r0, [r7, #12]
 80055a0:	60b9      	str	r1, [r7, #8]
 80055a2:	607a      	str	r2, [r7, #4]
 80055a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	021a      	lsls	r2, r3, #8
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	431a      	orrs	r2, r3
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	4313      	orrs	r3, r2
 80055c0:	697a      	ldr	r2, [r7, #20]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	697a      	ldr	r2, [r7, #20]
 80055ca:	609a      	str	r2, [r3, #8]
}
 80055cc:	bf00      	nop
 80055ce:	371c      	adds	r7, #28
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr

080055d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80055d8:	b480      	push	{r7}
 80055da:	b085      	sub	sp, #20
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d101      	bne.n	80055f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80055ec:	2302      	movs	r3, #2
 80055ee:	e05a      	b.n	80056a6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2201      	movs	r2, #1
 80055f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2202      	movs	r2, #2
 80055fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005616:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	68fa      	ldr	r2, [r7, #12]
 800561e:	4313      	orrs	r3, r2
 8005620:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	68fa      	ldr	r2, [r7, #12]
 8005628:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a21      	ldr	r2, [pc, #132]	; (80056b4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d022      	beq.n	800567a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800563c:	d01d      	beq.n	800567a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a1d      	ldr	r2, [pc, #116]	; (80056b8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d018      	beq.n	800567a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a1b      	ldr	r2, [pc, #108]	; (80056bc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d013      	beq.n	800567a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a1a      	ldr	r2, [pc, #104]	; (80056c0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d00e      	beq.n	800567a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a18      	ldr	r2, [pc, #96]	; (80056c4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d009      	beq.n	800567a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a17      	ldr	r2, [pc, #92]	; (80056c8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d004      	beq.n	800567a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a15      	ldr	r2, [pc, #84]	; (80056cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d10c      	bne.n	8005694 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005680:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	68ba      	ldr	r2, [r7, #8]
 8005688:	4313      	orrs	r3, r2
 800568a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	68ba      	ldr	r2, [r7, #8]
 8005692:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056a4:	2300      	movs	r3, #0
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3714      	adds	r7, #20
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr
 80056b2:	bf00      	nop
 80056b4:	40010000 	.word	0x40010000
 80056b8:	40000400 	.word	0x40000400
 80056bc:	40000800 	.word	0x40000800
 80056c0:	40000c00 	.word	0x40000c00
 80056c4:	40010400 	.word	0x40010400
 80056c8:	40014000 	.word	0x40014000
 80056cc:	40001800 	.word	0x40001800

080056d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b083      	sub	sp, #12
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80056d8:	bf00      	nop
 80056da:	370c      	adds	r7, #12
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr

080056e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b083      	sub	sp, #12
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80056ec:	bf00      	nop
 80056ee:	370c      	adds	r7, #12
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr

080056f8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80056f8:	b084      	sub	sp, #16
 80056fa:	b580      	push	{r7, lr}
 80056fc:	b084      	sub	sp, #16
 80056fe:	af00      	add	r7, sp, #0
 8005700:	6078      	str	r0, [r7, #4]
 8005702:	f107 001c 	add.w	r0, r7, #28
 8005706:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800570a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800570c:	2b01      	cmp	r3, #1
 800570e:	d122      	bne.n	8005756 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005714:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005724:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	68db      	ldr	r3, [r3, #12]
 8005730:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005738:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800573a:	2b01      	cmp	r3, #1
 800573c:	d105      	bne.n	800574a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	68db      	ldr	r3, [r3, #12]
 8005742:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f001 fbee 	bl	8006f2c <USB_CoreReset>
 8005750:	4603      	mov	r3, r0
 8005752:	73fb      	strb	r3, [r7, #15]
 8005754:	e01a      	b.n	800578c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f001 fbe2 	bl	8006f2c <USB_CoreReset>
 8005768:	4603      	mov	r3, r0
 800576a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800576c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800576e:	2b00      	cmp	r3, #0
 8005770:	d106      	bne.n	8005780 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005776:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	639a      	str	r2, [r3, #56]	; 0x38
 800577e:	e005      	b.n	800578c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005784:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800578c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800578e:	2b01      	cmp	r3, #1
 8005790:	d10b      	bne.n	80057aa <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	f043 0206 	orr.w	r2, r3, #6
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	f043 0220 	orr.w	r2, r3, #32
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80057aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	3710      	adds	r7, #16
 80057b0:	46bd      	mov	sp, r7
 80057b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80057b6:	b004      	add	sp, #16
 80057b8:	4770      	bx	lr
	...

080057bc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80057bc:	b480      	push	{r7}
 80057be:	b087      	sub	sp, #28
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	60f8      	str	r0, [r7, #12]
 80057c4:	60b9      	str	r1, [r7, #8]
 80057c6:	4613      	mov	r3, r2
 80057c8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80057ca:	79fb      	ldrb	r3, [r7, #7]
 80057cc:	2b02      	cmp	r3, #2
 80057ce:	d165      	bne.n	800589c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	4a41      	ldr	r2, [pc, #260]	; (80058d8 <USB_SetTurnaroundTime+0x11c>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d906      	bls.n	80057e6 <USB_SetTurnaroundTime+0x2a>
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	4a40      	ldr	r2, [pc, #256]	; (80058dc <USB_SetTurnaroundTime+0x120>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d202      	bcs.n	80057e6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80057e0:	230f      	movs	r3, #15
 80057e2:	617b      	str	r3, [r7, #20]
 80057e4:	e062      	b.n	80058ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	4a3c      	ldr	r2, [pc, #240]	; (80058dc <USB_SetTurnaroundTime+0x120>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d306      	bcc.n	80057fc <USB_SetTurnaroundTime+0x40>
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	4a3b      	ldr	r2, [pc, #236]	; (80058e0 <USB_SetTurnaroundTime+0x124>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d202      	bcs.n	80057fc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80057f6:	230e      	movs	r3, #14
 80057f8:	617b      	str	r3, [r7, #20]
 80057fa:	e057      	b.n	80058ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	4a38      	ldr	r2, [pc, #224]	; (80058e0 <USB_SetTurnaroundTime+0x124>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d306      	bcc.n	8005812 <USB_SetTurnaroundTime+0x56>
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	4a37      	ldr	r2, [pc, #220]	; (80058e4 <USB_SetTurnaroundTime+0x128>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d202      	bcs.n	8005812 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800580c:	230d      	movs	r3, #13
 800580e:	617b      	str	r3, [r7, #20]
 8005810:	e04c      	b.n	80058ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	4a33      	ldr	r2, [pc, #204]	; (80058e4 <USB_SetTurnaroundTime+0x128>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d306      	bcc.n	8005828 <USB_SetTurnaroundTime+0x6c>
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	4a32      	ldr	r2, [pc, #200]	; (80058e8 <USB_SetTurnaroundTime+0x12c>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d802      	bhi.n	8005828 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005822:	230c      	movs	r3, #12
 8005824:	617b      	str	r3, [r7, #20]
 8005826:	e041      	b.n	80058ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	4a2f      	ldr	r2, [pc, #188]	; (80058e8 <USB_SetTurnaroundTime+0x12c>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d906      	bls.n	800583e <USB_SetTurnaroundTime+0x82>
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	4a2e      	ldr	r2, [pc, #184]	; (80058ec <USB_SetTurnaroundTime+0x130>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d802      	bhi.n	800583e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005838:	230b      	movs	r3, #11
 800583a:	617b      	str	r3, [r7, #20]
 800583c:	e036      	b.n	80058ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	4a2a      	ldr	r2, [pc, #168]	; (80058ec <USB_SetTurnaroundTime+0x130>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d906      	bls.n	8005854 <USB_SetTurnaroundTime+0x98>
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	4a29      	ldr	r2, [pc, #164]	; (80058f0 <USB_SetTurnaroundTime+0x134>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d802      	bhi.n	8005854 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800584e:	230a      	movs	r3, #10
 8005850:	617b      	str	r3, [r7, #20]
 8005852:	e02b      	b.n	80058ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	4a26      	ldr	r2, [pc, #152]	; (80058f0 <USB_SetTurnaroundTime+0x134>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d906      	bls.n	800586a <USB_SetTurnaroundTime+0xae>
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	4a25      	ldr	r2, [pc, #148]	; (80058f4 <USB_SetTurnaroundTime+0x138>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d202      	bcs.n	800586a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005864:	2309      	movs	r3, #9
 8005866:	617b      	str	r3, [r7, #20]
 8005868:	e020      	b.n	80058ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	4a21      	ldr	r2, [pc, #132]	; (80058f4 <USB_SetTurnaroundTime+0x138>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d306      	bcc.n	8005880 <USB_SetTurnaroundTime+0xc4>
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	4a20      	ldr	r2, [pc, #128]	; (80058f8 <USB_SetTurnaroundTime+0x13c>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d802      	bhi.n	8005880 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800587a:	2308      	movs	r3, #8
 800587c:	617b      	str	r3, [r7, #20]
 800587e:	e015      	b.n	80058ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	4a1d      	ldr	r2, [pc, #116]	; (80058f8 <USB_SetTurnaroundTime+0x13c>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d906      	bls.n	8005896 <USB_SetTurnaroundTime+0xda>
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	4a1c      	ldr	r2, [pc, #112]	; (80058fc <USB_SetTurnaroundTime+0x140>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d202      	bcs.n	8005896 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005890:	2307      	movs	r3, #7
 8005892:	617b      	str	r3, [r7, #20]
 8005894:	e00a      	b.n	80058ac <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005896:	2306      	movs	r3, #6
 8005898:	617b      	str	r3, [r7, #20]
 800589a:	e007      	b.n	80058ac <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800589c:	79fb      	ldrb	r3, [r7, #7]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d102      	bne.n	80058a8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80058a2:	2309      	movs	r3, #9
 80058a4:	617b      	str	r3, [r7, #20]
 80058a6:	e001      	b.n	80058ac <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80058a8:	2309      	movs	r3, #9
 80058aa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	68da      	ldr	r2, [r3, #12]
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	029b      	lsls	r3, r3, #10
 80058c0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80058c4:	431a      	orrs	r2, r3
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80058ca:	2300      	movs	r3, #0
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	371c      	adds	r7, #28
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr
 80058d8:	00d8acbf 	.word	0x00d8acbf
 80058dc:	00e4e1c0 	.word	0x00e4e1c0
 80058e0:	00f42400 	.word	0x00f42400
 80058e4:	01067380 	.word	0x01067380
 80058e8:	011a499f 	.word	0x011a499f
 80058ec:	01312cff 	.word	0x01312cff
 80058f0:	014ca43f 	.word	0x014ca43f
 80058f4:	016e3600 	.word	0x016e3600
 80058f8:	01a6ab1f 	.word	0x01a6ab1f
 80058fc:	01e84800 	.word	0x01e84800

08005900 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005900:	b480      	push	{r7}
 8005902:	b083      	sub	sp, #12
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	f043 0201 	orr.w	r2, r3, #1
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005914:	2300      	movs	r3, #0
}
 8005916:	4618      	mov	r0, r3
 8005918:	370c      	adds	r7, #12
 800591a:	46bd      	mov	sp, r7
 800591c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005920:	4770      	bx	lr

08005922 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005922:	b480      	push	{r7}
 8005924:	b083      	sub	sp, #12
 8005926:	af00      	add	r7, sp, #0
 8005928:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	f023 0201 	bic.w	r2, r3, #1
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005936:	2300      	movs	r3, #0
}
 8005938:	4618      	mov	r0, r3
 800593a:	370c      	adds	r7, #12
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr

08005944 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b084      	sub	sp, #16
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	460b      	mov	r3, r1
 800594e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005950:	2300      	movs	r3, #0
 8005952:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005960:	78fb      	ldrb	r3, [r7, #3]
 8005962:	2b01      	cmp	r3, #1
 8005964:	d115      	bne.n	8005992 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	68db      	ldr	r3, [r3, #12]
 800596a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005972:	2001      	movs	r0, #1
 8005974:	f7fb fb00 	bl	8000f78 <HAL_Delay>
      ms++;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	3301      	adds	r3, #1
 800597c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f001 fa45 	bl	8006e0e <USB_GetMode>
 8005984:	4603      	mov	r3, r0
 8005986:	2b01      	cmp	r3, #1
 8005988:	d01e      	beq.n	80059c8 <USB_SetCurrentMode+0x84>
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2b31      	cmp	r3, #49	; 0x31
 800598e:	d9f0      	bls.n	8005972 <USB_SetCurrentMode+0x2e>
 8005990:	e01a      	b.n	80059c8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005992:	78fb      	ldrb	r3, [r7, #3]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d115      	bne.n	80059c4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	68db      	ldr	r3, [r3, #12]
 800599c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80059a4:	2001      	movs	r0, #1
 80059a6:	f7fb fae7 	bl	8000f78 <HAL_Delay>
      ms++;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	3301      	adds	r3, #1
 80059ae:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f001 fa2c 	bl	8006e0e <USB_GetMode>
 80059b6:	4603      	mov	r3, r0
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d005      	beq.n	80059c8 <USB_SetCurrentMode+0x84>
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2b31      	cmp	r3, #49	; 0x31
 80059c0:	d9f0      	bls.n	80059a4 <USB_SetCurrentMode+0x60>
 80059c2:	e001      	b.n	80059c8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	e005      	b.n	80059d4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2b32      	cmp	r3, #50	; 0x32
 80059cc:	d101      	bne.n	80059d2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	e000      	b.n	80059d4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80059d2:	2300      	movs	r3, #0
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3710      	adds	r7, #16
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}

080059dc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80059dc:	b084      	sub	sp, #16
 80059de:	b580      	push	{r7, lr}
 80059e0:	b086      	sub	sp, #24
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	6078      	str	r0, [r7, #4]
 80059e6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80059ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80059ee:	2300      	movs	r3, #0
 80059f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80059f6:	2300      	movs	r3, #0
 80059f8:	613b      	str	r3, [r7, #16]
 80059fa:	e009      	b.n	8005a10 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80059fc:	687a      	ldr	r2, [r7, #4]
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	3340      	adds	r3, #64	; 0x40
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	4413      	add	r3, r2
 8005a06:	2200      	movs	r2, #0
 8005a08:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	3301      	adds	r3, #1
 8005a0e:	613b      	str	r3, [r7, #16]
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	2b0e      	cmp	r3, #14
 8005a14:	d9f2      	bls.n	80059fc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005a16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d11c      	bne.n	8005a56 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	68fa      	ldr	r2, [r7, #12]
 8005a26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a2a:	f043 0302 	orr.w	r3, r3, #2
 8005a2e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a34:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a40:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a4c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	639a      	str	r2, [r3, #56]	; 0x38
 8005a54:	e00b      	b.n	8005a6e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a5a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a66:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005a74:	461a      	mov	r2, r3
 8005a76:	2300      	movs	r3, #0
 8005a78:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a80:	4619      	mov	r1, r3
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a88:	461a      	mov	r2, r3
 8005a8a:	680b      	ldr	r3, [r1, #0]
 8005a8c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d10c      	bne.n	8005aae <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d104      	bne.n	8005aa4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005a9a:	2100      	movs	r1, #0
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f000 f965 	bl	8005d6c <USB_SetDevSpeed>
 8005aa2:	e008      	b.n	8005ab6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005aa4:	2101      	movs	r1, #1
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f000 f960 	bl	8005d6c <USB_SetDevSpeed>
 8005aac:	e003      	b.n	8005ab6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005aae:	2103      	movs	r1, #3
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f000 f95b 	bl	8005d6c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005ab6:	2110      	movs	r1, #16
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f000 f8f3 	bl	8005ca4 <USB_FlushTxFifo>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d001      	beq.n	8005ac8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f000 f91f 	bl	8005d0c <USB_FlushRxFifo>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d001      	beq.n	8005ad8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ade:	461a      	mov	r2, r3
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aea:	461a      	mov	r2, r3
 8005aec:	2300      	movs	r3, #0
 8005aee:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005af6:	461a      	mov	r2, r3
 8005af8:	2300      	movs	r3, #0
 8005afa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005afc:	2300      	movs	r3, #0
 8005afe:	613b      	str	r3, [r7, #16]
 8005b00:	e043      	b.n	8005b8a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	015a      	lsls	r2, r3, #5
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	4413      	add	r3, r2
 8005b0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b18:	d118      	bne.n	8005b4c <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d10a      	bne.n	8005b36 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	015a      	lsls	r2, r3, #5
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	4413      	add	r3, r2
 8005b28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005b32:	6013      	str	r3, [r2, #0]
 8005b34:	e013      	b.n	8005b5e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	015a      	lsls	r2, r3, #5
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	4413      	add	r3, r2
 8005b3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b42:	461a      	mov	r2, r3
 8005b44:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005b48:	6013      	str	r3, [r2, #0]
 8005b4a:	e008      	b.n	8005b5e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	015a      	lsls	r2, r3, #5
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	4413      	add	r3, r2
 8005b54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b58:	461a      	mov	r2, r3
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	015a      	lsls	r2, r3, #5
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	4413      	add	r3, r2
 8005b66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	015a      	lsls	r2, r3, #5
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	4413      	add	r3, r2
 8005b78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b7c:	461a      	mov	r2, r3
 8005b7e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005b82:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	3301      	adds	r3, #1
 8005b88:	613b      	str	r3, [r7, #16]
 8005b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8c:	693a      	ldr	r2, [r7, #16]
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	d3b7      	bcc.n	8005b02 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b92:	2300      	movs	r3, #0
 8005b94:	613b      	str	r3, [r7, #16]
 8005b96:	e043      	b.n	8005c20 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	015a      	lsls	r2, r3, #5
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	4413      	add	r3, r2
 8005ba0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005baa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005bae:	d118      	bne.n	8005be2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d10a      	bne.n	8005bcc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	015a      	lsls	r2, r3, #5
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	4413      	add	r3, r2
 8005bbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005bc8:	6013      	str	r3, [r2, #0]
 8005bca:	e013      	b.n	8005bf4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	015a      	lsls	r2, r3, #5
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	4413      	add	r3, r2
 8005bd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bd8:	461a      	mov	r2, r3
 8005bda:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005bde:	6013      	str	r3, [r2, #0]
 8005be0:	e008      	b.n	8005bf4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	015a      	lsls	r2, r3, #5
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	4413      	add	r3, r2
 8005bea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bee:	461a      	mov	r2, r3
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	015a      	lsls	r2, r3, #5
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	4413      	add	r3, r2
 8005bfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c00:	461a      	mov	r2, r3
 8005c02:	2300      	movs	r3, #0
 8005c04:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	015a      	lsls	r2, r3, #5
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	4413      	add	r3, r2
 8005c0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c12:	461a      	mov	r2, r3
 8005c14:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005c18:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	3301      	adds	r3, #1
 8005c1e:	613b      	str	r3, [r7, #16]
 8005c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c22:	693a      	ldr	r2, [r7, #16]
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d3b7      	bcc.n	8005b98 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c2e:	691b      	ldr	r3, [r3, #16]
 8005c30:	68fa      	ldr	r2, [r7, #12]
 8005c32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c36:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c3a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005c48:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d105      	bne.n	8005c5c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	699b      	ldr	r3, [r3, #24]
 8005c54:	f043 0210 	orr.w	r2, r3, #16
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	699a      	ldr	r2, [r3, #24]
 8005c60:	4b0f      	ldr	r3, [pc, #60]	; (8005ca0 <USB_DevInit+0x2c4>)
 8005c62:	4313      	orrs	r3, r2
 8005c64:	687a      	ldr	r2, [r7, #4]
 8005c66:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005c68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d005      	beq.n	8005c7a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	699b      	ldr	r3, [r3, #24]
 8005c72:	f043 0208 	orr.w	r2, r3, #8
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005c7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d107      	bne.n	8005c90 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	699b      	ldr	r3, [r3, #24]
 8005c84:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c88:	f043 0304 	orr.w	r3, r3, #4
 8005c8c:	687a      	ldr	r2, [r7, #4]
 8005c8e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005c90:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3718      	adds	r7, #24
 8005c96:	46bd      	mov	sp, r7
 8005c98:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c9c:	b004      	add	sp, #16
 8005c9e:	4770      	bx	lr
 8005ca0:	803c3800 	.word	0x803c3800

08005ca4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b085      	sub	sp, #20
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	3301      	adds	r3, #1
 8005cb6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	4a13      	ldr	r2, [pc, #76]	; (8005d08 <USB_FlushTxFifo+0x64>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d901      	bls.n	8005cc4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005cc0:	2303      	movs	r3, #3
 8005cc2:	e01b      	b.n	8005cfc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	691b      	ldr	r3, [r3, #16]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	daf2      	bge.n	8005cb2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	019b      	lsls	r3, r3, #6
 8005cd4:	f043 0220 	orr.w	r2, r3, #32
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	3301      	adds	r3, #1
 8005ce0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	4a08      	ldr	r2, [pc, #32]	; (8005d08 <USB_FlushTxFifo+0x64>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d901      	bls.n	8005cee <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005cea:	2303      	movs	r3, #3
 8005cec:	e006      	b.n	8005cfc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	691b      	ldr	r3, [r3, #16]
 8005cf2:	f003 0320 	and.w	r3, r3, #32
 8005cf6:	2b20      	cmp	r3, #32
 8005cf8:	d0f0      	beq.n	8005cdc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005cfa:	2300      	movs	r3, #0
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3714      	adds	r7, #20
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr
 8005d08:	00030d40 	.word	0x00030d40

08005d0c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b085      	sub	sp, #20
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005d14:	2300      	movs	r3, #0
 8005d16:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	3301      	adds	r3, #1
 8005d1c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	4a11      	ldr	r2, [pc, #68]	; (8005d68 <USB_FlushRxFifo+0x5c>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d901      	bls.n	8005d2a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005d26:	2303      	movs	r3, #3
 8005d28:	e018      	b.n	8005d5c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	691b      	ldr	r3, [r3, #16]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	daf2      	bge.n	8005d18 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005d32:	2300      	movs	r3, #0
 8005d34:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2210      	movs	r2, #16
 8005d3a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	3301      	adds	r3, #1
 8005d40:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	4a08      	ldr	r2, [pc, #32]	; (8005d68 <USB_FlushRxFifo+0x5c>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d901      	bls.n	8005d4e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005d4a:	2303      	movs	r3, #3
 8005d4c:	e006      	b.n	8005d5c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	691b      	ldr	r3, [r3, #16]
 8005d52:	f003 0310 	and.w	r3, r3, #16
 8005d56:	2b10      	cmp	r3, #16
 8005d58:	d0f0      	beq.n	8005d3c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005d5a:	2300      	movs	r3, #0
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3714      	adds	r7, #20
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr
 8005d68:	00030d40 	.word	0x00030d40

08005d6c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b085      	sub	sp, #20
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
 8005d74:	460b      	mov	r3, r1
 8005d76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d82:	681a      	ldr	r2, [r3, #0]
 8005d84:	78fb      	ldrb	r3, [r7, #3]
 8005d86:	68f9      	ldr	r1, [r7, #12]
 8005d88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005d90:	2300      	movs	r3, #0
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3714      	adds	r7, #20
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr

08005d9e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005d9e:	b480      	push	{r7}
 8005da0:	b087      	sub	sp, #28
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	f003 0306 	and.w	r3, r3, #6
 8005db6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d102      	bne.n	8005dc4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	75fb      	strb	r3, [r7, #23]
 8005dc2:	e00a      	b.n	8005dda <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2b02      	cmp	r3, #2
 8005dc8:	d002      	beq.n	8005dd0 <USB_GetDevSpeed+0x32>
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2b06      	cmp	r3, #6
 8005dce:	d102      	bne.n	8005dd6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005dd0:	2302      	movs	r3, #2
 8005dd2:	75fb      	strb	r3, [r7, #23]
 8005dd4:	e001      	b.n	8005dda <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005dd6:	230f      	movs	r3, #15
 8005dd8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005dda:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	371c      	adds	r7, #28
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr

08005de8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b085      	sub	sp, #20
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	781b      	ldrb	r3, [r3, #0]
 8005dfa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	785b      	ldrb	r3, [r3, #1]
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d13a      	bne.n	8005e7a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e0a:	69da      	ldr	r2, [r3, #28]
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	f003 030f 	and.w	r3, r3, #15
 8005e14:	2101      	movs	r1, #1
 8005e16:	fa01 f303 	lsl.w	r3, r1, r3
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	68f9      	ldr	r1, [r7, #12]
 8005e1e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e22:	4313      	orrs	r3, r2
 8005e24:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	015a      	lsls	r2, r3, #5
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	4413      	add	r3, r2
 8005e2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d155      	bne.n	8005ee8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	015a      	lsls	r2, r3, #5
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	4413      	add	r3, r2
 8005e44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	68db      	ldr	r3, [r3, #12]
 8005e4e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	791b      	ldrb	r3, [r3, #4]
 8005e56:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005e58:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	059b      	lsls	r3, r3, #22
 8005e5e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005e60:	4313      	orrs	r3, r2
 8005e62:	68ba      	ldr	r2, [r7, #8]
 8005e64:	0151      	lsls	r1, r2, #5
 8005e66:	68fa      	ldr	r2, [r7, #12]
 8005e68:	440a      	add	r2, r1
 8005e6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e76:	6013      	str	r3, [r2, #0]
 8005e78:	e036      	b.n	8005ee8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e80:	69da      	ldr	r2, [r3, #28]
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	f003 030f 	and.w	r3, r3, #15
 8005e8a:	2101      	movs	r1, #1
 8005e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8005e90:	041b      	lsls	r3, r3, #16
 8005e92:	68f9      	ldr	r1, [r7, #12]
 8005e94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	015a      	lsls	r2, r3, #5
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	4413      	add	r3, r2
 8005ea4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d11a      	bne.n	8005ee8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	015a      	lsls	r2, r3, #5
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	4413      	add	r3, r2
 8005eba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	791b      	ldrb	r3, [r3, #4]
 8005ecc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005ece:	430b      	orrs	r3, r1
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	68ba      	ldr	r2, [r7, #8]
 8005ed4:	0151      	lsls	r1, r2, #5
 8005ed6:	68fa      	ldr	r2, [r7, #12]
 8005ed8:	440a      	add	r2, r1
 8005eda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ede:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ee2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ee6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005ee8:	2300      	movs	r3, #0
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3714      	adds	r7, #20
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef4:	4770      	bx	lr
	...

08005ef8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b085      	sub	sp, #20
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
 8005f00:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	781b      	ldrb	r3, [r3, #0]
 8005f0a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	785b      	ldrb	r3, [r3, #1]
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d161      	bne.n	8005fd8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	015a      	lsls	r2, r3, #5
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	4413      	add	r3, r2
 8005f1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f2a:	d11f      	bne.n	8005f6c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	015a      	lsls	r2, r3, #5
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	4413      	add	r3, r2
 8005f34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	68ba      	ldr	r2, [r7, #8]
 8005f3c:	0151      	lsls	r1, r2, #5
 8005f3e:	68fa      	ldr	r2, [r7, #12]
 8005f40:	440a      	add	r2, r1
 8005f42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f46:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005f4a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	015a      	lsls	r2, r3, #5
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	4413      	add	r3, r2
 8005f54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	68ba      	ldr	r2, [r7, #8]
 8005f5c:	0151      	lsls	r1, r2, #5
 8005f5e:	68fa      	ldr	r2, [r7, #12]
 8005f60:	440a      	add	r2, r1
 8005f62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f66:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f6a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	f003 030f 	and.w	r3, r3, #15
 8005f7c:	2101      	movs	r1, #1
 8005f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	43db      	mvns	r3, r3
 8005f86:	68f9      	ldr	r1, [r7, #12]
 8005f88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f8c:	4013      	ands	r3, r2
 8005f8e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f96:	69da      	ldr	r2, [r3, #28]
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	f003 030f 	and.w	r3, r3, #15
 8005fa0:	2101      	movs	r1, #1
 8005fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	43db      	mvns	r3, r3
 8005faa:	68f9      	ldr	r1, [r7, #12]
 8005fac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005fb0:	4013      	ands	r3, r2
 8005fb2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	015a      	lsls	r2, r3, #5
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	4413      	add	r3, r2
 8005fbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fc0:	681a      	ldr	r2, [r3, #0]
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	0159      	lsls	r1, r3, #5
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	440b      	add	r3, r1
 8005fca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fce:	4619      	mov	r1, r3
 8005fd0:	4b35      	ldr	r3, [pc, #212]	; (80060a8 <USB_DeactivateEndpoint+0x1b0>)
 8005fd2:	4013      	ands	r3, r2
 8005fd4:	600b      	str	r3, [r1, #0]
 8005fd6:	e060      	b.n	800609a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	015a      	lsls	r2, r3, #5
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	4413      	add	r3, r2
 8005fe0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005fea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005fee:	d11f      	bne.n	8006030 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	015a      	lsls	r2, r3, #5
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	4413      	add	r3, r2
 8005ff8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	68ba      	ldr	r2, [r7, #8]
 8006000:	0151      	lsls	r1, r2, #5
 8006002:	68fa      	ldr	r2, [r7, #12]
 8006004:	440a      	add	r2, r1
 8006006:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800600a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800600e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	015a      	lsls	r2, r3, #5
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	4413      	add	r3, r2
 8006018:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	68ba      	ldr	r2, [r7, #8]
 8006020:	0151      	lsls	r1, r2, #5
 8006022:	68fa      	ldr	r2, [r7, #12]
 8006024:	440a      	add	r2, r1
 8006026:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800602a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800602e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006036:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	781b      	ldrb	r3, [r3, #0]
 800603c:	f003 030f 	and.w	r3, r3, #15
 8006040:	2101      	movs	r1, #1
 8006042:	fa01 f303 	lsl.w	r3, r1, r3
 8006046:	041b      	lsls	r3, r3, #16
 8006048:	43db      	mvns	r3, r3
 800604a:	68f9      	ldr	r1, [r7, #12]
 800604c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006050:	4013      	ands	r3, r2
 8006052:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800605a:	69da      	ldr	r2, [r3, #28]
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	781b      	ldrb	r3, [r3, #0]
 8006060:	f003 030f 	and.w	r3, r3, #15
 8006064:	2101      	movs	r1, #1
 8006066:	fa01 f303 	lsl.w	r3, r1, r3
 800606a:	041b      	lsls	r3, r3, #16
 800606c:	43db      	mvns	r3, r3
 800606e:	68f9      	ldr	r1, [r7, #12]
 8006070:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006074:	4013      	ands	r3, r2
 8006076:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	015a      	lsls	r2, r3, #5
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	4413      	add	r3, r2
 8006080:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	0159      	lsls	r1, r3, #5
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	440b      	add	r3, r1
 800608e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006092:	4619      	mov	r1, r3
 8006094:	4b05      	ldr	r3, [pc, #20]	; (80060ac <USB_DeactivateEndpoint+0x1b4>)
 8006096:	4013      	ands	r3, r2
 8006098:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800609a:	2300      	movs	r3, #0
}
 800609c:	4618      	mov	r0, r3
 800609e:	3714      	adds	r7, #20
 80060a0:	46bd      	mov	sp, r7
 80060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a6:	4770      	bx	lr
 80060a8:	ec337800 	.word	0xec337800
 80060ac:	eff37800 	.word	0xeff37800

080060b0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b08a      	sub	sp, #40	; 0x28
 80060b4:	af02      	add	r7, sp, #8
 80060b6:	60f8      	str	r0, [r7, #12]
 80060b8:	60b9      	str	r1, [r7, #8]
 80060ba:	4613      	mov	r3, r2
 80060bc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	781b      	ldrb	r3, [r3, #0]
 80060c6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	785b      	ldrb	r3, [r3, #1]
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	f040 815c 	bne.w	800638a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	699b      	ldr	r3, [r3, #24]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d132      	bne.n	8006140 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80060da:	69bb      	ldr	r3, [r7, #24]
 80060dc:	015a      	lsls	r2, r3, #5
 80060de:	69fb      	ldr	r3, [r7, #28]
 80060e0:	4413      	add	r3, r2
 80060e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060e6:	691b      	ldr	r3, [r3, #16]
 80060e8:	69ba      	ldr	r2, [r7, #24]
 80060ea:	0151      	lsls	r1, r2, #5
 80060ec:	69fa      	ldr	r2, [r7, #28]
 80060ee:	440a      	add	r2, r1
 80060f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060f4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80060f8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80060fc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80060fe:	69bb      	ldr	r3, [r7, #24]
 8006100:	015a      	lsls	r2, r3, #5
 8006102:	69fb      	ldr	r3, [r7, #28]
 8006104:	4413      	add	r3, r2
 8006106:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800610a:	691b      	ldr	r3, [r3, #16]
 800610c:	69ba      	ldr	r2, [r7, #24]
 800610e:	0151      	lsls	r1, r2, #5
 8006110:	69fa      	ldr	r2, [r7, #28]
 8006112:	440a      	add	r2, r1
 8006114:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006118:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800611c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800611e:	69bb      	ldr	r3, [r7, #24]
 8006120:	015a      	lsls	r2, r3, #5
 8006122:	69fb      	ldr	r3, [r7, #28]
 8006124:	4413      	add	r3, r2
 8006126:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800612a:	691b      	ldr	r3, [r3, #16]
 800612c:	69ba      	ldr	r2, [r7, #24]
 800612e:	0151      	lsls	r1, r2, #5
 8006130:	69fa      	ldr	r2, [r7, #28]
 8006132:	440a      	add	r2, r1
 8006134:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006138:	0cdb      	lsrs	r3, r3, #19
 800613a:	04db      	lsls	r3, r3, #19
 800613c:	6113      	str	r3, [r2, #16]
 800613e:	e074      	b.n	800622a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006140:	69bb      	ldr	r3, [r7, #24]
 8006142:	015a      	lsls	r2, r3, #5
 8006144:	69fb      	ldr	r3, [r7, #28]
 8006146:	4413      	add	r3, r2
 8006148:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800614c:	691b      	ldr	r3, [r3, #16]
 800614e:	69ba      	ldr	r2, [r7, #24]
 8006150:	0151      	lsls	r1, r2, #5
 8006152:	69fa      	ldr	r2, [r7, #28]
 8006154:	440a      	add	r2, r1
 8006156:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800615a:	0cdb      	lsrs	r3, r3, #19
 800615c:	04db      	lsls	r3, r3, #19
 800615e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006160:	69bb      	ldr	r3, [r7, #24]
 8006162:	015a      	lsls	r2, r3, #5
 8006164:	69fb      	ldr	r3, [r7, #28]
 8006166:	4413      	add	r3, r2
 8006168:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800616c:	691b      	ldr	r3, [r3, #16]
 800616e:	69ba      	ldr	r2, [r7, #24]
 8006170:	0151      	lsls	r1, r2, #5
 8006172:	69fa      	ldr	r2, [r7, #28]
 8006174:	440a      	add	r2, r1
 8006176:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800617a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800617e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006182:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006184:	69bb      	ldr	r3, [r7, #24]
 8006186:	015a      	lsls	r2, r3, #5
 8006188:	69fb      	ldr	r3, [r7, #28]
 800618a:	4413      	add	r3, r2
 800618c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006190:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	6999      	ldr	r1, [r3, #24]
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	68db      	ldr	r3, [r3, #12]
 800619a:	440b      	add	r3, r1
 800619c:	1e59      	subs	r1, r3, #1
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	68db      	ldr	r3, [r3, #12]
 80061a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80061a6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80061a8:	4b9d      	ldr	r3, [pc, #628]	; (8006420 <USB_EPStartXfer+0x370>)
 80061aa:	400b      	ands	r3, r1
 80061ac:	69b9      	ldr	r1, [r7, #24]
 80061ae:	0148      	lsls	r0, r1, #5
 80061b0:	69f9      	ldr	r1, [r7, #28]
 80061b2:	4401      	add	r1, r0
 80061b4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80061b8:	4313      	orrs	r3, r2
 80061ba:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80061bc:	69bb      	ldr	r3, [r7, #24]
 80061be:	015a      	lsls	r2, r3, #5
 80061c0:	69fb      	ldr	r3, [r7, #28]
 80061c2:	4413      	add	r3, r2
 80061c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061c8:	691a      	ldr	r2, [r3, #16]
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	699b      	ldr	r3, [r3, #24]
 80061ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061d2:	69b9      	ldr	r1, [r7, #24]
 80061d4:	0148      	lsls	r0, r1, #5
 80061d6:	69f9      	ldr	r1, [r7, #28]
 80061d8:	4401      	add	r1, r0
 80061da:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80061de:	4313      	orrs	r3, r2
 80061e0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	791b      	ldrb	r3, [r3, #4]
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	d11f      	bne.n	800622a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80061ea:	69bb      	ldr	r3, [r7, #24]
 80061ec:	015a      	lsls	r2, r3, #5
 80061ee:	69fb      	ldr	r3, [r7, #28]
 80061f0:	4413      	add	r3, r2
 80061f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061f6:	691b      	ldr	r3, [r3, #16]
 80061f8:	69ba      	ldr	r2, [r7, #24]
 80061fa:	0151      	lsls	r1, r2, #5
 80061fc:	69fa      	ldr	r2, [r7, #28]
 80061fe:	440a      	add	r2, r1
 8006200:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006204:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006208:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800620a:	69bb      	ldr	r3, [r7, #24]
 800620c:	015a      	lsls	r2, r3, #5
 800620e:	69fb      	ldr	r3, [r7, #28]
 8006210:	4413      	add	r3, r2
 8006212:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006216:	691b      	ldr	r3, [r3, #16]
 8006218:	69ba      	ldr	r2, [r7, #24]
 800621a:	0151      	lsls	r1, r2, #5
 800621c:	69fa      	ldr	r2, [r7, #28]
 800621e:	440a      	add	r2, r1
 8006220:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006224:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006228:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800622a:	79fb      	ldrb	r3, [r7, #7]
 800622c:	2b01      	cmp	r3, #1
 800622e:	d14b      	bne.n	80062c8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	695b      	ldr	r3, [r3, #20]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d009      	beq.n	800624c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006238:	69bb      	ldr	r3, [r7, #24]
 800623a:	015a      	lsls	r2, r3, #5
 800623c:	69fb      	ldr	r3, [r7, #28]
 800623e:	4413      	add	r3, r2
 8006240:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006244:	461a      	mov	r2, r3
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	695b      	ldr	r3, [r3, #20]
 800624a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	791b      	ldrb	r3, [r3, #4]
 8006250:	2b01      	cmp	r3, #1
 8006252:	d128      	bne.n	80062a6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006254:	69fb      	ldr	r3, [r7, #28]
 8006256:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006260:	2b00      	cmp	r3, #0
 8006262:	d110      	bne.n	8006286 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006264:	69bb      	ldr	r3, [r7, #24]
 8006266:	015a      	lsls	r2, r3, #5
 8006268:	69fb      	ldr	r3, [r7, #28]
 800626a:	4413      	add	r3, r2
 800626c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	69ba      	ldr	r2, [r7, #24]
 8006274:	0151      	lsls	r1, r2, #5
 8006276:	69fa      	ldr	r2, [r7, #28]
 8006278:	440a      	add	r2, r1
 800627a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800627e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006282:	6013      	str	r3, [r2, #0]
 8006284:	e00f      	b.n	80062a6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006286:	69bb      	ldr	r3, [r7, #24]
 8006288:	015a      	lsls	r2, r3, #5
 800628a:	69fb      	ldr	r3, [r7, #28]
 800628c:	4413      	add	r3, r2
 800628e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	69ba      	ldr	r2, [r7, #24]
 8006296:	0151      	lsls	r1, r2, #5
 8006298:	69fa      	ldr	r2, [r7, #28]
 800629a:	440a      	add	r2, r1
 800629c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062a4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80062a6:	69bb      	ldr	r3, [r7, #24]
 80062a8:	015a      	lsls	r2, r3, #5
 80062aa:	69fb      	ldr	r3, [r7, #28]
 80062ac:	4413      	add	r3, r2
 80062ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	69ba      	ldr	r2, [r7, #24]
 80062b6:	0151      	lsls	r1, r2, #5
 80062b8:	69fa      	ldr	r2, [r7, #28]
 80062ba:	440a      	add	r2, r1
 80062bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062c0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80062c4:	6013      	str	r3, [r2, #0]
 80062c6:	e133      	b.n	8006530 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80062c8:	69bb      	ldr	r3, [r7, #24]
 80062ca:	015a      	lsls	r2, r3, #5
 80062cc:	69fb      	ldr	r3, [r7, #28]
 80062ce:	4413      	add	r3, r2
 80062d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	69ba      	ldr	r2, [r7, #24]
 80062d8:	0151      	lsls	r1, r2, #5
 80062da:	69fa      	ldr	r2, [r7, #28]
 80062dc:	440a      	add	r2, r1
 80062de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062e2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80062e6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	791b      	ldrb	r3, [r3, #4]
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d015      	beq.n	800631c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	699b      	ldr	r3, [r3, #24]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	f000 811b 	beq.w	8006530 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006300:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	781b      	ldrb	r3, [r3, #0]
 8006306:	f003 030f 	and.w	r3, r3, #15
 800630a:	2101      	movs	r1, #1
 800630c:	fa01 f303 	lsl.w	r3, r1, r3
 8006310:	69f9      	ldr	r1, [r7, #28]
 8006312:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006316:	4313      	orrs	r3, r2
 8006318:	634b      	str	r3, [r1, #52]	; 0x34
 800631a:	e109      	b.n	8006530 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800631c:	69fb      	ldr	r3, [r7, #28]
 800631e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006328:	2b00      	cmp	r3, #0
 800632a:	d110      	bne.n	800634e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800632c:	69bb      	ldr	r3, [r7, #24]
 800632e:	015a      	lsls	r2, r3, #5
 8006330:	69fb      	ldr	r3, [r7, #28]
 8006332:	4413      	add	r3, r2
 8006334:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	69ba      	ldr	r2, [r7, #24]
 800633c:	0151      	lsls	r1, r2, #5
 800633e:	69fa      	ldr	r2, [r7, #28]
 8006340:	440a      	add	r2, r1
 8006342:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006346:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800634a:	6013      	str	r3, [r2, #0]
 800634c:	e00f      	b.n	800636e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800634e:	69bb      	ldr	r3, [r7, #24]
 8006350:	015a      	lsls	r2, r3, #5
 8006352:	69fb      	ldr	r3, [r7, #28]
 8006354:	4413      	add	r3, r2
 8006356:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	69ba      	ldr	r2, [r7, #24]
 800635e:	0151      	lsls	r1, r2, #5
 8006360:	69fa      	ldr	r2, [r7, #28]
 8006362:	440a      	add	r2, r1
 8006364:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006368:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800636c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	6919      	ldr	r1, [r3, #16]
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	781a      	ldrb	r2, [r3, #0]
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	699b      	ldr	r3, [r3, #24]
 800637a:	b298      	uxth	r0, r3
 800637c:	79fb      	ldrb	r3, [r7, #7]
 800637e:	9300      	str	r3, [sp, #0]
 8006380:	4603      	mov	r3, r0
 8006382:	68f8      	ldr	r0, [r7, #12]
 8006384:	f000 fade 	bl	8006944 <USB_WritePacket>
 8006388:	e0d2      	b.n	8006530 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800638a:	69bb      	ldr	r3, [r7, #24]
 800638c:	015a      	lsls	r2, r3, #5
 800638e:	69fb      	ldr	r3, [r7, #28]
 8006390:	4413      	add	r3, r2
 8006392:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006396:	691b      	ldr	r3, [r3, #16]
 8006398:	69ba      	ldr	r2, [r7, #24]
 800639a:	0151      	lsls	r1, r2, #5
 800639c:	69fa      	ldr	r2, [r7, #28]
 800639e:	440a      	add	r2, r1
 80063a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063a4:	0cdb      	lsrs	r3, r3, #19
 80063a6:	04db      	lsls	r3, r3, #19
 80063a8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80063aa:	69bb      	ldr	r3, [r7, #24]
 80063ac:	015a      	lsls	r2, r3, #5
 80063ae:	69fb      	ldr	r3, [r7, #28]
 80063b0:	4413      	add	r3, r2
 80063b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063b6:	691b      	ldr	r3, [r3, #16]
 80063b8:	69ba      	ldr	r2, [r7, #24]
 80063ba:	0151      	lsls	r1, r2, #5
 80063bc:	69fa      	ldr	r2, [r7, #28]
 80063be:	440a      	add	r2, r1
 80063c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063c4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80063c8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80063cc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	699b      	ldr	r3, [r3, #24]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d126      	bne.n	8006424 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80063d6:	69bb      	ldr	r3, [r7, #24]
 80063d8:	015a      	lsls	r2, r3, #5
 80063da:	69fb      	ldr	r3, [r7, #28]
 80063dc:	4413      	add	r3, r2
 80063de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063e2:	691a      	ldr	r2, [r3, #16]
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	68db      	ldr	r3, [r3, #12]
 80063e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063ec:	69b9      	ldr	r1, [r7, #24]
 80063ee:	0148      	lsls	r0, r1, #5
 80063f0:	69f9      	ldr	r1, [r7, #28]
 80063f2:	4401      	add	r1, r0
 80063f4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80063f8:	4313      	orrs	r3, r2
 80063fa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80063fc:	69bb      	ldr	r3, [r7, #24]
 80063fe:	015a      	lsls	r2, r3, #5
 8006400:	69fb      	ldr	r3, [r7, #28]
 8006402:	4413      	add	r3, r2
 8006404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006408:	691b      	ldr	r3, [r3, #16]
 800640a:	69ba      	ldr	r2, [r7, #24]
 800640c:	0151      	lsls	r1, r2, #5
 800640e:	69fa      	ldr	r2, [r7, #28]
 8006410:	440a      	add	r2, r1
 8006412:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006416:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800641a:	6113      	str	r3, [r2, #16]
 800641c:	e03a      	b.n	8006494 <USB_EPStartXfer+0x3e4>
 800641e:	bf00      	nop
 8006420:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	699a      	ldr	r2, [r3, #24]
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	68db      	ldr	r3, [r3, #12]
 800642c:	4413      	add	r3, r2
 800642e:	1e5a      	subs	r2, r3, #1
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	68db      	ldr	r3, [r3, #12]
 8006434:	fbb2 f3f3 	udiv	r3, r2, r3
 8006438:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	68db      	ldr	r3, [r3, #12]
 800643e:	8afa      	ldrh	r2, [r7, #22]
 8006440:	fb03 f202 	mul.w	r2, r3, r2
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006448:	69bb      	ldr	r3, [r7, #24]
 800644a:	015a      	lsls	r2, r3, #5
 800644c:	69fb      	ldr	r3, [r7, #28]
 800644e:	4413      	add	r3, r2
 8006450:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006454:	691a      	ldr	r2, [r3, #16]
 8006456:	8afb      	ldrh	r3, [r7, #22]
 8006458:	04d9      	lsls	r1, r3, #19
 800645a:	4b38      	ldr	r3, [pc, #224]	; (800653c <USB_EPStartXfer+0x48c>)
 800645c:	400b      	ands	r3, r1
 800645e:	69b9      	ldr	r1, [r7, #24]
 8006460:	0148      	lsls	r0, r1, #5
 8006462:	69f9      	ldr	r1, [r7, #28]
 8006464:	4401      	add	r1, r0
 8006466:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800646a:	4313      	orrs	r3, r2
 800646c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800646e:	69bb      	ldr	r3, [r7, #24]
 8006470:	015a      	lsls	r2, r3, #5
 8006472:	69fb      	ldr	r3, [r7, #28]
 8006474:	4413      	add	r3, r2
 8006476:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800647a:	691a      	ldr	r2, [r3, #16]
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	69db      	ldr	r3, [r3, #28]
 8006480:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006484:	69b9      	ldr	r1, [r7, #24]
 8006486:	0148      	lsls	r0, r1, #5
 8006488:	69f9      	ldr	r1, [r7, #28]
 800648a:	4401      	add	r1, r0
 800648c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006490:	4313      	orrs	r3, r2
 8006492:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006494:	79fb      	ldrb	r3, [r7, #7]
 8006496:	2b01      	cmp	r3, #1
 8006498:	d10d      	bne.n	80064b6 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	691b      	ldr	r3, [r3, #16]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d009      	beq.n	80064b6 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	6919      	ldr	r1, [r3, #16]
 80064a6:	69bb      	ldr	r3, [r7, #24]
 80064a8:	015a      	lsls	r2, r3, #5
 80064aa:	69fb      	ldr	r3, [r7, #28]
 80064ac:	4413      	add	r3, r2
 80064ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064b2:	460a      	mov	r2, r1
 80064b4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	791b      	ldrb	r3, [r3, #4]
 80064ba:	2b01      	cmp	r3, #1
 80064bc:	d128      	bne.n	8006510 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80064be:	69fb      	ldr	r3, [r7, #28]
 80064c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d110      	bne.n	80064f0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80064ce:	69bb      	ldr	r3, [r7, #24]
 80064d0:	015a      	lsls	r2, r3, #5
 80064d2:	69fb      	ldr	r3, [r7, #28]
 80064d4:	4413      	add	r3, r2
 80064d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	69ba      	ldr	r2, [r7, #24]
 80064de:	0151      	lsls	r1, r2, #5
 80064e0:	69fa      	ldr	r2, [r7, #28]
 80064e2:	440a      	add	r2, r1
 80064e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064e8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80064ec:	6013      	str	r3, [r2, #0]
 80064ee:	e00f      	b.n	8006510 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80064f0:	69bb      	ldr	r3, [r7, #24]
 80064f2:	015a      	lsls	r2, r3, #5
 80064f4:	69fb      	ldr	r3, [r7, #28]
 80064f6:	4413      	add	r3, r2
 80064f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	69ba      	ldr	r2, [r7, #24]
 8006500:	0151      	lsls	r1, r2, #5
 8006502:	69fa      	ldr	r2, [r7, #28]
 8006504:	440a      	add	r2, r1
 8006506:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800650a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800650e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006510:	69bb      	ldr	r3, [r7, #24]
 8006512:	015a      	lsls	r2, r3, #5
 8006514:	69fb      	ldr	r3, [r7, #28]
 8006516:	4413      	add	r3, r2
 8006518:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	69ba      	ldr	r2, [r7, #24]
 8006520:	0151      	lsls	r1, r2, #5
 8006522:	69fa      	ldr	r2, [r7, #28]
 8006524:	440a      	add	r2, r1
 8006526:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800652a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800652e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006530:	2300      	movs	r3, #0
}
 8006532:	4618      	mov	r0, r3
 8006534:	3720      	adds	r7, #32
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}
 800653a:	bf00      	nop
 800653c:	1ff80000 	.word	0x1ff80000

08006540 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006540:	b480      	push	{r7}
 8006542:	b087      	sub	sp, #28
 8006544:	af00      	add	r7, sp, #0
 8006546:	60f8      	str	r0, [r7, #12]
 8006548:	60b9      	str	r1, [r7, #8]
 800654a:	4613      	mov	r3, r2
 800654c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	785b      	ldrb	r3, [r3, #1]
 800655c:	2b01      	cmp	r3, #1
 800655e:	f040 80ce 	bne.w	80066fe <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	699b      	ldr	r3, [r3, #24]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d132      	bne.n	80065d0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	015a      	lsls	r2, r3, #5
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	4413      	add	r3, r2
 8006572:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006576:	691b      	ldr	r3, [r3, #16]
 8006578:	693a      	ldr	r2, [r7, #16]
 800657a:	0151      	lsls	r1, r2, #5
 800657c:	697a      	ldr	r2, [r7, #20]
 800657e:	440a      	add	r2, r1
 8006580:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006584:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006588:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800658c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	015a      	lsls	r2, r3, #5
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	4413      	add	r3, r2
 8006596:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800659a:	691b      	ldr	r3, [r3, #16]
 800659c:	693a      	ldr	r2, [r7, #16]
 800659e:	0151      	lsls	r1, r2, #5
 80065a0:	697a      	ldr	r2, [r7, #20]
 80065a2:	440a      	add	r2, r1
 80065a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80065ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	015a      	lsls	r2, r3, #5
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	4413      	add	r3, r2
 80065b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065ba:	691b      	ldr	r3, [r3, #16]
 80065bc:	693a      	ldr	r2, [r7, #16]
 80065be:	0151      	lsls	r1, r2, #5
 80065c0:	697a      	ldr	r2, [r7, #20]
 80065c2:	440a      	add	r2, r1
 80065c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065c8:	0cdb      	lsrs	r3, r3, #19
 80065ca:	04db      	lsls	r3, r3, #19
 80065cc:	6113      	str	r3, [r2, #16]
 80065ce:	e04e      	b.n	800666e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	015a      	lsls	r2, r3, #5
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	4413      	add	r3, r2
 80065d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065dc:	691b      	ldr	r3, [r3, #16]
 80065de:	693a      	ldr	r2, [r7, #16]
 80065e0:	0151      	lsls	r1, r2, #5
 80065e2:	697a      	ldr	r2, [r7, #20]
 80065e4:	440a      	add	r2, r1
 80065e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065ea:	0cdb      	lsrs	r3, r3, #19
 80065ec:	04db      	lsls	r3, r3, #19
 80065ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	015a      	lsls	r2, r3, #5
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	4413      	add	r3, r2
 80065f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065fc:	691b      	ldr	r3, [r3, #16]
 80065fe:	693a      	ldr	r2, [r7, #16]
 8006600:	0151      	lsls	r1, r2, #5
 8006602:	697a      	ldr	r2, [r7, #20]
 8006604:	440a      	add	r2, r1
 8006606:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800660a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800660e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006612:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	699a      	ldr	r2, [r3, #24]
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	68db      	ldr	r3, [r3, #12]
 800661c:	429a      	cmp	r2, r3
 800661e:	d903      	bls.n	8006628 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	68da      	ldr	r2, [r3, #12]
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	015a      	lsls	r2, r3, #5
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	4413      	add	r3, r2
 8006630:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006634:	691b      	ldr	r3, [r3, #16]
 8006636:	693a      	ldr	r2, [r7, #16]
 8006638:	0151      	lsls	r1, r2, #5
 800663a:	697a      	ldr	r2, [r7, #20]
 800663c:	440a      	add	r2, r1
 800663e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006642:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006646:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	015a      	lsls	r2, r3, #5
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	4413      	add	r3, r2
 8006650:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006654:	691a      	ldr	r2, [r3, #16]
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	699b      	ldr	r3, [r3, #24]
 800665a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800665e:	6939      	ldr	r1, [r7, #16]
 8006660:	0148      	lsls	r0, r1, #5
 8006662:	6979      	ldr	r1, [r7, #20]
 8006664:	4401      	add	r1, r0
 8006666:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800666a:	4313      	orrs	r3, r2
 800666c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800666e:	79fb      	ldrb	r3, [r7, #7]
 8006670:	2b01      	cmp	r3, #1
 8006672:	d11e      	bne.n	80066b2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	695b      	ldr	r3, [r3, #20]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d009      	beq.n	8006690 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	015a      	lsls	r2, r3, #5
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	4413      	add	r3, r2
 8006684:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006688:	461a      	mov	r2, r3
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	695b      	ldr	r3, [r3, #20]
 800668e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	015a      	lsls	r2, r3, #5
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	4413      	add	r3, r2
 8006698:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	693a      	ldr	r2, [r7, #16]
 80066a0:	0151      	lsls	r1, r2, #5
 80066a2:	697a      	ldr	r2, [r7, #20]
 80066a4:	440a      	add	r2, r1
 80066a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066aa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80066ae:	6013      	str	r3, [r2, #0]
 80066b0:	e097      	b.n	80067e2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	015a      	lsls	r2, r3, #5
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	4413      	add	r3, r2
 80066ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	693a      	ldr	r2, [r7, #16]
 80066c2:	0151      	lsls	r1, r2, #5
 80066c4:	697a      	ldr	r2, [r7, #20]
 80066c6:	440a      	add	r2, r1
 80066c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066cc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80066d0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	699b      	ldr	r3, [r3, #24]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	f000 8083 	beq.w	80067e2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	f003 030f 	and.w	r3, r3, #15
 80066ec:	2101      	movs	r1, #1
 80066ee:	fa01 f303 	lsl.w	r3, r1, r3
 80066f2:	6979      	ldr	r1, [r7, #20]
 80066f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80066f8:	4313      	orrs	r3, r2
 80066fa:	634b      	str	r3, [r1, #52]	; 0x34
 80066fc:	e071      	b.n	80067e2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	015a      	lsls	r2, r3, #5
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	4413      	add	r3, r2
 8006706:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800670a:	691b      	ldr	r3, [r3, #16]
 800670c:	693a      	ldr	r2, [r7, #16]
 800670e:	0151      	lsls	r1, r2, #5
 8006710:	697a      	ldr	r2, [r7, #20]
 8006712:	440a      	add	r2, r1
 8006714:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006718:	0cdb      	lsrs	r3, r3, #19
 800671a:	04db      	lsls	r3, r3, #19
 800671c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	015a      	lsls	r2, r3, #5
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	4413      	add	r3, r2
 8006726:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800672a:	691b      	ldr	r3, [r3, #16]
 800672c:	693a      	ldr	r2, [r7, #16]
 800672e:	0151      	lsls	r1, r2, #5
 8006730:	697a      	ldr	r2, [r7, #20]
 8006732:	440a      	add	r2, r1
 8006734:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006738:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800673c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006740:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	699b      	ldr	r3, [r3, #24]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d003      	beq.n	8006752 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	68da      	ldr	r2, [r3, #12]
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	68da      	ldr	r2, [r3, #12]
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	015a      	lsls	r2, r3, #5
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	4413      	add	r3, r2
 8006762:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006766:	691b      	ldr	r3, [r3, #16]
 8006768:	693a      	ldr	r2, [r7, #16]
 800676a:	0151      	lsls	r1, r2, #5
 800676c:	697a      	ldr	r2, [r7, #20]
 800676e:	440a      	add	r2, r1
 8006770:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006774:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006778:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	015a      	lsls	r2, r3, #5
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	4413      	add	r3, r2
 8006782:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006786:	691a      	ldr	r2, [r3, #16]
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	69db      	ldr	r3, [r3, #28]
 800678c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006790:	6939      	ldr	r1, [r7, #16]
 8006792:	0148      	lsls	r0, r1, #5
 8006794:	6979      	ldr	r1, [r7, #20]
 8006796:	4401      	add	r1, r0
 8006798:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800679c:	4313      	orrs	r3, r2
 800679e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80067a0:	79fb      	ldrb	r3, [r7, #7]
 80067a2:	2b01      	cmp	r3, #1
 80067a4:	d10d      	bne.n	80067c2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	691b      	ldr	r3, [r3, #16]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d009      	beq.n	80067c2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	6919      	ldr	r1, [r3, #16]
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	015a      	lsls	r2, r3, #5
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	4413      	add	r3, r2
 80067ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067be:	460a      	mov	r2, r1
 80067c0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	015a      	lsls	r2, r3, #5
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	4413      	add	r3, r2
 80067ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	693a      	ldr	r2, [r7, #16]
 80067d2:	0151      	lsls	r1, r2, #5
 80067d4:	697a      	ldr	r2, [r7, #20]
 80067d6:	440a      	add	r2, r1
 80067d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067dc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80067e0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80067e2:	2300      	movs	r3, #0
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	371c      	adds	r7, #28
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr

080067f0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b087      	sub	sp, #28
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80067fa:	2300      	movs	r3, #0
 80067fc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80067fe:	2300      	movs	r3, #0
 8006800:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	785b      	ldrb	r3, [r3, #1]
 800680a:	2b01      	cmp	r3, #1
 800680c:	d14a      	bne.n	80068a4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	781b      	ldrb	r3, [r3, #0]
 8006812:	015a      	lsls	r2, r3, #5
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	4413      	add	r3, r2
 8006818:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006822:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006826:	f040 8086 	bne.w	8006936 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	781b      	ldrb	r3, [r3, #0]
 800682e:	015a      	lsls	r2, r3, #5
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	4413      	add	r3, r2
 8006834:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	683a      	ldr	r2, [r7, #0]
 800683c:	7812      	ldrb	r2, [r2, #0]
 800683e:	0151      	lsls	r1, r2, #5
 8006840:	693a      	ldr	r2, [r7, #16]
 8006842:	440a      	add	r2, r1
 8006844:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006848:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800684c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	781b      	ldrb	r3, [r3, #0]
 8006852:	015a      	lsls	r2, r3, #5
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	4413      	add	r3, r2
 8006858:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	683a      	ldr	r2, [r7, #0]
 8006860:	7812      	ldrb	r2, [r2, #0]
 8006862:	0151      	lsls	r1, r2, #5
 8006864:	693a      	ldr	r2, [r7, #16]
 8006866:	440a      	add	r2, r1
 8006868:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800686c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006870:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	3301      	adds	r3, #1
 8006876:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f242 7210 	movw	r2, #10000	; 0x2710
 800687e:	4293      	cmp	r3, r2
 8006880:	d902      	bls.n	8006888 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006882:	2301      	movs	r3, #1
 8006884:	75fb      	strb	r3, [r7, #23]
          break;
 8006886:	e056      	b.n	8006936 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	781b      	ldrb	r3, [r3, #0]
 800688c:	015a      	lsls	r2, r3, #5
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	4413      	add	r3, r2
 8006892:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800689c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80068a0:	d0e7      	beq.n	8006872 <USB_EPStopXfer+0x82>
 80068a2:	e048      	b.n	8006936 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	781b      	ldrb	r3, [r3, #0]
 80068a8:	015a      	lsls	r2, r3, #5
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	4413      	add	r3, r2
 80068ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80068b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80068bc:	d13b      	bne.n	8006936 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	781b      	ldrb	r3, [r3, #0]
 80068c2:	015a      	lsls	r2, r3, #5
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	4413      	add	r3, r2
 80068c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	683a      	ldr	r2, [r7, #0]
 80068d0:	7812      	ldrb	r2, [r2, #0]
 80068d2:	0151      	lsls	r1, r2, #5
 80068d4:	693a      	ldr	r2, [r7, #16]
 80068d6:	440a      	add	r2, r1
 80068d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068dc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80068e0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	781b      	ldrb	r3, [r3, #0]
 80068e6:	015a      	lsls	r2, r3, #5
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	4413      	add	r3, r2
 80068ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	683a      	ldr	r2, [r7, #0]
 80068f4:	7812      	ldrb	r2, [r2, #0]
 80068f6:	0151      	lsls	r1, r2, #5
 80068f8:	693a      	ldr	r2, [r7, #16]
 80068fa:	440a      	add	r2, r1
 80068fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006900:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006904:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	3301      	adds	r3, #1
 800690a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f242 7210 	movw	r2, #10000	; 0x2710
 8006912:	4293      	cmp	r3, r2
 8006914:	d902      	bls.n	800691c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006916:	2301      	movs	r3, #1
 8006918:	75fb      	strb	r3, [r7, #23]
          break;
 800691a:	e00c      	b.n	8006936 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	015a      	lsls	r2, r3, #5
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	4413      	add	r3, r2
 8006926:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006930:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006934:	d0e7      	beq.n	8006906 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006936:	7dfb      	ldrb	r3, [r7, #23]
}
 8006938:	4618      	mov	r0, r3
 800693a:	371c      	adds	r7, #28
 800693c:	46bd      	mov	sp, r7
 800693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006942:	4770      	bx	lr

08006944 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006944:	b480      	push	{r7}
 8006946:	b089      	sub	sp, #36	; 0x24
 8006948:	af00      	add	r7, sp, #0
 800694a:	60f8      	str	r0, [r7, #12]
 800694c:	60b9      	str	r1, [r7, #8]
 800694e:	4611      	mov	r1, r2
 8006950:	461a      	mov	r2, r3
 8006952:	460b      	mov	r3, r1
 8006954:	71fb      	strb	r3, [r7, #7]
 8006956:	4613      	mov	r3, r2
 8006958:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006962:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006966:	2b00      	cmp	r3, #0
 8006968:	d123      	bne.n	80069b2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800696a:	88bb      	ldrh	r3, [r7, #4]
 800696c:	3303      	adds	r3, #3
 800696e:	089b      	lsrs	r3, r3, #2
 8006970:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006972:	2300      	movs	r3, #0
 8006974:	61bb      	str	r3, [r7, #24]
 8006976:	e018      	b.n	80069aa <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006978:	79fb      	ldrb	r3, [r7, #7]
 800697a:	031a      	lsls	r2, r3, #12
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	4413      	add	r3, r2
 8006980:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006984:	461a      	mov	r2, r3
 8006986:	69fb      	ldr	r3, [r7, #28]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800698c:	69fb      	ldr	r3, [r7, #28]
 800698e:	3301      	adds	r3, #1
 8006990:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006992:	69fb      	ldr	r3, [r7, #28]
 8006994:	3301      	adds	r3, #1
 8006996:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006998:	69fb      	ldr	r3, [r7, #28]
 800699a:	3301      	adds	r3, #1
 800699c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800699e:	69fb      	ldr	r3, [r7, #28]
 80069a0:	3301      	adds	r3, #1
 80069a2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80069a4:	69bb      	ldr	r3, [r7, #24]
 80069a6:	3301      	adds	r3, #1
 80069a8:	61bb      	str	r3, [r7, #24]
 80069aa:	69ba      	ldr	r2, [r7, #24]
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	429a      	cmp	r2, r3
 80069b0:	d3e2      	bcc.n	8006978 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80069b2:	2300      	movs	r3, #0
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3724      	adds	r7, #36	; 0x24
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr

080069c0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b08b      	sub	sp, #44	; 0x2c
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	60f8      	str	r0, [r7, #12]
 80069c8:	60b9      	str	r1, [r7, #8]
 80069ca:	4613      	mov	r3, r2
 80069cc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80069d6:	88fb      	ldrh	r3, [r7, #6]
 80069d8:	089b      	lsrs	r3, r3, #2
 80069da:	b29b      	uxth	r3, r3
 80069dc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80069de:	88fb      	ldrh	r3, [r7, #6]
 80069e0:	f003 0303 	and.w	r3, r3, #3
 80069e4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80069e6:	2300      	movs	r3, #0
 80069e8:	623b      	str	r3, [r7, #32]
 80069ea:	e014      	b.n	8006a16 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80069ec:	69bb      	ldr	r3, [r7, #24]
 80069ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069f2:	681a      	ldr	r2, [r3, #0]
 80069f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f6:	601a      	str	r2, [r3, #0]
    pDest++;
 80069f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fa:	3301      	adds	r3, #1
 80069fc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80069fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a00:	3301      	adds	r3, #1
 8006a02:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a06:	3301      	adds	r3, #1
 8006a08:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a0c:	3301      	adds	r3, #1
 8006a0e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006a10:	6a3b      	ldr	r3, [r7, #32]
 8006a12:	3301      	adds	r3, #1
 8006a14:	623b      	str	r3, [r7, #32]
 8006a16:	6a3a      	ldr	r2, [r7, #32]
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	429a      	cmp	r2, r3
 8006a1c:	d3e6      	bcc.n	80069ec <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006a1e:	8bfb      	ldrh	r3, [r7, #30]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d01e      	beq.n	8006a62 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006a24:	2300      	movs	r3, #0
 8006a26:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006a28:	69bb      	ldr	r3, [r7, #24]
 8006a2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a2e:	461a      	mov	r2, r3
 8006a30:	f107 0310 	add.w	r3, r7, #16
 8006a34:	6812      	ldr	r2, [r2, #0]
 8006a36:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006a38:	693a      	ldr	r2, [r7, #16]
 8006a3a:	6a3b      	ldr	r3, [r7, #32]
 8006a3c:	b2db      	uxtb	r3, r3
 8006a3e:	00db      	lsls	r3, r3, #3
 8006a40:	fa22 f303 	lsr.w	r3, r2, r3
 8006a44:	b2da      	uxtb	r2, r3
 8006a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a48:	701a      	strb	r2, [r3, #0]
      i++;
 8006a4a:	6a3b      	ldr	r3, [r7, #32]
 8006a4c:	3301      	adds	r3, #1
 8006a4e:	623b      	str	r3, [r7, #32]
      pDest++;
 8006a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a52:	3301      	adds	r3, #1
 8006a54:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006a56:	8bfb      	ldrh	r3, [r7, #30]
 8006a58:	3b01      	subs	r3, #1
 8006a5a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006a5c:	8bfb      	ldrh	r3, [r7, #30]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d1ea      	bne.n	8006a38 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	372c      	adds	r7, #44	; 0x2c
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6e:	4770      	bx	lr

08006a70 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b085      	sub	sp, #20
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
 8006a78:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	781b      	ldrb	r3, [r3, #0]
 8006a82:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	785b      	ldrb	r3, [r3, #1]
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d12c      	bne.n	8006ae6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	015a      	lsls	r2, r3, #5
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	4413      	add	r3, r2
 8006a94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	db12      	blt.n	8006ac4 <USB_EPSetStall+0x54>
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d00f      	beq.n	8006ac4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	015a      	lsls	r2, r3, #5
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	4413      	add	r3, r2
 8006aac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	68ba      	ldr	r2, [r7, #8]
 8006ab4:	0151      	lsls	r1, r2, #5
 8006ab6:	68fa      	ldr	r2, [r7, #12]
 8006ab8:	440a      	add	r2, r1
 8006aba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006abe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006ac2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	015a      	lsls	r2, r3, #5
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	4413      	add	r3, r2
 8006acc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	68ba      	ldr	r2, [r7, #8]
 8006ad4:	0151      	lsls	r1, r2, #5
 8006ad6:	68fa      	ldr	r2, [r7, #12]
 8006ad8:	440a      	add	r2, r1
 8006ada:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ade:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006ae2:	6013      	str	r3, [r2, #0]
 8006ae4:	e02b      	b.n	8006b3e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	015a      	lsls	r2, r3, #5
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	4413      	add	r3, r2
 8006aee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	db12      	blt.n	8006b1e <USB_EPSetStall+0xae>
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d00f      	beq.n	8006b1e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	015a      	lsls	r2, r3, #5
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	4413      	add	r3, r2
 8006b06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	68ba      	ldr	r2, [r7, #8]
 8006b0e:	0151      	lsls	r1, r2, #5
 8006b10:	68fa      	ldr	r2, [r7, #12]
 8006b12:	440a      	add	r2, r1
 8006b14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b18:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006b1c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	015a      	lsls	r2, r3, #5
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	4413      	add	r3, r2
 8006b26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	68ba      	ldr	r2, [r7, #8]
 8006b2e:	0151      	lsls	r1, r2, #5
 8006b30:	68fa      	ldr	r2, [r7, #12]
 8006b32:	440a      	add	r2, r1
 8006b34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b38:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006b3c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006b3e:	2300      	movs	r3, #0
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	3714      	adds	r7, #20
 8006b44:	46bd      	mov	sp, r7
 8006b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4a:	4770      	bx	lr

08006b4c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b085      	sub	sp, #20
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
 8006b54:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	781b      	ldrb	r3, [r3, #0]
 8006b5e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	785b      	ldrb	r3, [r3, #1]
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d128      	bne.n	8006bba <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	015a      	lsls	r2, r3, #5
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	4413      	add	r3, r2
 8006b70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	68ba      	ldr	r2, [r7, #8]
 8006b78:	0151      	lsls	r1, r2, #5
 8006b7a:	68fa      	ldr	r2, [r7, #12]
 8006b7c:	440a      	add	r2, r1
 8006b7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b82:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006b86:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	791b      	ldrb	r3, [r3, #4]
 8006b8c:	2b03      	cmp	r3, #3
 8006b8e:	d003      	beq.n	8006b98 <USB_EPClearStall+0x4c>
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	791b      	ldrb	r3, [r3, #4]
 8006b94:	2b02      	cmp	r3, #2
 8006b96:	d138      	bne.n	8006c0a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	015a      	lsls	r2, r3, #5
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	4413      	add	r3, r2
 8006ba0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	68ba      	ldr	r2, [r7, #8]
 8006ba8:	0151      	lsls	r1, r2, #5
 8006baa:	68fa      	ldr	r2, [r7, #12]
 8006bac:	440a      	add	r2, r1
 8006bae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bb6:	6013      	str	r3, [r2, #0]
 8006bb8:	e027      	b.n	8006c0a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	015a      	lsls	r2, r3, #5
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	4413      	add	r3, r2
 8006bc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	68ba      	ldr	r2, [r7, #8]
 8006bca:	0151      	lsls	r1, r2, #5
 8006bcc:	68fa      	ldr	r2, [r7, #12]
 8006bce:	440a      	add	r2, r1
 8006bd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bd4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006bd8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	791b      	ldrb	r3, [r3, #4]
 8006bde:	2b03      	cmp	r3, #3
 8006be0:	d003      	beq.n	8006bea <USB_EPClearStall+0x9e>
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	791b      	ldrb	r3, [r3, #4]
 8006be6:	2b02      	cmp	r3, #2
 8006be8:	d10f      	bne.n	8006c0a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	015a      	lsls	r2, r3, #5
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	4413      	add	r3, r2
 8006bf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	68ba      	ldr	r2, [r7, #8]
 8006bfa:	0151      	lsls	r1, r2, #5
 8006bfc:	68fa      	ldr	r2, [r7, #12]
 8006bfe:	440a      	add	r2, r1
 8006c00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c08:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006c0a:	2300      	movs	r3, #0
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3714      	adds	r7, #20
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr

08006c18 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b085      	sub	sp, #20
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
 8006c20:	460b      	mov	r3, r1
 8006c22:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	68fa      	ldr	r2, [r7, #12]
 8006c32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c36:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006c3a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c42:	681a      	ldr	r2, [r3, #0]
 8006c44:	78fb      	ldrb	r3, [r7, #3]
 8006c46:	011b      	lsls	r3, r3, #4
 8006c48:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006c4c:	68f9      	ldr	r1, [r7, #12]
 8006c4e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c52:	4313      	orrs	r3, r2
 8006c54:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006c56:	2300      	movs	r3, #0
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	3714      	adds	r7, #20
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr

08006c64 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b085      	sub	sp, #20
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	68fa      	ldr	r2, [r7, #12]
 8006c7a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006c7e:	f023 0303 	bic.w	r3, r3, #3
 8006c82:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c8a:	685b      	ldr	r3, [r3, #4]
 8006c8c:	68fa      	ldr	r2, [r7, #12]
 8006c8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c92:	f023 0302 	bic.w	r3, r3, #2
 8006c96:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006c98:	2300      	movs	r3, #0
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3714      	adds	r7, #20
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca4:	4770      	bx	lr

08006ca6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006ca6:	b480      	push	{r7}
 8006ca8:	b085      	sub	sp, #20
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	68fa      	ldr	r2, [r7, #12]
 8006cbc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006cc0:	f023 0303 	bic.w	r3, r3, #3
 8006cc4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	68fa      	ldr	r2, [r7, #12]
 8006cd0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006cd4:	f043 0302 	orr.w	r3, r3, #2
 8006cd8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006cda:	2300      	movs	r3, #0
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3714      	adds	r7, #20
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce6:	4770      	bx	lr

08006ce8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b085      	sub	sp, #20
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	695b      	ldr	r3, [r3, #20]
 8006cf4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	699b      	ldr	r3, [r3, #24]
 8006cfa:	68fa      	ldr	r2, [r7, #12]
 8006cfc:	4013      	ands	r3, r2
 8006cfe:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006d00:	68fb      	ldr	r3, [r7, #12]
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3714      	adds	r7, #20
 8006d06:	46bd      	mov	sp, r7
 8006d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0c:	4770      	bx	lr

08006d0e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006d0e:	b480      	push	{r7}
 8006d10:	b085      	sub	sp, #20
 8006d12:	af00      	add	r7, sp, #0
 8006d14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d20:	699b      	ldr	r3, [r3, #24]
 8006d22:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d2a:	69db      	ldr	r3, [r3, #28]
 8006d2c:	68ba      	ldr	r2, [r7, #8]
 8006d2e:	4013      	ands	r3, r2
 8006d30:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	0c1b      	lsrs	r3, r3, #16
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3714      	adds	r7, #20
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d40:	4770      	bx	lr

08006d42 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006d42:	b480      	push	{r7}
 8006d44:	b085      	sub	sp, #20
 8006d46:	af00      	add	r7, sp, #0
 8006d48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d54:	699b      	ldr	r3, [r3, #24]
 8006d56:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d5e:	69db      	ldr	r3, [r3, #28]
 8006d60:	68ba      	ldr	r2, [r7, #8]
 8006d62:	4013      	ands	r3, r2
 8006d64:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	b29b      	uxth	r3, r3
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3714      	adds	r7, #20
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d74:	4770      	bx	lr

08006d76 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006d76:	b480      	push	{r7}
 8006d78:	b085      	sub	sp, #20
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	6078      	str	r0, [r7, #4]
 8006d7e:	460b      	mov	r3, r1
 8006d80:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006d86:	78fb      	ldrb	r3, [r7, #3]
 8006d88:	015a      	lsls	r2, r3, #5
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	4413      	add	r3, r2
 8006d8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d92:	689b      	ldr	r3, [r3, #8]
 8006d94:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d9c:	695b      	ldr	r3, [r3, #20]
 8006d9e:	68ba      	ldr	r2, [r7, #8]
 8006da0:	4013      	ands	r3, r2
 8006da2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006da4:	68bb      	ldr	r3, [r7, #8]
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3714      	adds	r7, #20
 8006daa:	46bd      	mov	sp, r7
 8006dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db0:	4770      	bx	lr

08006db2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006db2:	b480      	push	{r7}
 8006db4:	b087      	sub	sp, #28
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	6078      	str	r0, [r7, #4]
 8006dba:	460b      	mov	r3, r1
 8006dbc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dc8:	691b      	ldr	r3, [r3, #16]
 8006dca:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dd4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006dd6:	78fb      	ldrb	r3, [r7, #3]
 8006dd8:	f003 030f 	and.w	r3, r3, #15
 8006ddc:	68fa      	ldr	r2, [r7, #12]
 8006dde:	fa22 f303 	lsr.w	r3, r2, r3
 8006de2:	01db      	lsls	r3, r3, #7
 8006de4:	b2db      	uxtb	r3, r3
 8006de6:	693a      	ldr	r2, [r7, #16]
 8006de8:	4313      	orrs	r3, r2
 8006dea:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006dec:	78fb      	ldrb	r3, [r7, #3]
 8006dee:	015a      	lsls	r2, r3, #5
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	4413      	add	r3, r2
 8006df4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006df8:	689b      	ldr	r3, [r3, #8]
 8006dfa:	693a      	ldr	r2, [r7, #16]
 8006dfc:	4013      	ands	r3, r2
 8006dfe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006e00:	68bb      	ldr	r3, [r7, #8]
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	371c      	adds	r7, #28
 8006e06:	46bd      	mov	sp, r7
 8006e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0c:	4770      	bx	lr

08006e0e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006e0e:	b480      	push	{r7}
 8006e10:	b083      	sub	sp, #12
 8006e12:	af00      	add	r7, sp, #0
 8006e14:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	695b      	ldr	r3, [r3, #20]
 8006e1a:	f003 0301 	and.w	r3, r3, #1
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	370c      	adds	r7, #12
 8006e22:	46bd      	mov	sp, r7
 8006e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e28:	4770      	bx	lr

08006e2a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006e2a:	b480      	push	{r7}
 8006e2c:	b085      	sub	sp, #20
 8006e2e:	af00      	add	r7, sp, #0
 8006e30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	68fa      	ldr	r2, [r7, #12]
 8006e40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e44:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006e48:	f023 0307 	bic.w	r3, r3, #7
 8006e4c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e54:	685b      	ldr	r3, [r3, #4]
 8006e56:	68fa      	ldr	r2, [r7, #12]
 8006e58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e60:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006e62:	2300      	movs	r3, #0
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3714      	adds	r7, #20
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr

08006e70 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b087      	sub	sp, #28
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	60f8      	str	r0, [r7, #12]
 8006e78:	460b      	mov	r3, r1
 8006e7a:	607a      	str	r2, [r7, #4]
 8006e7c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	333c      	adds	r3, #60	; 0x3c
 8006e86:	3304      	adds	r3, #4
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	4a26      	ldr	r2, [pc, #152]	; (8006f28 <USB_EP0_OutStart+0xb8>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d90a      	bls.n	8006eaa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ea0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ea4:	d101      	bne.n	8006eaa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	e037      	b.n	8006f1a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eb0:	461a      	mov	r2, r3
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ebc:	691b      	ldr	r3, [r3, #16]
 8006ebe:	697a      	ldr	r2, [r7, #20]
 8006ec0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ec4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006ec8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ed0:	691b      	ldr	r3, [r3, #16]
 8006ed2:	697a      	ldr	r2, [r7, #20]
 8006ed4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ed8:	f043 0318 	orr.w	r3, r3, #24
 8006edc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ee4:	691b      	ldr	r3, [r3, #16]
 8006ee6:	697a      	ldr	r2, [r7, #20]
 8006ee8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006eec:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006ef0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006ef2:	7afb      	ldrb	r3, [r7, #11]
 8006ef4:	2b01      	cmp	r3, #1
 8006ef6:	d10f      	bne.n	8006f18 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006efe:	461a      	mov	r2, r3
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	697a      	ldr	r2, [r7, #20]
 8006f0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f12:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006f16:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006f18:	2300      	movs	r3, #0
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	371c      	adds	r7, #28
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f24:	4770      	bx	lr
 8006f26:	bf00      	nop
 8006f28:	4f54300a 	.word	0x4f54300a

08006f2c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b085      	sub	sp, #20
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006f34:	2300      	movs	r3, #0
 8006f36:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	3301      	adds	r3, #1
 8006f3c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	4a13      	ldr	r2, [pc, #76]	; (8006f90 <USB_CoreReset+0x64>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d901      	bls.n	8006f4a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006f46:	2303      	movs	r3, #3
 8006f48:	e01b      	b.n	8006f82 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	691b      	ldr	r3, [r3, #16]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	daf2      	bge.n	8006f38 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006f52:	2300      	movs	r3, #0
 8006f54:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	691b      	ldr	r3, [r3, #16]
 8006f5a:	f043 0201 	orr.w	r2, r3, #1
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	3301      	adds	r3, #1
 8006f66:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	4a09      	ldr	r2, [pc, #36]	; (8006f90 <USB_CoreReset+0x64>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d901      	bls.n	8006f74 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006f70:	2303      	movs	r3, #3
 8006f72:	e006      	b.n	8006f82 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	691b      	ldr	r3, [r3, #16]
 8006f78:	f003 0301 	and.w	r3, r3, #1
 8006f7c:	2b01      	cmp	r3, #1
 8006f7e:	d0f0      	beq.n	8006f62 <USB_CoreReset+0x36>

  return HAL_OK;
 8006f80:	2300      	movs	r3, #0
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3714      	adds	r7, #20
 8006f86:	46bd      	mov	sp, r7
 8006f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8c:	4770      	bx	lr
 8006f8e:	bf00      	nop
 8006f90:	00030d40 	.word	0x00030d40

08006f94 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b084      	sub	sp, #16
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	460b      	mov	r3, r1
 8006f9e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8006fa0:	2010      	movs	r0, #16
 8006fa2:	f002 f91b 	bl	80091dc <USBD_static_malloc>
 8006fa6:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d109      	bne.n	8006fc2 <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	32b0      	adds	r2, #176	; 0xb0
 8006fb8:	2100      	movs	r1, #0
 8006fba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006fbe:	2302      	movs	r3, #2
 8006fc0:	e048      	b.n	8007054 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	32b0      	adds	r2, #176	; 0xb0
 8006fcc:	68f9      	ldr	r1, [r7, #12]
 8006fce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	32b0      	adds	r2, #176	; 0xb0
 8006fdc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	7c1b      	ldrb	r3, [r3, #16]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d10d      	bne.n	800700a <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 8006fee:	4b1b      	ldr	r3, [pc, #108]	; (800705c <USBD_HID_Init+0xc8>)
 8006ff0:	781b      	ldrb	r3, [r3, #0]
 8006ff2:	f003 020f 	and.w	r2, r3, #15
 8006ff6:	6879      	ldr	r1, [r7, #4]
 8006ff8:	4613      	mov	r3, r2
 8006ffa:	009b      	lsls	r3, r3, #2
 8006ffc:	4413      	add	r3, r2
 8006ffe:	009b      	lsls	r3, r3, #2
 8007000:	440b      	add	r3, r1
 8007002:	3326      	adds	r3, #38	; 0x26
 8007004:	2207      	movs	r2, #7
 8007006:	801a      	strh	r2, [r3, #0]
 8007008:	e00c      	b.n	8007024 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 800700a:	4b14      	ldr	r3, [pc, #80]	; (800705c <USBD_HID_Init+0xc8>)
 800700c:	781b      	ldrb	r3, [r3, #0]
 800700e:	f003 020f 	and.w	r2, r3, #15
 8007012:	6879      	ldr	r1, [r7, #4]
 8007014:	4613      	mov	r3, r2
 8007016:	009b      	lsls	r3, r3, #2
 8007018:	4413      	add	r3, r2
 800701a:	009b      	lsls	r3, r3, #2
 800701c:	440b      	add	r3, r1
 800701e:	3326      	adds	r3, #38	; 0x26
 8007020:	220a      	movs	r2, #10
 8007022:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8007024:	4b0d      	ldr	r3, [pc, #52]	; (800705c <USBD_HID_Init+0xc8>)
 8007026:	7819      	ldrb	r1, [r3, #0]
 8007028:	2304      	movs	r3, #4
 800702a:	2203      	movs	r2, #3
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f001 ffc4 	bl	8008fba <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 8007032:	4b0a      	ldr	r3, [pc, #40]	; (800705c <USBD_HID_Init+0xc8>)
 8007034:	781b      	ldrb	r3, [r3, #0]
 8007036:	f003 020f 	and.w	r2, r3, #15
 800703a:	6879      	ldr	r1, [r7, #4]
 800703c:	4613      	mov	r3, r2
 800703e:	009b      	lsls	r3, r3, #2
 8007040:	4413      	add	r3, r2
 8007042:	009b      	lsls	r3, r3, #2
 8007044:	440b      	add	r3, r1
 8007046:	3324      	adds	r3, #36	; 0x24
 8007048:	2201      	movs	r2, #1
 800704a:	801a      	strh	r2, [r3, #0]

  hhid->state = HID_IDLE;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	2200      	movs	r2, #0
 8007050:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8007052:	2300      	movs	r3, #0
}
 8007054:	4618      	mov	r0, r3
 8007056:	3710      	adds	r7, #16
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}
 800705c:	200000cb 	.word	0x200000cb

08007060 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b082      	sub	sp, #8
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
 8007068:	460b      	mov	r3, r1
 800706a:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 800706c:	4b1f      	ldr	r3, [pc, #124]	; (80070ec <USBD_HID_DeInit+0x8c>)
 800706e:	781b      	ldrb	r3, [r3, #0]
 8007070:	4619      	mov	r1, r3
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f001 ffc7 	bl	8009006 <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 8007078:	4b1c      	ldr	r3, [pc, #112]	; (80070ec <USBD_HID_DeInit+0x8c>)
 800707a:	781b      	ldrb	r3, [r3, #0]
 800707c:	f003 020f 	and.w	r2, r3, #15
 8007080:	6879      	ldr	r1, [r7, #4]
 8007082:	4613      	mov	r3, r2
 8007084:	009b      	lsls	r3, r3, #2
 8007086:	4413      	add	r3, r2
 8007088:	009b      	lsls	r3, r3, #2
 800708a:	440b      	add	r3, r1
 800708c:	3324      	adds	r3, #36	; 0x24
 800708e:	2200      	movs	r2, #0
 8007090:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 8007092:	4b16      	ldr	r3, [pc, #88]	; (80070ec <USBD_HID_DeInit+0x8c>)
 8007094:	781b      	ldrb	r3, [r3, #0]
 8007096:	f003 020f 	and.w	r2, r3, #15
 800709a:	6879      	ldr	r1, [r7, #4]
 800709c:	4613      	mov	r3, r2
 800709e:	009b      	lsls	r3, r3, #2
 80070a0:	4413      	add	r3, r2
 80070a2:	009b      	lsls	r3, r3, #2
 80070a4:	440b      	add	r3, r1
 80070a6:	3326      	adds	r3, #38	; 0x26
 80070a8:	2200      	movs	r2, #0
 80070aa:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	32b0      	adds	r2, #176	; 0xb0
 80070b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d011      	beq.n	80070e2 <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	32b0      	adds	r2, #176	; 0xb0
 80070c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070cc:	4618      	mov	r0, r3
 80070ce:	f002 f893 	bl	80091f8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	32b0      	adds	r2, #176	; 0xb0
 80070dc:	2100      	movs	r1, #0
 80070de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 80070e2:	2300      	movs	r3, #0
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3708      	adds	r7, #8
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}
 80070ec:	200000cb 	.word	0x200000cb

080070f0 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b086      	sub	sp, #24
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	32b0      	adds	r2, #176	; 0xb0
 8007104:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007108:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800710a:	2300      	movs	r3, #0
 800710c:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800710e:	2300      	movs	r3, #0
 8007110:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d101      	bne.n	800711c <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8007118:	2303      	movs	r3, #3
 800711a:	e0e8      	b.n	80072ee <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	781b      	ldrb	r3, [r3, #0]
 8007120:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007124:	2b00      	cmp	r3, #0
 8007126:	d046      	beq.n	80071b6 <USBD_HID_Setup+0xc6>
 8007128:	2b20      	cmp	r3, #32
 800712a:	f040 80d8 	bne.w	80072de <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	785b      	ldrb	r3, [r3, #1]
 8007132:	3b02      	subs	r3, #2
 8007134:	2b09      	cmp	r3, #9
 8007136:	d836      	bhi.n	80071a6 <USBD_HID_Setup+0xb6>
 8007138:	a201      	add	r2, pc, #4	; (adr r2, 8007140 <USBD_HID_Setup+0x50>)
 800713a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800713e:	bf00      	nop
 8007140:	08007197 	.word	0x08007197
 8007144:	08007177 	.word	0x08007177
 8007148:	080071a7 	.word	0x080071a7
 800714c:	080071a7 	.word	0x080071a7
 8007150:	080071a7 	.word	0x080071a7
 8007154:	080071a7 	.word	0x080071a7
 8007158:	080071a7 	.word	0x080071a7
 800715c:	080071a7 	.word	0x080071a7
 8007160:	08007185 	.word	0x08007185
 8007164:	08007169 	.word	0x08007169
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	885b      	ldrh	r3, [r3, #2]
 800716c:	b2db      	uxtb	r3, r3
 800716e:	461a      	mov	r2, r3
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	601a      	str	r2, [r3, #0]
          break;
 8007174:	e01e      	b.n	80071b4 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	2201      	movs	r2, #1
 800717a:	4619      	mov	r1, r3
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f001 fbd5 	bl	800892c <USBD_CtlSendData>
          break;
 8007182:	e017      	b.n	80071b4 <USBD_HID_Setup+0xc4>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	885b      	ldrh	r3, [r3, #2]
 8007188:	0a1b      	lsrs	r3, r3, #8
 800718a:	b29b      	uxth	r3, r3
 800718c:	b2db      	uxtb	r3, r3
 800718e:	461a      	mov	r2, r3
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	605a      	str	r2, [r3, #4]
          break;
 8007194:	e00e      	b.n	80071b4 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	3304      	adds	r3, #4
 800719a:	2201      	movs	r2, #1
 800719c:	4619      	mov	r1, r3
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f001 fbc4 	bl	800892c <USBD_CtlSendData>
          break;
 80071a4:	e006      	b.n	80071b4 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80071a6:	6839      	ldr	r1, [r7, #0]
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f001 fb4e 	bl	800884a <USBD_CtlError>
          ret = USBD_FAIL;
 80071ae:	2303      	movs	r3, #3
 80071b0:	75fb      	strb	r3, [r7, #23]
          break;
 80071b2:	bf00      	nop
      }
      break;
 80071b4:	e09a      	b.n	80072ec <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	785b      	ldrb	r3, [r3, #1]
 80071ba:	2b0b      	cmp	r3, #11
 80071bc:	f200 8086 	bhi.w	80072cc <USBD_HID_Setup+0x1dc>
 80071c0:	a201      	add	r2, pc, #4	; (adr r2, 80071c8 <USBD_HID_Setup+0xd8>)
 80071c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071c6:	bf00      	nop
 80071c8:	080071f9 	.word	0x080071f9
 80071cc:	080072db 	.word	0x080072db
 80071d0:	080072cd 	.word	0x080072cd
 80071d4:	080072cd 	.word	0x080072cd
 80071d8:	080072cd 	.word	0x080072cd
 80071dc:	080072cd 	.word	0x080072cd
 80071e0:	08007223 	.word	0x08007223
 80071e4:	080072cd 	.word	0x080072cd
 80071e8:	080072cd 	.word	0x080072cd
 80071ec:	080072cd 	.word	0x080072cd
 80071f0:	0800727b 	.word	0x0800727b
 80071f4:	080072a5 	.word	0x080072a5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071fe:	b2db      	uxtb	r3, r3
 8007200:	2b03      	cmp	r3, #3
 8007202:	d107      	bne.n	8007214 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007204:	f107 030a 	add.w	r3, r7, #10
 8007208:	2202      	movs	r2, #2
 800720a:	4619      	mov	r1, r3
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f001 fb8d 	bl	800892c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007212:	e063      	b.n	80072dc <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8007214:	6839      	ldr	r1, [r7, #0]
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f001 fb17 	bl	800884a <USBD_CtlError>
            ret = USBD_FAIL;
 800721c:	2303      	movs	r3, #3
 800721e:	75fb      	strb	r3, [r7, #23]
          break;
 8007220:	e05c      	b.n	80072dc <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	885b      	ldrh	r3, [r3, #2]
 8007226:	0a1b      	lsrs	r3, r3, #8
 8007228:	b29b      	uxth	r3, r3
 800722a:	2b22      	cmp	r3, #34	; 0x22
 800722c:	d108      	bne.n	8007240 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	88db      	ldrh	r3, [r3, #6]
 8007232:	2b3f      	cmp	r3, #63	; 0x3f
 8007234:	bf28      	it	cs
 8007236:	233f      	movcs	r3, #63	; 0x3f
 8007238:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 800723a:	4b2f      	ldr	r3, [pc, #188]	; (80072f8 <USBD_HID_Setup+0x208>)
 800723c:	613b      	str	r3, [r7, #16]
 800723e:	e015      	b.n	800726c <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	885b      	ldrh	r3, [r3, #2]
 8007244:	0a1b      	lsrs	r3, r3, #8
 8007246:	b29b      	uxth	r3, r3
 8007248:	2b21      	cmp	r3, #33	; 0x21
 800724a:	d108      	bne.n	800725e <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 800724c:	4b2b      	ldr	r3, [pc, #172]	; (80072fc <USBD_HID_Setup+0x20c>)
 800724e:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	88db      	ldrh	r3, [r3, #6]
 8007254:	2b09      	cmp	r3, #9
 8007256:	bf28      	it	cs
 8007258:	2309      	movcs	r3, #9
 800725a:	82bb      	strh	r3, [r7, #20]
 800725c:	e006      	b.n	800726c <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 800725e:	6839      	ldr	r1, [r7, #0]
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f001 faf2 	bl	800884a <USBD_CtlError>
            ret = USBD_FAIL;
 8007266:	2303      	movs	r3, #3
 8007268:	75fb      	strb	r3, [r7, #23]
            break;
 800726a:	e037      	b.n	80072dc <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 800726c:	8abb      	ldrh	r3, [r7, #20]
 800726e:	461a      	mov	r2, r3
 8007270:	6939      	ldr	r1, [r7, #16]
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f001 fb5a 	bl	800892c <USBD_CtlSendData>
          break;
 8007278:	e030      	b.n	80072dc <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007280:	b2db      	uxtb	r3, r3
 8007282:	2b03      	cmp	r3, #3
 8007284:	d107      	bne.n	8007296 <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	3308      	adds	r3, #8
 800728a:	2201      	movs	r2, #1
 800728c:	4619      	mov	r1, r3
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f001 fb4c 	bl	800892c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007294:	e022      	b.n	80072dc <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8007296:	6839      	ldr	r1, [r7, #0]
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f001 fad6 	bl	800884a <USBD_CtlError>
            ret = USBD_FAIL;
 800729e:	2303      	movs	r3, #3
 80072a0:	75fb      	strb	r3, [r7, #23]
          break;
 80072a2:	e01b      	b.n	80072dc <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072aa:	b2db      	uxtb	r3, r3
 80072ac:	2b03      	cmp	r3, #3
 80072ae:	d106      	bne.n	80072be <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	885b      	ldrh	r3, [r3, #2]
 80072b4:	b2db      	uxtb	r3, r3
 80072b6:	461a      	mov	r2, r3
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80072bc:	e00e      	b.n	80072dc <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80072be:	6839      	ldr	r1, [r7, #0]
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f001 fac2 	bl	800884a <USBD_CtlError>
            ret = USBD_FAIL;
 80072c6:	2303      	movs	r3, #3
 80072c8:	75fb      	strb	r3, [r7, #23]
          break;
 80072ca:	e007      	b.n	80072dc <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80072cc:	6839      	ldr	r1, [r7, #0]
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f001 fabb 	bl	800884a <USBD_CtlError>
          ret = USBD_FAIL;
 80072d4:	2303      	movs	r3, #3
 80072d6:	75fb      	strb	r3, [r7, #23]
          break;
 80072d8:	e000      	b.n	80072dc <USBD_HID_Setup+0x1ec>
          break;
 80072da:	bf00      	nop
      }
      break;
 80072dc:	e006      	b.n	80072ec <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 80072de:	6839      	ldr	r1, [r7, #0]
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f001 fab2 	bl	800884a <USBD_CtlError>
      ret = USBD_FAIL;
 80072e6:	2303      	movs	r3, #3
 80072e8:	75fb      	strb	r3, [r7, #23]
      break;
 80072ea:	bf00      	nop
  }

  return (uint8_t)ret;
 80072ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	3718      	adds	r7, #24
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}
 80072f6:	bf00      	nop
 80072f8:	2000008c 	.word	0x2000008c
 80072fc:	20000074 	.word	0x20000074

08007300 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b086      	sub	sp, #24
 8007304:	af00      	add	r7, sp, #0
 8007306:	60f8      	str	r0, [r7, #12]
 8007308:	60b9      	str	r1, [r7, #8]
 800730a:	4613      	mov	r3, r2
 800730c:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	32b0      	adds	r2, #176	; 0xb0
 8007318:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800731c:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d101      	bne.n	8007328 <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8007324:	2303      	movs	r3, #3
 8007326:	e014      	b.n	8007352 <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800732e:	b2db      	uxtb	r3, r3
 8007330:	2b03      	cmp	r3, #3
 8007332:	d10d      	bne.n	8007350 <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == HID_IDLE)
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	7b1b      	ldrb	r3, [r3, #12]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d109      	bne.n	8007350 <USBD_HID_SendReport+0x50>
    {
      hhid->state = HID_BUSY;
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	2201      	movs	r2, #1
 8007340:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 8007342:	4b06      	ldr	r3, [pc, #24]	; (800735c <USBD_HID_SendReport+0x5c>)
 8007344:	7819      	ldrb	r1, [r3, #0]
 8007346:	88fb      	ldrh	r3, [r7, #6]
 8007348:	68ba      	ldr	r2, [r7, #8]
 800734a:	68f8      	ldr	r0, [r7, #12]
 800734c:	f001 ff03 	bl	8009156 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8007350:	2300      	movs	r3, #0
}
 8007352:	4618      	mov	r0, r3
 8007354:	3718      	adds	r7, #24
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}
 800735a:	bf00      	nop
 800735c:	200000cb 	.word	0x200000cb

08007360 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b084      	sub	sp, #16
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8007368:	2181      	movs	r1, #129	; 0x81
 800736a:	4809      	ldr	r0, [pc, #36]	; (8007390 <USBD_HID_GetFSCfgDesc+0x30>)
 800736c:	f000 fc35 	bl	8007bda <USBD_GetEpDesc>
 8007370:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d002      	beq.n	800737e <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	220a      	movs	r2, #10
 800737c:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2222      	movs	r2, #34	; 0x22
 8007382:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8007384:	4b02      	ldr	r3, [pc, #8]	; (8007390 <USBD_HID_GetFSCfgDesc+0x30>)
}
 8007386:	4618      	mov	r0, r3
 8007388:	3710      	adds	r7, #16
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}
 800738e:	bf00      	nop
 8007390:	20000050 	.word	0x20000050

08007394 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b084      	sub	sp, #16
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 800739c:	2181      	movs	r1, #129	; 0x81
 800739e:	4809      	ldr	r0, [pc, #36]	; (80073c4 <USBD_HID_GetHSCfgDesc+0x30>)
 80073a0:	f000 fc1b 	bl	8007bda <USBD_GetEpDesc>
 80073a4:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d002      	beq.n	80073b2 <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	2207      	movs	r2, #7
 80073b0:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2222      	movs	r2, #34	; 0x22
 80073b6:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80073b8:	4b02      	ldr	r3, [pc, #8]	; (80073c4 <USBD_HID_GetHSCfgDesc+0x30>)
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3710      	adds	r7, #16
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}
 80073c2:	bf00      	nop
 80073c4:	20000050 	.word	0x20000050

080073c8 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b084      	sub	sp, #16
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80073d0:	2181      	movs	r1, #129	; 0x81
 80073d2:	4809      	ldr	r0, [pc, #36]	; (80073f8 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 80073d4:	f000 fc01 	bl	8007bda <USBD_GetEpDesc>
 80073d8:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d002      	beq.n	80073e6 <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	220a      	movs	r2, #10
 80073e4:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2222      	movs	r2, #34	; 0x22
 80073ea:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80073ec:	4b02      	ldr	r3, [pc, #8]	; (80073f8 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3710      	adds	r7, #16
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}
 80073f6:	bf00      	nop
 80073f8:	20000050 	.word	0x20000050

080073fc <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b083      	sub	sp, #12
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
 8007404:	460b      	mov	r3, r1
 8007406:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = HID_IDLE;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	32b0      	adds	r2, #176	; 0xb0
 8007412:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007416:	2200      	movs	r2, #0
 8007418:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800741a:	2300      	movs	r3, #0
}
 800741c:	4618      	mov	r0, r3
 800741e:	370c      	adds	r7, #12
 8007420:	46bd      	mov	sp, r7
 8007422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007426:	4770      	bx	lr

08007428 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8007428:	b480      	push	{r7}
 800742a:	b083      	sub	sp, #12
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	220a      	movs	r2, #10
 8007434:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8007436:	4b03      	ldr	r3, [pc, #12]	; (8007444 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8007438:	4618      	mov	r0, r3
 800743a:	370c      	adds	r7, #12
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr
 8007444:	20000080 	.word	0x20000080

08007448 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b086      	sub	sp, #24
 800744c:	af00      	add	r7, sp, #0
 800744e:	60f8      	str	r0, [r7, #12]
 8007450:	60b9      	str	r1, [r7, #8]
 8007452:	4613      	mov	r3, r2
 8007454:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d101      	bne.n	8007460 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800745c:	2303      	movs	r3, #3
 800745e:	e01f      	b.n	80074a0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	2200      	movs	r2, #0
 8007464:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	2200      	movs	r2, #0
 800746c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	2200      	movs	r2, #0
 8007474:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d003      	beq.n	8007486 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	68ba      	ldr	r2, [r7, #8]
 8007482:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2201      	movs	r2, #1
 800748a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	79fa      	ldrb	r2, [r7, #7]
 8007492:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007494:	68f8      	ldr	r0, [r7, #12]
 8007496:	f001 fd29 	bl	8008eec <USBD_LL_Init>
 800749a:	4603      	mov	r3, r0
 800749c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800749e:	7dfb      	ldrb	r3, [r7, #23]
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3718      	adds	r7, #24
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}

080074a8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b084      	sub	sp, #16
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80074b2:	2300      	movs	r3, #0
 80074b4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d101      	bne.n	80074c0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80074bc:	2303      	movs	r3, #3
 80074be:	e025      	b.n	800750c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	683a      	ldr	r2, [r7, #0]
 80074c4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	32ae      	adds	r2, #174	; 0xae
 80074d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d00f      	beq.n	80074fc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	32ae      	adds	r2, #174	; 0xae
 80074e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ec:	f107 020e 	add.w	r2, r7, #14
 80074f0:	4610      	mov	r0, r2
 80074f2:	4798      	blx	r3
 80074f4:	4602      	mov	r2, r0
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007502:	1c5a      	adds	r2, r3, #1
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800750a:	2300      	movs	r3, #0
}
 800750c:	4618      	mov	r0, r3
 800750e:	3710      	adds	r7, #16
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}

08007514 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b082      	sub	sp, #8
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f001 fd31 	bl	8008f84 <USBD_LL_Start>
 8007522:	4603      	mov	r3, r0
}
 8007524:	4618      	mov	r0, r3
 8007526:	3708      	adds	r7, #8
 8007528:	46bd      	mov	sp, r7
 800752a:	bd80      	pop	{r7, pc}

0800752c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800752c:	b480      	push	{r7}
 800752e:	b083      	sub	sp, #12
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007534:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007536:	4618      	mov	r0, r3
 8007538:	370c      	adds	r7, #12
 800753a:	46bd      	mov	sp, r7
 800753c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007540:	4770      	bx	lr

08007542 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007542:	b580      	push	{r7, lr}
 8007544:	b084      	sub	sp, #16
 8007546:	af00      	add	r7, sp, #0
 8007548:	6078      	str	r0, [r7, #4]
 800754a:	460b      	mov	r3, r1
 800754c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800754e:	2300      	movs	r3, #0
 8007550:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007558:	2b00      	cmp	r3, #0
 800755a:	d009      	beq.n	8007570 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	78fa      	ldrb	r2, [r7, #3]
 8007566:	4611      	mov	r1, r2
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	4798      	blx	r3
 800756c:	4603      	mov	r3, r0
 800756e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007570:	7bfb      	ldrb	r3, [r7, #15]
}
 8007572:	4618      	mov	r0, r3
 8007574:	3710      	adds	r7, #16
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}

0800757a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800757a:	b580      	push	{r7, lr}
 800757c:	b084      	sub	sp, #16
 800757e:	af00      	add	r7, sp, #0
 8007580:	6078      	str	r0, [r7, #4]
 8007582:	460b      	mov	r3, r1
 8007584:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007586:	2300      	movs	r3, #0
 8007588:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	78fa      	ldrb	r2, [r7, #3]
 8007594:	4611      	mov	r1, r2
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	4798      	blx	r3
 800759a:	4603      	mov	r3, r0
 800759c:	2b00      	cmp	r3, #0
 800759e:	d001      	beq.n	80075a4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80075a0:	2303      	movs	r3, #3
 80075a2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80075a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3710      	adds	r7, #16
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}

080075ae <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80075ae:	b580      	push	{r7, lr}
 80075b0:	b084      	sub	sp, #16
 80075b2:	af00      	add	r7, sp, #0
 80075b4:	6078      	str	r0, [r7, #4]
 80075b6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80075be:	6839      	ldr	r1, [r7, #0]
 80075c0:	4618      	mov	r0, r3
 80075c2:	f001 f908 	bl	80087d6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2201      	movs	r2, #1
 80075ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80075d4:	461a      	mov	r2, r3
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80075e2:	f003 031f 	and.w	r3, r3, #31
 80075e6:	2b02      	cmp	r3, #2
 80075e8:	d01a      	beq.n	8007620 <USBD_LL_SetupStage+0x72>
 80075ea:	2b02      	cmp	r3, #2
 80075ec:	d822      	bhi.n	8007634 <USBD_LL_SetupStage+0x86>
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d002      	beq.n	80075f8 <USBD_LL_SetupStage+0x4a>
 80075f2:	2b01      	cmp	r3, #1
 80075f4:	d00a      	beq.n	800760c <USBD_LL_SetupStage+0x5e>
 80075f6:	e01d      	b.n	8007634 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80075fe:	4619      	mov	r1, r3
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f000 fb5f 	bl	8007cc4 <USBD_StdDevReq>
 8007606:	4603      	mov	r3, r0
 8007608:	73fb      	strb	r3, [r7, #15]
      break;
 800760a:	e020      	b.n	800764e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007612:	4619      	mov	r1, r3
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f000 fbc7 	bl	8007da8 <USBD_StdItfReq>
 800761a:	4603      	mov	r3, r0
 800761c:	73fb      	strb	r3, [r7, #15]
      break;
 800761e:	e016      	b.n	800764e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007626:	4619      	mov	r1, r3
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f000 fc29 	bl	8007e80 <USBD_StdEPReq>
 800762e:	4603      	mov	r3, r0
 8007630:	73fb      	strb	r3, [r7, #15]
      break;
 8007632:	e00c      	b.n	800764e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800763a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800763e:	b2db      	uxtb	r3, r3
 8007640:	4619      	mov	r1, r3
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f001 fcfe 	bl	8009044 <USBD_LL_StallEP>
 8007648:	4603      	mov	r3, r0
 800764a:	73fb      	strb	r3, [r7, #15]
      break;
 800764c:	bf00      	nop
  }

  return ret;
 800764e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007650:	4618      	mov	r0, r3
 8007652:	3710      	adds	r7, #16
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}

08007658 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b086      	sub	sp, #24
 800765c:	af00      	add	r7, sp, #0
 800765e:	60f8      	str	r0, [r7, #12]
 8007660:	460b      	mov	r3, r1
 8007662:	607a      	str	r2, [r7, #4]
 8007664:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007666:	2300      	movs	r3, #0
 8007668:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800766a:	7afb      	ldrb	r3, [r7, #11]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d16e      	bne.n	800774e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007676:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800767e:	2b03      	cmp	r3, #3
 8007680:	f040 8098 	bne.w	80077b4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	689a      	ldr	r2, [r3, #8]
 8007688:	693b      	ldr	r3, [r7, #16]
 800768a:	68db      	ldr	r3, [r3, #12]
 800768c:	429a      	cmp	r2, r3
 800768e:	d913      	bls.n	80076b8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007690:	693b      	ldr	r3, [r7, #16]
 8007692:	689a      	ldr	r2, [r3, #8]
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	68db      	ldr	r3, [r3, #12]
 8007698:	1ad2      	subs	r2, r2, r3
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	68da      	ldr	r2, [r3, #12]
 80076a2:	693b      	ldr	r3, [r7, #16]
 80076a4:	689b      	ldr	r3, [r3, #8]
 80076a6:	4293      	cmp	r3, r2
 80076a8:	bf28      	it	cs
 80076aa:	4613      	movcs	r3, r2
 80076ac:	461a      	mov	r2, r3
 80076ae:	6879      	ldr	r1, [r7, #4]
 80076b0:	68f8      	ldr	r0, [r7, #12]
 80076b2:	f001 f967 	bl	8008984 <USBD_CtlContinueRx>
 80076b6:	e07d      	b.n	80077b4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80076be:	f003 031f 	and.w	r3, r3, #31
 80076c2:	2b02      	cmp	r3, #2
 80076c4:	d014      	beq.n	80076f0 <USBD_LL_DataOutStage+0x98>
 80076c6:	2b02      	cmp	r3, #2
 80076c8:	d81d      	bhi.n	8007706 <USBD_LL_DataOutStage+0xae>
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d002      	beq.n	80076d4 <USBD_LL_DataOutStage+0x7c>
 80076ce:	2b01      	cmp	r3, #1
 80076d0:	d003      	beq.n	80076da <USBD_LL_DataOutStage+0x82>
 80076d2:	e018      	b.n	8007706 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80076d4:	2300      	movs	r3, #0
 80076d6:	75bb      	strb	r3, [r7, #22]
            break;
 80076d8:	e018      	b.n	800770c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80076e0:	b2db      	uxtb	r3, r3
 80076e2:	4619      	mov	r1, r3
 80076e4:	68f8      	ldr	r0, [r7, #12]
 80076e6:	f000 fa5e 	bl	8007ba6 <USBD_CoreFindIF>
 80076ea:	4603      	mov	r3, r0
 80076ec:	75bb      	strb	r3, [r7, #22]
            break;
 80076ee:	e00d      	b.n	800770c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80076f6:	b2db      	uxtb	r3, r3
 80076f8:	4619      	mov	r1, r3
 80076fa:	68f8      	ldr	r0, [r7, #12]
 80076fc:	f000 fa60 	bl	8007bc0 <USBD_CoreFindEP>
 8007700:	4603      	mov	r3, r0
 8007702:	75bb      	strb	r3, [r7, #22]
            break;
 8007704:	e002      	b.n	800770c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007706:	2300      	movs	r3, #0
 8007708:	75bb      	strb	r3, [r7, #22]
            break;
 800770a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800770c:	7dbb      	ldrb	r3, [r7, #22]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d119      	bne.n	8007746 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007718:	b2db      	uxtb	r3, r3
 800771a:	2b03      	cmp	r3, #3
 800771c:	d113      	bne.n	8007746 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800771e:	7dba      	ldrb	r2, [r7, #22]
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	32ae      	adds	r2, #174	; 0xae
 8007724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007728:	691b      	ldr	r3, [r3, #16]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d00b      	beq.n	8007746 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800772e:	7dba      	ldrb	r2, [r7, #22]
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007736:	7dba      	ldrb	r2, [r7, #22]
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	32ae      	adds	r2, #174	; 0xae
 800773c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007740:	691b      	ldr	r3, [r3, #16]
 8007742:	68f8      	ldr	r0, [r7, #12]
 8007744:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007746:	68f8      	ldr	r0, [r7, #12]
 8007748:	f001 f92d 	bl	80089a6 <USBD_CtlSendStatus>
 800774c:	e032      	b.n	80077b4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800774e:	7afb      	ldrb	r3, [r7, #11]
 8007750:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007754:	b2db      	uxtb	r3, r3
 8007756:	4619      	mov	r1, r3
 8007758:	68f8      	ldr	r0, [r7, #12]
 800775a:	f000 fa31 	bl	8007bc0 <USBD_CoreFindEP>
 800775e:	4603      	mov	r3, r0
 8007760:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007762:	7dbb      	ldrb	r3, [r7, #22]
 8007764:	2bff      	cmp	r3, #255	; 0xff
 8007766:	d025      	beq.n	80077b4 <USBD_LL_DataOutStage+0x15c>
 8007768:	7dbb      	ldrb	r3, [r7, #22]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d122      	bne.n	80077b4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007774:	b2db      	uxtb	r3, r3
 8007776:	2b03      	cmp	r3, #3
 8007778:	d117      	bne.n	80077aa <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800777a:	7dba      	ldrb	r2, [r7, #22]
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	32ae      	adds	r2, #174	; 0xae
 8007780:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007784:	699b      	ldr	r3, [r3, #24]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d00f      	beq.n	80077aa <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800778a:	7dba      	ldrb	r2, [r7, #22]
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007792:	7dba      	ldrb	r2, [r7, #22]
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	32ae      	adds	r2, #174	; 0xae
 8007798:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800779c:	699b      	ldr	r3, [r3, #24]
 800779e:	7afa      	ldrb	r2, [r7, #11]
 80077a0:	4611      	mov	r1, r2
 80077a2:	68f8      	ldr	r0, [r7, #12]
 80077a4:	4798      	blx	r3
 80077a6:	4603      	mov	r3, r0
 80077a8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80077aa:	7dfb      	ldrb	r3, [r7, #23]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d001      	beq.n	80077b4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80077b0:	7dfb      	ldrb	r3, [r7, #23]
 80077b2:	e000      	b.n	80077b6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80077b4:	2300      	movs	r3, #0
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3718      	adds	r7, #24
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}

080077be <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80077be:	b580      	push	{r7, lr}
 80077c0:	b086      	sub	sp, #24
 80077c2:	af00      	add	r7, sp, #0
 80077c4:	60f8      	str	r0, [r7, #12]
 80077c6:	460b      	mov	r3, r1
 80077c8:	607a      	str	r2, [r7, #4]
 80077ca:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80077cc:	7afb      	ldrb	r3, [r7, #11]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d16f      	bne.n	80078b2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	3314      	adds	r3, #20
 80077d6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80077de:	2b02      	cmp	r3, #2
 80077e0:	d15a      	bne.n	8007898 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	689a      	ldr	r2, [r3, #8]
 80077e6:	693b      	ldr	r3, [r7, #16]
 80077e8:	68db      	ldr	r3, [r3, #12]
 80077ea:	429a      	cmp	r2, r3
 80077ec:	d914      	bls.n	8007818 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	689a      	ldr	r2, [r3, #8]
 80077f2:	693b      	ldr	r3, [r7, #16]
 80077f4:	68db      	ldr	r3, [r3, #12]
 80077f6:	1ad2      	subs	r2, r2, r3
 80077f8:	693b      	ldr	r3, [r7, #16]
 80077fa:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80077fc:	693b      	ldr	r3, [r7, #16]
 80077fe:	689b      	ldr	r3, [r3, #8]
 8007800:	461a      	mov	r2, r3
 8007802:	6879      	ldr	r1, [r7, #4]
 8007804:	68f8      	ldr	r0, [r7, #12]
 8007806:	f001 f8ac 	bl	8008962 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800780a:	2300      	movs	r3, #0
 800780c:	2200      	movs	r2, #0
 800780e:	2100      	movs	r1, #0
 8007810:	68f8      	ldr	r0, [r7, #12]
 8007812:	f001 fcc1 	bl	8009198 <USBD_LL_PrepareReceive>
 8007816:	e03f      	b.n	8007898 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	68da      	ldr	r2, [r3, #12]
 800781c:	693b      	ldr	r3, [r7, #16]
 800781e:	689b      	ldr	r3, [r3, #8]
 8007820:	429a      	cmp	r2, r3
 8007822:	d11c      	bne.n	800785e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	685a      	ldr	r2, [r3, #4]
 8007828:	693b      	ldr	r3, [r7, #16]
 800782a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800782c:	429a      	cmp	r2, r3
 800782e:	d316      	bcc.n	800785e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	685a      	ldr	r2, [r3, #4]
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800783a:	429a      	cmp	r2, r3
 800783c:	d20f      	bcs.n	800785e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800783e:	2200      	movs	r2, #0
 8007840:	2100      	movs	r1, #0
 8007842:	68f8      	ldr	r0, [r7, #12]
 8007844:	f001 f88d 	bl	8008962 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	2200      	movs	r2, #0
 800784c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007850:	2300      	movs	r3, #0
 8007852:	2200      	movs	r2, #0
 8007854:	2100      	movs	r1, #0
 8007856:	68f8      	ldr	r0, [r7, #12]
 8007858:	f001 fc9e 	bl	8009198 <USBD_LL_PrepareReceive>
 800785c:	e01c      	b.n	8007898 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007864:	b2db      	uxtb	r3, r3
 8007866:	2b03      	cmp	r3, #3
 8007868:	d10f      	bne.n	800788a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007870:	68db      	ldr	r3, [r3, #12]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d009      	beq.n	800788a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	2200      	movs	r2, #0
 800787a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007884:	68db      	ldr	r3, [r3, #12]
 8007886:	68f8      	ldr	r0, [r7, #12]
 8007888:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800788a:	2180      	movs	r1, #128	; 0x80
 800788c:	68f8      	ldr	r0, [r7, #12]
 800788e:	f001 fbd9 	bl	8009044 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007892:	68f8      	ldr	r0, [r7, #12]
 8007894:	f001 f89a 	bl	80089cc <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d03a      	beq.n	8007918 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80078a2:	68f8      	ldr	r0, [r7, #12]
 80078a4:	f7ff fe42 	bl	800752c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	2200      	movs	r2, #0
 80078ac:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80078b0:	e032      	b.n	8007918 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80078b2:	7afb      	ldrb	r3, [r7, #11]
 80078b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80078b8:	b2db      	uxtb	r3, r3
 80078ba:	4619      	mov	r1, r3
 80078bc:	68f8      	ldr	r0, [r7, #12]
 80078be:	f000 f97f 	bl	8007bc0 <USBD_CoreFindEP>
 80078c2:	4603      	mov	r3, r0
 80078c4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80078c6:	7dfb      	ldrb	r3, [r7, #23]
 80078c8:	2bff      	cmp	r3, #255	; 0xff
 80078ca:	d025      	beq.n	8007918 <USBD_LL_DataInStage+0x15a>
 80078cc:	7dfb      	ldrb	r3, [r7, #23]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d122      	bne.n	8007918 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078d8:	b2db      	uxtb	r3, r3
 80078da:	2b03      	cmp	r3, #3
 80078dc:	d11c      	bne.n	8007918 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80078de:	7dfa      	ldrb	r2, [r7, #23]
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	32ae      	adds	r2, #174	; 0xae
 80078e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078e8:	695b      	ldr	r3, [r3, #20]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d014      	beq.n	8007918 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80078ee:	7dfa      	ldrb	r2, [r7, #23]
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80078f6:	7dfa      	ldrb	r2, [r7, #23]
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	32ae      	adds	r2, #174	; 0xae
 80078fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007900:	695b      	ldr	r3, [r3, #20]
 8007902:	7afa      	ldrb	r2, [r7, #11]
 8007904:	4611      	mov	r1, r2
 8007906:	68f8      	ldr	r0, [r7, #12]
 8007908:	4798      	blx	r3
 800790a:	4603      	mov	r3, r0
 800790c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800790e:	7dbb      	ldrb	r3, [r7, #22]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d001      	beq.n	8007918 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007914:	7dbb      	ldrb	r3, [r7, #22]
 8007916:	e000      	b.n	800791a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007918:	2300      	movs	r3, #0
}
 800791a:	4618      	mov	r0, r3
 800791c:	3718      	adds	r7, #24
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}

08007922 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007922:	b580      	push	{r7, lr}
 8007924:	b084      	sub	sp, #16
 8007926:	af00      	add	r7, sp, #0
 8007928:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800792a:	2300      	movs	r3, #0
 800792c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2201      	movs	r2, #1
 8007932:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2200      	movs	r2, #0
 800793a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2200      	movs	r2, #0
 8007942:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2200      	movs	r2, #0
 8007948:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2200      	movs	r2, #0
 8007950:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800795a:	2b00      	cmp	r3, #0
 800795c:	d014      	beq.n	8007988 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007964:	685b      	ldr	r3, [r3, #4]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d00e      	beq.n	8007988 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007970:	685b      	ldr	r3, [r3, #4]
 8007972:	687a      	ldr	r2, [r7, #4]
 8007974:	6852      	ldr	r2, [r2, #4]
 8007976:	b2d2      	uxtb	r2, r2
 8007978:	4611      	mov	r1, r2
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	4798      	blx	r3
 800797e:	4603      	mov	r3, r0
 8007980:	2b00      	cmp	r3, #0
 8007982:	d001      	beq.n	8007988 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007984:	2303      	movs	r3, #3
 8007986:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007988:	2340      	movs	r3, #64	; 0x40
 800798a:	2200      	movs	r2, #0
 800798c:	2100      	movs	r1, #0
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f001 fb13 	bl	8008fba <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2201      	movs	r2, #1
 8007998:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2240      	movs	r2, #64	; 0x40
 80079a0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80079a4:	2340      	movs	r3, #64	; 0x40
 80079a6:	2200      	movs	r2, #0
 80079a8:	2180      	movs	r1, #128	; 0x80
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f001 fb05 	bl	8008fba <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2201      	movs	r2, #1
 80079b4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2240      	movs	r2, #64	; 0x40
 80079ba:	621a      	str	r2, [r3, #32]

  return ret;
 80079bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3710      	adds	r7, #16
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}

080079c6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80079c6:	b480      	push	{r7}
 80079c8:	b083      	sub	sp, #12
 80079ca:	af00      	add	r7, sp, #0
 80079cc:	6078      	str	r0, [r7, #4]
 80079ce:	460b      	mov	r3, r1
 80079d0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	78fa      	ldrb	r2, [r7, #3]
 80079d6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80079d8:	2300      	movs	r3, #0
}
 80079da:	4618      	mov	r0, r3
 80079dc:	370c      	adds	r7, #12
 80079de:	46bd      	mov	sp, r7
 80079e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e4:	4770      	bx	lr

080079e6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80079e6:	b480      	push	{r7}
 80079e8:	b083      	sub	sp, #12
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079f4:	b2da      	uxtb	r2, r3
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2204      	movs	r2, #4
 8007a00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007a04:	2300      	movs	r3, #0
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	370c      	adds	r7, #12
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a10:	4770      	bx	lr

08007a12 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007a12:	b480      	push	{r7}
 8007a14:	b083      	sub	sp, #12
 8007a16:	af00      	add	r7, sp, #0
 8007a18:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a20:	b2db      	uxtb	r3, r3
 8007a22:	2b04      	cmp	r3, #4
 8007a24:	d106      	bne.n	8007a34 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007a2c:	b2da      	uxtb	r2, r3
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007a34:	2300      	movs	r3, #0
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	370c      	adds	r7, #12
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a40:	4770      	bx	lr

08007a42 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007a42:	b580      	push	{r7, lr}
 8007a44:	b082      	sub	sp, #8
 8007a46:	af00      	add	r7, sp, #0
 8007a48:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a50:	b2db      	uxtb	r3, r3
 8007a52:	2b03      	cmp	r3, #3
 8007a54:	d110      	bne.n	8007a78 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d00b      	beq.n	8007a78 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a66:	69db      	ldr	r3, [r3, #28]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d005      	beq.n	8007a78 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a72:	69db      	ldr	r3, [r3, #28]
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007a78:	2300      	movs	r3, #0
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3708      	adds	r7, #8
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}

08007a82 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007a82:	b580      	push	{r7, lr}
 8007a84:	b082      	sub	sp, #8
 8007a86:	af00      	add	r7, sp, #0
 8007a88:	6078      	str	r0, [r7, #4]
 8007a8a:	460b      	mov	r3, r1
 8007a8c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	32ae      	adds	r2, #174	; 0xae
 8007a98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d101      	bne.n	8007aa4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007aa0:	2303      	movs	r3, #3
 8007aa2:	e01c      	b.n	8007ade <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007aaa:	b2db      	uxtb	r3, r3
 8007aac:	2b03      	cmp	r3, #3
 8007aae:	d115      	bne.n	8007adc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	32ae      	adds	r2, #174	; 0xae
 8007aba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007abe:	6a1b      	ldr	r3, [r3, #32]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d00b      	beq.n	8007adc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	32ae      	adds	r2, #174	; 0xae
 8007ace:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ad2:	6a1b      	ldr	r3, [r3, #32]
 8007ad4:	78fa      	ldrb	r2, [r7, #3]
 8007ad6:	4611      	mov	r1, r2
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007adc:	2300      	movs	r3, #0
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3708      	adds	r7, #8
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}

08007ae6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007ae6:	b580      	push	{r7, lr}
 8007ae8:	b082      	sub	sp, #8
 8007aea:	af00      	add	r7, sp, #0
 8007aec:	6078      	str	r0, [r7, #4]
 8007aee:	460b      	mov	r3, r1
 8007af0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	32ae      	adds	r2, #174	; 0xae
 8007afc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d101      	bne.n	8007b08 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007b04:	2303      	movs	r3, #3
 8007b06:	e01c      	b.n	8007b42 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b0e:	b2db      	uxtb	r3, r3
 8007b10:	2b03      	cmp	r3, #3
 8007b12:	d115      	bne.n	8007b40 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	32ae      	adds	r2, #174	; 0xae
 8007b1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d00b      	beq.n	8007b40 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	32ae      	adds	r2, #174	; 0xae
 8007b32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b38:	78fa      	ldrb	r2, [r7, #3]
 8007b3a:	4611      	mov	r1, r2
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007b40:	2300      	movs	r3, #0
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3708      	adds	r7, #8
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}

08007b4a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007b4a:	b480      	push	{r7}
 8007b4c:	b083      	sub	sp, #12
 8007b4e:	af00      	add	r7, sp, #0
 8007b50:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007b52:	2300      	movs	r3, #0
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	370c      	adds	r7, #12
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5e:	4770      	bx	lr

08007b60 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b084      	sub	sp, #16
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007b68:	2300      	movs	r3, #0
 8007b6a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2201      	movs	r2, #1
 8007b70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d00e      	beq.n	8007b9c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b84:	685b      	ldr	r3, [r3, #4]
 8007b86:	687a      	ldr	r2, [r7, #4]
 8007b88:	6852      	ldr	r2, [r2, #4]
 8007b8a:	b2d2      	uxtb	r2, r2
 8007b8c:	4611      	mov	r1, r2
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	4798      	blx	r3
 8007b92:	4603      	mov	r3, r0
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d001      	beq.n	8007b9c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007b98:	2303      	movs	r3, #3
 8007b9a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3710      	adds	r7, #16
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}

08007ba6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007ba6:	b480      	push	{r7}
 8007ba8:	b083      	sub	sp, #12
 8007baa:	af00      	add	r7, sp, #0
 8007bac:	6078      	str	r0, [r7, #4]
 8007bae:	460b      	mov	r3, r1
 8007bb0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007bb2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	370c      	adds	r7, #12
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbe:	4770      	bx	lr

08007bc0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	b083      	sub	sp, #12
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
 8007bc8:	460b      	mov	r3, r1
 8007bca:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007bcc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	370c      	adds	r7, #12
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd8:	4770      	bx	lr

08007bda <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007bda:	b580      	push	{r7, lr}
 8007bdc:	b086      	sub	sp, #24
 8007bde:	af00      	add	r7, sp, #0
 8007be0:	6078      	str	r0, [r7, #4]
 8007be2:	460b      	mov	r3, r1
 8007be4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	885b      	ldrh	r3, [r3, #2]
 8007bf6:	b29a      	uxth	r2, r3
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	781b      	ldrb	r3, [r3, #0]
 8007bfc:	b29b      	uxth	r3, r3
 8007bfe:	429a      	cmp	r2, r3
 8007c00:	d920      	bls.n	8007c44 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	781b      	ldrb	r3, [r3, #0]
 8007c06:	b29b      	uxth	r3, r3
 8007c08:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007c0a:	e013      	b.n	8007c34 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007c0c:	f107 030a 	add.w	r3, r7, #10
 8007c10:	4619      	mov	r1, r3
 8007c12:	6978      	ldr	r0, [r7, #20]
 8007c14:	f000 f81b 	bl	8007c4e <USBD_GetNextDesc>
 8007c18:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	785b      	ldrb	r3, [r3, #1]
 8007c1e:	2b05      	cmp	r3, #5
 8007c20:	d108      	bne.n	8007c34 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	789b      	ldrb	r3, [r3, #2]
 8007c2a:	78fa      	ldrb	r2, [r7, #3]
 8007c2c:	429a      	cmp	r2, r3
 8007c2e:	d008      	beq.n	8007c42 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007c30:	2300      	movs	r3, #0
 8007c32:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	885b      	ldrh	r3, [r3, #2]
 8007c38:	b29a      	uxth	r2, r3
 8007c3a:	897b      	ldrh	r3, [r7, #10]
 8007c3c:	429a      	cmp	r2, r3
 8007c3e:	d8e5      	bhi.n	8007c0c <USBD_GetEpDesc+0x32>
 8007c40:	e000      	b.n	8007c44 <USBD_GetEpDesc+0x6a>
          break;
 8007c42:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007c44:	693b      	ldr	r3, [r7, #16]
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	3718      	adds	r7, #24
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}

08007c4e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007c4e:	b480      	push	{r7}
 8007c50:	b085      	sub	sp, #20
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	6078      	str	r0, [r7, #4]
 8007c56:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	881a      	ldrh	r2, [r3, #0]
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	781b      	ldrb	r3, [r3, #0]
 8007c64:	b29b      	uxth	r3, r3
 8007c66:	4413      	add	r3, r2
 8007c68:	b29a      	uxth	r2, r3
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	781b      	ldrb	r3, [r3, #0]
 8007c72:	461a      	mov	r2, r3
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	4413      	add	r3, r2
 8007c78:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007c7a:	68fb      	ldr	r3, [r7, #12]
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	3714      	adds	r7, #20
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr

08007c88 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b087      	sub	sp, #28
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007c94:	697b      	ldr	r3, [r7, #20]
 8007c96:	781b      	ldrb	r3, [r3, #0]
 8007c98:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007c9a:	697b      	ldr	r3, [r7, #20]
 8007c9c:	3301      	adds	r3, #1
 8007c9e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	781b      	ldrb	r3, [r3, #0]
 8007ca4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007ca6:	8a3b      	ldrh	r3, [r7, #16]
 8007ca8:	021b      	lsls	r3, r3, #8
 8007caa:	b21a      	sxth	r2, r3
 8007cac:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	b21b      	sxth	r3, r3
 8007cb4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007cb6:	89fb      	ldrh	r3, [r7, #14]
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	371c      	adds	r7, #28
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr

08007cc4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b084      	sub	sp, #16
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007cce:	2300      	movs	r3, #0
 8007cd0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	781b      	ldrb	r3, [r3, #0]
 8007cd6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007cda:	2b40      	cmp	r3, #64	; 0x40
 8007cdc:	d005      	beq.n	8007cea <USBD_StdDevReq+0x26>
 8007cde:	2b40      	cmp	r3, #64	; 0x40
 8007ce0:	d857      	bhi.n	8007d92 <USBD_StdDevReq+0xce>
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d00f      	beq.n	8007d06 <USBD_StdDevReq+0x42>
 8007ce6:	2b20      	cmp	r3, #32
 8007ce8:	d153      	bne.n	8007d92 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	32ae      	adds	r2, #174	; 0xae
 8007cf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cf8:	689b      	ldr	r3, [r3, #8]
 8007cfa:	6839      	ldr	r1, [r7, #0]
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	4798      	blx	r3
 8007d00:	4603      	mov	r3, r0
 8007d02:	73fb      	strb	r3, [r7, #15]
      break;
 8007d04:	e04a      	b.n	8007d9c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	785b      	ldrb	r3, [r3, #1]
 8007d0a:	2b09      	cmp	r3, #9
 8007d0c:	d83b      	bhi.n	8007d86 <USBD_StdDevReq+0xc2>
 8007d0e:	a201      	add	r2, pc, #4	; (adr r2, 8007d14 <USBD_StdDevReq+0x50>)
 8007d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d14:	08007d69 	.word	0x08007d69
 8007d18:	08007d7d 	.word	0x08007d7d
 8007d1c:	08007d87 	.word	0x08007d87
 8007d20:	08007d73 	.word	0x08007d73
 8007d24:	08007d87 	.word	0x08007d87
 8007d28:	08007d47 	.word	0x08007d47
 8007d2c:	08007d3d 	.word	0x08007d3d
 8007d30:	08007d87 	.word	0x08007d87
 8007d34:	08007d5f 	.word	0x08007d5f
 8007d38:	08007d51 	.word	0x08007d51
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007d3c:	6839      	ldr	r1, [r7, #0]
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f000 fa3c 	bl	80081bc <USBD_GetDescriptor>
          break;
 8007d44:	e024      	b.n	8007d90 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007d46:	6839      	ldr	r1, [r7, #0]
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f000 fba1 	bl	8008490 <USBD_SetAddress>
          break;
 8007d4e:	e01f      	b.n	8007d90 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007d50:	6839      	ldr	r1, [r7, #0]
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f000 fbe0 	bl	8008518 <USBD_SetConfig>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	73fb      	strb	r3, [r7, #15]
          break;
 8007d5c:	e018      	b.n	8007d90 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007d5e:	6839      	ldr	r1, [r7, #0]
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f000 fc83 	bl	800866c <USBD_GetConfig>
          break;
 8007d66:	e013      	b.n	8007d90 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007d68:	6839      	ldr	r1, [r7, #0]
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f000 fcb4 	bl	80086d8 <USBD_GetStatus>
          break;
 8007d70:	e00e      	b.n	8007d90 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007d72:	6839      	ldr	r1, [r7, #0]
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f000 fce3 	bl	8008740 <USBD_SetFeature>
          break;
 8007d7a:	e009      	b.n	8007d90 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007d7c:	6839      	ldr	r1, [r7, #0]
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f000 fd07 	bl	8008792 <USBD_ClrFeature>
          break;
 8007d84:	e004      	b.n	8007d90 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007d86:	6839      	ldr	r1, [r7, #0]
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f000 fd5e 	bl	800884a <USBD_CtlError>
          break;
 8007d8e:	bf00      	nop
      }
      break;
 8007d90:	e004      	b.n	8007d9c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007d92:	6839      	ldr	r1, [r7, #0]
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f000 fd58 	bl	800884a <USBD_CtlError>
      break;
 8007d9a:	bf00      	nop
  }

  return ret;
 8007d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	3710      	adds	r7, #16
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}
 8007da6:	bf00      	nop

08007da8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b084      	sub	sp, #16
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
 8007db0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007db2:	2300      	movs	r3, #0
 8007db4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	781b      	ldrb	r3, [r3, #0]
 8007dba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007dbe:	2b40      	cmp	r3, #64	; 0x40
 8007dc0:	d005      	beq.n	8007dce <USBD_StdItfReq+0x26>
 8007dc2:	2b40      	cmp	r3, #64	; 0x40
 8007dc4:	d852      	bhi.n	8007e6c <USBD_StdItfReq+0xc4>
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d001      	beq.n	8007dce <USBD_StdItfReq+0x26>
 8007dca:	2b20      	cmp	r3, #32
 8007dcc:	d14e      	bne.n	8007e6c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dd4:	b2db      	uxtb	r3, r3
 8007dd6:	3b01      	subs	r3, #1
 8007dd8:	2b02      	cmp	r3, #2
 8007dda:	d840      	bhi.n	8007e5e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	889b      	ldrh	r3, [r3, #4]
 8007de0:	b2db      	uxtb	r3, r3
 8007de2:	2b01      	cmp	r3, #1
 8007de4:	d836      	bhi.n	8007e54 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	889b      	ldrh	r3, [r3, #4]
 8007dea:	b2db      	uxtb	r3, r3
 8007dec:	4619      	mov	r1, r3
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f7ff fed9 	bl	8007ba6 <USBD_CoreFindIF>
 8007df4:	4603      	mov	r3, r0
 8007df6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007df8:	7bbb      	ldrb	r3, [r7, #14]
 8007dfa:	2bff      	cmp	r3, #255	; 0xff
 8007dfc:	d01d      	beq.n	8007e3a <USBD_StdItfReq+0x92>
 8007dfe:	7bbb      	ldrb	r3, [r7, #14]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d11a      	bne.n	8007e3a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007e04:	7bba      	ldrb	r2, [r7, #14]
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	32ae      	adds	r2, #174	; 0xae
 8007e0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e0e:	689b      	ldr	r3, [r3, #8]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d00f      	beq.n	8007e34 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007e14:	7bba      	ldrb	r2, [r7, #14]
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007e1c:	7bba      	ldrb	r2, [r7, #14]
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	32ae      	adds	r2, #174	; 0xae
 8007e22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e26:	689b      	ldr	r3, [r3, #8]
 8007e28:	6839      	ldr	r1, [r7, #0]
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	4798      	blx	r3
 8007e2e:	4603      	mov	r3, r0
 8007e30:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007e32:	e004      	b.n	8007e3e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007e34:	2303      	movs	r3, #3
 8007e36:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007e38:	e001      	b.n	8007e3e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007e3a:	2303      	movs	r3, #3
 8007e3c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	88db      	ldrh	r3, [r3, #6]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d110      	bne.n	8007e68 <USBD_StdItfReq+0xc0>
 8007e46:	7bfb      	ldrb	r3, [r7, #15]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d10d      	bne.n	8007e68 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f000 fdaa 	bl	80089a6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007e52:	e009      	b.n	8007e68 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007e54:	6839      	ldr	r1, [r7, #0]
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f000 fcf7 	bl	800884a <USBD_CtlError>
          break;
 8007e5c:	e004      	b.n	8007e68 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007e5e:	6839      	ldr	r1, [r7, #0]
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f000 fcf2 	bl	800884a <USBD_CtlError>
          break;
 8007e66:	e000      	b.n	8007e6a <USBD_StdItfReq+0xc2>
          break;
 8007e68:	bf00      	nop
      }
      break;
 8007e6a:	e004      	b.n	8007e76 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007e6c:	6839      	ldr	r1, [r7, #0]
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f000 fceb 	bl	800884a <USBD_CtlError>
      break;
 8007e74:	bf00      	nop
  }

  return ret;
 8007e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	3710      	adds	r7, #16
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}

08007e80 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b084      	sub	sp, #16
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
 8007e88:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	889b      	ldrh	r3, [r3, #4]
 8007e92:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	781b      	ldrb	r3, [r3, #0]
 8007e98:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007e9c:	2b40      	cmp	r3, #64	; 0x40
 8007e9e:	d007      	beq.n	8007eb0 <USBD_StdEPReq+0x30>
 8007ea0:	2b40      	cmp	r3, #64	; 0x40
 8007ea2:	f200 817f 	bhi.w	80081a4 <USBD_StdEPReq+0x324>
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d02a      	beq.n	8007f00 <USBD_StdEPReq+0x80>
 8007eaa:	2b20      	cmp	r3, #32
 8007eac:	f040 817a 	bne.w	80081a4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007eb0:	7bbb      	ldrb	r3, [r7, #14]
 8007eb2:	4619      	mov	r1, r3
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f7ff fe83 	bl	8007bc0 <USBD_CoreFindEP>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007ebe:	7b7b      	ldrb	r3, [r7, #13]
 8007ec0:	2bff      	cmp	r3, #255	; 0xff
 8007ec2:	f000 8174 	beq.w	80081ae <USBD_StdEPReq+0x32e>
 8007ec6:	7b7b      	ldrb	r3, [r7, #13]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	f040 8170 	bne.w	80081ae <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007ece:	7b7a      	ldrb	r2, [r7, #13]
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007ed6:	7b7a      	ldrb	r2, [r7, #13]
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	32ae      	adds	r2, #174	; 0xae
 8007edc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ee0:	689b      	ldr	r3, [r3, #8]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	f000 8163 	beq.w	80081ae <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007ee8:	7b7a      	ldrb	r2, [r7, #13]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	32ae      	adds	r2, #174	; 0xae
 8007eee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ef2:	689b      	ldr	r3, [r3, #8]
 8007ef4:	6839      	ldr	r1, [r7, #0]
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	4798      	blx	r3
 8007efa:	4603      	mov	r3, r0
 8007efc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007efe:	e156      	b.n	80081ae <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	785b      	ldrb	r3, [r3, #1]
 8007f04:	2b03      	cmp	r3, #3
 8007f06:	d008      	beq.n	8007f1a <USBD_StdEPReq+0x9a>
 8007f08:	2b03      	cmp	r3, #3
 8007f0a:	f300 8145 	bgt.w	8008198 <USBD_StdEPReq+0x318>
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	f000 809b 	beq.w	800804a <USBD_StdEPReq+0x1ca>
 8007f14:	2b01      	cmp	r3, #1
 8007f16:	d03c      	beq.n	8007f92 <USBD_StdEPReq+0x112>
 8007f18:	e13e      	b.n	8008198 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f20:	b2db      	uxtb	r3, r3
 8007f22:	2b02      	cmp	r3, #2
 8007f24:	d002      	beq.n	8007f2c <USBD_StdEPReq+0xac>
 8007f26:	2b03      	cmp	r3, #3
 8007f28:	d016      	beq.n	8007f58 <USBD_StdEPReq+0xd8>
 8007f2a:	e02c      	b.n	8007f86 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f2c:	7bbb      	ldrb	r3, [r7, #14]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d00d      	beq.n	8007f4e <USBD_StdEPReq+0xce>
 8007f32:	7bbb      	ldrb	r3, [r7, #14]
 8007f34:	2b80      	cmp	r3, #128	; 0x80
 8007f36:	d00a      	beq.n	8007f4e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007f38:	7bbb      	ldrb	r3, [r7, #14]
 8007f3a:	4619      	mov	r1, r3
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f001 f881 	bl	8009044 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007f42:	2180      	movs	r1, #128	; 0x80
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f001 f87d 	bl	8009044 <USBD_LL_StallEP>
 8007f4a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007f4c:	e020      	b.n	8007f90 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007f4e:	6839      	ldr	r1, [r7, #0]
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f000 fc7a 	bl	800884a <USBD_CtlError>
              break;
 8007f56:	e01b      	b.n	8007f90 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	885b      	ldrh	r3, [r3, #2]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d10e      	bne.n	8007f7e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007f60:	7bbb      	ldrb	r3, [r7, #14]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d00b      	beq.n	8007f7e <USBD_StdEPReq+0xfe>
 8007f66:	7bbb      	ldrb	r3, [r7, #14]
 8007f68:	2b80      	cmp	r3, #128	; 0x80
 8007f6a:	d008      	beq.n	8007f7e <USBD_StdEPReq+0xfe>
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	88db      	ldrh	r3, [r3, #6]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d104      	bne.n	8007f7e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007f74:	7bbb      	ldrb	r3, [r7, #14]
 8007f76:	4619      	mov	r1, r3
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f001 f863 	bl	8009044 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f000 fd11 	bl	80089a6 <USBD_CtlSendStatus>

              break;
 8007f84:	e004      	b.n	8007f90 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007f86:	6839      	ldr	r1, [r7, #0]
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f000 fc5e 	bl	800884a <USBD_CtlError>
              break;
 8007f8e:	bf00      	nop
          }
          break;
 8007f90:	e107      	b.n	80081a2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f98:	b2db      	uxtb	r3, r3
 8007f9a:	2b02      	cmp	r3, #2
 8007f9c:	d002      	beq.n	8007fa4 <USBD_StdEPReq+0x124>
 8007f9e:	2b03      	cmp	r3, #3
 8007fa0:	d016      	beq.n	8007fd0 <USBD_StdEPReq+0x150>
 8007fa2:	e04b      	b.n	800803c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007fa4:	7bbb      	ldrb	r3, [r7, #14]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d00d      	beq.n	8007fc6 <USBD_StdEPReq+0x146>
 8007faa:	7bbb      	ldrb	r3, [r7, #14]
 8007fac:	2b80      	cmp	r3, #128	; 0x80
 8007fae:	d00a      	beq.n	8007fc6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007fb0:	7bbb      	ldrb	r3, [r7, #14]
 8007fb2:	4619      	mov	r1, r3
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f001 f845 	bl	8009044 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007fba:	2180      	movs	r1, #128	; 0x80
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f001 f841 	bl	8009044 <USBD_LL_StallEP>
 8007fc2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007fc4:	e040      	b.n	8008048 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007fc6:	6839      	ldr	r1, [r7, #0]
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f000 fc3e 	bl	800884a <USBD_CtlError>
              break;
 8007fce:	e03b      	b.n	8008048 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	885b      	ldrh	r3, [r3, #2]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d136      	bne.n	8008046 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007fd8:	7bbb      	ldrb	r3, [r7, #14]
 8007fda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d004      	beq.n	8007fec <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007fe2:	7bbb      	ldrb	r3, [r7, #14]
 8007fe4:	4619      	mov	r1, r3
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f001 f84b 	bl	8009082 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f000 fcda 	bl	80089a6 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007ff2:	7bbb      	ldrb	r3, [r7, #14]
 8007ff4:	4619      	mov	r1, r3
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f7ff fde2 	bl	8007bc0 <USBD_CoreFindEP>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008000:	7b7b      	ldrb	r3, [r7, #13]
 8008002:	2bff      	cmp	r3, #255	; 0xff
 8008004:	d01f      	beq.n	8008046 <USBD_StdEPReq+0x1c6>
 8008006:	7b7b      	ldrb	r3, [r7, #13]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d11c      	bne.n	8008046 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800800c:	7b7a      	ldrb	r2, [r7, #13]
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008014:	7b7a      	ldrb	r2, [r7, #13]
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	32ae      	adds	r2, #174	; 0xae
 800801a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800801e:	689b      	ldr	r3, [r3, #8]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d010      	beq.n	8008046 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008024:	7b7a      	ldrb	r2, [r7, #13]
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	32ae      	adds	r2, #174	; 0xae
 800802a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800802e:	689b      	ldr	r3, [r3, #8]
 8008030:	6839      	ldr	r1, [r7, #0]
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	4798      	blx	r3
 8008036:	4603      	mov	r3, r0
 8008038:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800803a:	e004      	b.n	8008046 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800803c:	6839      	ldr	r1, [r7, #0]
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f000 fc03 	bl	800884a <USBD_CtlError>
              break;
 8008044:	e000      	b.n	8008048 <USBD_StdEPReq+0x1c8>
              break;
 8008046:	bf00      	nop
          }
          break;
 8008048:	e0ab      	b.n	80081a2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008050:	b2db      	uxtb	r3, r3
 8008052:	2b02      	cmp	r3, #2
 8008054:	d002      	beq.n	800805c <USBD_StdEPReq+0x1dc>
 8008056:	2b03      	cmp	r3, #3
 8008058:	d032      	beq.n	80080c0 <USBD_StdEPReq+0x240>
 800805a:	e097      	b.n	800818c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800805c:	7bbb      	ldrb	r3, [r7, #14]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d007      	beq.n	8008072 <USBD_StdEPReq+0x1f2>
 8008062:	7bbb      	ldrb	r3, [r7, #14]
 8008064:	2b80      	cmp	r3, #128	; 0x80
 8008066:	d004      	beq.n	8008072 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008068:	6839      	ldr	r1, [r7, #0]
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f000 fbed 	bl	800884a <USBD_CtlError>
                break;
 8008070:	e091      	b.n	8008196 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008072:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008076:	2b00      	cmp	r3, #0
 8008078:	da0b      	bge.n	8008092 <USBD_StdEPReq+0x212>
 800807a:	7bbb      	ldrb	r3, [r7, #14]
 800807c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008080:	4613      	mov	r3, r2
 8008082:	009b      	lsls	r3, r3, #2
 8008084:	4413      	add	r3, r2
 8008086:	009b      	lsls	r3, r3, #2
 8008088:	3310      	adds	r3, #16
 800808a:	687a      	ldr	r2, [r7, #4]
 800808c:	4413      	add	r3, r2
 800808e:	3304      	adds	r3, #4
 8008090:	e00b      	b.n	80080aa <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008092:	7bbb      	ldrb	r3, [r7, #14]
 8008094:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008098:	4613      	mov	r3, r2
 800809a:	009b      	lsls	r3, r3, #2
 800809c:	4413      	add	r3, r2
 800809e:	009b      	lsls	r3, r3, #2
 80080a0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80080a4:	687a      	ldr	r2, [r7, #4]
 80080a6:	4413      	add	r3, r2
 80080a8:	3304      	adds	r3, #4
 80080aa:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	2200      	movs	r2, #0
 80080b0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	2202      	movs	r2, #2
 80080b6:	4619      	mov	r1, r3
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f000 fc37 	bl	800892c <USBD_CtlSendData>
              break;
 80080be:	e06a      	b.n	8008196 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80080c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	da11      	bge.n	80080ec <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80080c8:	7bbb      	ldrb	r3, [r7, #14]
 80080ca:	f003 020f 	and.w	r2, r3, #15
 80080ce:	6879      	ldr	r1, [r7, #4]
 80080d0:	4613      	mov	r3, r2
 80080d2:	009b      	lsls	r3, r3, #2
 80080d4:	4413      	add	r3, r2
 80080d6:	009b      	lsls	r3, r3, #2
 80080d8:	440b      	add	r3, r1
 80080da:	3324      	adds	r3, #36	; 0x24
 80080dc:	881b      	ldrh	r3, [r3, #0]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d117      	bne.n	8008112 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80080e2:	6839      	ldr	r1, [r7, #0]
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f000 fbb0 	bl	800884a <USBD_CtlError>
                  break;
 80080ea:	e054      	b.n	8008196 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80080ec:	7bbb      	ldrb	r3, [r7, #14]
 80080ee:	f003 020f 	and.w	r2, r3, #15
 80080f2:	6879      	ldr	r1, [r7, #4]
 80080f4:	4613      	mov	r3, r2
 80080f6:	009b      	lsls	r3, r3, #2
 80080f8:	4413      	add	r3, r2
 80080fa:	009b      	lsls	r3, r3, #2
 80080fc:	440b      	add	r3, r1
 80080fe:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008102:	881b      	ldrh	r3, [r3, #0]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d104      	bne.n	8008112 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008108:	6839      	ldr	r1, [r7, #0]
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f000 fb9d 	bl	800884a <USBD_CtlError>
                  break;
 8008110:	e041      	b.n	8008196 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008112:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008116:	2b00      	cmp	r3, #0
 8008118:	da0b      	bge.n	8008132 <USBD_StdEPReq+0x2b2>
 800811a:	7bbb      	ldrb	r3, [r7, #14]
 800811c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008120:	4613      	mov	r3, r2
 8008122:	009b      	lsls	r3, r3, #2
 8008124:	4413      	add	r3, r2
 8008126:	009b      	lsls	r3, r3, #2
 8008128:	3310      	adds	r3, #16
 800812a:	687a      	ldr	r2, [r7, #4]
 800812c:	4413      	add	r3, r2
 800812e:	3304      	adds	r3, #4
 8008130:	e00b      	b.n	800814a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008132:	7bbb      	ldrb	r3, [r7, #14]
 8008134:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008138:	4613      	mov	r3, r2
 800813a:	009b      	lsls	r3, r3, #2
 800813c:	4413      	add	r3, r2
 800813e:	009b      	lsls	r3, r3, #2
 8008140:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008144:	687a      	ldr	r2, [r7, #4]
 8008146:	4413      	add	r3, r2
 8008148:	3304      	adds	r3, #4
 800814a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800814c:	7bbb      	ldrb	r3, [r7, #14]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d002      	beq.n	8008158 <USBD_StdEPReq+0x2d8>
 8008152:	7bbb      	ldrb	r3, [r7, #14]
 8008154:	2b80      	cmp	r3, #128	; 0x80
 8008156:	d103      	bne.n	8008160 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	2200      	movs	r2, #0
 800815c:	601a      	str	r2, [r3, #0]
 800815e:	e00e      	b.n	800817e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008160:	7bbb      	ldrb	r3, [r7, #14]
 8008162:	4619      	mov	r1, r3
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f000 ffab 	bl	80090c0 <USBD_LL_IsStallEP>
 800816a:	4603      	mov	r3, r0
 800816c:	2b00      	cmp	r3, #0
 800816e:	d003      	beq.n	8008178 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	2201      	movs	r2, #1
 8008174:	601a      	str	r2, [r3, #0]
 8008176:	e002      	b.n	800817e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	2200      	movs	r2, #0
 800817c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	2202      	movs	r2, #2
 8008182:	4619      	mov	r1, r3
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f000 fbd1 	bl	800892c <USBD_CtlSendData>
              break;
 800818a:	e004      	b.n	8008196 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800818c:	6839      	ldr	r1, [r7, #0]
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f000 fb5b 	bl	800884a <USBD_CtlError>
              break;
 8008194:	bf00      	nop
          }
          break;
 8008196:	e004      	b.n	80081a2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008198:	6839      	ldr	r1, [r7, #0]
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f000 fb55 	bl	800884a <USBD_CtlError>
          break;
 80081a0:	bf00      	nop
      }
      break;
 80081a2:	e005      	b.n	80081b0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80081a4:	6839      	ldr	r1, [r7, #0]
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f000 fb4f 	bl	800884a <USBD_CtlError>
      break;
 80081ac:	e000      	b.n	80081b0 <USBD_StdEPReq+0x330>
      break;
 80081ae:	bf00      	nop
  }

  return ret;
 80081b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3710      	adds	r7, #16
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}
	...

080081bc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b084      	sub	sp, #16
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
 80081c4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80081c6:	2300      	movs	r3, #0
 80081c8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80081ca:	2300      	movs	r3, #0
 80081cc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80081ce:	2300      	movs	r3, #0
 80081d0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	885b      	ldrh	r3, [r3, #2]
 80081d6:	0a1b      	lsrs	r3, r3, #8
 80081d8:	b29b      	uxth	r3, r3
 80081da:	3b01      	subs	r3, #1
 80081dc:	2b06      	cmp	r3, #6
 80081de:	f200 8128 	bhi.w	8008432 <USBD_GetDescriptor+0x276>
 80081e2:	a201      	add	r2, pc, #4	; (adr r2, 80081e8 <USBD_GetDescriptor+0x2c>)
 80081e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081e8:	08008205 	.word	0x08008205
 80081ec:	0800821d 	.word	0x0800821d
 80081f0:	0800825d 	.word	0x0800825d
 80081f4:	08008433 	.word	0x08008433
 80081f8:	08008433 	.word	0x08008433
 80081fc:	080083d3 	.word	0x080083d3
 8008200:	080083ff 	.word	0x080083ff
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	687a      	ldr	r2, [r7, #4]
 800820e:	7c12      	ldrb	r2, [r2, #16]
 8008210:	f107 0108 	add.w	r1, r7, #8
 8008214:	4610      	mov	r0, r2
 8008216:	4798      	blx	r3
 8008218:	60f8      	str	r0, [r7, #12]
      break;
 800821a:	e112      	b.n	8008442 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	7c1b      	ldrb	r3, [r3, #16]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d10d      	bne.n	8008240 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800822a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800822c:	f107 0208 	add.w	r2, r7, #8
 8008230:	4610      	mov	r0, r2
 8008232:	4798      	blx	r3
 8008234:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	3301      	adds	r3, #1
 800823a:	2202      	movs	r2, #2
 800823c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800823e:	e100      	b.n	8008442 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008248:	f107 0208 	add.w	r2, r7, #8
 800824c:	4610      	mov	r0, r2
 800824e:	4798      	blx	r3
 8008250:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	3301      	adds	r3, #1
 8008256:	2202      	movs	r2, #2
 8008258:	701a      	strb	r2, [r3, #0]
      break;
 800825a:	e0f2      	b.n	8008442 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	885b      	ldrh	r3, [r3, #2]
 8008260:	b2db      	uxtb	r3, r3
 8008262:	2b05      	cmp	r3, #5
 8008264:	f200 80ac 	bhi.w	80083c0 <USBD_GetDescriptor+0x204>
 8008268:	a201      	add	r2, pc, #4	; (adr r2, 8008270 <USBD_GetDescriptor+0xb4>)
 800826a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800826e:	bf00      	nop
 8008270:	08008289 	.word	0x08008289
 8008274:	080082bd 	.word	0x080082bd
 8008278:	080082f1 	.word	0x080082f1
 800827c:	08008325 	.word	0x08008325
 8008280:	08008359 	.word	0x08008359
 8008284:	0800838d 	.word	0x0800838d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800828e:	685b      	ldr	r3, [r3, #4]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d00b      	beq.n	80082ac <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800829a:	685b      	ldr	r3, [r3, #4]
 800829c:	687a      	ldr	r2, [r7, #4]
 800829e:	7c12      	ldrb	r2, [r2, #16]
 80082a0:	f107 0108 	add.w	r1, r7, #8
 80082a4:	4610      	mov	r0, r2
 80082a6:	4798      	blx	r3
 80082a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082aa:	e091      	b.n	80083d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80082ac:	6839      	ldr	r1, [r7, #0]
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f000 facb 	bl	800884a <USBD_CtlError>
            err++;
 80082b4:	7afb      	ldrb	r3, [r7, #11]
 80082b6:	3301      	adds	r3, #1
 80082b8:	72fb      	strb	r3, [r7, #11]
          break;
 80082ba:	e089      	b.n	80083d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082c2:	689b      	ldr	r3, [r3, #8]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d00b      	beq.n	80082e0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082ce:	689b      	ldr	r3, [r3, #8]
 80082d0:	687a      	ldr	r2, [r7, #4]
 80082d2:	7c12      	ldrb	r2, [r2, #16]
 80082d4:	f107 0108 	add.w	r1, r7, #8
 80082d8:	4610      	mov	r0, r2
 80082da:	4798      	blx	r3
 80082dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082de:	e077      	b.n	80083d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80082e0:	6839      	ldr	r1, [r7, #0]
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f000 fab1 	bl	800884a <USBD_CtlError>
            err++;
 80082e8:	7afb      	ldrb	r3, [r7, #11]
 80082ea:	3301      	adds	r3, #1
 80082ec:	72fb      	strb	r3, [r7, #11]
          break;
 80082ee:	e06f      	b.n	80083d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082f6:	68db      	ldr	r3, [r3, #12]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d00b      	beq.n	8008314 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008302:	68db      	ldr	r3, [r3, #12]
 8008304:	687a      	ldr	r2, [r7, #4]
 8008306:	7c12      	ldrb	r2, [r2, #16]
 8008308:	f107 0108 	add.w	r1, r7, #8
 800830c:	4610      	mov	r0, r2
 800830e:	4798      	blx	r3
 8008310:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008312:	e05d      	b.n	80083d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008314:	6839      	ldr	r1, [r7, #0]
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f000 fa97 	bl	800884a <USBD_CtlError>
            err++;
 800831c:	7afb      	ldrb	r3, [r7, #11]
 800831e:	3301      	adds	r3, #1
 8008320:	72fb      	strb	r3, [r7, #11]
          break;
 8008322:	e055      	b.n	80083d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800832a:	691b      	ldr	r3, [r3, #16]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d00b      	beq.n	8008348 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008336:	691b      	ldr	r3, [r3, #16]
 8008338:	687a      	ldr	r2, [r7, #4]
 800833a:	7c12      	ldrb	r2, [r2, #16]
 800833c:	f107 0108 	add.w	r1, r7, #8
 8008340:	4610      	mov	r0, r2
 8008342:	4798      	blx	r3
 8008344:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008346:	e043      	b.n	80083d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008348:	6839      	ldr	r1, [r7, #0]
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f000 fa7d 	bl	800884a <USBD_CtlError>
            err++;
 8008350:	7afb      	ldrb	r3, [r7, #11]
 8008352:	3301      	adds	r3, #1
 8008354:	72fb      	strb	r3, [r7, #11]
          break;
 8008356:	e03b      	b.n	80083d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800835e:	695b      	ldr	r3, [r3, #20]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d00b      	beq.n	800837c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800836a:	695b      	ldr	r3, [r3, #20]
 800836c:	687a      	ldr	r2, [r7, #4]
 800836e:	7c12      	ldrb	r2, [r2, #16]
 8008370:	f107 0108 	add.w	r1, r7, #8
 8008374:	4610      	mov	r0, r2
 8008376:	4798      	blx	r3
 8008378:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800837a:	e029      	b.n	80083d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800837c:	6839      	ldr	r1, [r7, #0]
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f000 fa63 	bl	800884a <USBD_CtlError>
            err++;
 8008384:	7afb      	ldrb	r3, [r7, #11]
 8008386:	3301      	adds	r3, #1
 8008388:	72fb      	strb	r3, [r7, #11]
          break;
 800838a:	e021      	b.n	80083d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008392:	699b      	ldr	r3, [r3, #24]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d00b      	beq.n	80083b0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800839e:	699b      	ldr	r3, [r3, #24]
 80083a0:	687a      	ldr	r2, [r7, #4]
 80083a2:	7c12      	ldrb	r2, [r2, #16]
 80083a4:	f107 0108 	add.w	r1, r7, #8
 80083a8:	4610      	mov	r0, r2
 80083aa:	4798      	blx	r3
 80083ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083ae:	e00f      	b.n	80083d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80083b0:	6839      	ldr	r1, [r7, #0]
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f000 fa49 	bl	800884a <USBD_CtlError>
            err++;
 80083b8:	7afb      	ldrb	r3, [r7, #11]
 80083ba:	3301      	adds	r3, #1
 80083bc:	72fb      	strb	r3, [r7, #11]
          break;
 80083be:	e007      	b.n	80083d0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80083c0:	6839      	ldr	r1, [r7, #0]
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f000 fa41 	bl	800884a <USBD_CtlError>
          err++;
 80083c8:	7afb      	ldrb	r3, [r7, #11]
 80083ca:	3301      	adds	r3, #1
 80083cc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80083ce:	bf00      	nop
      }
      break;
 80083d0:	e037      	b.n	8008442 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	7c1b      	ldrb	r3, [r3, #16]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d109      	bne.n	80083ee <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083e2:	f107 0208 	add.w	r2, r7, #8
 80083e6:	4610      	mov	r0, r2
 80083e8:	4798      	blx	r3
 80083ea:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80083ec:	e029      	b.n	8008442 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80083ee:	6839      	ldr	r1, [r7, #0]
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f000 fa2a 	bl	800884a <USBD_CtlError>
        err++;
 80083f6:	7afb      	ldrb	r3, [r7, #11]
 80083f8:	3301      	adds	r3, #1
 80083fa:	72fb      	strb	r3, [r7, #11]
      break;
 80083fc:	e021      	b.n	8008442 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	7c1b      	ldrb	r3, [r3, #16]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d10d      	bne.n	8008422 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800840c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800840e:	f107 0208 	add.w	r2, r7, #8
 8008412:	4610      	mov	r0, r2
 8008414:	4798      	blx	r3
 8008416:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	3301      	adds	r3, #1
 800841c:	2207      	movs	r2, #7
 800841e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008420:	e00f      	b.n	8008442 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008422:	6839      	ldr	r1, [r7, #0]
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f000 fa10 	bl	800884a <USBD_CtlError>
        err++;
 800842a:	7afb      	ldrb	r3, [r7, #11]
 800842c:	3301      	adds	r3, #1
 800842e:	72fb      	strb	r3, [r7, #11]
      break;
 8008430:	e007      	b.n	8008442 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008432:	6839      	ldr	r1, [r7, #0]
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f000 fa08 	bl	800884a <USBD_CtlError>
      err++;
 800843a:	7afb      	ldrb	r3, [r7, #11]
 800843c:	3301      	adds	r3, #1
 800843e:	72fb      	strb	r3, [r7, #11]
      break;
 8008440:	bf00      	nop
  }

  if (err != 0U)
 8008442:	7afb      	ldrb	r3, [r7, #11]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d11e      	bne.n	8008486 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	88db      	ldrh	r3, [r3, #6]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d016      	beq.n	800847e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008450:	893b      	ldrh	r3, [r7, #8]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d00e      	beq.n	8008474 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	88da      	ldrh	r2, [r3, #6]
 800845a:	893b      	ldrh	r3, [r7, #8]
 800845c:	4293      	cmp	r3, r2
 800845e:	bf28      	it	cs
 8008460:	4613      	movcs	r3, r2
 8008462:	b29b      	uxth	r3, r3
 8008464:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008466:	893b      	ldrh	r3, [r7, #8]
 8008468:	461a      	mov	r2, r3
 800846a:	68f9      	ldr	r1, [r7, #12]
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f000 fa5d 	bl	800892c <USBD_CtlSendData>
 8008472:	e009      	b.n	8008488 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008474:	6839      	ldr	r1, [r7, #0]
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f000 f9e7 	bl	800884a <USBD_CtlError>
 800847c:	e004      	b.n	8008488 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f000 fa91 	bl	80089a6 <USBD_CtlSendStatus>
 8008484:	e000      	b.n	8008488 <USBD_GetDescriptor+0x2cc>
    return;
 8008486:	bf00      	nop
  }
}
 8008488:	3710      	adds	r7, #16
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}
 800848e:	bf00      	nop

08008490 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b084      	sub	sp, #16
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
 8008498:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	889b      	ldrh	r3, [r3, #4]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d131      	bne.n	8008506 <USBD_SetAddress+0x76>
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	88db      	ldrh	r3, [r3, #6]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d12d      	bne.n	8008506 <USBD_SetAddress+0x76>
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	885b      	ldrh	r3, [r3, #2]
 80084ae:	2b7f      	cmp	r3, #127	; 0x7f
 80084b0:	d829      	bhi.n	8008506 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	885b      	ldrh	r3, [r3, #2]
 80084b6:	b2db      	uxtb	r3, r3
 80084b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084bc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084c4:	b2db      	uxtb	r3, r3
 80084c6:	2b03      	cmp	r3, #3
 80084c8:	d104      	bne.n	80084d4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80084ca:	6839      	ldr	r1, [r7, #0]
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f000 f9bc 	bl	800884a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084d2:	e01d      	b.n	8008510 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	7bfa      	ldrb	r2, [r7, #15]
 80084d8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80084dc:	7bfb      	ldrb	r3, [r7, #15]
 80084de:	4619      	mov	r1, r3
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f000 fe19 	bl	8009118 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f000 fa5d 	bl	80089a6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80084ec:	7bfb      	ldrb	r3, [r7, #15]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d004      	beq.n	80084fc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2202      	movs	r2, #2
 80084f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084fa:	e009      	b.n	8008510 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2201      	movs	r2, #1
 8008500:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008504:	e004      	b.n	8008510 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008506:	6839      	ldr	r1, [r7, #0]
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f000 f99e 	bl	800884a <USBD_CtlError>
  }
}
 800850e:	bf00      	nop
 8008510:	bf00      	nop
 8008512:	3710      	adds	r7, #16
 8008514:	46bd      	mov	sp, r7
 8008516:	bd80      	pop	{r7, pc}

08008518 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b084      	sub	sp, #16
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
 8008520:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008522:	2300      	movs	r3, #0
 8008524:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	885b      	ldrh	r3, [r3, #2]
 800852a:	b2da      	uxtb	r2, r3
 800852c:	4b4e      	ldr	r3, [pc, #312]	; (8008668 <USBD_SetConfig+0x150>)
 800852e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008530:	4b4d      	ldr	r3, [pc, #308]	; (8008668 <USBD_SetConfig+0x150>)
 8008532:	781b      	ldrb	r3, [r3, #0]
 8008534:	2b01      	cmp	r3, #1
 8008536:	d905      	bls.n	8008544 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008538:	6839      	ldr	r1, [r7, #0]
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f000 f985 	bl	800884a <USBD_CtlError>
    return USBD_FAIL;
 8008540:	2303      	movs	r3, #3
 8008542:	e08c      	b.n	800865e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800854a:	b2db      	uxtb	r3, r3
 800854c:	2b02      	cmp	r3, #2
 800854e:	d002      	beq.n	8008556 <USBD_SetConfig+0x3e>
 8008550:	2b03      	cmp	r3, #3
 8008552:	d029      	beq.n	80085a8 <USBD_SetConfig+0x90>
 8008554:	e075      	b.n	8008642 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008556:	4b44      	ldr	r3, [pc, #272]	; (8008668 <USBD_SetConfig+0x150>)
 8008558:	781b      	ldrb	r3, [r3, #0]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d020      	beq.n	80085a0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800855e:	4b42      	ldr	r3, [pc, #264]	; (8008668 <USBD_SetConfig+0x150>)
 8008560:	781b      	ldrb	r3, [r3, #0]
 8008562:	461a      	mov	r2, r3
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008568:	4b3f      	ldr	r3, [pc, #252]	; (8008668 <USBD_SetConfig+0x150>)
 800856a:	781b      	ldrb	r3, [r3, #0]
 800856c:	4619      	mov	r1, r3
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f7fe ffe7 	bl	8007542 <USBD_SetClassConfig>
 8008574:	4603      	mov	r3, r0
 8008576:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008578:	7bfb      	ldrb	r3, [r7, #15]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d008      	beq.n	8008590 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800857e:	6839      	ldr	r1, [r7, #0]
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	f000 f962 	bl	800884a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2202      	movs	r2, #2
 800858a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800858e:	e065      	b.n	800865c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008590:	6878      	ldr	r0, [r7, #4]
 8008592:	f000 fa08 	bl	80089a6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2203      	movs	r2, #3
 800859a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800859e:	e05d      	b.n	800865c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f000 fa00 	bl	80089a6 <USBD_CtlSendStatus>
      break;
 80085a6:	e059      	b.n	800865c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80085a8:	4b2f      	ldr	r3, [pc, #188]	; (8008668 <USBD_SetConfig+0x150>)
 80085aa:	781b      	ldrb	r3, [r3, #0]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d112      	bne.n	80085d6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2202      	movs	r2, #2
 80085b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80085b8:	4b2b      	ldr	r3, [pc, #172]	; (8008668 <USBD_SetConfig+0x150>)
 80085ba:	781b      	ldrb	r3, [r3, #0]
 80085bc:	461a      	mov	r2, r3
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80085c2:	4b29      	ldr	r3, [pc, #164]	; (8008668 <USBD_SetConfig+0x150>)
 80085c4:	781b      	ldrb	r3, [r3, #0]
 80085c6:	4619      	mov	r1, r3
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f7fe ffd6 	bl	800757a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f000 f9e9 	bl	80089a6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80085d4:	e042      	b.n	800865c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80085d6:	4b24      	ldr	r3, [pc, #144]	; (8008668 <USBD_SetConfig+0x150>)
 80085d8:	781b      	ldrb	r3, [r3, #0]
 80085da:	461a      	mov	r2, r3
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	685b      	ldr	r3, [r3, #4]
 80085e0:	429a      	cmp	r2, r3
 80085e2:	d02a      	beq.n	800863a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	685b      	ldr	r3, [r3, #4]
 80085e8:	b2db      	uxtb	r3, r3
 80085ea:	4619      	mov	r1, r3
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f7fe ffc4 	bl	800757a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80085f2:	4b1d      	ldr	r3, [pc, #116]	; (8008668 <USBD_SetConfig+0x150>)
 80085f4:	781b      	ldrb	r3, [r3, #0]
 80085f6:	461a      	mov	r2, r3
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80085fc:	4b1a      	ldr	r3, [pc, #104]	; (8008668 <USBD_SetConfig+0x150>)
 80085fe:	781b      	ldrb	r3, [r3, #0]
 8008600:	4619      	mov	r1, r3
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f7fe ff9d 	bl	8007542 <USBD_SetClassConfig>
 8008608:	4603      	mov	r3, r0
 800860a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800860c:	7bfb      	ldrb	r3, [r7, #15]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d00f      	beq.n	8008632 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008612:	6839      	ldr	r1, [r7, #0]
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f000 f918 	bl	800884a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	685b      	ldr	r3, [r3, #4]
 800861e:	b2db      	uxtb	r3, r3
 8008620:	4619      	mov	r1, r3
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f7fe ffa9 	bl	800757a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2202      	movs	r2, #2
 800862c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008630:	e014      	b.n	800865c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	f000 f9b7 	bl	80089a6 <USBD_CtlSendStatus>
      break;
 8008638:	e010      	b.n	800865c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f000 f9b3 	bl	80089a6 <USBD_CtlSendStatus>
      break;
 8008640:	e00c      	b.n	800865c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008642:	6839      	ldr	r1, [r7, #0]
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f000 f900 	bl	800884a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800864a:	4b07      	ldr	r3, [pc, #28]	; (8008668 <USBD_SetConfig+0x150>)
 800864c:	781b      	ldrb	r3, [r3, #0]
 800864e:	4619      	mov	r1, r3
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f7fe ff92 	bl	800757a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008656:	2303      	movs	r3, #3
 8008658:	73fb      	strb	r3, [r7, #15]
      break;
 800865a:	bf00      	nop
  }

  return ret;
 800865c:	7bfb      	ldrb	r3, [r7, #15]
}
 800865e:	4618      	mov	r0, r3
 8008660:	3710      	adds	r7, #16
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}
 8008666:	bf00      	nop
 8008668:	20000308 	.word	0x20000308

0800866c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b082      	sub	sp, #8
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
 8008674:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	88db      	ldrh	r3, [r3, #6]
 800867a:	2b01      	cmp	r3, #1
 800867c:	d004      	beq.n	8008688 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800867e:	6839      	ldr	r1, [r7, #0]
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f000 f8e2 	bl	800884a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008686:	e023      	b.n	80086d0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800868e:	b2db      	uxtb	r3, r3
 8008690:	2b02      	cmp	r3, #2
 8008692:	dc02      	bgt.n	800869a <USBD_GetConfig+0x2e>
 8008694:	2b00      	cmp	r3, #0
 8008696:	dc03      	bgt.n	80086a0 <USBD_GetConfig+0x34>
 8008698:	e015      	b.n	80086c6 <USBD_GetConfig+0x5a>
 800869a:	2b03      	cmp	r3, #3
 800869c:	d00b      	beq.n	80086b6 <USBD_GetConfig+0x4a>
 800869e:	e012      	b.n	80086c6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2200      	movs	r2, #0
 80086a4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	3308      	adds	r3, #8
 80086aa:	2201      	movs	r2, #1
 80086ac:	4619      	mov	r1, r3
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f000 f93c 	bl	800892c <USBD_CtlSendData>
        break;
 80086b4:	e00c      	b.n	80086d0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	3304      	adds	r3, #4
 80086ba:	2201      	movs	r2, #1
 80086bc:	4619      	mov	r1, r3
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f000 f934 	bl	800892c <USBD_CtlSendData>
        break;
 80086c4:	e004      	b.n	80086d0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80086c6:	6839      	ldr	r1, [r7, #0]
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f000 f8be 	bl	800884a <USBD_CtlError>
        break;
 80086ce:	bf00      	nop
}
 80086d0:	bf00      	nop
 80086d2:	3708      	adds	r7, #8
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd80      	pop	{r7, pc}

080086d8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b082      	sub	sp, #8
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
 80086e0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086e8:	b2db      	uxtb	r3, r3
 80086ea:	3b01      	subs	r3, #1
 80086ec:	2b02      	cmp	r3, #2
 80086ee:	d81e      	bhi.n	800872e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	88db      	ldrh	r3, [r3, #6]
 80086f4:	2b02      	cmp	r3, #2
 80086f6:	d004      	beq.n	8008702 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80086f8:	6839      	ldr	r1, [r7, #0]
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f000 f8a5 	bl	800884a <USBD_CtlError>
        break;
 8008700:	e01a      	b.n	8008738 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2201      	movs	r2, #1
 8008706:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800870e:	2b00      	cmp	r3, #0
 8008710:	d005      	beq.n	800871e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	68db      	ldr	r3, [r3, #12]
 8008716:	f043 0202 	orr.w	r2, r3, #2
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	330c      	adds	r3, #12
 8008722:	2202      	movs	r2, #2
 8008724:	4619      	mov	r1, r3
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f000 f900 	bl	800892c <USBD_CtlSendData>
      break;
 800872c:	e004      	b.n	8008738 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800872e:	6839      	ldr	r1, [r7, #0]
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f000 f88a 	bl	800884a <USBD_CtlError>
      break;
 8008736:	bf00      	nop
  }
}
 8008738:	bf00      	nop
 800873a:	3708      	adds	r7, #8
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}

08008740 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b082      	sub	sp, #8
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
 8008748:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	885b      	ldrh	r3, [r3, #2]
 800874e:	2b01      	cmp	r3, #1
 8008750:	d107      	bne.n	8008762 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2201      	movs	r2, #1
 8008756:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f000 f923 	bl	80089a6 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008760:	e013      	b.n	800878a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	885b      	ldrh	r3, [r3, #2]
 8008766:	2b02      	cmp	r3, #2
 8008768:	d10b      	bne.n	8008782 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	889b      	ldrh	r3, [r3, #4]
 800876e:	0a1b      	lsrs	r3, r3, #8
 8008770:	b29b      	uxth	r3, r3
 8008772:	b2da      	uxtb	r2, r3
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f000 f913 	bl	80089a6 <USBD_CtlSendStatus>
}
 8008780:	e003      	b.n	800878a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008782:	6839      	ldr	r1, [r7, #0]
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f000 f860 	bl	800884a <USBD_CtlError>
}
 800878a:	bf00      	nop
 800878c:	3708      	adds	r7, #8
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}

08008792 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008792:	b580      	push	{r7, lr}
 8008794:	b082      	sub	sp, #8
 8008796:	af00      	add	r7, sp, #0
 8008798:	6078      	str	r0, [r7, #4]
 800879a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087a2:	b2db      	uxtb	r3, r3
 80087a4:	3b01      	subs	r3, #1
 80087a6:	2b02      	cmp	r3, #2
 80087a8:	d80b      	bhi.n	80087c2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	885b      	ldrh	r3, [r3, #2]
 80087ae:	2b01      	cmp	r3, #1
 80087b0:	d10c      	bne.n	80087cc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2200      	movs	r2, #0
 80087b6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f000 f8f3 	bl	80089a6 <USBD_CtlSendStatus>
      }
      break;
 80087c0:	e004      	b.n	80087cc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80087c2:	6839      	ldr	r1, [r7, #0]
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	f000 f840 	bl	800884a <USBD_CtlError>
      break;
 80087ca:	e000      	b.n	80087ce <USBD_ClrFeature+0x3c>
      break;
 80087cc:	bf00      	nop
  }
}
 80087ce:	bf00      	nop
 80087d0:	3708      	adds	r7, #8
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}

080087d6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80087d6:	b580      	push	{r7, lr}
 80087d8:	b084      	sub	sp, #16
 80087da:	af00      	add	r7, sp, #0
 80087dc:	6078      	str	r0, [r7, #4]
 80087de:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	781a      	ldrb	r2, [r3, #0]
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	3301      	adds	r3, #1
 80087f0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	781a      	ldrb	r2, [r3, #0]
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	3301      	adds	r3, #1
 80087fe:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008800:	68f8      	ldr	r0, [r7, #12]
 8008802:	f7ff fa41 	bl	8007c88 <SWAPBYTE>
 8008806:	4603      	mov	r3, r0
 8008808:	461a      	mov	r2, r3
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	3301      	adds	r3, #1
 8008812:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	3301      	adds	r3, #1
 8008818:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800881a:	68f8      	ldr	r0, [r7, #12]
 800881c:	f7ff fa34 	bl	8007c88 <SWAPBYTE>
 8008820:	4603      	mov	r3, r0
 8008822:	461a      	mov	r2, r3
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	3301      	adds	r3, #1
 800882c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	3301      	adds	r3, #1
 8008832:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008834:	68f8      	ldr	r0, [r7, #12]
 8008836:	f7ff fa27 	bl	8007c88 <SWAPBYTE>
 800883a:	4603      	mov	r3, r0
 800883c:	461a      	mov	r2, r3
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	80da      	strh	r2, [r3, #6]
}
 8008842:	bf00      	nop
 8008844:	3710      	adds	r7, #16
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}

0800884a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800884a:	b580      	push	{r7, lr}
 800884c:	b082      	sub	sp, #8
 800884e:	af00      	add	r7, sp, #0
 8008850:	6078      	str	r0, [r7, #4]
 8008852:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008854:	2180      	movs	r1, #128	; 0x80
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f000 fbf4 	bl	8009044 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800885c:	2100      	movs	r1, #0
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f000 fbf0 	bl	8009044 <USBD_LL_StallEP>
}
 8008864:	bf00      	nop
 8008866:	3708      	adds	r7, #8
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}

0800886c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b086      	sub	sp, #24
 8008870:	af00      	add	r7, sp, #0
 8008872:	60f8      	str	r0, [r7, #12]
 8008874:	60b9      	str	r1, [r7, #8]
 8008876:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008878:	2300      	movs	r3, #0
 800887a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d036      	beq.n	80088f0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008886:	6938      	ldr	r0, [r7, #16]
 8008888:	f000 f836 	bl	80088f8 <USBD_GetLen>
 800888c:	4603      	mov	r3, r0
 800888e:	3301      	adds	r3, #1
 8008890:	b29b      	uxth	r3, r3
 8008892:	005b      	lsls	r3, r3, #1
 8008894:	b29a      	uxth	r2, r3
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800889a:	7dfb      	ldrb	r3, [r7, #23]
 800889c:	68ba      	ldr	r2, [r7, #8]
 800889e:	4413      	add	r3, r2
 80088a0:	687a      	ldr	r2, [r7, #4]
 80088a2:	7812      	ldrb	r2, [r2, #0]
 80088a4:	701a      	strb	r2, [r3, #0]
  idx++;
 80088a6:	7dfb      	ldrb	r3, [r7, #23]
 80088a8:	3301      	adds	r3, #1
 80088aa:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80088ac:	7dfb      	ldrb	r3, [r7, #23]
 80088ae:	68ba      	ldr	r2, [r7, #8]
 80088b0:	4413      	add	r3, r2
 80088b2:	2203      	movs	r2, #3
 80088b4:	701a      	strb	r2, [r3, #0]
  idx++;
 80088b6:	7dfb      	ldrb	r3, [r7, #23]
 80088b8:	3301      	adds	r3, #1
 80088ba:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80088bc:	e013      	b.n	80088e6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80088be:	7dfb      	ldrb	r3, [r7, #23]
 80088c0:	68ba      	ldr	r2, [r7, #8]
 80088c2:	4413      	add	r3, r2
 80088c4:	693a      	ldr	r2, [r7, #16]
 80088c6:	7812      	ldrb	r2, [r2, #0]
 80088c8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80088ca:	693b      	ldr	r3, [r7, #16]
 80088cc:	3301      	adds	r3, #1
 80088ce:	613b      	str	r3, [r7, #16]
    idx++;
 80088d0:	7dfb      	ldrb	r3, [r7, #23]
 80088d2:	3301      	adds	r3, #1
 80088d4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80088d6:	7dfb      	ldrb	r3, [r7, #23]
 80088d8:	68ba      	ldr	r2, [r7, #8]
 80088da:	4413      	add	r3, r2
 80088dc:	2200      	movs	r2, #0
 80088de:	701a      	strb	r2, [r3, #0]
    idx++;
 80088e0:	7dfb      	ldrb	r3, [r7, #23]
 80088e2:	3301      	adds	r3, #1
 80088e4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80088e6:	693b      	ldr	r3, [r7, #16]
 80088e8:	781b      	ldrb	r3, [r3, #0]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d1e7      	bne.n	80088be <USBD_GetString+0x52>
 80088ee:	e000      	b.n	80088f2 <USBD_GetString+0x86>
    return;
 80088f0:	bf00      	nop
  }
}
 80088f2:	3718      	adds	r7, #24
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd80      	pop	{r7, pc}

080088f8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80088f8:	b480      	push	{r7}
 80088fa:	b085      	sub	sp, #20
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008900:	2300      	movs	r3, #0
 8008902:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008908:	e005      	b.n	8008916 <USBD_GetLen+0x1e>
  {
    len++;
 800890a:	7bfb      	ldrb	r3, [r7, #15]
 800890c:	3301      	adds	r3, #1
 800890e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	3301      	adds	r3, #1
 8008914:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	781b      	ldrb	r3, [r3, #0]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d1f5      	bne.n	800890a <USBD_GetLen+0x12>
  }

  return len;
 800891e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008920:	4618      	mov	r0, r3
 8008922:	3714      	adds	r7, #20
 8008924:	46bd      	mov	sp, r7
 8008926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892a:	4770      	bx	lr

0800892c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b084      	sub	sp, #16
 8008930:	af00      	add	r7, sp, #0
 8008932:	60f8      	str	r0, [r7, #12]
 8008934:	60b9      	str	r1, [r7, #8]
 8008936:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	2202      	movs	r2, #2
 800893c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	687a      	ldr	r2, [r7, #4]
 8008944:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	687a      	ldr	r2, [r7, #4]
 800894a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	68ba      	ldr	r2, [r7, #8]
 8008950:	2100      	movs	r1, #0
 8008952:	68f8      	ldr	r0, [r7, #12]
 8008954:	f000 fbff 	bl	8009156 <USBD_LL_Transmit>

  return USBD_OK;
 8008958:	2300      	movs	r3, #0
}
 800895a:	4618      	mov	r0, r3
 800895c:	3710      	adds	r7, #16
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}

08008962 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008962:	b580      	push	{r7, lr}
 8008964:	b084      	sub	sp, #16
 8008966:	af00      	add	r7, sp, #0
 8008968:	60f8      	str	r0, [r7, #12]
 800896a:	60b9      	str	r1, [r7, #8]
 800896c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	68ba      	ldr	r2, [r7, #8]
 8008972:	2100      	movs	r1, #0
 8008974:	68f8      	ldr	r0, [r7, #12]
 8008976:	f000 fbee 	bl	8009156 <USBD_LL_Transmit>

  return USBD_OK;
 800897a:	2300      	movs	r3, #0
}
 800897c:	4618      	mov	r0, r3
 800897e:	3710      	adds	r7, #16
 8008980:	46bd      	mov	sp, r7
 8008982:	bd80      	pop	{r7, pc}

08008984 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b084      	sub	sp, #16
 8008988:	af00      	add	r7, sp, #0
 800898a:	60f8      	str	r0, [r7, #12]
 800898c:	60b9      	str	r1, [r7, #8]
 800898e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	68ba      	ldr	r2, [r7, #8]
 8008994:	2100      	movs	r1, #0
 8008996:	68f8      	ldr	r0, [r7, #12]
 8008998:	f000 fbfe 	bl	8009198 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800899c:	2300      	movs	r3, #0
}
 800899e:	4618      	mov	r0, r3
 80089a0:	3710      	adds	r7, #16
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd80      	pop	{r7, pc}

080089a6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80089a6:	b580      	push	{r7, lr}
 80089a8:	b082      	sub	sp, #8
 80089aa:	af00      	add	r7, sp, #0
 80089ac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2204      	movs	r2, #4
 80089b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80089b6:	2300      	movs	r3, #0
 80089b8:	2200      	movs	r2, #0
 80089ba:	2100      	movs	r1, #0
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f000 fbca 	bl	8009156 <USBD_LL_Transmit>

  return USBD_OK;
 80089c2:	2300      	movs	r3, #0
}
 80089c4:	4618      	mov	r0, r3
 80089c6:	3708      	adds	r7, #8
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bd80      	pop	{r7, pc}

080089cc <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b082      	sub	sp, #8
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2205      	movs	r2, #5
 80089d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80089dc:	2300      	movs	r3, #0
 80089de:	2200      	movs	r2, #0
 80089e0:	2100      	movs	r1, #0
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f000 fbd8 	bl	8009198 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80089e8:	2300      	movs	r3, #0
}
 80089ea:	4618      	mov	r0, r3
 80089ec:	3708      	adds	r7, #8
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bd80      	pop	{r7, pc}
	...

080089f4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80089f8:	2200      	movs	r2, #0
 80089fa:	490e      	ldr	r1, [pc, #56]	; (8008a34 <MX_USB_DEVICE_Init+0x40>)
 80089fc:	480e      	ldr	r0, [pc, #56]	; (8008a38 <MX_USB_DEVICE_Init+0x44>)
 80089fe:	f7fe fd23 	bl	8007448 <USBD_Init>
 8008a02:	4603      	mov	r3, r0
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d001      	beq.n	8008a0c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008a08:	f7f8 f910 	bl	8000c2c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8008a0c:	490b      	ldr	r1, [pc, #44]	; (8008a3c <MX_USB_DEVICE_Init+0x48>)
 8008a0e:	480a      	ldr	r0, [pc, #40]	; (8008a38 <MX_USB_DEVICE_Init+0x44>)
 8008a10:	f7fe fd4a 	bl	80074a8 <USBD_RegisterClass>
 8008a14:	4603      	mov	r3, r0
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d001      	beq.n	8008a1e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008a1a:	f7f8 f907 	bl	8000c2c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008a1e:	4806      	ldr	r0, [pc, #24]	; (8008a38 <MX_USB_DEVICE_Init+0x44>)
 8008a20:	f7fe fd78 	bl	8007514 <USBD_Start>
 8008a24:	4603      	mov	r3, r0
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d001      	beq.n	8008a2e <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8008a2a:	f7f8 f8ff 	bl	8000c2c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008a2e:	bf00      	nop
 8008a30:	bd80      	pop	{r7, pc}
 8008a32:	bf00      	nop
 8008a34:	200000cc 	.word	0x200000cc
 8008a38:	2000030c 	.word	0x2000030c
 8008a3c:	20000018 	.word	0x20000018

08008a40 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a40:	b480      	push	{r7}
 8008a42:	b083      	sub	sp, #12
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	4603      	mov	r3, r0
 8008a48:	6039      	str	r1, [r7, #0]
 8008a4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	2212      	movs	r2, #18
 8008a50:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008a52:	4b03      	ldr	r3, [pc, #12]	; (8008a60 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008a54:	4618      	mov	r0, r3
 8008a56:	370c      	adds	r7, #12
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5e:	4770      	bx	lr
 8008a60:	200000e8 	.word	0x200000e8

08008a64 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a64:	b480      	push	{r7}
 8008a66:	b083      	sub	sp, #12
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	6039      	str	r1, [r7, #0]
 8008a6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	2204      	movs	r2, #4
 8008a74:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008a76:	4b03      	ldr	r3, [pc, #12]	; (8008a84 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	370c      	adds	r7, #12
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a82:	4770      	bx	lr
 8008a84:	200000fc 	.word	0x200000fc

08008a88 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b082      	sub	sp, #8
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	4603      	mov	r3, r0
 8008a90:	6039      	str	r1, [r7, #0]
 8008a92:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008a94:	79fb      	ldrb	r3, [r7, #7]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d105      	bne.n	8008aa6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008a9a:	683a      	ldr	r2, [r7, #0]
 8008a9c:	4907      	ldr	r1, [pc, #28]	; (8008abc <USBD_FS_ProductStrDescriptor+0x34>)
 8008a9e:	4808      	ldr	r0, [pc, #32]	; (8008ac0 <USBD_FS_ProductStrDescriptor+0x38>)
 8008aa0:	f7ff fee4 	bl	800886c <USBD_GetString>
 8008aa4:	e004      	b.n	8008ab0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008aa6:	683a      	ldr	r2, [r7, #0]
 8008aa8:	4904      	ldr	r1, [pc, #16]	; (8008abc <USBD_FS_ProductStrDescriptor+0x34>)
 8008aaa:	4805      	ldr	r0, [pc, #20]	; (8008ac0 <USBD_FS_ProductStrDescriptor+0x38>)
 8008aac:	f7ff fede 	bl	800886c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008ab0:	4b02      	ldr	r3, [pc, #8]	; (8008abc <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	3708      	adds	r7, #8
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd80      	pop	{r7, pc}
 8008aba:	bf00      	nop
 8008abc:	200005e8 	.word	0x200005e8
 8008ac0:	080092d4 	.word	0x080092d4

08008ac4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b082      	sub	sp, #8
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	4603      	mov	r3, r0
 8008acc:	6039      	str	r1, [r7, #0]
 8008ace:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008ad0:	683a      	ldr	r2, [r7, #0]
 8008ad2:	4904      	ldr	r1, [pc, #16]	; (8008ae4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008ad4:	4804      	ldr	r0, [pc, #16]	; (8008ae8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008ad6:	f7ff fec9 	bl	800886c <USBD_GetString>
  return USBD_StrDesc;
 8008ada:	4b02      	ldr	r3, [pc, #8]	; (8008ae4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008adc:	4618      	mov	r0, r3
 8008ade:	3708      	adds	r7, #8
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bd80      	pop	{r7, pc}
 8008ae4:	200005e8 	.word	0x200005e8
 8008ae8:	080092e4 	.word	0x080092e4

08008aec <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b082      	sub	sp, #8
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	4603      	mov	r3, r0
 8008af4:	6039      	str	r1, [r7, #0]
 8008af6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	221a      	movs	r2, #26
 8008afc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008afe:	f000 f843 	bl	8008b88 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008b02:	4b02      	ldr	r3, [pc, #8]	; (8008b0c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008b04:	4618      	mov	r0, r3
 8008b06:	3708      	adds	r7, #8
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bd80      	pop	{r7, pc}
 8008b0c:	20000100 	.word	0x20000100

08008b10 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b082      	sub	sp, #8
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	4603      	mov	r3, r0
 8008b18:	6039      	str	r1, [r7, #0]
 8008b1a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008b1c:	79fb      	ldrb	r3, [r7, #7]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d105      	bne.n	8008b2e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008b22:	683a      	ldr	r2, [r7, #0]
 8008b24:	4907      	ldr	r1, [pc, #28]	; (8008b44 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008b26:	4808      	ldr	r0, [pc, #32]	; (8008b48 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008b28:	f7ff fea0 	bl	800886c <USBD_GetString>
 8008b2c:	e004      	b.n	8008b38 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008b2e:	683a      	ldr	r2, [r7, #0]
 8008b30:	4904      	ldr	r1, [pc, #16]	; (8008b44 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008b32:	4805      	ldr	r0, [pc, #20]	; (8008b48 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008b34:	f7ff fe9a 	bl	800886c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008b38:	4b02      	ldr	r3, [pc, #8]	; (8008b44 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3708      	adds	r7, #8
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}
 8008b42:	bf00      	nop
 8008b44:	200005e8 	.word	0x200005e8
 8008b48:	080092f4 	.word	0x080092f4

08008b4c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b082      	sub	sp, #8
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	4603      	mov	r3, r0
 8008b54:	6039      	str	r1, [r7, #0]
 8008b56:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008b58:	79fb      	ldrb	r3, [r7, #7]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d105      	bne.n	8008b6a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008b5e:	683a      	ldr	r2, [r7, #0]
 8008b60:	4907      	ldr	r1, [pc, #28]	; (8008b80 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008b62:	4808      	ldr	r0, [pc, #32]	; (8008b84 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008b64:	f7ff fe82 	bl	800886c <USBD_GetString>
 8008b68:	e004      	b.n	8008b74 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008b6a:	683a      	ldr	r2, [r7, #0]
 8008b6c:	4904      	ldr	r1, [pc, #16]	; (8008b80 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008b6e:	4805      	ldr	r0, [pc, #20]	; (8008b84 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008b70:	f7ff fe7c 	bl	800886c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008b74:	4b02      	ldr	r3, [pc, #8]	; (8008b80 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	3708      	adds	r7, #8
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}
 8008b7e:	bf00      	nop
 8008b80:	200005e8 	.word	0x200005e8
 8008b84:	08009300 	.word	0x08009300

08008b88 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b084      	sub	sp, #16
 8008b8c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008b8e:	4b0f      	ldr	r3, [pc, #60]	; (8008bcc <Get_SerialNum+0x44>)
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008b94:	4b0e      	ldr	r3, [pc, #56]	; (8008bd0 <Get_SerialNum+0x48>)
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008b9a:	4b0e      	ldr	r3, [pc, #56]	; (8008bd4 <Get_SerialNum+0x4c>)
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008ba0:	68fa      	ldr	r2, [r7, #12]
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	4413      	add	r3, r2
 8008ba6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d009      	beq.n	8008bc2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008bae:	2208      	movs	r2, #8
 8008bb0:	4909      	ldr	r1, [pc, #36]	; (8008bd8 <Get_SerialNum+0x50>)
 8008bb2:	68f8      	ldr	r0, [r7, #12]
 8008bb4:	f000 f814 	bl	8008be0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008bb8:	2204      	movs	r2, #4
 8008bba:	4908      	ldr	r1, [pc, #32]	; (8008bdc <Get_SerialNum+0x54>)
 8008bbc:	68b8      	ldr	r0, [r7, #8]
 8008bbe:	f000 f80f 	bl	8008be0 <IntToUnicode>
  }
}
 8008bc2:	bf00      	nop
 8008bc4:	3710      	adds	r7, #16
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}
 8008bca:	bf00      	nop
 8008bcc:	1fff7a10 	.word	0x1fff7a10
 8008bd0:	1fff7a14 	.word	0x1fff7a14
 8008bd4:	1fff7a18 	.word	0x1fff7a18
 8008bd8:	20000102 	.word	0x20000102
 8008bdc:	20000112 	.word	0x20000112

08008be0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008be0:	b480      	push	{r7}
 8008be2:	b087      	sub	sp, #28
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	60f8      	str	r0, [r7, #12]
 8008be8:	60b9      	str	r1, [r7, #8]
 8008bea:	4613      	mov	r3, r2
 8008bec:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008bee:	2300      	movs	r3, #0
 8008bf0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	75fb      	strb	r3, [r7, #23]
 8008bf6:	e027      	b.n	8008c48 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	0f1b      	lsrs	r3, r3, #28
 8008bfc:	2b09      	cmp	r3, #9
 8008bfe:	d80b      	bhi.n	8008c18 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	0f1b      	lsrs	r3, r3, #28
 8008c04:	b2da      	uxtb	r2, r3
 8008c06:	7dfb      	ldrb	r3, [r7, #23]
 8008c08:	005b      	lsls	r3, r3, #1
 8008c0a:	4619      	mov	r1, r3
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	440b      	add	r3, r1
 8008c10:	3230      	adds	r2, #48	; 0x30
 8008c12:	b2d2      	uxtb	r2, r2
 8008c14:	701a      	strb	r2, [r3, #0]
 8008c16:	e00a      	b.n	8008c2e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	0f1b      	lsrs	r3, r3, #28
 8008c1c:	b2da      	uxtb	r2, r3
 8008c1e:	7dfb      	ldrb	r3, [r7, #23]
 8008c20:	005b      	lsls	r3, r3, #1
 8008c22:	4619      	mov	r1, r3
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	440b      	add	r3, r1
 8008c28:	3237      	adds	r2, #55	; 0x37
 8008c2a:	b2d2      	uxtb	r2, r2
 8008c2c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	011b      	lsls	r3, r3, #4
 8008c32:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008c34:	7dfb      	ldrb	r3, [r7, #23]
 8008c36:	005b      	lsls	r3, r3, #1
 8008c38:	3301      	adds	r3, #1
 8008c3a:	68ba      	ldr	r2, [r7, #8]
 8008c3c:	4413      	add	r3, r2
 8008c3e:	2200      	movs	r2, #0
 8008c40:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008c42:	7dfb      	ldrb	r3, [r7, #23]
 8008c44:	3301      	adds	r3, #1
 8008c46:	75fb      	strb	r3, [r7, #23]
 8008c48:	7dfa      	ldrb	r2, [r7, #23]
 8008c4a:	79fb      	ldrb	r3, [r7, #7]
 8008c4c:	429a      	cmp	r2, r3
 8008c4e:	d3d3      	bcc.n	8008bf8 <IntToUnicode+0x18>
  }
}
 8008c50:	bf00      	nop
 8008c52:	bf00      	nop
 8008c54:	371c      	adds	r7, #28
 8008c56:	46bd      	mov	sp, r7
 8008c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5c:	4770      	bx	lr
	...

08008c60 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b08a      	sub	sp, #40	; 0x28
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008c68:	f107 0314 	add.w	r3, r7, #20
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	601a      	str	r2, [r3, #0]
 8008c70:	605a      	str	r2, [r3, #4]
 8008c72:	609a      	str	r2, [r3, #8]
 8008c74:	60da      	str	r2, [r3, #12]
 8008c76:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008c80:	d13a      	bne.n	8008cf8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008c82:	2300      	movs	r3, #0
 8008c84:	613b      	str	r3, [r7, #16]
 8008c86:	4b1e      	ldr	r3, [pc, #120]	; (8008d00 <HAL_PCD_MspInit+0xa0>)
 8008c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c8a:	4a1d      	ldr	r2, [pc, #116]	; (8008d00 <HAL_PCD_MspInit+0xa0>)
 8008c8c:	f043 0301 	orr.w	r3, r3, #1
 8008c90:	6313      	str	r3, [r2, #48]	; 0x30
 8008c92:	4b1b      	ldr	r3, [pc, #108]	; (8008d00 <HAL_PCD_MspInit+0xa0>)
 8008c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c96:	f003 0301 	and.w	r3, r3, #1
 8008c9a:	613b      	str	r3, [r7, #16]
 8008c9c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008c9e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008ca2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ca4:	2302      	movs	r3, #2
 8008ca6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ca8:	2300      	movs	r3, #0
 8008caa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008cac:	2303      	movs	r3, #3
 8008cae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008cb0:	230a      	movs	r3, #10
 8008cb2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008cb4:	f107 0314 	add.w	r3, r7, #20
 8008cb8:	4619      	mov	r1, r3
 8008cba:	4812      	ldr	r0, [pc, #72]	; (8008d04 <HAL_PCD_MspInit+0xa4>)
 8008cbc:	f7f8 fc4c 	bl	8001558 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008cc0:	4b0f      	ldr	r3, [pc, #60]	; (8008d00 <HAL_PCD_MspInit+0xa0>)
 8008cc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cc4:	4a0e      	ldr	r2, [pc, #56]	; (8008d00 <HAL_PCD_MspInit+0xa0>)
 8008cc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cca:	6353      	str	r3, [r2, #52]	; 0x34
 8008ccc:	2300      	movs	r3, #0
 8008cce:	60fb      	str	r3, [r7, #12]
 8008cd0:	4b0b      	ldr	r3, [pc, #44]	; (8008d00 <HAL_PCD_MspInit+0xa0>)
 8008cd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cd4:	4a0a      	ldr	r2, [pc, #40]	; (8008d00 <HAL_PCD_MspInit+0xa0>)
 8008cd6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008cda:	6453      	str	r3, [r2, #68]	; 0x44
 8008cdc:	4b08      	ldr	r3, [pc, #32]	; (8008d00 <HAL_PCD_MspInit+0xa0>)
 8008cde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ce0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008ce4:	60fb      	str	r3, [r7, #12]
 8008ce6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008ce8:	2200      	movs	r2, #0
 8008cea:	2100      	movs	r1, #0
 8008cec:	2043      	movs	r0, #67	; 0x43
 8008cee:	f7f8 fa42 	bl	8001176 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008cf2:	2043      	movs	r0, #67	; 0x43
 8008cf4:	f7f8 fa5b 	bl	80011ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008cf8:	bf00      	nop
 8008cfa:	3728      	adds	r7, #40	; 0x28
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bd80      	pop	{r7, pc}
 8008d00:	40023800 	.word	0x40023800
 8008d04:	40020000 	.word	0x40020000

08008d08 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b082      	sub	sp, #8
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008d1c:	4619      	mov	r1, r3
 8008d1e:	4610      	mov	r0, r2
 8008d20:	f7fe fc45 	bl	80075ae <USBD_LL_SetupStage>
}
 8008d24:	bf00      	nop
 8008d26:	3708      	adds	r7, #8
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	bd80      	pop	{r7, pc}

08008d2c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b082      	sub	sp, #8
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
 8008d34:	460b      	mov	r3, r1
 8008d36:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008d3e:	78fa      	ldrb	r2, [r7, #3]
 8008d40:	6879      	ldr	r1, [r7, #4]
 8008d42:	4613      	mov	r3, r2
 8008d44:	00db      	lsls	r3, r3, #3
 8008d46:	4413      	add	r3, r2
 8008d48:	009b      	lsls	r3, r3, #2
 8008d4a:	440b      	add	r3, r1
 8008d4c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008d50:	681a      	ldr	r2, [r3, #0]
 8008d52:	78fb      	ldrb	r3, [r7, #3]
 8008d54:	4619      	mov	r1, r3
 8008d56:	f7fe fc7f 	bl	8007658 <USBD_LL_DataOutStage>
}
 8008d5a:	bf00      	nop
 8008d5c:	3708      	adds	r7, #8
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}

08008d62 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d62:	b580      	push	{r7, lr}
 8008d64:	b082      	sub	sp, #8
 8008d66:	af00      	add	r7, sp, #0
 8008d68:	6078      	str	r0, [r7, #4]
 8008d6a:	460b      	mov	r3, r1
 8008d6c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008d74:	78fa      	ldrb	r2, [r7, #3]
 8008d76:	6879      	ldr	r1, [r7, #4]
 8008d78:	4613      	mov	r3, r2
 8008d7a:	00db      	lsls	r3, r3, #3
 8008d7c:	4413      	add	r3, r2
 8008d7e:	009b      	lsls	r3, r3, #2
 8008d80:	440b      	add	r3, r1
 8008d82:	334c      	adds	r3, #76	; 0x4c
 8008d84:	681a      	ldr	r2, [r3, #0]
 8008d86:	78fb      	ldrb	r3, [r7, #3]
 8008d88:	4619      	mov	r1, r3
 8008d8a:	f7fe fd18 	bl	80077be <USBD_LL_DataInStage>
}
 8008d8e:	bf00      	nop
 8008d90:	3708      	adds	r7, #8
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bd80      	pop	{r7, pc}

08008d96 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d96:	b580      	push	{r7, lr}
 8008d98:	b082      	sub	sp, #8
 8008d9a:	af00      	add	r7, sp, #0
 8008d9c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008da4:	4618      	mov	r0, r3
 8008da6:	f7fe fe4c 	bl	8007a42 <USBD_LL_SOF>
}
 8008daa:	bf00      	nop
 8008dac:	3708      	adds	r7, #8
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}

08008db2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008db2:	b580      	push	{r7, lr}
 8008db4:	b084      	sub	sp, #16
 8008db6:	af00      	add	r7, sp, #0
 8008db8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008dba:	2301      	movs	r3, #1
 8008dbc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	68db      	ldr	r3, [r3, #12]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d102      	bne.n	8008dcc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	73fb      	strb	r3, [r7, #15]
 8008dca:	e008      	b.n	8008dde <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	68db      	ldr	r3, [r3, #12]
 8008dd0:	2b02      	cmp	r3, #2
 8008dd2:	d102      	bne.n	8008dda <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	73fb      	strb	r3, [r7, #15]
 8008dd8:	e001      	b.n	8008dde <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008dda:	f7f7 ff27 	bl	8000c2c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008de4:	7bfa      	ldrb	r2, [r7, #15]
 8008de6:	4611      	mov	r1, r2
 8008de8:	4618      	mov	r0, r3
 8008dea:	f7fe fdec 	bl	80079c6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008df4:	4618      	mov	r0, r3
 8008df6:	f7fe fd94 	bl	8007922 <USBD_LL_Reset>
}
 8008dfa:	bf00      	nop
 8008dfc:	3710      	adds	r7, #16
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd80      	pop	{r7, pc}
	...

08008e04 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b082      	sub	sp, #8
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008e12:	4618      	mov	r0, r3
 8008e14:	f7fe fde7 	bl	80079e6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	687a      	ldr	r2, [r7, #4]
 8008e24:	6812      	ldr	r2, [r2, #0]
 8008e26:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008e2a:	f043 0301 	orr.w	r3, r3, #1
 8008e2e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6a1b      	ldr	r3, [r3, #32]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d005      	beq.n	8008e44 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008e38:	4b04      	ldr	r3, [pc, #16]	; (8008e4c <HAL_PCD_SuspendCallback+0x48>)
 8008e3a:	691b      	ldr	r3, [r3, #16]
 8008e3c:	4a03      	ldr	r2, [pc, #12]	; (8008e4c <HAL_PCD_SuspendCallback+0x48>)
 8008e3e:	f043 0306 	orr.w	r3, r3, #6
 8008e42:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008e44:	bf00      	nop
 8008e46:	3708      	adds	r7, #8
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd80      	pop	{r7, pc}
 8008e4c:	e000ed00 	.word	0xe000ed00

08008e50 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b082      	sub	sp, #8
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f7fe fdd7 	bl	8007a12 <USBD_LL_Resume>
}
 8008e64:	bf00      	nop
 8008e66:	3708      	adds	r7, #8
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bd80      	pop	{r7, pc}

08008e6c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b082      	sub	sp, #8
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
 8008e74:	460b      	mov	r3, r1
 8008e76:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008e7e:	78fa      	ldrb	r2, [r7, #3]
 8008e80:	4611      	mov	r1, r2
 8008e82:	4618      	mov	r0, r3
 8008e84:	f7fe fe2f 	bl	8007ae6 <USBD_LL_IsoOUTIncomplete>
}
 8008e88:	bf00      	nop
 8008e8a:	3708      	adds	r7, #8
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd80      	pop	{r7, pc}

08008e90 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b082      	sub	sp, #8
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
 8008e98:	460b      	mov	r3, r1
 8008e9a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008ea2:	78fa      	ldrb	r2, [r7, #3]
 8008ea4:	4611      	mov	r1, r2
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f7fe fdeb 	bl	8007a82 <USBD_LL_IsoINIncomplete>
}
 8008eac:	bf00      	nop
 8008eae:	3708      	adds	r7, #8
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}

08008eb4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b082      	sub	sp, #8
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f7fe fe41 	bl	8007b4a <USBD_LL_DevConnected>
}
 8008ec8:	bf00      	nop
 8008eca:	3708      	adds	r7, #8
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}

08008ed0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b082      	sub	sp, #8
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f7fe fe3e 	bl	8007b60 <USBD_LL_DevDisconnected>
}
 8008ee4:	bf00      	nop
 8008ee6:	3708      	adds	r7, #8
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bd80      	pop	{r7, pc}

08008eec <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b082      	sub	sp, #8
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	781b      	ldrb	r3, [r3, #0]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d13c      	bne.n	8008f76 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008efc:	4a20      	ldr	r2, [pc, #128]	; (8008f80 <USBD_LL_Init+0x94>)
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	4a1e      	ldr	r2, [pc, #120]	; (8008f80 <USBD_LL_Init+0x94>)
 8008f08:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008f0c:	4b1c      	ldr	r3, [pc, #112]	; (8008f80 <USBD_LL_Init+0x94>)
 8008f0e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008f12:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008f14:	4b1a      	ldr	r3, [pc, #104]	; (8008f80 <USBD_LL_Init+0x94>)
 8008f16:	2204      	movs	r2, #4
 8008f18:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008f1a:	4b19      	ldr	r3, [pc, #100]	; (8008f80 <USBD_LL_Init+0x94>)
 8008f1c:	2202      	movs	r2, #2
 8008f1e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008f20:	4b17      	ldr	r3, [pc, #92]	; (8008f80 <USBD_LL_Init+0x94>)
 8008f22:	2200      	movs	r2, #0
 8008f24:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008f26:	4b16      	ldr	r3, [pc, #88]	; (8008f80 <USBD_LL_Init+0x94>)
 8008f28:	2202      	movs	r2, #2
 8008f2a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008f2c:	4b14      	ldr	r3, [pc, #80]	; (8008f80 <USBD_LL_Init+0x94>)
 8008f2e:	2200      	movs	r2, #0
 8008f30:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008f32:	4b13      	ldr	r3, [pc, #76]	; (8008f80 <USBD_LL_Init+0x94>)
 8008f34:	2200      	movs	r2, #0
 8008f36:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008f38:	4b11      	ldr	r3, [pc, #68]	; (8008f80 <USBD_LL_Init+0x94>)
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008f3e:	4b10      	ldr	r3, [pc, #64]	; (8008f80 <USBD_LL_Init+0x94>)
 8008f40:	2200      	movs	r2, #0
 8008f42:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008f44:	4b0e      	ldr	r3, [pc, #56]	; (8008f80 <USBD_LL_Init+0x94>)
 8008f46:	2200      	movs	r2, #0
 8008f48:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008f4a:	480d      	ldr	r0, [pc, #52]	; (8008f80 <USBD_LL_Init+0x94>)
 8008f4c:	f7fa f87d 	bl	800304a <HAL_PCD_Init>
 8008f50:	4603      	mov	r3, r0
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d001      	beq.n	8008f5a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008f56:	f7f7 fe69 	bl	8000c2c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008f5a:	2180      	movs	r1, #128	; 0x80
 8008f5c:	4808      	ldr	r0, [pc, #32]	; (8008f80 <USBD_LL_Init+0x94>)
 8008f5e:	f7fb fabc 	bl	80044da <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008f62:	2240      	movs	r2, #64	; 0x40
 8008f64:	2100      	movs	r1, #0
 8008f66:	4806      	ldr	r0, [pc, #24]	; (8008f80 <USBD_LL_Init+0x94>)
 8008f68:	f7fb fa70 	bl	800444c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008f6c:	2280      	movs	r2, #128	; 0x80
 8008f6e:	2101      	movs	r1, #1
 8008f70:	4803      	ldr	r0, [pc, #12]	; (8008f80 <USBD_LL_Init+0x94>)
 8008f72:	f7fb fa6b 	bl	800444c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008f76:	2300      	movs	r3, #0
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	3708      	adds	r7, #8
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}
 8008f80:	200007e8 	.word	0x200007e8

08008f84 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b084      	sub	sp, #16
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f90:	2300      	movs	r3, #0
 8008f92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	f7fa f972 	bl	8003284 <HAL_PCD_Start>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008fa4:	7bfb      	ldrb	r3, [r7, #15]
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	f000 f930 	bl	800920c <USBD_Get_USB_Status>
 8008fac:	4603      	mov	r3, r0
 8008fae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fb0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	3710      	adds	r7, #16
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}

08008fba <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008fba:	b580      	push	{r7, lr}
 8008fbc:	b084      	sub	sp, #16
 8008fbe:	af00      	add	r7, sp, #0
 8008fc0:	6078      	str	r0, [r7, #4]
 8008fc2:	4608      	mov	r0, r1
 8008fc4:	4611      	mov	r1, r2
 8008fc6:	461a      	mov	r2, r3
 8008fc8:	4603      	mov	r3, r0
 8008fca:	70fb      	strb	r3, [r7, #3]
 8008fcc:	460b      	mov	r3, r1
 8008fce:	70bb      	strb	r3, [r7, #2]
 8008fd0:	4613      	mov	r3, r2
 8008fd2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008fe2:	78bb      	ldrb	r3, [r7, #2]
 8008fe4:	883a      	ldrh	r2, [r7, #0]
 8008fe6:	78f9      	ldrb	r1, [r7, #3]
 8008fe8:	f7fa fe43 	bl	8003c72 <HAL_PCD_EP_Open>
 8008fec:	4603      	mov	r3, r0
 8008fee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ff0:	7bfb      	ldrb	r3, [r7, #15]
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	f000 f90a 	bl	800920c <USBD_Get_USB_Status>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ffc:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	3710      	adds	r7, #16
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}

08009006 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009006:	b580      	push	{r7, lr}
 8009008:	b084      	sub	sp, #16
 800900a:	af00      	add	r7, sp, #0
 800900c:	6078      	str	r0, [r7, #4]
 800900e:	460b      	mov	r3, r1
 8009010:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009012:	2300      	movs	r3, #0
 8009014:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009016:	2300      	movs	r3, #0
 8009018:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009020:	78fa      	ldrb	r2, [r7, #3]
 8009022:	4611      	mov	r1, r2
 8009024:	4618      	mov	r0, r3
 8009026:	f7fa fe8c 	bl	8003d42 <HAL_PCD_EP_Close>
 800902a:	4603      	mov	r3, r0
 800902c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800902e:	7bfb      	ldrb	r3, [r7, #15]
 8009030:	4618      	mov	r0, r3
 8009032:	f000 f8eb 	bl	800920c <USBD_Get_USB_Status>
 8009036:	4603      	mov	r3, r0
 8009038:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800903a:	7bbb      	ldrb	r3, [r7, #14]
}
 800903c:	4618      	mov	r0, r3
 800903e:	3710      	adds	r7, #16
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}

08009044 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b084      	sub	sp, #16
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
 800904c:	460b      	mov	r3, r1
 800904e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009050:	2300      	movs	r3, #0
 8009052:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009054:	2300      	movs	r3, #0
 8009056:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800905e:	78fa      	ldrb	r2, [r7, #3]
 8009060:	4611      	mov	r1, r2
 8009062:	4618      	mov	r0, r3
 8009064:	f7fa ff4c 	bl	8003f00 <HAL_PCD_EP_SetStall>
 8009068:	4603      	mov	r3, r0
 800906a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800906c:	7bfb      	ldrb	r3, [r7, #15]
 800906e:	4618      	mov	r0, r3
 8009070:	f000 f8cc 	bl	800920c <USBD_Get_USB_Status>
 8009074:	4603      	mov	r3, r0
 8009076:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009078:	7bbb      	ldrb	r3, [r7, #14]
}
 800907a:	4618      	mov	r0, r3
 800907c:	3710      	adds	r7, #16
 800907e:	46bd      	mov	sp, r7
 8009080:	bd80      	pop	{r7, pc}

08009082 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009082:	b580      	push	{r7, lr}
 8009084:	b084      	sub	sp, #16
 8009086:	af00      	add	r7, sp, #0
 8009088:	6078      	str	r0, [r7, #4]
 800908a:	460b      	mov	r3, r1
 800908c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800908e:	2300      	movs	r3, #0
 8009090:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009092:	2300      	movs	r3, #0
 8009094:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800909c:	78fa      	ldrb	r2, [r7, #3]
 800909e:	4611      	mov	r1, r2
 80090a0:	4618      	mov	r0, r3
 80090a2:	f7fa ff91 	bl	8003fc8 <HAL_PCD_EP_ClrStall>
 80090a6:	4603      	mov	r3, r0
 80090a8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090aa:	7bfb      	ldrb	r3, [r7, #15]
 80090ac:	4618      	mov	r0, r3
 80090ae:	f000 f8ad 	bl	800920c <USBD_Get_USB_Status>
 80090b2:	4603      	mov	r3, r0
 80090b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80090b8:	4618      	mov	r0, r3
 80090ba:	3710      	adds	r7, #16
 80090bc:	46bd      	mov	sp, r7
 80090be:	bd80      	pop	{r7, pc}

080090c0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80090c0:	b480      	push	{r7}
 80090c2:	b085      	sub	sp, #20
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
 80090c8:	460b      	mov	r3, r1
 80090ca:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80090d2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80090d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	da0b      	bge.n	80090f4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80090dc:	78fb      	ldrb	r3, [r7, #3]
 80090de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80090e2:	68f9      	ldr	r1, [r7, #12]
 80090e4:	4613      	mov	r3, r2
 80090e6:	00db      	lsls	r3, r3, #3
 80090e8:	4413      	add	r3, r2
 80090ea:	009b      	lsls	r3, r3, #2
 80090ec:	440b      	add	r3, r1
 80090ee:	333e      	adds	r3, #62	; 0x3e
 80090f0:	781b      	ldrb	r3, [r3, #0]
 80090f2:	e00b      	b.n	800910c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80090f4:	78fb      	ldrb	r3, [r7, #3]
 80090f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80090fa:	68f9      	ldr	r1, [r7, #12]
 80090fc:	4613      	mov	r3, r2
 80090fe:	00db      	lsls	r3, r3, #3
 8009100:	4413      	add	r3, r2
 8009102:	009b      	lsls	r3, r3, #2
 8009104:	440b      	add	r3, r1
 8009106:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800910a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800910c:	4618      	mov	r0, r3
 800910e:	3714      	adds	r7, #20
 8009110:	46bd      	mov	sp, r7
 8009112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009116:	4770      	bx	lr

08009118 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b084      	sub	sp, #16
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
 8009120:	460b      	mov	r3, r1
 8009122:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009124:	2300      	movs	r3, #0
 8009126:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009128:	2300      	movs	r3, #0
 800912a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009132:	78fa      	ldrb	r2, [r7, #3]
 8009134:	4611      	mov	r1, r2
 8009136:	4618      	mov	r0, r3
 8009138:	f7fa fd76 	bl	8003c28 <HAL_PCD_SetAddress>
 800913c:	4603      	mov	r3, r0
 800913e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009140:	7bfb      	ldrb	r3, [r7, #15]
 8009142:	4618      	mov	r0, r3
 8009144:	f000 f862 	bl	800920c <USBD_Get_USB_Status>
 8009148:	4603      	mov	r3, r0
 800914a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800914c:	7bbb      	ldrb	r3, [r7, #14]
}
 800914e:	4618      	mov	r0, r3
 8009150:	3710      	adds	r7, #16
 8009152:	46bd      	mov	sp, r7
 8009154:	bd80      	pop	{r7, pc}

08009156 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009156:	b580      	push	{r7, lr}
 8009158:	b086      	sub	sp, #24
 800915a:	af00      	add	r7, sp, #0
 800915c:	60f8      	str	r0, [r7, #12]
 800915e:	607a      	str	r2, [r7, #4]
 8009160:	603b      	str	r3, [r7, #0]
 8009162:	460b      	mov	r3, r1
 8009164:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009166:	2300      	movs	r3, #0
 8009168:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800916a:	2300      	movs	r3, #0
 800916c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009174:	7af9      	ldrb	r1, [r7, #11]
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	687a      	ldr	r2, [r7, #4]
 800917a:	f7fa fe77 	bl	8003e6c <HAL_PCD_EP_Transmit>
 800917e:	4603      	mov	r3, r0
 8009180:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009182:	7dfb      	ldrb	r3, [r7, #23]
 8009184:	4618      	mov	r0, r3
 8009186:	f000 f841 	bl	800920c <USBD_Get_USB_Status>
 800918a:	4603      	mov	r3, r0
 800918c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800918e:	7dbb      	ldrb	r3, [r7, #22]
}
 8009190:	4618      	mov	r0, r3
 8009192:	3718      	adds	r7, #24
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}

08009198 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b086      	sub	sp, #24
 800919c:	af00      	add	r7, sp, #0
 800919e:	60f8      	str	r0, [r7, #12]
 80091a0:	607a      	str	r2, [r7, #4]
 80091a2:	603b      	str	r3, [r7, #0]
 80091a4:	460b      	mov	r3, r1
 80091a6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091a8:	2300      	movs	r3, #0
 80091aa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091ac:	2300      	movs	r3, #0
 80091ae:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80091b6:	7af9      	ldrb	r1, [r7, #11]
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	687a      	ldr	r2, [r7, #4]
 80091bc:	f7fa fe0b 	bl	8003dd6 <HAL_PCD_EP_Receive>
 80091c0:	4603      	mov	r3, r0
 80091c2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091c4:	7dfb      	ldrb	r3, [r7, #23]
 80091c6:	4618      	mov	r0, r3
 80091c8:	f000 f820 	bl	800920c <USBD_Get_USB_Status>
 80091cc:	4603      	mov	r3, r0
 80091ce:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80091d0:	7dbb      	ldrb	r3, [r7, #22]
}
 80091d2:	4618      	mov	r0, r3
 80091d4:	3718      	adds	r7, #24
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bd80      	pop	{r7, pc}
	...

080091dc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80091dc:	b480      	push	{r7}
 80091de:	b083      	sub	sp, #12
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80091e4:	4b03      	ldr	r3, [pc, #12]	; (80091f4 <USBD_static_malloc+0x18>)
}
 80091e6:	4618      	mov	r0, r3
 80091e8:	370c      	adds	r7, #12
 80091ea:	46bd      	mov	sp, r7
 80091ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f0:	4770      	bx	lr
 80091f2:	bf00      	nop
 80091f4:	20000cf4 	.word	0x20000cf4

080091f8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80091f8:	b480      	push	{r7}
 80091fa:	b083      	sub	sp, #12
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]

}
 8009200:	bf00      	nop
 8009202:	370c      	adds	r7, #12
 8009204:	46bd      	mov	sp, r7
 8009206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920a:	4770      	bx	lr

0800920c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800920c:	b480      	push	{r7}
 800920e:	b085      	sub	sp, #20
 8009210:	af00      	add	r7, sp, #0
 8009212:	4603      	mov	r3, r0
 8009214:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009216:	2300      	movs	r3, #0
 8009218:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800921a:	79fb      	ldrb	r3, [r7, #7]
 800921c:	2b03      	cmp	r3, #3
 800921e:	d817      	bhi.n	8009250 <USBD_Get_USB_Status+0x44>
 8009220:	a201      	add	r2, pc, #4	; (adr r2, 8009228 <USBD_Get_USB_Status+0x1c>)
 8009222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009226:	bf00      	nop
 8009228:	08009239 	.word	0x08009239
 800922c:	0800923f 	.word	0x0800923f
 8009230:	08009245 	.word	0x08009245
 8009234:	0800924b 	.word	0x0800924b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009238:	2300      	movs	r3, #0
 800923a:	73fb      	strb	r3, [r7, #15]
    break;
 800923c:	e00b      	b.n	8009256 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800923e:	2303      	movs	r3, #3
 8009240:	73fb      	strb	r3, [r7, #15]
    break;
 8009242:	e008      	b.n	8009256 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009244:	2301      	movs	r3, #1
 8009246:	73fb      	strb	r3, [r7, #15]
    break;
 8009248:	e005      	b.n	8009256 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800924a:	2303      	movs	r3, #3
 800924c:	73fb      	strb	r3, [r7, #15]
    break;
 800924e:	e002      	b.n	8009256 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009250:	2303      	movs	r3, #3
 8009252:	73fb      	strb	r3, [r7, #15]
    break;
 8009254:	bf00      	nop
  }
  return usb_status;
 8009256:	7bfb      	ldrb	r3, [r7, #15]
}
 8009258:	4618      	mov	r0, r3
 800925a:	3714      	adds	r7, #20
 800925c:	46bd      	mov	sp, r7
 800925e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009262:	4770      	bx	lr

08009264 <__libc_init_array>:
 8009264:	b570      	push	{r4, r5, r6, lr}
 8009266:	4d0d      	ldr	r5, [pc, #52]	; (800929c <__libc_init_array+0x38>)
 8009268:	4c0d      	ldr	r4, [pc, #52]	; (80092a0 <__libc_init_array+0x3c>)
 800926a:	1b64      	subs	r4, r4, r5
 800926c:	10a4      	asrs	r4, r4, #2
 800926e:	2600      	movs	r6, #0
 8009270:	42a6      	cmp	r6, r4
 8009272:	d109      	bne.n	8009288 <__libc_init_array+0x24>
 8009274:	4d0b      	ldr	r5, [pc, #44]	; (80092a4 <__libc_init_array+0x40>)
 8009276:	4c0c      	ldr	r4, [pc, #48]	; (80092a8 <__libc_init_array+0x44>)
 8009278:	f000 f820 	bl	80092bc <_init>
 800927c:	1b64      	subs	r4, r4, r5
 800927e:	10a4      	asrs	r4, r4, #2
 8009280:	2600      	movs	r6, #0
 8009282:	42a6      	cmp	r6, r4
 8009284:	d105      	bne.n	8009292 <__libc_init_array+0x2e>
 8009286:	bd70      	pop	{r4, r5, r6, pc}
 8009288:	f855 3b04 	ldr.w	r3, [r5], #4
 800928c:	4798      	blx	r3
 800928e:	3601      	adds	r6, #1
 8009290:	e7ee      	b.n	8009270 <__libc_init_array+0xc>
 8009292:	f855 3b04 	ldr.w	r3, [r5], #4
 8009296:	4798      	blx	r3
 8009298:	3601      	adds	r6, #1
 800929a:	e7f2      	b.n	8009282 <__libc_init_array+0x1e>
 800929c:	0800937c 	.word	0x0800937c
 80092a0:	0800937c 	.word	0x0800937c
 80092a4:	0800937c 	.word	0x0800937c
 80092a8:	08009380 	.word	0x08009380

080092ac <memset>:
 80092ac:	4402      	add	r2, r0
 80092ae:	4603      	mov	r3, r0
 80092b0:	4293      	cmp	r3, r2
 80092b2:	d100      	bne.n	80092b6 <memset+0xa>
 80092b4:	4770      	bx	lr
 80092b6:	f803 1b01 	strb.w	r1, [r3], #1
 80092ba:	e7f9      	b.n	80092b0 <memset+0x4>

080092bc <_init>:
 80092bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092be:	bf00      	nop
 80092c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092c2:	bc08      	pop	{r3}
 80092c4:	469e      	mov	lr, r3
 80092c6:	4770      	bx	lr

080092c8 <_fini>:
 80092c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092ca:	bf00      	nop
 80092cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092ce:	bc08      	pop	{r3}
 80092d0:	469e      	mov	lr, r3
 80092d2:	4770      	bx	lr
